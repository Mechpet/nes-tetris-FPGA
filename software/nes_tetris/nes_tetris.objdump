
nes_tetris.elf:     file format elf32-littlenios2
nes_tetris.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001aeb4 memsz 0x0001aeb4 flags r-x
    LOAD off    0x0001bed4 vaddr 0x0801aed4 paddr 0x0801cbb8 align 2**12
         filesz 0x00001ce4 memsz 0x00001ce4 flags rw-
    LOAD off    0x0001e89c vaddr 0x0801e89c paddr 0x0801e89c align 2**12
         filesz 0x00000000 memsz 0x00000344 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a5f8  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006ac  0801a828  0801a828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce4  0801aed4  0801cbb8  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000344  0801e89c  0801e89c  0001e89c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001dbb8  2**0
                  CONTENTS
  7 .sdram        00000000  0801ebe0  0801ebe0  0001dbb8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000012e0  00000000  00000000  0001dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002bede  00000000  00000000  0001eec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b6f1  00000000  00000000  0004ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ecf9  00000000  00000000  0005648f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000372c  00000000  00000000  00065188  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000594c  00000000  00000000  000688b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b1de  00000000  00000000  0006e200  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000893e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001de8  00000000  00000000  00089420  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008fb22  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008fb25  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008fb31  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008fb32  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008fb33  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008fb37  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008fb3b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008fb3f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008fb4a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008fb55  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  0008fb60  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0008fb6e  2**0
                  CONTENTS, READONLY
 30 .jdi          00006803  00000000  00000000  0008fb88  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008fc78  00000000  00000000  0009638b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801a828 l    d  .rodata	00000000 .rodata
0801aed4 l    d  .rwdata	00000000 .rwdata
0801e89c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801ebe0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nes_tetris_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0801e8ac l     O .bss	00000004 usb_delay.2611
0801e8b0 l     O .bss	00000001 tmp_addr.2612
00000000 l    df *ABS*	00000000 vga.c
0801cb64 l     O .rwdata	00000004 vga_ctrl
0801af04 l     O .rwdata	00000170 colors
0801cb68 l     O .rwdata	00000001 addr
0801e8b4 l     O .bss	00000004 DAS.4662
0801e8b8 l     O .bss	00000008 prev_direction.4660
0801e8c0 l     O .bss	00000008 prev_rotation.4661
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0801ab98 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0801b074 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801acf2 l     O .rodata	00000010 zeroes.4404
0800dc84 l     F .text	000000bc __sbprintf
0801ad02 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800de94 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800f9ec l     F .text	00000008 __fp_unlock
0800fa00 l     F .text	0000019c __sinit.part.1
0800fb9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0801b4b8 l     O .rwdata	00000020 lc_ctype_charset
0801b498 l     O .rwdata	00000020 lc_message_charset
0801b4d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801ad30 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08012ffc l     F .text	000000fc __sprint_r.part.0
0801ae54 l     O .rodata	00000010 zeroes.4349
08014638 l     F .text	000000bc __sbprintf
0801ae64 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015d0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015e20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015e4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08015f40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08016028 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08016114 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
080162f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801cba0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08016738 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08016874 l     F .text	00000034 alt_dev_reg
0801bac0 l     O .rwdata	00000038 i2c_0
0801baf8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
08016950 l     F .text	00000110 optional_irq_callback
08016ab0 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801878c l     F .text	0000020c altera_avalon_jtag_uart_irq
08018998 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080191cc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08019564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08019a54 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08019bb4 l     F .text	0000003c alt_get_errno
08019bf0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801e8fc g     O .bss	00000004 alt_instruction_exception_handler
080126b4 g     F .text	00000074 _mprec_log10
080127a0 g     F .text	0000008c __any_on
08014bec g     F .text	00000054 _isatty_r
0801ad3c g     O .rodata	00000028 __mprec_tinytens
0801622c g     F .text	0000007c alt_main
0800404c g     F .text	000000bc test_score_values
0801cb58 g     O .rwdata	00000008 ctrl_xfers
0800b7a4 g     F .text	000000c0 _puts_r
0801eae0 g     O .bss	00000100 alt_irq
08007c48 g     F .text	00000014 fabs
08014c40 g     F .text	00000060 _lseek_r
08005fbc g     F .text	000000a4 game_over_sequence
08001eb0 g     F .text	00000644 USB_Task
0801cbb8 g       *ABS*	00000000 __flash_rwdata_start
0800a100 g     F .text	00000088 .hidden __eqdf2
0801ebe0 g       *ABS*	00000000 __alt_heap_start
0800b768 g     F .text	0000003c printf
08014e58 g     F .text	0000009c _wcrtomb_r
08000f98 g     F .text	00000088 kbdPoll
08012ebc g     F .text	0000005c __sseek
0800fd4c g     F .text	00000010 __sinit
08014d00 g     F .text	00000140 __swbuf_r
08010820 g     F .text	0000007c _setlocale_r
0800fba4 g     F .text	00000078 __sfmoreglue
080171a8 g     F .text	000000a8 alt_avalon_i2c_rx_read
080162cc g     F .text	00000024 __malloc_unlock
080026fc g     F .text	000000fc GetDriverandReport
080183c0 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
08016f2c g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
080114f0 g     F .text	0000015c memmove
0800fd34 g     F .text	00000018 _cleanup
08017c10 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
08011774 g     F .text	000000a8 _Balloc
08008d24 g     F .text	00000070 .hidden __fixsfsi
080010ec g     F .text	0000008c MAXreg_wr
0801aed4 g     O .rwdata	00000030 ClientDriverTable
0800a188 g     F .text	000000dc .hidden __gtdf2
0801a0a0 g     F .text	00000024 altera_nios2_gen2_irq_init
0800b728 g     F .text	00000010 __errno
080024f4 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
0800198c g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08003ef4 g     F .text	0000009c set_palette
0801e900 g     O .bss	00000010 hid_ep
08014b90 g     F .text	0000005c _fstat_r
0801e8e0 g     O .bss	00000004 errno
08012e38 g     F .text	00000008 __seofread
08005538 g     F .text	00000a84 assemble_piece
0801e8e8 g     O .bss	00000004 alt_argv
08024b58 g       *ABS*	00000000 _gp
08016708 g     F .text	00000030 usleep
08018404 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
080012e8 g     F .text	00000080 MAXreg_rd
08008840 g     F .text	000004e4 .hidden __subsf3
080046cc g     F .text	00000144 fill_board
080170bc g     F .text	00000044 alt_avalon_i2c_is_busy
0801ea98 g     O .bss	00000024 present
0801b940 g     O .rwdata	00000180 alt_fd_list
08000ed0 g     F .text	00000040 HID_init
08016e60 g     F .text	000000cc alt_avalon_i2c_master_config_set
08019704 g     F .text	00000090 alt_find_dev
080113a8 g     F .text	00000148 memcpy
0800f9f4 g     F .text	0000000c _cleanup_r
0800b540 g     F .text	000000dc .hidden __floatsidf
08019b38 g     F .text	0000007c alt_io_redirect
0800a264 g     F .text	000000f4 .hidden __ltdf2
08003a40 g     F .text	000000e4 convert_to_dec
0801a828 g       *ABS*	00000000 __DTOR_END__
08017a50 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0800b864 g     F .text	00000014 puts
0801a290 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007c78 g     F .text	00000074 __fpclassifyd
08012610 g     F .text	000000a4 __ratio
0801461c g     F .text	0000001c __vfiprintf_internal
080045f4 g     F .text	000000d8 compute_score
08018b90 g     F .text	0000021c altera_avalon_jtag_uart_read
0800b738 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08008270 g     F .text	00000064 .hidden __udivsi3
08015f7c g     F .text	000000ac isatty
0801ad8c g     O .rodata	000000c8 __mprec_tens
0801089c g     F .text	0000000c __locale_charset
08008104 g     F .text	00000074 .hidden __fixunsdfsi
08016ccc g     F .text	00000098 alt_avalon_i2c_enable
0801e8dc g     O .bss	00000004 __malloc_top_pad
080182f4 g     F .text	00000068 alt_avalon_i2c_int_disable
0801cb60 g     O .rwdata	00000001 usb_task_state
0801cb78 g     O .rwdata	00000004 __mb_cur_max
080108cc g     F .text	0000000c _localeconv_r
08011ba8 g     F .text	0000003c __i2b
080101d0 g     F .text	000004c8 __sfvwrite_r
08012d90 g     F .text	00000054 _sbrk_r
08014ca0 g     F .text	00000060 _read_r
08001648 g     F .text	00000094 MAX3421E_init
08002ad4 g     F .text	00000e6c setKeycode
0800026c g     F .text	000000b4 SGTL5000_Reg_Rd
0801cb98 g     O .rwdata	00000004 alt_max_fd
08014884 g     F .text	000000f0 _fclose_r
0800f9bc g     F .text	00000030 fflush
0801e8d8 g     O .bss	00000004 __malloc_max_sbrked_mem
08017e1c g     F .text	00000210 alt_avalon_i2c_master_receive
08008e84 g     F .text	000008ac .hidden __adddf3
080123b8 g     F .text	0000010c __b2d
08015748 g     F .text	000005c4 .hidden __umoddi3
08016150 g     F .text	000000dc lseek
0801cb6c g     O .rwdata	00000004 __fdlib_version
0801835c g     F .text	00000064 alt_avalon_i2c_int_enable
0801cb70 g     O .rwdata	00000004 _global_impure_ptr
0801282c g     F .text	00000564 _realloc_r
0801ebe0 g       *ABS*	00000000 __bss_end
08019964 g     F .text	000000f0 alt_iic_isr_register
08016600 g     F .text	00000108 alt_tick
0801514c g     F .text	000005fc .hidden __udivdi3
0801821c g     F .text	00000058 alt_avalon_i2c_int_status_get
08014aec g     F .text	00000024 _fputwc_r
0801ad64 g     O .rodata	00000028 __mprec_bigtens
0801198c g     F .text	00000104 __s2b
080042ec g     F .text	00000040 fetch_next_piece
0800b61c g     F .text	000000a8 .hidden __floatunsidf
080120f8 g     F .text	00000060 __mcmp
0800fd6c g     F .text	00000018 __fp_lock_all
08019918 g     F .text	0000004c alt_ic_irq_enabled
08016564 g     F .text	0000009c alt_alarm_stop
08016b4c g     F .text	00000054 alt_avalon_i2c_register_callback
0801e8f8 g     O .bss	00000004 alt_irq_active
08016ba0 g     F .text	000000ec alt_avalon_i2c_init
080025bc g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
0801b918 g     O .rwdata	00000028 alt_dev_null
08000f10 g     F .text	00000088 mousePoll
08007d00 g     F .text	000001ec rint
0800149c g     F .text	00000024 Vbus_power
08019544 g     F .text	00000020 alt_dcache_flush_all
08011a90 g     F .text	00000068 __hi0bits
0800b4c0 g     F .text	00000080 .hidden __fixdfsi
0801cbb8 g       *ABS*	00000000 __ram_rwdata_end
0801cb90 g     O .rwdata	00000008 alt_dev_list
08016774 g     F .text	00000100 write
0801a3f4 g     F .text	000000a0 _putc_r
080174dc g     F .text	0000004c alt_avalon_i2c_check_arblost
08008354 g     F .text	000000bc .hidden __gtsf2
080182b8 g     F .text	0000003c alt_avalon_i2c_int_clear
0801aed4 g       *ABS*	00000000 __ram_rodata_end
0801e8b1 g     O .bss	00000001 usb_error
08015e88 g     F .text	000000b8 fstat
0800a264 g     F .text	000000f4 .hidden __ledf2
0801cbac g     O .rwdata	00000008 alt_avalon_i2c_list
08011e70 g     F .text	00000140 __pow5mult
08013110 g     F .text	0000150c ___vfiprintf_internal_r
0801e8d0 g     O .bss	00000004 __nlocale_changed
080082d4 g     F .text	00000058 .hidden __umodsi3
0801ebe0 g       *ABS*	00000000 end
0800456c g     F .text	00000088 increase_lines_and_score
080186cc g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08016c8c g     F .text	00000040 alt_avalon_i2c_open
08001ae8 g     F .text	0000017c XferDispatchPkt
0801a828 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08017664 g     F .text	000000e8 alt_avalon_i2c_master_tx
08019244 g     F .text	0000007c alt_avalon_timer_sc_init
0800b6c4 g     F .text	00000064 .hidden __clzsi2
08018dac g     F .text	00000224 altera_avalon_jtag_uart_write
0800fd5c g     F .text	00000004 __sfp_lock_acquire
080112c4 g     F .text	000000e4 memchr
0800b98c g     F .text	000022dc ___vfprintf_internal_r
0800180c g     F .text	00000034 MaxGpxHandler
08003f90 g     F .text	000000bc test_inc_level_line_values
0800fec0 g     F .text	00000310 _free_r
08019e38 g     F .text	0000022c alt_printf
080108a8 g     F .text	00000010 __locale_mb_cur_max
0801a674 g     F .text	00000180 __call_exitprocs
0801e8cc g     O .bss	00000004 __mlocale_changed
08016a60 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0801cb7c g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801e8f0 g     O .bss	00000004 _alt_tick_rate
08001368 g     F .text	00000094 MAXbytes_rd
0801802c g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0800b890 g     F .text	00000064 rand
08018450 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
08011fb0 g     F .text	00000148 __lshift
08018fd0 g     F .text	000001fc alt_avalon_spi_command
0800418c g     F .text	00000050 test_next_piece
0801e8f4 g     O .bss	00000004 _alt_nticks
0801632c g     F .text	00000104 read
080168e0 g     F .text	00000070 alt_sys_init
0801ea50 g     O .bss	00000048 devtable
0801a55c g     F .text	00000118 __register_exitproc
08000ac8 g     F .text	00000408 HIDKProbe
0801e910 g     O .bss	00000018 msd_ep
08017888 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
08011be4 g     F .text	0000028c __multiply
0800691c g     F .text	000010a4 __ieee754_pow
08018a38 g     F .text	00000068 altera_avalon_jtag_uart_close
08001e18 g     F .text	00000098 USB_init
08006458 g     F .text	000004c4 pow
0800832c g     F .text	00000028 .hidden __mulsi3
0801e950 g     O .bss	00000100 bigbuf
0801aed4 g       *ABS*	00000000 __ram_rwdata_start
0801a828 g       *ABS*	00000000 __ram_rodata_start
0801e928 g     O .bss	00000028 __malloc_current_mallinfo
0801e8a8 g     O .bss	00000001 last_usb_task_state
080124c4 g     F .text	0000014c __d2b
0801e8a0 g     O .bss	00000008 dev0ep
0800283c g     F .text	00000048 clearLED
080042a4 g     F .text	00000048 spawn_next_piece
08018568 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801a1cc g     F .text	000000c4 alt_get_fd
080193ec g     F .text	00000158 alt_busy_sleep
08002520 g     F .text	00000038 MSDEventHandler
08014754 g     F .text	00000054 _close_r
08004108 g     F .text	00000084 test_board_values
0800432c g     F .text	00000240 drop_curr_piece
08004234 g     F .text	00000038 random_piece
0801a378 g     F .text	0000007c memcmp
08017100 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
08018628 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801ebe0 g       *ABS*	00000000 __alt_stack_base
08018678 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800dd40 g     F .text	00000154 __swsetup_r
08009730 g     F .text	000009d0 .hidden __divdf3
0800fc1c g     F .text	00000118 __sfp
08012728 g     F .text	00000078 __copybits
0801b510 g     O .rwdata	00000408 __malloc_av_
0800fd68 g     F .text	00000004 __sinit_lock_release
08002584 g     F .text	00000038 CDCEventHandler
0800a358 g     F .text	0000086c .hidden __muldf3
080025e8 g     F .text	00000038 DummyEventHandler
08012de4 g     F .text	00000054 __sread
0801a0c4 g     F .text	00000108 alt_find_file
080195a0 g     F .text	000000a4 alt_dev_llist_insert
080162a8 g     F .text	00000024 __malloc_lock
080164b4 g     F .text	000000b0 sbrk
08017528 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
08017490 g     F .text	0000004c alt_avalon_i2c_check_nack
0800f960 g     F .text	0000005c _fflush_r
080147a8 g     F .text	000000dc _calloc_r
08003b24 g     F .text	00000190 convert_to_BDC
08004810 g     F .text	00000208 is_legal_world
0801e89c g       *ABS*	00000000 __bss_start
080014c0 g     F .text	00000188 MAX_busprobe
0801e89c g     O .bss	00000002 hid_device
0801164c g     F .text	00000128 memset
08006060 g     F .text	000003f8 main
080016dc g     F .text	00000064 MAX3421E_Task
0801745c g     F .text	00000034 alt_avalon_i2c_master_target_set
0801e8ec g     O .bss	00000004 alt_envp
0801e8d4 g     O .bss	00000004 __malloc_max_total_mem
080185c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08014e40 g     F .text	00000018 __swbuf
0800b878 g     F .text	00000018 srand
08002678 g     F .text	00000084 ConvUTF8ToStr
08018274 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
08012f18 g     F .text	00000008 __sclose
08007cec g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
08004a18 g     F .text	00000b20 rotate_piece
08014974 g     F .text	00000014 fclose
0800e0bc g     F .text	00001688 _dtoa_r
08010ab8 g     F .text	0000080c _malloc_r
08014fb4 g     F .text	00000030 __ascii_wctomb
0801cb9c g     O .rwdata	00000004 alt_errno
08010698 g     F .text	000000c4 _fwalk
0801a494 g     F .text	000000c8 putc
08008178 g     F .text	00000084 .hidden __divsi3
08001c64 g     F .text	000001b4 XferInTransfer
0800299c g     F .text	00000138 printSignedHex1
0800fd9c g     F .text	00000124 _malloc_trim_r
0801a828 g       *ABS*	00000000 __CTOR_END__
08008410 g     F .text	00000430 .hidden __mulsf3
08007c5c g     F .text	0000001c finite
08002640 g     F .text	00000038 GetDevtable
08012f20 g     F .text	000000dc strcmp
0801a828 g       *ABS*	00000000 __flash_rodata_start
0801a828 g       *ABS*	00000000 __DTOR_LIST__
08001a74 g     F .text	00000074 XferCtrlND
08000320 g     F .text	000000a0 SGTL5000_Reg_Wr
08008088 g     F .text	0000001c copysign
0800a100 g     F .text	00000088 .hidden __nedf2
080013fc g     F .text	000000a0 MAX3421E_reset
080168a8 g     F .text	00000038 alt_irq_init
08016430 g     F .text	00000084 alt_release_fd
0801aba8 g     O .rodata	00000100 .hidden __clz_tab
0801e8c8 g     O .bss	00000004 _PathLocale
0801a32c g     F .text	00000014 atexit
08008354 g     F .text	000000bc .hidden __gesf2
080146f4 g     F .text	00000060 _write_r
080003c0 g     F .text	00000300 SGTL_setup
080108d8 g     F .text	00000018 setlocale
0801cb74 g     O .rwdata	00000004 _impure_ptr
0801e8e4 g     O .bss	00000004 alt_argc
0800f744 g     F .text	0000021c __sflush_r
08007eec g     F .text	0000019c scalbn
080196a4 g     F .text	00000060 _do_dtors
080108c4 g     F .text	00000008 __locale_cjk_lang
08017424 g     F .text	00000038 alt_avalon_i2c_master_target_get
08017334 g     F .text	000000f0 alt_avalon_i2c_send_address
08001178 g     F .text	00000170 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
08012354 g     F .text	00000064 __ulp
0800fd84 g     F .text	00000018 __fp_unlock_all
0801cb88 g     O .rwdata	00000008 alt_fs_list
08002558 g     F .text	0000002c CDCProbe
08007cf4 g     F .text	0000000c nan
0801eabc g     O .bss	00000024 future
08000020 g       *ABS*	00000000 __ram_exceptions_start
080108f0 g     F .text	0000000c localeconv
080027f8 g     F .text	00000044 setLED
080079c0 g     F .text	00000288 __ieee754_sqrt
08002620 g     F .text	00000020 GetUsbTaskState
08018500 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
080197b4 g     F .text	00000050 alt_ic_isr_register
08016d64 g     F .text	0000004c alt_avalon_i2c_disable
0801ab84 g     O .rodata	00000010 devclasses
0801cbb8 g       *ABS*	00000000 _edata
08001058 g     F .text	00000038 HIDKEventHandler
0801ebe0 g       *ABS*	00000000 _end
08001740 g     F .text	000000cc MaxIntHandler
08014988 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08018aa0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08003cb4 g     F .text	00000144 increase_level
08016db0 g     F .text	000000b0 alt_avalon_i2c_master_config_get
08001090 g     F .text	00000034 SPI_init
0801988c g     F .text	0000008c alt_ic_irq_disable
08012e40 g     F .text	0000007c __swrite
0801cb80 g     O .rwdata	00000004 __malloc_trim_threshold
080108b8 g     F .text	0000000c __locale_msgcharset
0801a340 g     F .text	00000038 exit
0801075c g     F .text	000000c4 _fwalk_reent
08008d94 g     F .text	000000f0 .hidden __floatunsisf
08012158 g     F .text	000001fc __mdiff
080081fc g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800fd60 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08016fc0 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
08017250 g     F .text	000000e4 alt_avalon_i2c_cmd_write
080080a4 g     F .text	00000060 .hidden __fixunssfsi
08001020 g     F .text	00000038 HIDMEventHandler
0801a7f4 g     F .text	00000034 _exit
080041dc g     F .text	00000058 test_spawn_current_piece
080192c0 g     F .text	0000012c alt_alarm_start
08002884 g     F .text	00000118 printSignedHex0
08015040 g     F .text	0000010c .hidden __muldi3
080108fc g     F .text	000001bc __smakebuf_r
0800b8f4 g     F .text	00000098 strlen
08019cdc g     F .text	0000015c open
0800a188 g     F .text	000000dc .hidden __gedf2
0801a064 g     F .text	0000003c alt_putchar
0801cb84 g     O .rwdata	00000004 __wctomb
080130f8 g     F .text	00000018 __sprint_r
08019794 g     F .text	00000020 alt_icache_flush_all
0800426c g     F .text	00000038 initial_spawn_piece
0801cbb4 g     O .rwdata	00000004 alt_priority_mask
08019804 g     F .text	00000088 alt_ic_irq_enable
0800dc68 g     F .text	0000001c __vfprintf_internal
080006c0 g     F .text	00000408 HIDMProbe
08014fe4 g     F .text	0000005c _wctomb_r
080010c4 g     F .text	00000028 SPI_wr
0800abc4 g     F .text	000008fc .hidden __subdf3
08011af8 g     F .text	000000b0 __lo0bits
0801cba4 g     O .rwdata	00000008 alt_alarm_list
08019644 g     F .text	00000060 _do_ctors
08003df8 g     F .text	000000fc step_lines
08014ef4 g     F .text	000000c0 wcrtomb
08015d48 g     F .text	000000d8 close
080184b4 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
08003940 g     F .text	00000100 vga_clear
08016090 g     F .text	00000084 alt_load
0801774c g     F .text	0000013c alt_avalon_i2c_master_rx
08014b10 g     F .text	00000080 fputwc
0800fd64 g     F .text	00000004 __sinit_lock_acquire
08001840 g     F .text	0000014c XferCtrlReq
08011844 g     F .text	00000148 __multadd
0801181c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10bab804 	addi	r2,r2,-5408
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10bab804 	addi	r2,r2,-5408
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a76917 	ldw	r2,-25180(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a76917 	ldw	r2,-25180(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d692d614 	ori	gp,gp,19288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10ba2714 	ori	r2,r2,59548

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18faf814 	ori	r3,r3,60384

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80160900 	call	8016090 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	801622c0 	call	801622c <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 800026c:	defff804 	addi	sp,sp,-32
 8000270:	dfc00715 	stw	ra,28(sp)
 8000274:	df000615 	stw	fp,24(sp)
 8000278:	df000604 	addi	fp,sp,24
 800027c:	e13ffe15 	stw	r4,-8(fp)
 8000280:	2805883a 	mov	r2,r5
 8000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8000288:	e0bfff0b 	ldhu	r2,-4(fp)
 800028c:	1004d23a 	srli	r2,r2,8
 8000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000294:	e0bfff0b 	ldhu	r2,-4(fp)
 8000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 800029c:	e13ffd84 	addi	r4,fp,-10
 80002a0:	e0fffd84 	addi	r3,fp,-10
 80002a4:	d8000115 	stw	zero,4(sp)
 80002a8:	00800084 	movi	r2,2
 80002ac:	d8800015 	stw	r2,0(sp)
 80002b0:	200f883a 	mov	r7,r4
 80002b4:	01800084 	movi	r6,2
 80002b8:	180b883a 	mov	r5,r3
 80002bc:	e13ffe17 	ldw	r4,-8(fp)
 80002c0:	80178880 	call	8017888 <alt_avalon_i2c_master_tx_rx>
 80002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 80002c8:	e0bffc17 	ldw	r2,-16(fp)
 80002cc:	10000626 	beq	r2,zero,80002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 80002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 80002d4:	100b883a 	mov	r5,r2
 80002d8:	010200b4 	movhi	r4,2050
 80002dc:	212a0a04 	addi	r4,r4,-22488
 80002e0:	800b7680 	call	800b768 <printf>
		while (1)
		{
			//hang here
		}
 80002e4:	003fff06 	br	80002e4 <__alt_data_end+0xfc0002e4>
	}
	value = (buffer[0] << 8) | buffer[1];
 80002e8:	e0bffd83 	ldbu	r2,-10(fp)
 80002ec:	10803fcc 	andi	r2,r2,255
 80002f0:	1004923a 	slli	r2,r2,8
 80002f4:	1007883a 	mov	r3,r2
 80002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 80002fc:	10803fcc 	andi	r2,r2,255
 8000300:	1884b03a 	or	r2,r3,r2
 8000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 8000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 800030c:	e037883a 	mov	sp,fp
 8000310:	dfc00117 	ldw	ra,4(sp)
 8000314:	df000017 	ldw	fp,0(sp)
 8000318:	dec00204 	addi	sp,sp,8
 800031c:	f800283a 	ret

08000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 8000320:	defff904 	addi	sp,sp,-28
 8000324:	dfc00615 	stw	ra,24(sp)
 8000328:	df000515 	stw	fp,20(sp)
 800032c:	df000504 	addi	fp,sp,20
 8000330:	e13ffd15 	stw	r4,-12(fp)
 8000334:	2807883a 	mov	r3,r5
 8000338:	3005883a 	mov	r2,r6
 800033c:	e0fffe0d 	sth	r3,-8(fp)
 8000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 8000344:	e0bffe0b 	ldhu	r2,-8(fp)
 8000348:	1004d23a 	srli	r2,r2,8
 800034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000350:	e0bffe0b 	ldhu	r2,-8(fp)
 8000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 8000358:	e0bfff0b 	ldhu	r2,-4(fp)
 800035c:	1004d23a 	srli	r2,r2,8
 8000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 8000364:	e0bfff0b 	ldhu	r2,-4(fp)
 8000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 800036c:	e0bffc04 	addi	r2,fp,-16
 8000370:	000f883a 	mov	r7,zero
 8000374:	01800104 	movi	r6,4
 8000378:	100b883a 	mov	r5,r2
 800037c:	e13ffd17 	ldw	r4,-12(fp)
 8000380:	80176640 	call	8017664 <alt_avalon_i2c_master_tx>
 8000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 8000388:	e0bffb17 	ldw	r2,-20(fp)
 800038c:	10000626 	beq	r2,zero,80003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8000390:	e0bffe0b 	ldhu	r2,-8(fp)
 8000394:	100b883a 	mov	r5,r2
 8000398:	010200b4 	movhi	r4,2050
 800039c:	212a0a04 	addi	r4,r4,-22488
 80003a0:	800b7680 	call	800b768 <printf>
		while (1)
		{
			//hang here
		}
 80003a4:	003fff06 	br	80003a4 <__alt_data_end+0xfc0003a4>
	}
	return DATA;
 80003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80003ac:	e037883a 	mov	sp,fp
 80003b0:	dfc00117 	ldw	ra,4(sp)
 80003b4:	df000017 	ldw	fp,0(sp)
 80003b8:	dec00204 	addi	sp,sp,8
 80003bc:	f800283a 	ret

080003c0 <SGTL_setup>:
#include "sys/alt_irq.h"
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"

int SGTL_setup()
{
 80003c0:	defffc04 	addi	sp,sp,-16
 80003c4:	dfc00315 	stw	ra,12(sp)
 80003c8:	df000215 	stw	fp,8(sp)
 80003cc:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 80003d0:	010200b4 	movhi	r4,2050
 80003d4:	212a1204 	addi	r4,r4,-22456
 80003d8:	8016c8c0 	call	8016c8c <alt_avalon_i2c_open>
 80003dc:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 80003e0:	e0bffe17 	ldw	r2,-8(fp)
 80003e4:	1000051e 	bne	r2,zero,80003fc <SGTL_setup+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 80003e8:	010200b4 	movhi	r4,2050
 80003ec:	212a1504 	addi	r4,r4,-22444
 80003f0:	800b8640 	call	800b864 <puts>
		return 1;
 80003f4:	00800044 	movi	r2,1
 80003f8:	0000ac06 	br	80006ac <SGTL_setup+0x2ec>
	}
	printf ("I2C Test Program\n");
 80003fc:	010200b4 	movhi	r4,2050
 8000400:	212a1d04 	addi	r4,r4,-22412
 8000404:	800b8640 	call	800b864 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 8000408:	01400284 	movi	r5,10
 800040c:	e13ffe17 	ldw	r4,-8(fp)
 8000410:	801745c0 	call	801745c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 8000414:	000b883a 	mov	r5,zero
 8000418:	e13ffe17 	ldw	r4,-8(fp)
 800041c:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000420:	10bfffcc 	andi	r2,r2,65535
 8000424:	100b883a 	mov	r5,r2
 8000428:	010200b4 	movhi	r4,2050
 800042c:	212a2204 	addi	r4,r4,-22392
 8000430:	800b7680 	call	800b768 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 8000434:	00800384 	movi	r2,14
 8000438:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 800043c:	e0bfff03 	ldbu	r2,-4(fp)
 8000440:	1009883a 	mov	r4,r2
 8000444:	8008d940 	call	8008d94 <__floatunsisf>
 8000448:	1007883a 	mov	r3,r2
 800044c:	180b883a 	mov	r5,r3
 8000450:	011059f4 	movhi	r4,16743
 8000454:	210d8144 	addi	r4,r4,13829
 8000458:	80088400 	call	8008840 <__subsf3>
 800045c:	1007883a 	mov	r3,r2
 8000460:	1805883a 	mov	r2,r3
 8000464:	01514034 	movhi	r5,17664
 8000468:	1009883a 	mov	r4,r2
 800046c:	80084100 	call	8008410 <__mulsf3>
 8000470:	1007883a 	mov	r3,r2
 8000474:	1805883a 	mov	r2,r3
 8000478:	1009883a 	mov	r4,r2
 800047c:	80080a40 	call	80080a4 <__fixunssfsi>
 8000480:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 8000484:	e0bfff03 	ldbu	r2,-4(fp)
 8000488:	e0ffff8b 	ldhu	r3,-2(fp)
 800048c:	180d883a 	mov	r6,r3
 8000490:	100b883a 	mov	r5,r2
 8000494:	010200b4 	movhi	r4,2050
 8000498:	212a2804 	addi	r4,r4,-22368
 800049c:	800b7680 	call	800b768 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 80004a0:	e0bfff03 	ldbu	r2,-4(fp)
 80004a4:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 80004a8:	1007883a 	mov	r3,r2
 80004ac:	e0bfff8b 	ldhu	r2,-2(fp)
 80004b0:	1884b03a 	or	r2,r3,r2
 80004b4:	10bfffcc 	andi	r2,r2,65535
 80004b8:	100d883a 	mov	r6,r2
 80004bc:	01400c84 	movi	r5,50
 80004c0:	e13ffe17 	ldw	r4,-8(fp)
 80004c4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 80004c8:	01400c84 	movi	r5,50
 80004cc:	e13ffe17 	ldw	r4,-8(fp)
 80004d0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80004d4:	10bfffcc 	andi	r2,r2,65535
 80004d8:	100b883a 	mov	r5,r2
 80004dc:	010200b4 	movhi	r4,2050
 80004e0:	212a3904 	addi	r4,r4,-22300
 80004e4:	800b7680 	call	800b768 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 80004e8:	01917f84 	movi	r6,17918
 80004ec:	01400c04 	movi	r5,48
 80004f0:	e13ffe17 	ldw	r4,-8(fp)
 80004f4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 80004f8:	01400c04 	movi	r5,48
 80004fc:	e13ffe17 	ldw	r4,-8(fp)
 8000500:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000504:	10bfffcc 	andi	r2,r2,65535
 8000508:	100b883a 	mov	r5,r2
 800050c:	010200b4 	movhi	r4,2050
 8000510:	212a4004 	addi	r4,r4,-22272
 8000514:	800b7680 	call	800b768 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 8000518:	01801384 	movi	r6,78
 800051c:	01400a04 	movi	r5,40
 8000520:	e13ffe17 	ldw	r4,-8(fp)
 8000524:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 8000528:	01400a04 	movi	r5,40
 800052c:	e13ffe17 	ldw	r4,-8(fp)
 8000530:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000534:	10bfffcc 	andi	r2,r2,65535
 8000538:	100b883a 	mov	r5,r2
 800053c:	010200b4 	movhi	r4,2050
 8000540:	212a4804 	addi	r4,r4,-22240
 8000544:	800b7680 	call	800b768 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 8000548:	018018c4 	movi	r6,99
 800054c:	01400084 	movi	r5,2
 8000550:	e13ffe17 	ldw	r4,-8(fp)
 8000554:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 8000558:	01400084 	movi	r5,2
 800055c:	e13ffe17 	ldw	r4,-8(fp)
 8000560:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000564:	10bfffcc 	andi	r2,r2,65535
 8000568:	100b883a 	mov	r5,r2
 800056c:	010200b4 	movhi	r4,2050
 8000570:	212a4f04 	addi	r4,r4,-22212
 8000574:	800b7680 	call	800b768 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 8000578:	018001c4 	movi	r6,7
 800057c:	01400104 	movi	r5,4
 8000580:	e13ffe17 	ldw	r4,-8(fp)
 8000584:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 8000588:	01400104 	movi	r5,4
 800058c:	e13ffe17 	ldw	r4,-8(fp)
 8000590:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000594:	10bfffcc 	andi	r2,r2,65535
 8000598:	100b883a 	mov	r5,r2
 800059c:	010200b4 	movhi	r4,2050
 80005a0:	212a5704 	addi	r4,r4,-22180
 80005a4:	800b7680 	call	800b768 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 80005a8:	01802004 	movi	r6,128
 80005ac:	01400184 	movi	r5,6
 80005b0:	e13ffe17 	ldw	r4,-8(fp)
 80005b4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 80005b8:	01400184 	movi	r5,6
 80005bc:	e13ffe17 	ldw	r4,-8(fp)
 80005c0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80005c4:	10bfffcc 	andi	r2,r2,65535
 80005c8:	100b883a 	mov	r5,r2
 80005cc:	010200b4 	movhi	r4,2050
 80005d0:	212a5e04 	addi	r4,r4,-22152
 80005d4:	800b7680 	call	800b768 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 80005d8:	01800104 	movi	r6,4
 80005dc:	01400904 	movi	r5,36
 80005e0:	e13ffe17 	ldw	r4,-8(fp)
 80005e4:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 80005e8:	01400904 	movi	r5,36
 80005ec:	e13ffe17 	ldw	r4,-8(fp)
 80005f0:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 80005f4:	10bfffcc 	andi	r2,r2,65535
 80005f8:	100b883a 	mov	r5,r2
 80005fc:	010200b4 	movhi	r4,2050
 8000600:	212a6504 	addi	r4,r4,-22124
 8000604:	800b7680 	call	800b768 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 8000608:	01800404 	movi	r6,16
 800060c:	01400284 	movi	r5,10
 8000610:	e13ffe17 	ldw	r4,-8(fp)
 8000614:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000618:	01400284 	movi	r5,10
 800061c:	e13ffe17 	ldw	r4,-8(fp)
 8000620:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000624:	10bfffcc 	andi	r2,r2,65535
 8000628:	100b883a 	mov	r5,r2
 800062c:	010200b4 	movhi	r4,2050
 8000630:	212a6c04 	addi	r4,r4,-22096
 8000634:	800b7680 	call	800b768 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000638:	01400904 	movi	r5,36
 800063c:	e13ffe17 	ldw	r4,-8(fp)
 8000640:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000644:	10bfffcc 	andi	r2,r2,65535
 8000648:	100b883a 	mov	r5,r2
 800064c:	010200b4 	movhi	r4,2050
 8000650:	212a6504 	addi	r4,r4,-22124
 8000654:	800b7680 	call	800b768 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000658:	000d883a 	mov	r6,zero
 800065c:	01400384 	movi	r5,14
 8000660:	e13ffe17 	ldw	r4,-8(fp)
 8000664:	80003200 	call	8000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000668:	01400384 	movi	r5,14
 800066c:	e13ffe17 	ldw	r4,-8(fp)
 8000670:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000674:	10bfffcc 	andi	r2,r2,65535
 8000678:	100b883a 	mov	r5,r2
 800067c:	010200b4 	movhi	r4,2050
 8000680:	212a7304 	addi	r4,r4,-22068
 8000684:	800b7680 	call	800b768 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000688:	01400504 	movi	r5,20
 800068c:	e13ffe17 	ldw	r4,-8(fp)
 8000690:	800026c0 	call	800026c <SGTL5000_Reg_Rd>
 8000694:	10bfffcc 	andi	r2,r2,65535
 8000698:	100b883a 	mov	r5,r2
 800069c:	010200b4 	movhi	r4,2050
 80006a0:	212a7b04 	addi	r4,r4,-22036
 80006a4:	800b7680 	call	800b768 <printf>


	return 0;
 80006a8:	0005883a 	mov	r2,zero
}
 80006ac:	e037883a 	mov	sp,fp
 80006b0:	dfc00117 	ldw	ra,4(sp)
 80006b4:	df000017 	ldw	fp,0(sp)
 80006b8:	dec00204 	addi	sp,sp,8
 80006bc:	f800283a 	ret

080006c0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 80006c0:	defff204 	addi	sp,sp,-56
 80006c4:	dfc00d15 	stw	ra,52(sp)
 80006c8:	df000c15 	stw	fp,48(sp)
 80006cc:	df000c04 	addi	fp,sp,48
 80006d0:	2005883a 	mov	r2,r4
 80006d4:	e17fff15 	stw	r5,-4(fp)
 80006d8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 80006dc:	008200b4 	movhi	r2,2050
 80006e0:	10ba5404 	addi	r2,r2,-5808
 80006e4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 80006e8:	008200b4 	movhi	r2,2050
 80006ec:	10ba5404 	addi	r2,r2,-5808
 80006f0:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 80006f4:	e0fffe03 	ldbu	r3,-8(fp)
 80006f8:	008200b4 	movhi	r2,2050
 80006fc:	10ba5404 	addi	r2,r2,-5808
 8000700:	d8800415 	stw	r2,16(sp)
 8000704:	00800244 	movi	r2,9
 8000708:	d8800315 	stw	r2,12(sp)
 800070c:	d8000215 	stw	zero,8(sp)
 8000710:	00800084 	movi	r2,2
 8000714:	d8800115 	stw	r2,4(sp)
 8000718:	d8000015 	stw	zero,0(sp)
 800071c:	01c00184 	movi	r7,6
 8000720:	01802004 	movi	r6,128
 8000724:	000b883a 	mov	r5,zero
 8000728:	1809883a 	mov	r4,r3
 800072c:	80018400 	call	8001840 <XferCtrlReq>
 8000730:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000734:	e0bffc03 	ldbu	r2,-16(fp)
 8000738:	10000226 	beq	r2,zero,8000744 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 800073c:	0005883a 	mov	r2,zero
 8000740:	0000dc06 	br	8000ab4 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000744:	e0bffa17 	ldw	r2,-24(fp)
 8000748:	1080008b 	ldhu	r2,2(r2)
 800074c:	10bfffcc 	andi	r2,r2,65535
 8000750:	10804070 	cmpltui	r2,r2,257
 8000754:	1000031e 	bne	r2,zero,8000764 <HIDMProbe+0xa4>
		total_length = 256;
 8000758:	00804004 	movi	r2,256
 800075c:	e0bff90d 	sth	r2,-28(fp)
 8000760:	00000306 	br	8000770 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000764:	e0bffa17 	ldw	r2,-24(fp)
 8000768:	1080008b 	ldhu	r2,2(r2)
 800076c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000770:	e13ffe03 	ldbu	r4,-8(fp)
 8000774:	e0fff90b 	ldhu	r3,-28(fp)
 8000778:	008200b4 	movhi	r2,2050
 800077c:	10ba5404 	addi	r2,r2,-5808
 8000780:	d8800415 	stw	r2,16(sp)
 8000784:	d8c00315 	stw	r3,12(sp)
 8000788:	d8000215 	stw	zero,8(sp)
 800078c:	00800084 	movi	r2,2
 8000790:	d8800115 	stw	r2,4(sp)
 8000794:	d8000015 	stw	zero,0(sp)
 8000798:	01c00184 	movi	r7,6
 800079c:	01802004 	movi	r6,128
 80007a0:	000b883a 	mov	r5,zero
 80007a4:	80018400 	call	8001840 <XferCtrlReq>
 80007a8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80007ac:	e0bffc03 	ldbu	r2,-16(fp)
 80007b0:	10000226 	beq	r2,zero,80007bc <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 80007b4:	0005883a 	mov	r2,zero
 80007b8:	0000be06 	br	8000ab4 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 80007bc:	e0bffa17 	ldw	r2,-24(fp)
 80007c0:	10800143 	ldbu	r2,5(r2)
 80007c4:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 80007c8:	0000b306 	br	8000a98 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 80007cc:	e0bffa17 	ldw	r2,-24(fp)
 80007d0:	10800043 	ldbu	r2,1(r2)
 80007d4:	10803fcc 	andi	r2,r2,255
 80007d8:	10800120 	cmpeqi	r2,r2,4
 80007dc:	1000091e 	bne	r2,zero,8000804 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80007e0:	e0bffa17 	ldw	r2,-24(fp)
 80007e4:	10800003 	ldbu	r2,0(r2)
 80007e8:	10803fcc 	andi	r2,r2,255
 80007ec:	e0fffb17 	ldw	r3,-20(fp)
 80007f0:	1885883a 	add	r2,r3,r2
 80007f4:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 80007f8:	e0bffb17 	ldw	r2,-20(fp)
 80007fc:	e0bffa15 	stw	r2,-24(fp)
 8000800:	0000a506 	br	8000a98 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000804:	e0bffa17 	ldw	r2,-24(fp)
 8000808:	10800143 	ldbu	r2,5(r2)
 800080c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000810:	e0bffa17 	ldw	r2,-24(fp)
 8000814:	10800183 	ldbu	r2,6(r2)
 8000818:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 800081c:	e0bffa17 	ldw	r2,-24(fp)
 8000820:	108001c3 	ldbu	r2,7(r2)
 8000824:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000828:	e0bffc83 	ldbu	r2,-14(fp)
 800082c:	108000d8 	cmpnei	r2,r2,3
 8000830:	1000971e 	bne	r2,zero,8000a90 <HIDMProbe+0x3d0>
 8000834:	e0bffcc3 	ldbu	r2,-13(fp)
 8000838:	10800058 	cmpnei	r2,r2,1
 800083c:	1000941e 	bne	r2,zero,8000a90 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8000840:	e0bffd03 	ldbu	r2,-12(fp)
 8000844:	10800098 	cmpnei	r2,r2,2
 8000848:	1000911e 	bne	r2,zero,8000a90 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 800084c:	e0fffe03 	ldbu	r3,-8(fp)
 8000850:	008200b4 	movhi	r2,2050
 8000854:	10ba9404 	addi	r2,r2,-5552
 8000858:	180690fa 	slli	r3,r3,3
 800085c:	10c5883a 	add	r2,r2,r3
 8000860:	10800104 	addi	r2,r2,4
 8000864:	00c00084 	movi	r3,2
 8000868:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 800086c:	e0fffe03 	ldbu	r3,-8(fp)
 8000870:	008200b4 	movhi	r2,2050
 8000874:	10ba9404 	addi	r2,r2,-5552
 8000878:	180690fa 	slli	r3,r3,3
 800087c:	10c5883a 	add	r2,r2,r3
 8000880:	10800017 	ldw	r2,0(r2)
 8000884:	1080008b 	ldhu	r2,2(r2)
 8000888:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 800088c:	8000ed00 	call	8000ed0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000890:	e0fffe03 	ldbu	r3,-8(fp)
 8000894:	008200b4 	movhi	r2,2050
 8000898:	10ba9404 	addi	r2,r2,-5552
 800089c:	180690fa 	slli	r3,r3,3
 80008a0:	10c7883a 	add	r3,r2,r3
 80008a4:	008200b4 	movhi	r2,2050
 80008a8:	10ba4004 	addi	r2,r2,-5888
 80008ac:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 80008b0:	e0fffe03 	ldbu	r3,-8(fp)
 80008b4:	008200b4 	movhi	r2,2050
 80008b8:	10ba9404 	addi	r2,r2,-5552
 80008bc:	180690fa 	slli	r3,r3,3
 80008c0:	10c5883a 	add	r2,r2,r3
 80008c4:	10800017 	ldw	r2,0(r2)
 80008c8:	e0fffd43 	ldbu	r3,-11(fp)
 80008cc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 80008d0:	e0bffa17 	ldw	r2,-24(fp)
 80008d4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 80008d8:	d0a75145 	stb	r2,-25275(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 80008dc:	e0bffe03 	ldbu	r2,-8(fp)
 80008e0:	d0a75105 	stb	r2,-25276(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80008e4:	e0bffa17 	ldw	r2,-24(fp)
 80008e8:	10800003 	ldbu	r2,0(r2)
 80008ec:	10803fcc 	andi	r2,r2,255
 80008f0:	e0fffb17 	ldw	r3,-20(fp)
 80008f4:	1885883a 	add	r2,r3,r2
 80008f8:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80008fc:	e0bffb17 	ldw	r2,-20(fp)
 8000900:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000904:	00005b06 	br	8000a74 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8000908:	e0bffa17 	ldw	r2,-24(fp)
 800090c:	10800043 	ldbu	r2,1(r2)
 8000910:	10803fcc 	andi	r2,r2,255
 8000914:	10800160 	cmpeqi	r2,r2,5
 8000918:	1000091e 	bne	r2,zero,8000940 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800091c:	e0bffa17 	ldw	r2,-24(fp)
 8000920:	10800003 	ldbu	r2,0(r2)
 8000924:	10803fcc 	andi	r2,r2,255
 8000928:	e0fffb17 	ldw	r3,-20(fp)
 800092c:	1885883a 	add	r2,r3,r2
 8000930:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000934:	e0bffb17 	ldw	r2,-20(fp)
 8000938:	e0bffa15 	stw	r2,-24(fp)
 800093c:	00004d06 	br	8000a74 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000940:	e0fffe03 	ldbu	r3,-8(fp)
 8000944:	008200b4 	movhi	r2,2050
 8000948:	10ba9404 	addi	r2,r2,-5552
 800094c:	180690fa 	slli	r3,r3,3
 8000950:	10c5883a 	add	r2,r2,r3
 8000954:	10800017 	ldw	r2,0(r2)
 8000958:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 800095c:	e0fffa17 	ldw	r3,-24(fp)
 8000960:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000964:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000968:	e0fffe03 	ldbu	r3,-8(fp)
 800096c:	008200b4 	movhi	r2,2050
 8000970:	10ba9404 	addi	r2,r2,-5552
 8000974:	180690fa 	slli	r3,r3,3
 8000978:	10c5883a 	add	r2,r2,r3
 800097c:	10800017 	ldw	r2,0(r2)
 8000980:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000984:	e0fffa17 	ldw	r3,-24(fp)
 8000988:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 800098c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000990:	e0fffe03 	ldbu	r3,-8(fp)
 8000994:	008200b4 	movhi	r2,2050
 8000998:	10ba9404 	addi	r2,r2,-5552
 800099c:	180690fa 	slli	r3,r3,3
 80009a0:	10c5883a 	add	r2,r2,r3
 80009a4:	10800017 	ldw	r2,0(r2)
 80009a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 80009ac:	e0fffa17 	ldw	r3,-24(fp)
 80009b0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80009b4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80009b8:	e0fffe03 	ldbu	r3,-8(fp)
 80009bc:	008200b4 	movhi	r2,2050
 80009c0:	10ba9404 	addi	r2,r2,-5552
 80009c4:	180690fa 	slli	r3,r3,3
 80009c8:	10c5883a 	add	r2,r2,r3
 80009cc:	10800017 	ldw	r2,0(r2)
 80009d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 80009d4:	e0fffa17 	ldw	r3,-24(fp)
 80009d8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80009dc:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 80009e0:	e0fffe03 	ldbu	r3,-8(fp)
 80009e4:	e0bffc43 	ldbu	r2,-15(fp)
 80009e8:	d8000415 	stw	zero,16(sp)
 80009ec:	d8000315 	stw	zero,12(sp)
 80009f0:	d8000215 	stw	zero,8(sp)
 80009f4:	d8000115 	stw	zero,4(sp)
 80009f8:	d8800015 	stw	r2,0(sp)
 80009fc:	01c00244 	movi	r7,9
 8000a00:	000d883a 	mov	r6,zero
 8000a04:	000b883a 	mov	r5,zero
 8000a08:	1809883a 	mov	r4,r3
 8000a0c:	80018400 	call	8001840 <XferCtrlReq>
 8000a10:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8000a14:	e0bffc03 	ldbu	r2,-16(fp)
 8000a18:	10000226 	beq	r2,zero,8000a24 <HIDMProbe+0x364>
							return (FALSE);
 8000a1c:	0005883a 	mov	r2,zero
 8000a20:	00002406 	br	8000ab4 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000a24:	e0fffe03 	ldbu	r3,-8(fp)
 8000a28:	d0a75143 	ldbu	r2,-25275(gp)
 8000a2c:	10803fcc 	andi	r2,r2,255
 8000a30:	d8000415 	stw	zero,16(sp)
 8000a34:	d8000315 	stw	zero,12(sp)
 8000a38:	d8800215 	stw	r2,8(sp)
 8000a3c:	d8000115 	stw	zero,4(sp)
 8000a40:	d8000015 	stw	zero,0(sp)
 8000a44:	01c002c4 	movi	r7,11
 8000a48:	01800844 	movi	r6,33
 8000a4c:	000b883a 	mov	r5,zero
 8000a50:	1809883a 	mov	r4,r3
 8000a54:	80018400 	call	8001840 <XferCtrlReq>
 8000a58:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000a5c:	e0bffc03 	ldbu	r2,-16(fp)
 8000a60:	10000226 	beq	r2,zero,8000a6c <HIDMProbe+0x3ac>
							return (FALSE);
 8000a64:	0005883a 	mov	r2,zero
 8000a68:	00001206 	br	8000ab4 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8000a6c:	00800044 	movi	r2,1
 8000a70:	00001006 	br	8000ab4 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000a74:	e0fff90b 	ldhu	r3,-28(fp)
 8000a78:	008200b4 	movhi	r2,2050
 8000a7c:	10ba5404 	addi	r2,r2,-5808
 8000a80:	1885883a 	add	r2,r3,r2
 8000a84:	e0fffb17 	ldw	r3,-20(fp)
 8000a88:	18bf9f36 	bltu	r3,r2,8000908 <__alt_data_end+0xfc000908>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000a8c:	00000206 	br	8000a98 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8000a90:	0005883a 	mov	r2,zero
 8000a94:	00000706 	br	8000ab4 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000a98:	e0fff90b 	ldhu	r3,-28(fp)
 8000a9c:	008200b4 	movhi	r2,2050
 8000aa0:	10ba5404 	addi	r2,r2,-5808
 8000aa4:	1885883a 	add	r2,r3,r2
 8000aa8:	e0fffb17 	ldw	r3,-20(fp)
 8000aac:	18bf4736 	bltu	r3,r2,80007cc <__alt_data_end+0xfc0007cc>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000ab0:	0005883a 	mov	r2,zero
}
 8000ab4:	e037883a 	mov	sp,fp
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	df000017 	ldw	fp,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000ac8:	defff204 	addi	sp,sp,-56
 8000acc:	dfc00d15 	stw	ra,52(sp)
 8000ad0:	df000c15 	stw	fp,48(sp)
 8000ad4:	df000c04 	addi	fp,sp,48
 8000ad8:	2005883a 	mov	r2,r4
 8000adc:	e17fff15 	stw	r5,-4(fp)
 8000ae0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000ae4:	008200b4 	movhi	r2,2050
 8000ae8:	10ba5404 	addi	r2,r2,-5808
 8000aec:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8000af0:	008200b4 	movhi	r2,2050
 8000af4:	10ba5404 	addi	r2,r2,-5808
 8000af8:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000afc:	e0fffe03 	ldbu	r3,-8(fp)
 8000b00:	008200b4 	movhi	r2,2050
 8000b04:	10ba5404 	addi	r2,r2,-5808
 8000b08:	d8800415 	stw	r2,16(sp)
 8000b0c:	00800244 	movi	r2,9
 8000b10:	d8800315 	stw	r2,12(sp)
 8000b14:	d8000215 	stw	zero,8(sp)
 8000b18:	00800084 	movi	r2,2
 8000b1c:	d8800115 	stw	r2,4(sp)
 8000b20:	d8000015 	stw	zero,0(sp)
 8000b24:	01c00184 	movi	r7,6
 8000b28:	01802004 	movi	r6,128
 8000b2c:	000b883a 	mov	r5,zero
 8000b30:	1809883a 	mov	r4,r3
 8000b34:	80018400 	call	8001840 <XferCtrlReq>
 8000b38:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8000b3c:	e0bffc03 	ldbu	r2,-16(fp)
 8000b40:	10000226 	beq	r2,zero,8000b4c <HIDKProbe+0x84>
		return (FALSE);
 8000b44:	0005883a 	mov	r2,zero
 8000b48:	0000dc06 	br	8000ebc <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000b4c:	e0bffa17 	ldw	r2,-24(fp)
 8000b50:	1080008b 	ldhu	r2,2(r2)
 8000b54:	10bfffcc 	andi	r2,r2,65535
 8000b58:	10804070 	cmpltui	r2,r2,257
 8000b5c:	1000031e 	bne	r2,zero,8000b6c <HIDKProbe+0xa4>
		total_length = 256;
 8000b60:	00804004 	movi	r2,256
 8000b64:	e0bff90d 	sth	r2,-28(fp)
 8000b68:	00000306 	br	8000b78 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000b6c:	e0bffa17 	ldw	r2,-24(fp)
 8000b70:	1080008b 	ldhu	r2,2(r2)
 8000b74:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000b78:	e13ffe03 	ldbu	r4,-8(fp)
 8000b7c:	e0fff90b 	ldhu	r3,-28(fp)
 8000b80:	008200b4 	movhi	r2,2050
 8000b84:	10ba5404 	addi	r2,r2,-5808
 8000b88:	d8800415 	stw	r2,16(sp)
 8000b8c:	d8c00315 	stw	r3,12(sp)
 8000b90:	d8000215 	stw	zero,8(sp)
 8000b94:	00800084 	movi	r2,2
 8000b98:	d8800115 	stw	r2,4(sp)
 8000b9c:	d8000015 	stw	zero,0(sp)
 8000ba0:	01c00184 	movi	r7,6
 8000ba4:	01802004 	movi	r6,128
 8000ba8:	000b883a 	mov	r5,zero
 8000bac:	80018400 	call	8001840 <XferCtrlReq>
 8000bb0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8000bb4:	e0bffc03 	ldbu	r2,-16(fp)
 8000bb8:	10000226 	beq	r2,zero,8000bc4 <HIDKProbe+0xfc>
		return (FALSE);
 8000bbc:	0005883a 	mov	r2,zero
 8000bc0:	0000be06 	br	8000ebc <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000bc4:	e0bffa17 	ldw	r2,-24(fp)
 8000bc8:	10800143 	ldbu	r2,5(r2)
 8000bcc:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000bd0:	0000b306 	br	8000ea0 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000bd4:	e0bffa17 	ldw	r2,-24(fp)
 8000bd8:	10800043 	ldbu	r2,1(r2)
 8000bdc:	10803fcc 	andi	r2,r2,255
 8000be0:	10800120 	cmpeqi	r2,r2,4
 8000be4:	1000091e 	bne	r2,zero,8000c0c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000be8:	e0bffa17 	ldw	r2,-24(fp)
 8000bec:	10800003 	ldbu	r2,0(r2)
 8000bf0:	10803fcc 	andi	r2,r2,255
 8000bf4:	e0fffb17 	ldw	r3,-20(fp)
 8000bf8:	1885883a 	add	r2,r3,r2
 8000bfc:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000c00:	e0bffb17 	ldw	r2,-20(fp)
 8000c04:	e0bffa15 	stw	r2,-24(fp)
 8000c08:	0000a506 	br	8000ea0 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000c0c:	e0bffa17 	ldw	r2,-24(fp)
 8000c10:	10800143 	ldbu	r2,5(r2)
 8000c14:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000c18:	e0bffa17 	ldw	r2,-24(fp)
 8000c1c:	10800183 	ldbu	r2,6(r2)
 8000c20:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000c24:	e0bffa17 	ldw	r2,-24(fp)
 8000c28:	108001c3 	ldbu	r2,7(r2)
 8000c2c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000c30:	e0bffc83 	ldbu	r2,-14(fp)
 8000c34:	108000d8 	cmpnei	r2,r2,3
 8000c38:	1000971e 	bne	r2,zero,8000e98 <HIDKProbe+0x3d0>
 8000c3c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000c40:	10800058 	cmpnei	r2,r2,1
 8000c44:	1000941e 	bne	r2,zero,8000e98 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8000c48:	e0bffd03 	ldbu	r2,-12(fp)
 8000c4c:	10800058 	cmpnei	r2,r2,1
 8000c50:	1000911e 	bne	r2,zero,8000e98 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8000c54:	e0fffe03 	ldbu	r3,-8(fp)
 8000c58:	008200b4 	movhi	r2,2050
 8000c5c:	10ba9404 	addi	r2,r2,-5552
 8000c60:	180690fa 	slli	r3,r3,3
 8000c64:	10c5883a 	add	r2,r2,r3
 8000c68:	10800104 	addi	r2,r2,4
 8000c6c:	00c00044 	movi	r3,1
 8000c70:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8000c74:	e0fffe03 	ldbu	r3,-8(fp)
 8000c78:	008200b4 	movhi	r2,2050
 8000c7c:	10ba9404 	addi	r2,r2,-5552
 8000c80:	180690fa 	slli	r3,r3,3
 8000c84:	10c5883a 	add	r2,r2,r3
 8000c88:	10800017 	ldw	r2,0(r2)
 8000c8c:	1080008b 	ldhu	r2,2(r2)
 8000c90:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8000c94:	8000ed00 	call	8000ed0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000c98:	e0fffe03 	ldbu	r3,-8(fp)
 8000c9c:	008200b4 	movhi	r2,2050
 8000ca0:	10ba9404 	addi	r2,r2,-5552
 8000ca4:	180690fa 	slli	r3,r3,3
 8000ca8:	10c7883a 	add	r3,r2,r3
 8000cac:	008200b4 	movhi	r2,2050
 8000cb0:	10ba4004 	addi	r2,r2,-5888
 8000cb4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8000cb8:	e0fffe03 	ldbu	r3,-8(fp)
 8000cbc:	008200b4 	movhi	r2,2050
 8000cc0:	10ba9404 	addi	r2,r2,-5552
 8000cc4:	180690fa 	slli	r3,r3,3
 8000cc8:	10c5883a 	add	r2,r2,r3
 8000ccc:	10800017 	ldw	r2,0(r2)
 8000cd0:	e0fffd43 	ldbu	r3,-11(fp)
 8000cd4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8000cd8:	e0bffa17 	ldw	r2,-24(fp)
 8000cdc:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8000ce0:	d0a75145 	stb	r2,-25275(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8000ce4:	e0bffe03 	ldbu	r2,-8(fp)
 8000ce8:	d0a75105 	stb	r2,-25276(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8000cec:	e0bffa17 	ldw	r2,-24(fp)
 8000cf0:	10800003 	ldbu	r2,0(r2)
 8000cf4:	10803fcc 	andi	r2,r2,255
 8000cf8:	e0fffb17 	ldw	r3,-20(fp)
 8000cfc:	1885883a 	add	r2,r3,r2
 8000d00:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000d04:	e0bffb17 	ldw	r2,-20(fp)
 8000d08:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000d0c:	00005b06 	br	8000e7c <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8000d10:	e0bffa17 	ldw	r2,-24(fp)
 8000d14:	10800043 	ldbu	r2,1(r2)
 8000d18:	10803fcc 	andi	r2,r2,255
 8000d1c:	10800160 	cmpeqi	r2,r2,5
 8000d20:	1000091e 	bne	r2,zero,8000d48 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000d24:	e0bffa17 	ldw	r2,-24(fp)
 8000d28:	10800003 	ldbu	r2,0(r2)
 8000d2c:	10803fcc 	andi	r2,r2,255
 8000d30:	e0fffb17 	ldw	r3,-20(fp)
 8000d34:	1885883a 	add	r2,r3,r2
 8000d38:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000d3c:	e0bffb17 	ldw	r2,-20(fp)
 8000d40:	e0bffa15 	stw	r2,-24(fp)
 8000d44:	00004d06 	br	8000e7c <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d48:	e0fffe03 	ldbu	r3,-8(fp)
 8000d4c:	008200b4 	movhi	r2,2050
 8000d50:	10ba9404 	addi	r2,r2,-5552
 8000d54:	180690fa 	slli	r3,r3,3
 8000d58:	10c5883a 	add	r2,r2,r3
 8000d5c:	10800017 	ldw	r2,0(r2)
 8000d60:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000d64:	e0fffa17 	ldw	r3,-24(fp)
 8000d68:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d6c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000d70:	e0fffe03 	ldbu	r3,-8(fp)
 8000d74:	008200b4 	movhi	r2,2050
 8000d78:	10ba9404 	addi	r2,r2,-5552
 8000d7c:	180690fa 	slli	r3,r3,3
 8000d80:	10c5883a 	add	r2,r2,r3
 8000d84:	10800017 	ldw	r2,0(r2)
 8000d88:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000d8c:	e0fffa17 	ldw	r3,-24(fp)
 8000d90:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8000d94:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000d98:	e0fffe03 	ldbu	r3,-8(fp)
 8000d9c:	008200b4 	movhi	r2,2050
 8000da0:	10ba9404 	addi	r2,r2,-5552
 8000da4:	180690fa 	slli	r3,r3,3
 8000da8:	10c5883a 	add	r2,r2,r3
 8000dac:	10800017 	ldw	r2,0(r2)
 8000db0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000db4:	e0fffa17 	ldw	r3,-24(fp)
 8000db8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8000dbc:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000dc0:	e0fffe03 	ldbu	r3,-8(fp)
 8000dc4:	008200b4 	movhi	r2,2050
 8000dc8:	10ba9404 	addi	r2,r2,-5552
 8000dcc:	180690fa 	slli	r3,r3,3
 8000dd0:	10c5883a 	add	r2,r2,r3
 8000dd4:	10800017 	ldw	r2,0(r2)
 8000dd8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000ddc:	e0fffa17 	ldw	r3,-24(fp)
 8000de0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8000de4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000de8:	e0fffe03 	ldbu	r3,-8(fp)
 8000dec:	e0bffc43 	ldbu	r2,-15(fp)
 8000df0:	d8000415 	stw	zero,16(sp)
 8000df4:	d8000315 	stw	zero,12(sp)
 8000df8:	d8000215 	stw	zero,8(sp)
 8000dfc:	d8000115 	stw	zero,4(sp)
 8000e00:	d8800015 	stw	r2,0(sp)
 8000e04:	01c00244 	movi	r7,9
 8000e08:	000d883a 	mov	r6,zero
 8000e0c:	000b883a 	mov	r5,zero
 8000e10:	1809883a 	mov	r4,r3
 8000e14:	80018400 	call	8001840 <XferCtrlReq>
 8000e18:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8000e1c:	e0bffc03 	ldbu	r2,-16(fp)
 8000e20:	10000226 	beq	r2,zero,8000e2c <HIDKProbe+0x364>
							return (FALSE);
 8000e24:	0005883a 	mov	r2,zero
 8000e28:	00002406 	br	8000ebc <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000e2c:	e0fffe03 	ldbu	r3,-8(fp)
 8000e30:	d0a75143 	ldbu	r2,-25275(gp)
 8000e34:	10803fcc 	andi	r2,r2,255
 8000e38:	d8000415 	stw	zero,16(sp)
 8000e3c:	d8000315 	stw	zero,12(sp)
 8000e40:	d8800215 	stw	r2,8(sp)
 8000e44:	d8000115 	stw	zero,4(sp)
 8000e48:	d8000015 	stw	zero,0(sp)
 8000e4c:	01c002c4 	movi	r7,11
 8000e50:	01800844 	movi	r6,33
 8000e54:	000b883a 	mov	r5,zero
 8000e58:	1809883a 	mov	r4,r3
 8000e5c:	80018400 	call	8001840 <XferCtrlReq>
 8000e60:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000e64:	e0bffc03 	ldbu	r2,-16(fp)
 8000e68:	10000226 	beq	r2,zero,8000e74 <HIDKProbe+0x3ac>
							return (FALSE);
 8000e6c:	0005883a 	mov	r2,zero
 8000e70:	00001206 	br	8000ebc <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8000e74:	00800044 	movi	r2,1
 8000e78:	00001006 	br	8000ebc <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8000e7c:	e0fff90b 	ldhu	r3,-28(fp)
 8000e80:	008200b4 	movhi	r2,2050
 8000e84:	10ba5404 	addi	r2,r2,-5808
 8000e88:	1885883a 	add	r2,r3,r2
 8000e8c:	e0fffb17 	ldw	r3,-20(fp)
 8000e90:	18bf9f36 	bltu	r3,r2,8000d10 <__alt_data_end+0xfc000d10>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000e94:	00000206 	br	8000ea0 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8000e98:	0005883a 	mov	r2,zero
 8000e9c:	00000706 	br	8000ebc <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000ea0:	e0fff90b 	ldhu	r3,-28(fp)
 8000ea4:	008200b4 	movhi	r2,2050
 8000ea8:	10ba5404 	addi	r2,r2,-5808
 8000eac:	1885883a 	add	r2,r3,r2
 8000eb0:	e0fffb17 	ldw	r3,-20(fp)
 8000eb4:	18bf4736 	bltu	r3,r2,8000bd4 <__alt_data_end+0xfc000bd4>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000eb8:	0005883a 	mov	r2,zero
}
 8000ebc:	e037883a 	mov	sp,fp
 8000ec0:	dfc00117 	ldw	ra,4(sp)
 8000ec4:	df000017 	ldw	fp,0(sp)
 8000ec8:	dec00204 	addi	sp,sp,8
 8000ecc:	f800283a 	ret

08000ed0 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8000ed0:	deffff04 	addi	sp,sp,-4
 8000ed4:	df000015 	stw	fp,0(sp)
 8000ed8:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8000edc:	008200b4 	movhi	r2,2050
 8000ee0:	10ba4004 	addi	r2,r2,-5888
 8000ee4:	00c01004 	movi	r3,64
 8000ee8:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8000eec:	008200b4 	movhi	r2,2050
 8000ef0:	10ba4004 	addi	r2,r2,-5888
 8000ef4:	00c00404 	movi	r3,16
 8000ef8:	10c00385 	stb	r3,14(r2)
}
 8000efc:	0001883a 	nop
 8000f00:	e037883a 	mov	sp,fp
 8000f04:	df000017 	ldw	fp,0(sp)
 8000f08:	dec00104 	addi	sp,sp,4
 8000f0c:	f800283a 	ret

08000f10 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8000f10:	defffb04 	addi	sp,sp,-20
 8000f14:	dfc00415 	stw	ra,16(sp)
 8000f18:	df000315 	stw	fp,12(sp)
 8000f1c:	df000304 	addi	fp,sp,12
 8000f20:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000f24:	d0a75103 	ldbu	r2,-25276(gp)
 8000f28:	10803fcc 	andi	r2,r2,255
 8000f2c:	100b883a 	mov	r5,r2
 8000f30:	01003804 	movi	r4,224
 8000f34:	80010ec0 	call	80010ec <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000f38:	d0a75103 	ldbu	r2,-25276(gp)
 8000f3c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000f40:	d0a75103 	ldbu	r2,-25276(gp)
 8000f44:	10c03fcc 	andi	r3,r2,255
 8000f48:	008200b4 	movhi	r2,2050
 8000f4c:	10ba9404 	addi	r2,r2,-5552
 8000f50:	180690fa 	slli	r3,r3,3
 8000f54:	10c5883a 	add	r2,r2,r3
 8000f58:	10800017 	ldw	r2,0(r2)
 8000f5c:	10800204 	addi	r2,r2,8
 8000f60:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000f64:	10803fcc 	andi	r2,r2,255
 8000f68:	d8800015 	stw	r2,0(sp)
 8000f6c:	e1ffff17 	ldw	r7,-4(fp)
 8000f70:	01800204 	movi	r6,8
 8000f74:	01400044 	movi	r5,1
 8000f78:	8001c640 	call	8001c64 <XferInTransfer>
 8000f7c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8000f80:	e0bffe03 	ldbu	r2,-8(fp)
}
 8000f84:	e037883a 	mov	sp,fp
 8000f88:	dfc00117 	ldw	ra,4(sp)
 8000f8c:	df000017 	ldw	fp,0(sp)
 8000f90:	dec00204 	addi	sp,sp,8
 8000f94:	f800283a 	ret

08000f98 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8000f98:	defffb04 	addi	sp,sp,-20
 8000f9c:	dfc00415 	stw	ra,16(sp)
 8000fa0:	df000315 	stw	fp,12(sp)
 8000fa4:	df000304 	addi	fp,sp,12
 8000fa8:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8000fac:	d0a75103 	ldbu	r2,-25276(gp)
 8000fb0:	10803fcc 	andi	r2,r2,255
 8000fb4:	100b883a 	mov	r5,r2
 8000fb8:	01003804 	movi	r4,224
 8000fbc:	80010ec0 	call	80010ec <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000fc0:	d0a75103 	ldbu	r2,-25276(gp)
 8000fc4:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8000fc8:	d0a75103 	ldbu	r2,-25276(gp)
 8000fcc:	10c03fcc 	andi	r3,r2,255
 8000fd0:	008200b4 	movhi	r2,2050
 8000fd4:	10ba9404 	addi	r2,r2,-5552
 8000fd8:	180690fa 	slli	r3,r3,3
 8000fdc:	10c5883a 	add	r2,r2,r3
 8000fe0:	10800017 	ldw	r2,0(r2)
 8000fe4:	10800204 	addi	r2,r2,8
 8000fe8:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8000fec:	10803fcc 	andi	r2,r2,255
 8000ff0:	d8800015 	stw	r2,0(sp)
 8000ff4:	e1ffff17 	ldw	r7,-4(fp)
 8000ff8:	01800204 	movi	r6,8
 8000ffc:	01400044 	movi	r5,1
 8001000:	8001c640 	call	8001c64 <XferInTransfer>
 8001004:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8001008:	e0bffe03 	ldbu	r2,-8(fp)
}
 800100c:	e037883a 	mov	sp,fp
 8001010:	dfc00117 	ldw	ra,4(sp)
 8001014:	df000017 	ldw	fp,0(sp)
 8001018:	dec00204 	addi	sp,sp,8
 800101c:	f800283a 	ret

08001020 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001020:	defffb04 	addi	sp,sp,-20
 8001024:	df000415 	stw	fp,16(sp)
 8001028:	df000404 	addi	fp,sp,16
 800102c:	2007883a 	mov	r3,r4
 8001030:	2805883a 	mov	r2,r5
 8001034:	e1bffe15 	stw	r6,-8(fp)
 8001038:	e1ffff15 	stw	r7,-4(fp)
 800103c:	e0fffc05 	stb	r3,-16(fp)
 8001040:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8001044:	0005883a 	mov	r2,zero
}
 8001048:	e037883a 	mov	sp,fp
 800104c:	df000017 	ldw	fp,0(sp)
 8001050:	dec00104 	addi	sp,sp,4
 8001054:	f800283a 	ret

08001058 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8001058:	defffb04 	addi	sp,sp,-20
 800105c:	df000415 	stw	fp,16(sp)
 8001060:	df000404 	addi	fp,sp,16
 8001064:	2007883a 	mov	r3,r4
 8001068:	2805883a 	mov	r2,r5
 800106c:	e1bffe15 	stw	r6,-8(fp)
 8001070:	e1ffff15 	stw	r7,-4(fp)
 8001074:	e0fffc05 	stb	r3,-16(fp)
 8001078:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 800107c:	0005883a 	mov	r2,zero
}
 8001080:	e037883a 	mov	sp,fp
 8001084:	df000017 	ldw	fp,0(sp)
 8001088:	dec00104 	addi	sp,sp,4
 800108c:	f800283a 	ret

08001090 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001090:	defffc04 	addi	sp,sp,-16
 8001094:	df000315 	stw	fp,12(sp)
 8001098:	df000304 	addi	fp,sp,12
 800109c:	2807883a 	mov	r3,r5
 80010a0:	3005883a 	mov	r2,r6
 80010a4:	e13ffd05 	stb	r4,-12(fp)
 80010a8:	e0fffe05 	stb	r3,-8(fp)
 80010ac:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 80010b0:	0001883a 	nop
 80010b4:	e037883a 	mov	sp,fp
 80010b8:	df000017 	ldw	fp,0(sp)
 80010bc:	dec00104 	addi	sp,sp,4
 80010c0:	f800283a 	ret

080010c4 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 80010c4:	defffe04 	addi	sp,sp,-8
 80010c8:	df000115 	stw	fp,4(sp)
 80010cc:	df000104 	addi	fp,sp,4
 80010d0:	2005883a 	mov	r2,r4
 80010d4:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 80010d8:	0001883a 	nop
 80010dc:	e037883a 	mov	sp,fp
 80010e0:	df000017 	ldw	fp,0(sp)
 80010e4:	dec00104 	addi	sp,sp,4
 80010e8:	f800283a 	ret

080010ec <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 80010ec:	defff704 	addi	sp,sp,-36
 80010f0:	dfc00815 	stw	ra,32(sp)
 80010f4:	df000715 	stw	fp,28(sp)
 80010f8:	df000704 	addi	fp,sp,28
 80010fc:	2007883a 	mov	r3,r4
 8001100:	2805883a 	mov	r2,r5
 8001104:	e0fffe05 	stb	r3,-8(fp)
 8001108:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 write_buf[2];
	write_buf[0] = reg + 2;	// addr to write at
 800110c:	e0bffe03 	ldbu	r2,-8(fp)
 8001110:	10800084 	addi	r2,r2,2
 8001114:	e0bffd05 	stb	r2,-12(fp)
	//write val via SPI
	write_buf[1] = val;	// val to write
 8001118:	e0bfff03 	ldbu	r2,-4(fp)
 800111c:	e0bffd45 	stb	r2,-11(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2, &write_buf[0], 0, NULL, 0);
 8001120:	e0bffd04 	addi	r2,fp,-12
 8001124:	d8000215 	stw	zero,8(sp)
 8001128:	d8000115 	stw	zero,4(sp)
 800112c:	d8000015 	stw	zero,0(sp)
 8001130:	100f883a 	mov	r7,r2
 8001134:	01800084 	movi	r6,2
 8001138:	000b883a 	mov	r5,zero
 800113c:	01005004 	movi	r4,320
 8001140:	8018fd00 	call	8018fd0 <alt_avalon_spi_command>
 8001144:	e0bffc15 	stw	r2,-16(fp)
	//if return code < 0 print an error
	if (return_code < 0) {
 8001148:	e0bffc17 	ldw	r2,-16(fp)
 800114c:	1000040e 	bge	r2,zero,8001160 <MAXreg_wr+0x74>
		printf("MAXreg_wr() error: return code = %d\n", return_code);
 8001150:	e17ffc17 	ldw	r5,-16(fp)
 8001154:	010200b4 	movhi	r4,2050
 8001158:	212a8304 	addi	r4,r4,-22004
 800115c:	800b7680 	call	800b768 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 8001160:	0001883a 	nop
 8001164:	e037883a 	mov	sp,fp
 8001168:	dfc00117 	ldw	ra,4(sp)
 800116c:	df000017 	ldw	fp,0(sp)
 8001170:	dec00204 	addi	sp,sp,8
 8001174:	f800283a 	ret

08001178 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8001178:	defff304 	addi	sp,sp,-52
 800117c:	dfc00c15 	stw	ra,48(sp)
 8001180:	df000b15 	stw	fp,44(sp)
 8001184:	dc000a15 	stw	r16,40(sp)
 8001188:	df000b04 	addi	fp,sp,44
 800118c:	201b883a 	mov	r13,r4
 8001190:	2809883a 	mov	r4,r5
 8001194:	e1bffe15 	stw	r6,-8(fp)
 8001198:	e37ffc05 	stb	r13,-16(fp)
 800119c:	e13ffd05 	stb	r4,-12(fp)
 80011a0:	d809883a 	mov	r4,sp
 80011a4:	2021883a 	mov	r16,r4
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 write_buf[nbytes + 1];
 80011a8:	e13ffd03 	ldbu	r4,-12(fp)
 80011ac:	21000044 	addi	r4,r4,1
 80011b0:	217fffc4 	addi	r5,r4,-1
 80011b4:	e17ff915 	stw	r5,-28(fp)
 80011b8:	200b883a 	mov	r5,r4
 80011bc:	2817883a 	mov	r11,r5
 80011c0:	0019883a 	mov	r12,zero
 80011c4:	580ad77a 	srli	r5,r11,29
 80011c8:	601090fa 	slli	r8,r12,3
 80011cc:	2a10b03a 	or	r8,r5,r8
 80011d0:	580e90fa 	slli	r7,r11,3
 80011d4:	200b883a 	mov	r5,r4
 80011d8:	2813883a 	mov	r9,r5
 80011dc:	0015883a 	mov	r10,zero
 80011e0:	480ad77a 	srli	r5,r9,29
 80011e4:	500690fa 	slli	r3,r10,3
 80011e8:	28c6b03a 	or	r3,r5,r3
 80011ec:	480490fa 	slli	r2,r9,3
 80011f0:	2005883a 	mov	r2,r4
 80011f4:	108000c4 	addi	r2,r2,3
 80011f8:	1004d0ba 	srli	r2,r2,2
 80011fc:	1085883a 	add	r2,r2,r2
 8001200:	1085883a 	add	r2,r2,r2
 8001204:	d8b7c83a 	sub	sp,sp,r2
 8001208:	d8800304 	addi	r2,sp,12
 800120c:	1005883a 	mov	r2,r2
 8001210:	e0bffa15 	stw	r2,-24(fp)
	write_buf[0] = reg + 2;	// addr to write at
 8001214:	e0bffc03 	ldbu	r2,-16(fp)
 8001218:	10800084 	addi	r2,r2,2
 800121c:	1007883a 	mov	r3,r2
 8001220:	e0bffa17 	ldw	r2,-24(fp)
 8001224:	10c00005 	stb	r3,0(r2)
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	for (BYTE i = 1; i < nbytes + 1; i++) {
 8001228:	00800044 	movi	r2,1
 800122c:	e0bff805 	stb	r2,-32(fp)
 8001230:	00000c06 	br	8001264 <MAXbytes_wr+0xec>
		// Check if the iteration is as expected:
		//printf("Storing to write_buf[%u] the val data[%u] = %u\n", i, i - 1, data[i - 1]);
		write_buf[i] = data[i - 1];
 8001234:	e0bff803 	ldbu	r2,-32(fp)
 8001238:	e0fff803 	ldbu	r3,-32(fp)
 800123c:	18ffffc4 	addi	r3,r3,-1
 8001240:	e13ffe17 	ldw	r4,-8(fp)
 8001244:	20c7883a 	add	r3,r4,r3
 8001248:	18c00003 	ldbu	r3,0(r3)
 800124c:	e13ffa17 	ldw	r4,-24(fp)
 8001250:	2085883a 	add	r2,r4,r2
 8001254:	10c00005 	stb	r3,0(r2)
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	alt_u8 write_buf[nbytes + 1];
	write_buf[0] = reg + 2;	// addr to write at
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	for (BYTE i = 1; i < nbytes + 1; i++) {
 8001258:	e0bff803 	ldbu	r2,-32(fp)
 800125c:	10800044 	addi	r2,r2,1
 8001260:	e0bff805 	stb	r2,-32(fp)
 8001264:	e0fff803 	ldbu	r3,-32(fp)
 8001268:	e0bffd03 	ldbu	r2,-12(fp)
 800126c:	10800044 	addi	r2,r2,1
 8001270:	18bff016 	blt	r3,r2,8001234 <__alt_data_end+0xfc001234>
		// Check if the iteration is as expected:
		//printf("Storing to write_buf[%u] the val data[%u] = %u\n", i, i - 1, data[i - 1]);
		write_buf[i] = data[i - 1];
	}
	//read return code from SPI peripheral (see Intel documentation) 
	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1, &write_buf[0], 0, NULL, 0);
 8001274:	e0bffd03 	ldbu	r2,-12(fp)
 8001278:	10800044 	addi	r2,r2,1
 800127c:	1007883a 	mov	r3,r2
 8001280:	e0bffa17 	ldw	r2,-24(fp)
 8001284:	d8000215 	stw	zero,8(sp)
 8001288:	d8000115 	stw	zero,4(sp)
 800128c:	d8000015 	stw	zero,0(sp)
 8001290:	100f883a 	mov	r7,r2
 8001294:	180d883a 	mov	r6,r3
 8001298:	000b883a 	mov	r5,zero
 800129c:	01005004 	movi	r4,320
 80012a0:	8018fd00 	call	8018fd0 <alt_avalon_spi_command>
 80012a4:	e0bffb15 	stw	r2,-20(fp)
	//if return code < 0  print an error
	if (return_code < 0) {
 80012a8:	e0bffb17 	ldw	r2,-20(fp)
 80012ac:	1000040e 	bge	r2,zero,80012c0 <MAXbytes_wr+0x148>
		printf("MAXbytes_wr() error: return code = %d\n", return_code);
 80012b0:	e17ffb17 	ldw	r5,-20(fp)
 80012b4:	010200b4 	movhi	r4,2050
 80012b8:	212a8d04 	addi	r4,r4,-21964
 80012bc:	800b7680 	call	800b768 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return (data + nbytes);
 80012c0:	e0bffd03 	ldbu	r2,-12(fp)
 80012c4:	e0fffe17 	ldw	r3,-8(fp)
 80012c8:	1885883a 	add	r2,r3,r2
 80012cc:	8037883a 	mov	sp,r16
}
 80012d0:	e6ffff04 	addi	sp,fp,-4
 80012d4:	dfc00217 	ldw	ra,8(sp)
 80012d8:	df000117 	ldw	fp,4(sp)
 80012dc:	dc000017 	ldw	r16,0(sp)
 80012e0:	dec00304 	addi	sp,sp,12
 80012e4:	f800283a 	ret

080012e8 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 80012e8:	defff804 	addi	sp,sp,-32
 80012ec:	dfc00715 	stw	ra,28(sp)
 80012f0:	df000615 	stw	fp,24(sp)
 80012f4:	df000604 	addi	fp,sp,24
 80012f8:	2005883a 	mov	r2,r4
 80012fc:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	//printf("Read at %u\n", reg);
	alt_u8 write_data[1];
	write_data[0] = reg;
 8001300:	e0bfff03 	ldbu	r2,-4(fp)
 8001304:	e0bffe05 	stb	r2,-8(fp)
	//read val via SPI
	alt_u8 read_val[1];
	//read return code from SPI peripheral (see Intel documentation)
	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &write_data[0], 1, &read_val[0], 0);
 8001308:	e0fffe04 	addi	r3,fp,-8
 800130c:	d8000215 	stw	zero,8(sp)
 8001310:	e0bffe44 	addi	r2,fp,-7
 8001314:	d8800115 	stw	r2,4(sp)
 8001318:	00800044 	movi	r2,1
 800131c:	d8800015 	stw	r2,0(sp)
 8001320:	180f883a 	mov	r7,r3
 8001324:	01800044 	movi	r6,1
 8001328:	000b883a 	mov	r5,zero
 800132c:	01005004 	movi	r4,320
 8001330:	8018fd00 	call	8018fd0 <alt_avalon_spi_command>
 8001334:	e0bffd15 	stw	r2,-12(fp)
	//if return code < 0 print an error
	if (return_code < 0) {
 8001338:	e0bffd17 	ldw	r2,-12(fp)
 800133c:	1000040e 	bge	r2,zero,8001350 <MAXreg_rd+0x68>
		printf("MAXreg_rd() error: return code = %d\n", return_code);
 8001340:	e17ffd17 	ldw	r5,-12(fp)
 8001344:	010200b4 	movhi	r4,2050
 8001348:	212a9704 	addi	r4,r4,-21924
 800134c:	800b7680 	call	800b768 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	return read_val[0];
 8001350:	e0bffe43 	ldbu	r2,-7(fp)
}
 8001354:	e037883a 	mov	sp,fp
 8001358:	dfc00117 	ldw	ra,4(sp)
 800135c:	df000017 	ldw	fp,0(sp)
 8001360:	dec00204 	addi	sp,sp,8
 8001364:	f800283a 	ret

08001368 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8001368:	defff604 	addi	sp,sp,-40
 800136c:	dfc00915 	stw	ra,36(sp)
 8001370:	df000815 	stw	fp,32(sp)
 8001374:	df000804 	addi	fp,sp,32
 8001378:	2007883a 	mov	r3,r4
 800137c:	2805883a 	mov	r2,r5
 8001380:	e1bfff15 	stw	r6,-4(fp)
 8001384:	e0fffd05 	stb	r3,-12(fp)
 8001388:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	alt_u8 write_data[1];
	write_data[0] = reg;
 800138c:	e0bffd03 	ldbu	r2,-12(fp)
 8001390:	e0bffc05 	stb	r2,-16(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	int return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1, &write_data[0], nbytes, data, 0);
 8001394:	e0bffe03 	ldbu	r2,-8(fp)
 8001398:	e13ffc04 	addi	r4,fp,-16
 800139c:	d8000215 	stw	zero,8(sp)
 80013a0:	e0ffff17 	ldw	r3,-4(fp)
 80013a4:	d8c00115 	stw	r3,4(sp)
 80013a8:	d8800015 	stw	r2,0(sp)
 80013ac:	200f883a 	mov	r7,r4
 80013b0:	01800044 	movi	r6,1
 80013b4:	000b883a 	mov	r5,zero
 80013b8:	01005004 	movi	r4,320
 80013bc:	8018fd00 	call	8018fd0 <alt_avalon_spi_command>
 80013c0:	e0bffb15 	stw	r2,-20(fp)
	//if return code < 0 print an error
	if (return_code < 0) {
 80013c4:	e0bffb17 	ldw	r2,-20(fp)
 80013c8:	1000040e 	bge	r2,zero,80013dc <MAXbytes_rd+0x74>
		printf("MAXbytes_rd() error: return code = %d\n", return_code);
 80013cc:	e17ffb17 	ldw	r5,-20(fp)
 80013d0:	010200b4 	movhi	r4,2050
 80013d4:	212aa104 	addi	r4,r4,-21884
 80013d8:	800b7680 	call	800b768 <printf>
	}
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	return (data + nbytes);
 80013dc:	e0bffe03 	ldbu	r2,-8(fp)
 80013e0:	e0ffff17 	ldw	r3,-4(fp)
 80013e4:	1885883a 	add	r2,r3,r2
}
 80013e8:	e037883a 	mov	sp,fp
 80013ec:	dfc00117 	ldw	ra,4(sp)
 80013f0:	df000017 	ldw	fp,0(sp)
 80013f4:	dec00204 	addi	sp,sp,8
 80013f8:	f800283a 	ret

080013fc <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 80013fc:	defffd04 	addi	sp,sp,-12
 8001400:	dfc00215 	stw	ra,8(sp)
 8001404:	df000115 	stw	fp,4(sp)
 8001408:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 800140c:	0007883a 	mov	r3,zero
 8001410:	00807c04 	movi	r2,496
 8001414:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8001418:	010003f4 	movhi	r4,15
 800141c:	21109004 	addi	r4,r4,16960
 8001420:	80167080 	call	8016708 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8001424:	00c00044 	movi	r3,1
 8001428:	00807c04 	movi	r2,496
 800142c:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8001430:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8001434:	01400804 	movi	r5,32
 8001438:	01001e04 	movi	r4,120
 800143c:	80010ec0 	call	80010ec <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8001440:	000b883a 	mov	r5,zero
 8001444:	01001e04 	movi	r4,120
 8001448:	80010ec0 	call	80010ec <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 800144c:	00000806 	br	8001470 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 8001450:	e0bfff03 	ldbu	r2,-4(fp)
 8001454:	10800044 	addi	r2,r2,1
 8001458:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 800145c:	e0bfff03 	ldbu	r2,-4(fp)
 8001460:	1000031e 	bne	r2,zero,8001470 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 8001464:	010200b4 	movhi	r4,2050
 8001468:	212aab04 	addi	r4,r4,-21844
 800146c:	800b7680 	call	800b768 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001470:	01001a04 	movi	r4,104
 8001474:	80012e80 	call	80012e8 <MAXreg_rd>
 8001478:	10803fcc 	andi	r2,r2,255
 800147c:	1080004c 	andi	r2,r2,1
 8001480:	103ff326 	beq	r2,zero,8001450 <__alt_data_end+0xfc001450>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 8001484:	0001883a 	nop
 8001488:	e037883a 	mov	sp,fp
 800148c:	dfc00117 	ldw	ra,4(sp)
 8001490:	df000017 	ldw	fp,0(sp)
 8001494:	dec00204 	addi	sp,sp,8
 8001498:	f800283a 	ret

0800149c <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 800149c:	defffe04 	addi	sp,sp,-8
 80014a0:	df000115 	stw	fp,4(sp)
 80014a4:	df000104 	addi	fp,sp,4
 80014a8:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 80014ac:	00800044 	movi	r2,1
}
 80014b0:	e037883a 	mov	sp,fp
 80014b4:	df000017 	ldw	fp,0(sp)
 80014b8:	dec00104 	addi	sp,sp,4
 80014bc:	f800283a 	ret

080014c0 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 80014c0:	defffd04 	addi	sp,sp,-12
 80014c4:	dfc00215 	stw	ra,8(sp)
 80014c8:	df000115 	stw	fp,4(sp)
 80014cc:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 80014d0:	01003e04 	movi	r4,248
 80014d4:	80012e80 	call	80012e8 <MAXreg_rd>
 80014d8:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80014dc:	e0ffff03 	ldbu	r3,-4(fp)
 80014e0:	00bff004 	movi	r2,-64
 80014e4:	1884703a 	and	r2,r3,r2
 80014e8:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80014ec:	e0bfff03 	ldbu	r2,-4(fp)
 80014f0:	10c01020 	cmpeqi	r3,r2,64
 80014f4:	1800221e 	bne	r3,zero,8001580 <MAX_busprobe+0xc0>
 80014f8:	10c01048 	cmpgei	r3,r2,65
 80014fc:	1800021e 	bne	r3,zero,8001508 <MAX_busprobe+0x48>
 8001500:	10003b26 	beq	r2,zero,80015f0 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001504:	00004a06 	br	8001630 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001508:	10c02020 	cmpeqi	r3,r2,128
 800150c:	1800031e 	bne	r3,zero,800151c <MAX_busprobe+0x5c>
 8001510:	10803020 	cmpeqi	r2,r2,192
 8001514:	1000331e 	bne	r2,zero,80015e4 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001518:	00004506 	br	8001630 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 800151c:	d0a00203 	ldbu	r2,-32760(gp)
 8001520:	10803fcc 	andi	r2,r2,255
 8001524:	108004e0 	cmpeqi	r2,r2,19
 8001528:	10003e1e 	bne	r2,zero,8001624 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 800152c:	01003604 	movi	r4,216
 8001530:	80012e80 	call	80012e8 <MAXreg_rd>
 8001534:	10803fcc 	andi	r2,r2,255
 8001538:	1080008c 	andi	r2,r2,2
 800153c:	1000071e 	bne	r2,zero,800155c <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001540:	01403244 	movi	r5,201
 8001544:	01003604 	movi	r4,216
 8001548:	80010ec0 	call	80010ec <MAXreg_wr>
				printf("Starting in full speed\n");
 800154c:	010200b4 	movhi	r4,2050
 8001550:	212aaf04 	addi	r4,r4,-21828
 8001554:	800b8640 	call	800b864 <puts>
 8001558:	00000606 	br	8001574 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 800155c:	014032c4 	movi	r5,203
 8001560:	01003604 	movi	r4,216
 8001564:	80010ec0 	call	80010ec <MAXreg_wr>
				printf("Starting in low speed\n");
 8001568:	010200b4 	movhi	r4,2050
 800156c:	212ab504 	addi	r4,r4,-21804
 8001570:	800b8640 	call	800b864 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001574:	00800404 	movi	r2,16
 8001578:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 800157c:	00002906 	br	8001624 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001580:	d0a00203 	ldbu	r2,-32760(gp)
 8001584:	10803fcc 	andi	r2,r2,255
 8001588:	108004e0 	cmpeqi	r2,r2,19
 800158c:	1000271e 	bne	r2,zero,800162c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001590:	01003604 	movi	r4,216
 8001594:	80012e80 	call	80012e8 <MAXreg_rd>
 8001598:	10803fcc 	andi	r2,r2,255
 800159c:	1080008c 	andi	r2,r2,2
 80015a0:	1000071e 	bne	r2,zero,80015c0 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 80015a4:	014032c4 	movi	r5,203
 80015a8:	01003604 	movi	r4,216
 80015ac:	80010ec0 	call	80010ec <MAXreg_wr>
				printf("Starting in low speed\n");
 80015b0:	010200b4 	movhi	r4,2050
 80015b4:	212ab504 	addi	r4,r4,-21804
 80015b8:	800b8640 	call	800b864 <puts>
 80015bc:	00000606 	br	80015d8 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80015c0:	01403244 	movi	r5,201
 80015c4:	01003604 	movi	r4,216
 80015c8:	80010ec0 	call	80010ec <MAXreg_wr>
				printf("Starting in full speed\n");
 80015cc:	010200b4 	movhi	r4,2050
 80015d0:	212aaf04 	addi	r4,r4,-21828
 80015d4:	800b8640 	call	800b864 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80015d8:	00800404 	movi	r2,16
 80015dc:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 80015e0:	00001206 	br	800162c <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 80015e4:	00800104 	movi	r2,4
 80015e8:	d0a00205 	stb	r2,-32760(gp)
		break;
 80015ec:	00001006 	br	8001630 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80015f0:	d0a00203 	ldbu	r2,-32760(gp)
 80015f4:	10803fcc 	andi	r2,r2,255
 80015f8:	10803c0c 	andi	r2,r2,240
 80015fc:	10000326 	beq	r2,zero,800160c <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8001600:	00800044 	movi	r2,1
 8001604:	d0a00205 	stb	r2,-32760(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 8001608:	00000906 	br	8001630 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 800160c:	01403244 	movi	r5,201
 8001610:	01003604 	movi	r4,216
 8001614:	80010ec0 	call	80010ec <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8001618:	008000c4 	movi	r2,3
 800161c:	d0a00205 	stb	r2,-32760(gp)
		}
		break;
 8001620:	00000306 	br	8001630 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8001624:	0001883a 	nop
 8001628:	00000106 	br	8001630 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 800162c:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001630:	0001883a 	nop
 8001634:	e037883a 	mov	sp,fp
 8001638:	dfc00117 	ldw	ra,4(sp)
 800163c:	df000017 	ldw	fp,0(sp)
 8001640:	dec00204 	addi	sp,sp,8
 8001644:	f800283a 	ret

08001648 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8001648:	defffe04 	addi	sp,sp,-8
 800164c:	dfc00115 	stw	ra,4(sp)
 8001650:	df000015 	stw	fp,0(sp)
 8001654:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8001658:	01400684 	movi	r5,26
 800165c:	01002204 	movi	r4,136
 8001660:	80010ec0 	call	80010ec <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8001664:	80013fc0 	call	80013fc <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8001668:	0009883a 	mov	r4,zero
 800166c:	800149c0 	call	800149c <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8001670:	01402004 	movi	r5,128
 8001674:	01002e04 	movi	r4,184
 8001678:	80010ec0 	call	80010ec <MAXreg_wr>
	Vbus_power( ON);
 800167c:	01000044 	movi	r4,1
 8001680:	800149c0 	call	800149c <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8001684:	01403444 	movi	r5,209
 8001688:	01003604 	movi	r4,216
 800168c:	80010ec0 	call	80010ec <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8001690:	01400804 	movi	r5,32
 8001694:	01003404 	movi	r4,208
 8001698:	80010ec0 	call	80010ec <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 800169c:	01400104 	movi	r5,4
 80016a0:	01003a04 	movi	r4,232
 80016a4:	80010ec0 	call	80010ec <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 80016a8:	80014c00 	call	80014c0 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 80016ac:	01400804 	movi	r5,32
 80016b0:	01003204 	movi	r4,200
 80016b4:	80010ec0 	call	80010ec <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 80016b8:	01400044 	movi	r5,1
 80016bc:	01002004 	movi	r4,128
 80016c0:	80010ec0 	call	80010ec <MAXreg_wr>
}
 80016c4:	0001883a 	nop
 80016c8:	e037883a 	mov	sp,fp
 80016cc:	dfc00117 	ldw	ra,4(sp)
 80016d0:	df000017 	ldw	fp,0(sp)
 80016d4:	dec00204 	addi	sp,sp,8
 80016d8:	f800283a 	ret

080016dc <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 80016dc:	defffe04 	addi	sp,sp,-8
 80016e0:	dfc00115 	stw	ra,4(sp)
 80016e4:	df000015 	stw	fp,0(sp)
 80016e8:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80016ec:	00808404 	movi	r2,528
 80016f0:	10800037 	ldwio	r2,0(r2)
 80016f4:	1000041e 	bne	r2,zero,8001708 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 80016f8:	010200b4 	movhi	r4,2050
 80016fc:	212abb04 	addi	r4,r4,-21780
 8001700:	800b7680 	call	800b768 <printf>
		MaxIntHandler();
 8001704:	80017400 	call	8001740 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001708:	00808004 	movi	r2,512
 800170c:	10800037 	ldwio	r2,0(r2)
 8001710:	10800058 	cmpnei	r2,r2,1
 8001714:	1000041e 	bne	r2,zero,8001728 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 8001718:	010200b4 	movhi	r4,2050
 800171c:	212abf04 	addi	r4,r4,-21764
 8001720:	800b7680 	call	800b768 <printf>
		MaxGpxHandler();
 8001724:	800180c0 	call	800180c <MaxGpxHandler>
	}
}
 8001728:	0001883a 	nop
 800172c:	e037883a 	mov	sp,fp
 8001730:	dfc00117 	ldw	ra,4(sp)
 8001734:	df000017 	ldw	fp,0(sp)
 8001738:	dec00204 	addi	sp,sp,8
 800173c:	f800283a 	ret

08001740 <MaxIntHandler>:

void MaxIntHandler(void) {
 8001740:	defffd04 	addi	sp,sp,-12
 8001744:	dfc00215 	stw	ra,8(sp)
 8001748:	df000115 	stw	fp,4(sp)
 800174c:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8001750:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8001754:	01003204 	movi	r4,200
 8001758:	80012e80 	call	80012e8 <MAXreg_rd>
 800175c:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 8001760:	e0bfff43 	ldbu	r2,-3(fp)
 8001764:	100b883a 	mov	r5,r2
 8001768:	010200b4 	movhi	r4,2050
 800176c:	212ac304 	addi	r4,r4,-21748
 8001770:	800b7680 	call	800b768 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8001774:	e0bfff43 	ldbu	r2,-3(fp)
 8001778:	1080100c 	andi	r2,r2,64
 800177c:	10000326 	beq	r2,zero,800178c <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8001780:	e0bfff03 	ldbu	r2,-4(fp)
 8001784:	10801014 	ori	r2,r2,64
 8001788:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 800178c:	e0bfff43 	ldbu	r2,-3(fp)
 8001790:	1080080c 	andi	r2,r2,32
 8001794:	10000426 	beq	r2,zero,80017a8 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001798:	80014c00 	call	80014c0 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 800179c:	e0bfff03 	ldbu	r2,-4(fp)
 80017a0:	10800814 	ori	r2,r2,32
 80017a4:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 80017a8:	e0bfff43 	ldbu	r2,-3(fp)
 80017ac:	1080020c 	andi	r2,r2,8
 80017b0:	10000326 	beq	r2,zero,80017c0 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 80017b4:	000b883a 	mov	r5,zero
 80017b8:	01000e04 	movi	r4,56
 80017bc:	80010ec0 	call	80010ec <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 80017c0:	e0bfff43 	ldbu	r2,-3(fp)
 80017c4:	1080004c 	andi	r2,r2,1
 80017c8:	10000626 	beq	r2,zero,80017e4 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 80017cc:	d0a00203 	ldbu	r2,-32760(gp)
 80017d0:	10800044 	addi	r2,r2,1
 80017d4:	d0a00205 	stb	r2,-32760(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 80017d8:	e0bfff03 	ldbu	r2,-4(fp)
 80017dc:	10800054 	ori	r2,r2,1
 80017e0:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 80017e4:	e0bfff03 	ldbu	r2,-4(fp)
 80017e8:	100b883a 	mov	r5,r2
 80017ec:	01003204 	movi	r4,200
 80017f0:	80010ec0 	call	80010ec <MAXreg_wr>
}
 80017f4:	0001883a 	nop
 80017f8:	e037883a 	mov	sp,fp
 80017fc:	dfc00117 	ldw	ra,4(sp)
 8001800:	df000017 	ldw	fp,0(sp)
 8001804:	dec00204 	addi	sp,sp,8
 8001808:	f800283a 	ret

0800180c <MaxGpxHandler>:

void MaxGpxHandler(void) {
 800180c:	defffd04 	addi	sp,sp,-12
 8001810:	dfc00215 	stw	ra,8(sp)
 8001814:	df000115 	stw	fp,4(sp)
 8001818:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 800181c:	01002c04 	movi	r4,176
 8001820:	80012e80 	call	80012e8 <MAXreg_rd>
 8001824:	e0bfff05 	stb	r2,-4(fp)
}
 8001828:	0001883a 	nop
 800182c:	e037883a 	mov	sp,fp
 8001830:	dfc00117 	ldw	ra,4(sp)
 8001834:	df000017 	ldw	fp,0(sp)
 8001838:	dec00204 	addi	sp,sp,8
 800183c:	f800283a 	ret

08001840 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001840:	defff104 	addi	sp,sp,-60
 8001844:	dfc00e15 	stw	ra,56(sp)
 8001848:	df000d15 	stw	fp,52(sp)
 800184c:	df000d04 	addi	fp,sp,52
 8001850:	2015883a 	mov	r10,r4
 8001854:	2813883a 	mov	r9,r5
 8001858:	3011883a 	mov	r8,r6
 800185c:	380d883a 	mov	r6,r7
 8001860:	e1400217 	ldw	r5,8(fp)
 8001864:	e1000317 	ldw	r4,12(fp)
 8001868:	e0c00417 	ldw	r3,16(fp)
 800186c:	e0800517 	ldw	r2,20(fp)
 8001870:	e2bff805 	stb	r10,-32(fp)
 8001874:	e27ff905 	stb	r9,-28(fp)
 8001878:	e23ffa05 	stb	r8,-24(fp)
 800187c:	e1bffb05 	stb	r6,-20(fp)
 8001880:	e17ffc05 	stb	r5,-16(fp)
 8001884:	e13ffd05 	stb	r4,-12(fp)
 8001888:	e0fffe0d 	sth	r3,-8(fp)
 800188c:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8001890:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001894:	00800044 	movi	r2,1
 8001898:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 800189c:	e0800617 	ldw	r2,24(fp)
 80018a0:	1000011e 	bne	r2,zero,80018a8 <XferCtrlReq+0x68>
        datastage = 0;
 80018a4:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 80018a8:	e0bff803 	ldbu	r2,-32(fp)
 80018ac:	100b883a 	mov	r5,r2
 80018b0:	01003804 	movi	r4,224
 80018b4:	80010ec0 	call	80010ec <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 80018b8:	e0bffa03 	ldbu	r2,-24(fp)
 80018bc:	10803fcc 	andi	r2,r2,255
 80018c0:	1080201c 	xori	r2,r2,128
 80018c4:	10bfe004 	addi	r2,r2,-128
 80018c8:	1000020e 	bge	r2,zero,80018d4 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 80018cc:	00800044 	movi	r2,1
 80018d0:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 80018d4:	e0bffa03 	ldbu	r2,-24(fp)
 80018d8:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 80018dc:	e0bffb03 	ldbu	r2,-20(fp)
 80018e0:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 80018e4:	e0bffc03 	ldbu	r2,-16(fp)
 80018e8:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 80018ec:	e0bffd03 	ldbu	r2,-12(fp)
 80018f0:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 80018f4:	e0bffe0b 	ldhu	r2,-8(fp)
 80018f8:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 80018fc:	e0bfff0b 	ldhu	r2,-4(fp)
 8001900:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001904:	e0bff584 	addi	r2,fp,-42
 8001908:	100d883a 	mov	r6,r2
 800190c:	01400204 	movi	r5,8
 8001910:	01000804 	movi	r4,32
 8001914:	80011780 	call	8001178 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001918:	e0bff903 	ldbu	r2,-28(fp)
 800191c:	100b883a 	mov	r5,r2
 8001920:	01000404 	movi	r4,16
 8001924:	8001ae80 	call	8001ae8 <XferDispatchPkt>
 8001928:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 800192c:	e0bff543 	ldbu	r2,-43(fp)
 8001930:	10000226 	beq	r2,zero,800193c <XferCtrlReq+0xfc>
        return( rcode );
 8001934:	e0bff543 	ldbu	r2,-43(fp)
 8001938:	00000f06 	br	8001978 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 800193c:	e0bff503 	ldbu	r2,-44(fp)
 8001940:	1085883a 	add	r2,r2,r2
 8001944:	1087883a 	add	r3,r2,r2
 8001948:	d0a00004 	addi	r2,gp,-32768
 800194c:	1885883a 	add	r2,r3,r2
 8001950:	10800017 	ldw	r2,0(r2)
 8001954:	e13ff803 	ldbu	r4,-32(fp)
 8001958:	e17ff903 	ldbu	r5,-28(fp)
 800195c:	e1bfff0b 	ldhu	r6,-4(fp)
 8001960:	e0fff417 	ldw	r3,-48(fp)
 8001964:	d8c00015 	stw	r3,0(sp)
 8001968:	e1c00617 	ldw	r7,24(fp)
 800196c:	103ee83a 	callr	r2
 8001970:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8001974:	e0bff543 	ldbu	r2,-43(fp)
}
 8001978:	e037883a 	mov	sp,fp
 800197c:	dfc00117 	ldw	ra,4(sp)
 8001980:	df000017 	ldw	fp,0(sp)
 8001984:	dec00204 	addi	sp,sp,8
 8001988:	f800283a 	ret

0800198c <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 800198c:	defff804 	addi	sp,sp,-32
 8001990:	dfc00715 	stw	ra,28(sp)
 8001994:	df000615 	stw	fp,24(sp)
 8001998:	df000604 	addi	fp,sp,24
 800199c:	2807883a 	mov	r3,r5
 80019a0:	3005883a 	mov	r2,r6
 80019a4:	e1ffff15 	stw	r7,-4(fp)
 80019a8:	e13ffc05 	stb	r4,-16(fp)
 80019ac:	e0fffd05 	stb	r3,-12(fp)
 80019b0:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 80019b4:	e0800217 	ldw	r2,8(fp)
 80019b8:	10002826 	beq	r2,zero,8001a5c <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 80019bc:	e0fffc03 	ldbu	r3,-16(fp)
 80019c0:	008200b4 	movhi	r2,2050
 80019c4:	10ba9404 	addi	r2,r2,-5552
 80019c8:	180690fa 	slli	r3,r3,3
 80019cc:	10c5883a 	add	r2,r2,r3
 80019d0:	10c00017 	ldw	r3,0(r2)
 80019d4:	e0bffd03 	ldbu	r2,-12(fp)
 80019d8:	100490fa 	slli	r2,r2,3
 80019dc:	1885883a 	add	r2,r3,r2
 80019e0:	00c00804 	movi	r3,32
 80019e4:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 80019e8:	e13ffc03 	ldbu	r4,-16(fp)
 80019ec:	e17ffd03 	ldbu	r5,-12(fp)
 80019f0:	e1bffe0b 	ldhu	r6,-8(fp)
 80019f4:	e0fffc03 	ldbu	r3,-16(fp)
 80019f8:	008200b4 	movhi	r2,2050
 80019fc:	10ba9404 	addi	r2,r2,-5552
 8001a00:	180690fa 	slli	r3,r3,3
 8001a04:	10c5883a 	add	r2,r2,r3
 8001a08:	10c00017 	ldw	r3,0(r2)
 8001a0c:	e0bffd03 	ldbu	r2,-12(fp)
 8001a10:	100490fa 	slli	r2,r2,3
 8001a14:	1885883a 	add	r2,r3,r2
 8001a18:	1080008b 	ldhu	r2,2(r2)
 8001a1c:	10803fcc 	andi	r2,r2,255
 8001a20:	d8800015 	stw	r2,0(sp)
 8001a24:	e1ffff17 	ldw	r7,-4(fp)
 8001a28:	8001c640 	call	8001c64 <XferInTransfer>
 8001a2c:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8001a30:	e0bffb03 	ldbu	r2,-20(fp)
 8001a34:	10000226 	beq	r2,zero,8001a40 <XferCtrlData+0xb4>
        return( rcode );
 8001a38:	e0bffb03 	ldbu	r2,-20(fp)
 8001a3c:	00000806 	br	8001a60 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001a40:	e0bffd03 	ldbu	r2,-12(fp)
 8001a44:	100b883a 	mov	r5,r2
 8001a48:	01002804 	movi	r4,160
 8001a4c:	8001ae80 	call	8001ae8 <XferDispatchPkt>
 8001a50:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8001a54:	e0bffb03 	ldbu	r2,-20(fp)
 8001a58:	00000106 	br	8001a60 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001a5c:	00bfffc4 	movi	r2,-1
    }
}
 8001a60:	e037883a 	mov	sp,fp
 8001a64:	dfc00117 	ldw	ra,4(sp)
 8001a68:	df000017 	ldw	fp,0(sp)
 8001a6c:	dec00204 	addi	sp,sp,8
 8001a70:	f800283a 	ret

08001a74 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001a74:	defff904 	addi	sp,sp,-28
 8001a78:	dfc00615 	stw	ra,24(sp)
 8001a7c:	df000515 	stw	fp,20(sp)
 8001a80:	df000504 	addi	fp,sp,20
 8001a84:	2807883a 	mov	r3,r5
 8001a88:	3005883a 	mov	r2,r6
 8001a8c:	e1ffff15 	stw	r7,-4(fp)
 8001a90:	e13ffc05 	stb	r4,-16(fp)
 8001a94:	e0fffd05 	stb	r3,-12(fp)
 8001a98:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001a9c:	e0800217 	ldw	r2,8(fp)
 8001aa0:	10000626 	beq	r2,zero,8001abc <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001aa4:	e0bffd03 	ldbu	r2,-12(fp)
 8001aa8:	100b883a 	mov	r5,r2
 8001aac:	01002804 	movi	r4,160
 8001ab0:	8001ae80 	call	8001ae8 <XferDispatchPkt>
 8001ab4:	e0bffb05 	stb	r2,-20(fp)
 8001ab8:	00000506 	br	8001ad0 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001abc:	e0bffd03 	ldbu	r2,-12(fp)
 8001ac0:	100b883a 	mov	r5,r2
 8001ac4:	01002004 	movi	r4,128
 8001ac8:	8001ae80 	call	8001ae8 <XferDispatchPkt>
 8001acc:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 8001ad0:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001ad4:	e037883a 	mov	sp,fp
 8001ad8:	dfc00117 	ldw	ra,4(sp)
 8001adc:	df000017 	ldw	fp,0(sp)
 8001ae0:	dec00204 	addi	sp,sp,8
 8001ae4:	f800283a 	ret

08001ae8 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001ae8:	defff904 	addi	sp,sp,-28
 8001aec:	dfc00615 	stw	ra,24(sp)
 8001af0:	df000515 	stw	fp,20(sp)
 8001af4:	df000504 	addi	fp,sp,20
 8001af8:	2007883a 	mov	r3,r4
 8001afc:	2805883a 	mov	r2,r5
 8001b00:	e0fffe05 	stb	r3,-8(fp)
 8001b04:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b08:	d0a76717 	ldw	r2,-25188(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001b0c:	0140fa04 	movi	r5,1000
 8001b10:	1009883a 	mov	r4,r2
 8001b14:	800832c0 	call	800832c <__mulsi3>
 8001b18:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001b1c:	d0a76617 	ldw	r2,-25192(gp)
 8001b20:	100b883a 	mov	r5,r2
 8001b24:	1809883a 	mov	r4,r3
 8001b28:	80082700 	call	8008270 <__udivsi3>
 8001b2c:	1084e204 	addi	r2,r2,5000
 8001b30:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001b34:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8001b38:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001b3c:	e0fffe03 	ldbu	r3,-8(fp)
 8001b40:	e0bfff03 	ldbu	r2,-4(fp)
 8001b44:	1884b03a 	or	r2,r3,r2
 8001b48:	10803fcc 	andi	r2,r2,255
 8001b4c:	100b883a 	mov	r5,r2
 8001b50:	01003c04 	movi	r4,240
 8001b54:	80010ec0 	call	80010ec <MAXreg_wr>
        rcode = 0xff;
 8001b58:	00bfffc4 	movi	r2,-1
 8001b5c:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001b60:	00000d06 	br	8001b98 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8001b64:	01003204 	movi	r4,200
 8001b68:	80012e80 	call	80012e8 <MAXreg_rd>
 8001b6c:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001b70:	e0bffd03 	ldbu	r2,-12(fp)
 8001b74:	10803fcc 	andi	r2,r2,255
 8001b78:	1080201c 	xori	r2,r2,128
 8001b7c:	10bfe004 	addi	r2,r2,-128
 8001b80:	1000050e 	bge	r2,zero,8001b98 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001b84:	01402004 	movi	r5,128
 8001b88:	01003204 	movi	r4,200
 8001b8c:	80010ec0 	call	80010ec <MAXreg_wr>
                rcode = 0x00;
 8001b90:	e03ffb05 	stb	zero,-20(fp)
                break;
 8001b94:	00000c06 	br	8001bc8 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b98:	d0a76717 	ldw	r2,-25188(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001b9c:	0140fa04 	movi	r5,1000
 8001ba0:	1009883a 	mov	r4,r2
 8001ba4:	800832c0 	call	800832c <__mulsi3>
 8001ba8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001bac:	d0a76617 	ldw	r2,-25192(gp)
 8001bb0:	100b883a 	mov	r5,r2
 8001bb4:	1809883a 	mov	r4,r3
 8001bb8:	80082700 	call	8008270 <__udivsi3>
 8001bbc:	1007883a 	mov	r3,r2
 8001bc0:	e0bffc17 	ldw	r2,-16(fp)
 8001bc4:	18bfe736 	bltu	r3,r2,8001b64 <__alt_data_end+0xfc001b64>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001bc8:	e0bffb03 	ldbu	r2,-20(fp)
 8001bcc:	10000226 	beq	r2,zero,8001bd8 <XferDispatchPkt+0xf0>
            return( rcode );
 8001bd0:	e0bffb03 	ldbu	r2,-20(fp)
 8001bd4:	00001e06 	br	8001c50 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001bd8:	01003e04 	movi	r4,248
 8001bdc:	80012e80 	call	80012e8 <MAXreg_rd>
 8001be0:	108003cc 	andi	r2,r2,15
 8001be4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8001be8:	e0bffb03 	ldbu	r2,-20(fp)
 8001bec:	10800118 	cmpnei	r2,r2,4
 8001bf0:	1000071e 	bne	r2,zero,8001c10 <XferDispatchPkt+0x128>
            nak_count++;
 8001bf4:	e0bffb83 	ldbu	r2,-18(fp)
 8001bf8:	10800044 	addi	r2,r2,1
 8001bfc:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001c00:	e0bffb83 	ldbu	r2,-18(fp)
 8001c04:	10803218 	cmpnei	r2,r2,200
 8001c08:	10000b1e 	bne	r2,zero,8001c38 <XferDispatchPkt+0x150>
                break;
 8001c0c:	00000f06 	br	8001c4c <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001c10:	e0bffb03 	ldbu	r2,-20(fp)
 8001c14:	10800398 	cmpnei	r2,r2,14
 8001c18:	1000091e 	bne	r2,zero,8001c40 <XferDispatchPkt+0x158>
            retry_count++;
 8001c1c:	e0bffb43 	ldbu	r2,-19(fp)
 8001c20:	10800044 	addi	r2,r2,1
 8001c24:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001c28:	e0bffb47 	ldb	r2,-19(fp)
 8001c2c:	108000d8 	cmpnei	r2,r2,3
 8001c30:	10000526 	beq	r2,zero,8001c48 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8001c34:	00000106 	br	8001c3c <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8001c38:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8001c3c:	003fbf06 	br	8001b3c <__alt_data_end+0xfc001b3c>
            }
            else {
                continue;
            }
        }
        else break;
 8001c40:	0001883a 	nop
 8001c44:	00000106 	br	8001c4c <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8001c48:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8001c4c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001c50:	e037883a 	mov	sp,fp
 8001c54:	dfc00117 	ldw	ra,4(sp)
 8001c58:	df000017 	ldw	fp,0(sp)
 8001c5c:	dec00204 	addi	sp,sp,8
 8001c60:	f800283a 	ret

08001c64 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8001c64:	defff604 	addi	sp,sp,-40
 8001c68:	dfc00915 	stw	ra,36(sp)
 8001c6c:	df000815 	stw	fp,32(sp)
 8001c70:	df000804 	addi	fp,sp,32
 8001c74:	2011883a 	mov	r8,r4
 8001c78:	2809883a 	mov	r4,r5
 8001c7c:	3007883a 	mov	r3,r6
 8001c80:	e1fffe15 	stw	r7,-8(fp)
 8001c84:	e0800217 	ldw	r2,8(fp)
 8001c88:	e23ffb05 	stb	r8,-20(fp)
 8001c8c:	e13ffc05 	stb	r4,-16(fp)
 8001c90:	e0fffd0d 	sth	r3,-12(fp)
 8001c94:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8001c98:	e03ff80d 	sth	zero,-32(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8001c9c:	e0fffb03 	ldbu	r3,-20(fp)
 8001ca0:	008200b4 	movhi	r2,2050
 8001ca4:	10ba9404 	addi	r2,r2,-5552
 8001ca8:	180690fa 	slli	r3,r3,3
 8001cac:	10c5883a 	add	r2,r2,r3
 8001cb0:	10c00017 	ldw	r3,0(r2)
 8001cb4:	e0bffc03 	ldbu	r2,-16(fp)
 8001cb8:	100490fa 	slli	r2,r2,3
 8001cbc:	1885883a 	add	r2,r3,r2
 8001cc0:	10800183 	ldbu	r2,6(r2)
 8001cc4:	10803fcc 	andi	r2,r2,255
 8001cc8:	100b883a 	mov	r5,r2
 8001ccc:	01003a04 	movi	r4,232
 8001cd0:	80010ec0 	call	80010ec <MAXreg_wr>
    for(int i = 0; i < 50; i++) { // use a 'return' to exit this loop
 8001cd4:	e03ff915 	stw	zero,-28(fp)
 8001cd8:	00004706 	br	8001df8 <XferInTransfer+0x194>
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8001cdc:	e0bffc03 	ldbu	r2,-16(fp)
 8001ce0:	100b883a 	mov	r5,r2
 8001ce4:	0009883a 	mov	r4,zero
 8001ce8:	8001ae80 	call	8001ae8 <XferDispatchPkt>
 8001cec:	e0bffa05 	stb	r2,-24(fp)
        if( rcode ) {
 8001cf0:	e0bffa03 	ldbu	r2,-24(fp)
 8001cf4:	10000226 	beq	r2,zero,8001d00 <XferInTransfer+0x9c>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8001cf8:	e0bffa03 	ldbu	r2,-24(fp)
 8001cfc:	00004106 	br	8001e04 <XferInTransfer+0x1a0>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8001d00:	01003204 	movi	r4,200
 8001d04:	80012e80 	call	80012e8 <MAXreg_rd>
 8001d08:	10803fcc 	andi	r2,r2,255
 8001d0c:	1080010c 	andi	r2,r2,4
 8001d10:	1000021e 	bne	r2,zero,8001d1c <XferInTransfer+0xb8>
            return ( 0xf0 );                            //receive error
 8001d14:	00bffc04 	movi	r2,-16
 8001d18:	00003a06 	br	8001e04 <XferInTransfer+0x1a0>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8001d1c:	01000c04 	movi	r4,48
 8001d20:	80012e80 	call	80012e8 <MAXreg_rd>
 8001d24:	e0bffa45 	stb	r2,-23(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8001d28:	e0bffa43 	ldbu	r2,-23(fp)
 8001d2c:	e1bffe17 	ldw	r6,-8(fp)
 8001d30:	100b883a 	mov	r5,r2
 8001d34:	01000204 	movi	r4,8
 8001d38:	80013680 	call	8001368 <MAXbytes_rd>
 8001d3c:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8001d40:	01400104 	movi	r5,4
 8001d44:	01003204 	movi	r4,200
 8001d48:	80010ec0 	call	80010ec <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8001d4c:	e0fffa43 	ldbu	r3,-23(fp)
 8001d50:	e0bff80b 	ldhu	r2,-32(fp)
 8001d54:	1885883a 	add	r2,r3,r2
 8001d58:	e0bff80d 	sth	r2,-32(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8001d5c:	e0fffa43 	ldbu	r3,-23(fp)
 8001d60:	e0bfff03 	ldbu	r2,-4(fp)
 8001d64:	18800336 	bltu	r3,r2,8001d74 <XferInTransfer+0x110>
 8001d68:	e0fff80b 	ldhu	r3,-32(fp)
 8001d6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8001d70:	18801e36 	bltu	r3,r2,8001dec <XferInTransfer+0x188>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8001d74:	01003e04 	movi	r4,248
 8001d78:	80012e80 	call	80012e8 <MAXreg_rd>
 8001d7c:	10803fcc 	andi	r2,r2,255
 8001d80:	1080040c 	andi	r2,r2,16
 8001d84:	10000c26 	beq	r2,zero,8001db8 <XferInTransfer+0x154>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001d88:	e0fffb03 	ldbu	r3,-20(fp)
 8001d8c:	008200b4 	movhi	r2,2050
 8001d90:	10ba9404 	addi	r2,r2,-5552
 8001d94:	180690fa 	slli	r3,r3,3
 8001d98:	10c5883a 	add	r2,r2,r3
 8001d9c:	10c00017 	ldw	r3,0(r2)
 8001da0:	e0bffc03 	ldbu	r2,-16(fp)
 8001da4:	100490fa 	slli	r2,r2,3
 8001da8:	1885883a 	add	r2,r3,r2
 8001dac:	00c00804 	movi	r3,32
 8001db0:	10c00185 	stb	r3,6(r2)
 8001db4:	00000b06 	br	8001de4 <XferInTransfer+0x180>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8001db8:	e0fffb03 	ldbu	r3,-20(fp)
 8001dbc:	008200b4 	movhi	r2,2050
 8001dc0:	10ba9404 	addi	r2,r2,-5552
 8001dc4:	180690fa 	slli	r3,r3,3
 8001dc8:	10c5883a 	add	r2,r2,r3
 8001dcc:	10c00017 	ldw	r3,0(r2)
 8001dd0:	e0bffc03 	ldbu	r2,-16(fp)
 8001dd4:	100490fa 	slli	r2,r2,3
 8001dd8:	1885883a 	add	r2,r3,r2
 8001ddc:	00c00404 	movi	r3,16
 8001de0:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8001de4:	0005883a 	mov	r2,zero
 8001de8:	00000606 	br	8001e04 <XferInTransfer+0x1a0>
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    for(int i = 0; i < 50; i++) { // use a 'return' to exit this loop
 8001dec:	e0bff917 	ldw	r2,-28(fp)
 8001df0:	10800044 	addi	r2,r2,1
 8001df4:	e0bff915 	stw	r2,-28(fp)
 8001df8:	e0bff917 	ldw	r2,-28(fp)
 8001dfc:	10800c90 	cmplti	r2,r2,50
 8001e00:	103fb61e 	bne	r2,zero,8001cdc <__alt_data_end+0xfc001cdc>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
            }
            return( 0 );
        }
  }//while( 1 )
}
 8001e04:	e037883a 	mov	sp,fp
 8001e08:	dfc00117 	ldw	ra,4(sp)
 8001e0c:	df000017 	ldw	fp,0(sp)
 8001e10:	dec00204 	addi	sp,sp,8
 8001e14:	f800283a 	ret

08001e18 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8001e18:	defffe04 	addi	sp,sp,-8
 8001e1c:	df000115 	stw	fp,4(sp)
 8001e20:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001e24:	e03fff05 	stb	zero,-4(fp)
 8001e28:	00001006 	br	8001e6c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8001e2c:	e0ffff03 	ldbu	r3,-4(fp)
 8001e30:	008200b4 	movhi	r2,2050
 8001e34:	10ba9404 	addi	r2,r2,-5552
 8001e38:	180690fa 	slli	r3,r3,3
 8001e3c:	10c5883a 	add	r2,r2,r3
 8001e40:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8001e44:	e0ffff03 	ldbu	r3,-4(fp)
 8001e48:	008200b4 	movhi	r2,2050
 8001e4c:	10ba9404 	addi	r2,r2,-5552
 8001e50:	180690fa 	slli	r3,r3,3
 8001e54:	10c5883a 	add	r2,r2,r3
 8001e58:	10800104 	addi	r2,r2,4
 8001e5c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001e60:	e0bfff03 	ldbu	r2,-4(fp)
 8001e64:	10800044 	addi	r2,r2,1
 8001e68:	e0bfff05 	stb	r2,-4(fp)
 8001e6c:	e0bfff03 	ldbu	r2,-4(fp)
 8001e70:	10800270 	cmpltui	r2,r2,9
 8001e74:	103fed1e 	bne	r2,zero,8001e2c <__alt_data_end+0xfc001e2c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8001e78:	008200b4 	movhi	r2,2050
 8001e7c:	10ba9404 	addi	r2,r2,-5552
 8001e80:	d0e75204 	addi	r3,gp,-25272
 8001e84:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8001e88:	d027528d 	sth	zero,-25270(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8001e8c:	00801004 	movi	r2,64
 8001e90:	d0a75345 	stb	r2,-25267(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8001e94:	00800404 	movi	r2,16
 8001e98:	d0a75385 	stb	r2,-25266(gp)
}
 8001e9c:	0001883a 	nop
 8001ea0:	e037883a 	mov	sp,fp
 8001ea4:	df000017 	ldw	fp,0(sp)
 8001ea8:	dec00104 	addi	sp,sp,4
 8001eac:	f800283a 	ret

08001eb0 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8001eb0:	deffb204 	addi	sp,sp,-312
 8001eb4:	dfc04d15 	stw	ra,308(sp)
 8001eb8:	df004c15 	stw	fp,304(sp)
 8001ebc:	dc004b15 	stw	r16,300(sp)
 8001ec0:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001ec4:	d0a00203 	ldbu	r2,-32760(gp)
 8001ec8:	10803fcc 	andi	r2,r2,255
 8001ecc:	10803c0c 	andi	r2,r2,240
 8001ed0:	10c00820 	cmpeqi	r3,r2,32
 8001ed4:	1801121e 	bne	r3,zero,8002320 <USB_Task+0x470>
 8001ed8:	10c00848 	cmpgei	r3,r2,33
 8001edc:	1800041e 	bne	r3,zero,8001ef0 <USB_Task+0x40>
 8001ee0:	10000a26 	beq	r2,zero,8001f0c <USB_Task+0x5c>
 8001ee4:	10800420 	cmpeqi	r2,r2,16
 8001ee8:	10001b1e 	bne	r2,zero,8001f58 <USB_Task+0xa8>
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
        	//printf("DEFAULT\n");
            //Should never get here
            break;
 8001eec:	00017a06 	br	80024d8 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001ef0:	10c01020 	cmpeqi	r3,r2,64
 8001ef4:	18016f1e 	bne	r3,zero,80024b4 <USB_Task+0x604>
 8001ef8:	10c03fe0 	cmpeqi	r3,r2,255
 8001efc:	18016f1e 	bne	r3,zero,80024bc <USB_Task+0x60c>
 8001f00:	10800c20 	cmpeqi	r2,r2,48
 8001f04:	1001441e 	bne	r2,zero,8002418 <USB_Task+0x568>
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
        	//printf("DEFAULT\n");
            //Should never get here
            break;
 8001f08:	00017306 	br	80024d8 <USB_Task+0x628>

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
        	//printf("USB_STATE DETACHED\n");
            switch( usb_task_state ) {
 8001f0c:	d0a00203 	ldbu	r2,-32760(gp)
 8001f10:	10803fcc 	andi	r2,r2,255
 8001f14:	10c000e0 	cmpeqi	r3,r2,3
 8001f18:	1800091e 	bne	r3,zero,8001f40 <USB_Task+0x90>
 8001f1c:	10c00120 	cmpeqi	r3,r2,4
 8001f20:	18000b1e 	bne	r3,zero,8001f50 <USB_Task+0xa0>
 8001f24:	10800060 	cmpeqi	r2,r2,1
 8001f28:	1000011e 	bne	r2,zero,8001f30 <USB_Task+0x80>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                	//printf("...USB_DETACHED_SUBSTATE_ILLEGAL\n");
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001f2c:	00016a06 	br	80024d8 <USB_Task+0x628>
        	//printf("USB_STATE DETACHED\n");
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                	//printf("...USB_DETACHED_SUBSTATE_INITIALIZE\n");
                    /* cleanup device data structures */
                    USB_init();
 8001f30:	8001e180 	call	8001e18 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8001f34:	008000c4 	movi	r2,3
 8001f38:	d0a00205 	stb	r2,-32760(gp)
                    break;
 8001f3c:	00000506 	br	8001f54 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    //printf("...USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE\n");
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8001f40:	01400104 	movi	r5,4
 8001f44:	01003a04 	movi	r4,232
 8001f48:	80010ec0 	call	80010ec <MAXreg_wr>
                    break;
 8001f4c:	00000106 	br	8001f54 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                	//printf("...USB_DETACHED_SUBSTATE_ILLEGAL\n");
                    /* don't know what to do yet */
                    break;
 8001f50:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8001f54:	00016006 	br	80024d8 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
        	//printf("USB_STATE_ATTACHED\n");
            switch( usb_task_state ) {
 8001f58:	d0a00203 	ldbu	r2,-32760(gp)
 8001f5c:	10803fcc 	andi	r2,r2,255
 8001f60:	10bffc04 	addi	r2,r2,-16
 8001f64:	10c001a8 	cmpgeui	r3,r2,6
 8001f68:	1801561e 	bne	r3,zero,80024c4 <USB_Task+0x614>
 8001f6c:	100690ba 	slli	r3,r2,2
 8001f70:	00820034 	movhi	r2,2048
 8001f74:	1087e104 	addi	r2,r2,8068
 8001f78:	1885883a 	add	r2,r3,r2
 8001f7c:	10800017 	ldw	r2,0(r2)
 8001f80:	1000683a 	jmp	r2
 8001f84:	08001f9c 	xori	zero,at,126
 8001f88:	08001fd4 	ori	zero,at,127
 8001f8c:	08002010 	cmplti	zero,at,128
 8001f90:	08002034 	orhi	zero,at,128
 8001f94:	08002074 	orhi	zero,at,129
 8001f98:	08002088 	cmpgei	zero,at,130
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001f9c:	d0a76717 	ldw	r2,-25188(gp)
                case( USB_STATE_ATTACHED ):
					//printf("...USB_STATE_ATTACHED\n");
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8001fa0:	0140fa04 	movi	r5,1000
 8001fa4:	1009883a 	mov	r4,r2
 8001fa8:	800832c0 	call	800832c <__mulsi3>
 8001fac:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001fb0:	d0a76617 	ldw	r2,-25192(gp)
 8001fb4:	100b883a 	mov	r5,r2
 8001fb8:	1809883a 	mov	r4,r3
 8001fbc:	80082700 	call	8008270 <__udivsi3>
 8001fc0:	10803204 	addi	r2,r2,200
 8001fc4:	d0a75515 	stw	r2,-25260(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8001fc8:	00800444 	movi	r2,17
 8001fcc:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_STATE_ATTACHED )
 8001fd0:	0000d206 	br	800231c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001fd4:	d0a76717 	ldw	r2,-25188(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                	//printf("...USB_ATTACHED_SUBSTATE_SETTLE\n");
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8001fd8:	0140fa04 	movi	r5,1000
 8001fdc:	1009883a 	mov	r4,r2
 8001fe0:	800832c0 	call	800832c <__mulsi3>
 8001fe4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001fe8:	d0a76617 	ldw	r2,-25192(gp)
 8001fec:	100b883a 	mov	r5,r2
 8001ff0:	1809883a 	mov	r4,r3
 8001ff4:	80082700 	call	8008270 <__udivsi3>
 8001ff8:	1007883a 	mov	r3,r2
 8001ffc:	d0a75517 	ldw	r2,-25260(gp)
 8002000:	10c0c32e 	bgeu	r2,r3,8002310 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8002004:	00800484 	movi	r2,18
 8002008:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 800200c:	0000c006 	br	8002310 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                	//printf("...USB_ATTACHED_SUBSTATE_RESET_DEVICE\n");
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002010:	01400044 	movi	r5,1
 8002014:	01003204 	movi	r4,200
 8002018:	80010ec0 	call	80010ec <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 800201c:	01400044 	movi	r5,1
 8002020:	01003a04 	movi	r4,232
 8002024:	80010ec0 	call	80010ec <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002028:	008004c4 	movi	r2,19
 800202c:	d0a00205 	stb	r2,-32760(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002030:	0000ba06 	br	800231c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    //printf("...USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE\n");
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8002034:	01003a04 	movi	r4,232
 8002038:	80012e80 	call	80012e8 <MAXreg_rd>
 800203c:	10803fcc 	andi	r2,r2,255
 8002040:	1080004c 	andi	r2,r2,1
 8002044:	1000b41e 	bne	r2,zero,8002318 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002048:	01003604 	movi	r4,216
 800204c:	80012e80 	call	80012e8 <MAXreg_rd>
 8002050:	10800214 	ori	r2,r2,8
 8002054:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8002058:	e0bfb943 	ldbu	r2,-283(fp)
 800205c:	100b883a 	mov	r5,r2
 8002060:	01003604 	movi	r4,216
 8002064:	80010ec0 	call	80010ec <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002068:	00800504 	movi	r2,20
 800206c:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002070:	0000a906 	br	8002318 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                	//printf("...USB_ATTACHED_SUBSTATE_WAIT_SOF\n");
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002074:	01003204 	movi	r4,200
 8002078:	80012e80 	call	80012e8 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 800207c:	00800544 	movi	r2,21
 8002080:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8002084:	0000a506 	br	800231c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    //printf("...USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE\n");
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002088:	008200b4 	movhi	r2,2050
 800208c:	10ba9404 	addi	r2,r2,-5552
 8002090:	10800017 	ldw	r2,0(r2)
 8002094:	00c00204 	movi	r3,8
 8002098:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 800209c:	e0bfba04 	addi	r2,fp,-280
 80020a0:	d8800415 	stw	r2,16(sp)
 80020a4:	00800204 	movi	r2,8
 80020a8:	d8800315 	stw	r2,12(sp)
 80020ac:	d8000215 	stw	zero,8(sp)
 80020b0:	00800044 	movi	r2,1
 80020b4:	d8800115 	stw	r2,4(sp)
 80020b8:	d8000015 	stw	zero,0(sp)
 80020bc:	01c00184 	movi	r7,6
 80020c0:	01802004 	movi	r6,128
 80020c4:	000b883a 	mov	r5,zero
 80020c8:	0009883a 	mov	r4,zero
 80020cc:	80018400 	call	8001840 <XferCtrlReq>
 80020d0:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 80020d4:	e0bfb983 	ldbu	r2,-282(fp)
 80020d8:	1000861e 	bne	r2,zero,80022f4 <USB_Task+0x444>
                    	//printf("==> rcode == 0\n");
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 80020dc:	008200b4 	movhi	r2,2050
 80020e0:	10ba9404 	addi	r2,r2,-5552
 80020e4:	10800017 	ldw	r2,0(r2)
 80020e8:	e0ffbbc3 	ldbu	r3,-273(fp)
 80020ec:	18c03fcc 	andi	r3,r3,255
 80020f0:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 80020f4:	e0bfba03 	ldbu	r2,-280(fp)
 80020f8:	10803fcc 	andi	r2,r2,255
 80020fc:	e0ffba04 	addi	r3,fp,-280
 8002100:	d8c00415 	stw	r3,16(sp)
 8002104:	d8800315 	stw	r2,12(sp)
 8002108:	d8000215 	stw	zero,8(sp)
 800210c:	00800044 	movi	r2,1
 8002110:	d8800115 	stw	r2,4(sp)
 8002114:	d8000015 	stw	zero,0(sp)
 8002118:	01c00184 	movi	r7,6
 800211c:	01802004 	movi	r6,128
 8002120:	000b883a 	mov	r5,zero
 8002124:	0009883a 	mov	r4,zero
 8002128:	80018400 	call	8001840 <XferCtrlReq>
 800212c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8002130:	e0bfbd83 	ldbu	r2,-266(fp)
 8002134:	10803fcc 	andi	r2,r2,255
 8002138:	10003426 	beq	r2,zero,800220c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 800213c:	e0bfbd83 	ldbu	r2,-266(fp)
 8002140:	10803fcc 	andi	r2,r2,255
 8002144:	e0ffbe84 	addi	r3,fp,-262
 8002148:	d8c00415 	stw	r3,16(sp)
 800214c:	00c00084 	movi	r3,2
 8002150:	d8c00315 	stw	r3,12(sp)
 8002154:	00c10244 	movi	r3,1033
 8002158:	d8c00215 	stw	r3,8(sp)
 800215c:	00c000c4 	movi	r3,3
 8002160:	d8c00115 	stw	r3,4(sp)
 8002164:	d8800015 	stw	r2,0(sp)
 8002168:	01c00184 	movi	r7,6
 800216c:	01802004 	movi	r6,128
 8002170:	000b883a 	mov	r5,zero
 8002174:	0009883a 	mov	r4,zero
 8002178:	80018400 	call	8001840 <XferCtrlReq>
 800217c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002180:	e0bfbd83 	ldbu	r2,-266(fp)
 8002184:	10803fcc 	andi	r2,r2,255
 8002188:	e0ffbe83 	ldbu	r3,-262(fp)
 800218c:	18c03fcc 	andi	r3,r3,255
 8002190:	e13fbe84 	addi	r4,fp,-262
 8002194:	d9000415 	stw	r4,16(sp)
 8002198:	d8c00315 	stw	r3,12(sp)
 800219c:	00c10244 	movi	r3,1033
 80021a0:	d8c00215 	stw	r3,8(sp)
 80021a4:	00c000c4 	movi	r3,3
 80021a8:	d8c00115 	stw	r3,4(sp)
 80021ac:	d8800015 	stw	r2,0(sp)
 80021b0:	01c00184 	movi	r7,6
 80021b4:	01802004 	movi	r6,128
 80021b8:	000b883a 	mov	r5,zero
 80021bc:	0009883a 	mov	r4,zero
 80021c0:	80018400 	call	8001840 <XferCtrlReq>
 80021c4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80021c8:	e0bfbd83 	ldbu	r2,-266(fp)
 80021cc:	14003fcc 	andi	r16,r2,255
 80021d0:	e0bfbe83 	ldbu	r2,-262(fp)
 80021d4:	10803fcc 	andi	r2,r2,255
 80021d8:	1004d07a 	srli	r2,r2,1
 80021dc:	10bfffc4 	addi	r2,r2,-1
 80021e0:	10c03fcc 	andi	r3,r2,255
 80021e4:	e0bfbe84 	addi	r2,fp,-262
 80021e8:	10800084 	addi	r2,r2,2
 80021ec:	180b883a 	mov	r5,r3
 80021f0:	1009883a 	mov	r4,r2
 80021f4:	80026780 	call	8002678 <ConvUTF8ToStr>
 80021f8:	100d883a 	mov	r6,r2
 80021fc:	800b883a 	mov	r5,r16
 8002200:	010200b4 	movhi	r4,2050
 8002204:	212ac604 	addi	r4,r4,-21736
 8002208:	800b7680 	call	800b768 <printf>
                		}
                		if (buf.iProduct != 0)
 800220c:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002210:	10803fcc 	andi	r2,r2,255
 8002214:	10003426 	beq	r2,zero,80022e8 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002218:	e0bfbdc3 	ldbu	r2,-265(fp)
 800221c:	10803fcc 	andi	r2,r2,255
 8002220:	e0ffbe84 	addi	r3,fp,-262
 8002224:	d8c00415 	stw	r3,16(sp)
 8002228:	00c00084 	movi	r3,2
 800222c:	d8c00315 	stw	r3,12(sp)
 8002230:	00c10244 	movi	r3,1033
 8002234:	d8c00215 	stw	r3,8(sp)
 8002238:	00c000c4 	movi	r3,3
 800223c:	d8c00115 	stw	r3,4(sp)
 8002240:	d8800015 	stw	r2,0(sp)
 8002244:	01c00184 	movi	r7,6
 8002248:	01802004 	movi	r6,128
 800224c:	000b883a 	mov	r5,zero
 8002250:	0009883a 	mov	r4,zero
 8002254:	80018400 	call	8001840 <XferCtrlReq>
 8002258:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 800225c:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002260:	10803fcc 	andi	r2,r2,255
 8002264:	e0ffbe83 	ldbu	r3,-262(fp)
 8002268:	18c03fcc 	andi	r3,r3,255
 800226c:	e13fbe84 	addi	r4,fp,-262
 8002270:	d9000415 	stw	r4,16(sp)
 8002274:	d8c00315 	stw	r3,12(sp)
 8002278:	00c10244 	movi	r3,1033
 800227c:	d8c00215 	stw	r3,8(sp)
 8002280:	00c000c4 	movi	r3,3
 8002284:	d8c00115 	stw	r3,4(sp)
 8002288:	d8800015 	stw	r2,0(sp)
 800228c:	01c00184 	movi	r7,6
 8002290:	01802004 	movi	r6,128
 8002294:	000b883a 	mov	r5,zero
 8002298:	0009883a 	mov	r4,zero
 800229c:	80018400 	call	8001840 <XferCtrlReq>
 80022a0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80022a4:	e0bfbdc3 	ldbu	r2,-265(fp)
 80022a8:	14003fcc 	andi	r16,r2,255
 80022ac:	e0bfbe83 	ldbu	r2,-262(fp)
 80022b0:	10803fcc 	andi	r2,r2,255
 80022b4:	1004d07a 	srli	r2,r2,1
 80022b8:	10bfffc4 	addi	r2,r2,-1
 80022bc:	10c03fcc 	andi	r3,r2,255
 80022c0:	e0bfbe84 	addi	r2,fp,-262
 80022c4:	10800084 	addi	r2,r2,2
 80022c8:	180b883a 	mov	r5,r3
 80022cc:	1009883a 	mov	r4,r2
 80022d0:	80026780 	call	8002678 <ConvUTF8ToStr>
 80022d4:	100d883a 	mov	r6,r2
 80022d8:	800b883a 	mov	r5,r16
 80022dc:	010200b4 	movhi	r4,2050
 80022e0:	212acc04 	addi	r4,r4,-21712
 80022e4:	800b7680 	call	800b768 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 80022e8:	00800804 	movi	r2,32
 80022ec:	d0a00205 	stb	r2,-32760(gp)
                    	//printf("==> rcode != 0\n");
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80022f0:	00000a06 	br	800231c <USB_Task+0x46c>
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                    	//printf("==> rcode != 0\n");
                        usb_error = rcode;
 80022f4:	e0bfb983 	ldbu	r2,-282(fp)
 80022f8:	d0a75645 	stb	r2,-25255(gp)
                        last_usb_task_state = usb_task_state;
 80022fc:	d0a00203 	ldbu	r2,-32760(gp)
 8002300:	d0a75405 	stb	r2,-25264(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002304:	00bfffc4 	movi	r2,-1
 8002308:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 800230c:	00000306 	br	800231c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                	//printf("...USB_ATTACHED_SUBSTATE_SETTLE\n");
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002310:	0001883a 	nop
 8002314:	00006b06 	br	80024c4 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002318:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 800231c:	00006906 	br	80024c4 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
        	//printf("USB_STATE_ADDRESSING\n");
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002320:	00800044 	movi	r2,1
 8002324:	e0bfb905 	stb	r2,-284(fp)
 8002328:	00002d06 	br	80023e0 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 800232c:	e0ffb903 	ldbu	r3,-284(fp)
 8002330:	008200b4 	movhi	r2,2050
 8002334:	10ba9404 	addi	r2,r2,-5552
 8002338:	180690fa 	slli	r3,r3,3
 800233c:	10c5883a 	add	r2,r2,r3
 8002340:	10800017 	ldw	r2,0(r2)
 8002344:	1000231e 	bne	r2,zero,80023d4 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 8002348:	e13fb903 	ldbu	r4,-284(fp)
 800234c:	008200b4 	movhi	r2,2050
 8002350:	10ba9404 	addi	r2,r2,-5552
 8002354:	10c00017 	ldw	r3,0(r2)
 8002358:	008200b4 	movhi	r2,2050
 800235c:	10ba9404 	addi	r2,r2,-5552
 8002360:	200890fa 	slli	r4,r4,3
 8002364:	1105883a 	add	r2,r2,r4
 8002368:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 800236c:	e0bfb903 	ldbu	r2,-284(fp)
 8002370:	d8000415 	stw	zero,16(sp)
 8002374:	d8000315 	stw	zero,12(sp)
 8002378:	d8000215 	stw	zero,8(sp)
 800237c:	d8000115 	stw	zero,4(sp)
 8002380:	d8800015 	stw	r2,0(sp)
 8002384:	01c00144 	movi	r7,5
 8002388:	000d883a 	mov	r6,zero
 800238c:	000b883a 	mov	r5,zero
 8002390:	0009883a 	mov	r4,zero
 8002394:	80018400 	call	8001840 <XferCtrlReq>
 8002398:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 800239c:	e0bfb983 	ldbu	r2,-282(fp)
 80023a0:	1000051e 	bne	r2,zero,80023b8 <USB_Task+0x508>
                        tmp_addr = i;
 80023a4:	e0bfb903 	ldbu	r2,-284(fp)
 80023a8:	d0a75605 	stb	r2,-25256(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 80023ac:	00800c04 	movi	r2,48
 80023b0:	d0a00205 	stb	r2,-32760(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80023b4:	00000d06 	br	80023ec <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 80023b8:	e0bfb983 	ldbu	r2,-282(fp)
 80023bc:	d0a75645 	stb	r2,-25255(gp)
                        last_usb_task_state = usb_task_state;
 80023c0:	d0a00203 	ldbu	r2,-32760(gp)
 80023c4:	d0a75405 	stb	r2,-25264(gp)
                        usb_task_state = USB_STATE_ERROR;
 80023c8:	00bfffc4 	movi	r2,-1
 80023cc:	d0a00205 	stb	r2,-32760(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80023d0:	00000606 	br	80023ec <USB_Task+0x53c>
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
        	//printf("USB_STATE_ADDRESSING\n");
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80023d4:	e0bfb903 	ldbu	r2,-284(fp)
 80023d8:	10800044 	addi	r2,r2,1
 80023dc:	e0bfb905 	stb	r2,-284(fp)
 80023e0:	e0bfb903 	ldbu	r2,-284(fp)
 80023e4:	10800230 	cmpltui	r2,r2,8
 80023e8:	103fd01e 	bne	r2,zero,800232c <__alt_data_end+0xfc00232c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 80023ec:	d0a00203 	ldbu	r2,-32760(gp)
 80023f0:	10803fcc 	andi	r2,r2,255
 80023f4:	10800818 	cmpnei	r2,r2,32
 80023f8:	1000341e 	bne	r2,zero,80024cc <USB_Task+0x61c>
                usb_error = 0xfe;
 80023fc:	00bfff84 	movi	r2,-2
 8002400:	d0a75645 	stb	r2,-25255(gp)
                last_usb_task_state = usb_task_state;
 8002404:	d0a00203 	ldbu	r2,-32760(gp)
 8002408:	d0a75405 	stb	r2,-25264(gp)
                usb_task_state = USB_STATE_ERROR;
 800240c:	00bfffc4 	movi	r2,-1
 8002410:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002414:	00002d06 	br	80024cc <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
        	//printf("USB_STATE_CONFIGURING\n");
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002418:	e03fb905 	stb	zero,-284(fp)
 800241c:	00001706 	br	800247c <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8002420:	e0bfb903 	ldbu	r2,-284(fp)
 8002424:	040200b4 	movhi	r16,2050
 8002428:	842bb504 	addi	r16,r16,-20780
 800242c:	01400304 	movi	r5,12
 8002430:	1009883a 	mov	r4,r2
 8002434:	800832c0 	call	800832c <__mulsi3>
 8002438:	8085883a 	add	r2,r16,r2
 800243c:	10800017 	ldw	r2,0(r2)
 8002440:	d0e75603 	ldbu	r3,-25256(gp)
 8002444:	18c03fcc 	andi	r3,r3,255
 8002448:	000b883a 	mov	r5,zero
 800244c:	1809883a 	mov	r4,r3
 8002450:	103ee83a 	callr	r2
 8002454:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 8002458:	e0bfb983 	ldbu	r2,-282(fp)
 800245c:	10800058 	cmpnei	r2,r2,1
 8002460:	1000031e 	bne	r2,zero,8002470 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8002464:	00801004 	movi	r2,64
 8002468:	d0a00205 	stb	r2,-32760(gp)
                    break;
 800246c:	00000606 	br	8002488 <USB_Task+0x5d8>
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
        	//printf("USB_STATE_CONFIGURING\n");
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002470:	e0bfb903 	ldbu	r2,-284(fp)
 8002474:	10800044 	addi	r2,r2,1
 8002478:	e0bfb905 	stb	r2,-284(fp)
 800247c:	e0bfb903 	ldbu	r2,-284(fp)
 8002480:	10800130 	cmpltui	r2,r2,4
 8002484:	103fe61e 	bne	r2,zero,8002420 <__alt_data_end+0xfc002420>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8002488:	d0a00203 	ldbu	r2,-32760(gp)
 800248c:	10803fcc 	andi	r2,r2,255
 8002490:	10800c18 	cmpnei	r2,r2,48
 8002494:	10000f1e 	bne	r2,zero,80024d4 <USB_Task+0x624>
                usb_error = 0xfd;
 8002498:	00bfff44 	movi	r2,-3
 800249c:	d0a75645 	stb	r2,-25255(gp)
                last_usb_task_state = usb_task_state;
 80024a0:	d0a00203 	ldbu	r2,-32760(gp)
 80024a4:	d0a75405 	stb	r2,-25264(gp)
                usb_task_state = USB_STATE_ERROR;
 80024a8:	00bfffc4 	movi	r2,-1
 80024ac:	d0a00205 	stb	r2,-32760(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 80024b0:	00000806 	br	80024d4 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
        	//printf("USB_STATE_RUNNING\n");
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 80024b4:	0001883a 	nop
 80024b8:	00000706 	br	80024d8 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
        	//printf("USB_STATE_ERROR\n");
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 80024bc:	0001883a 	nop
 80024c0:	00000506 	br	80024d8 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80024c4:	0001883a 	nop
 80024c8:	00000306 	br	80024d8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 80024cc:	0001883a 	nop
 80024d0:	00000106 	br	80024d8 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 80024d4:	0001883a 	nop
        default:
        	//printf("DEFAULT\n");
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 80024d8:	0001883a 	nop
 80024dc:	e6ffff04 	addi	sp,fp,-4
 80024e0:	dfc00217 	ldw	ra,8(sp)
 80024e4:	df000117 	ldw	fp,4(sp)
 80024e8:	dc000017 	ldw	r16,0(sp)
 80024ec:	dec00304 	addi	sp,sp,12
 80024f0:	f800283a 	ret

080024f4 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 80024f4:	defffd04 	addi	sp,sp,-12
 80024f8:	df000215 	stw	fp,8(sp)
 80024fc:	df000204 	addi	fp,sp,8
 8002500:	2005883a 	mov	r2,r4
 8002504:	e17fff15 	stw	r5,-4(fp)
 8002508:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 800250c:	0005883a 	mov	r2,zero
}
 8002510:	e037883a 	mov	sp,fp
 8002514:	df000017 	ldw	fp,0(sp)
 8002518:	dec00104 	addi	sp,sp,4
 800251c:	f800283a 	ret

08002520 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002520:	defffb04 	addi	sp,sp,-20
 8002524:	df000415 	stw	fp,16(sp)
 8002528:	df000404 	addi	fp,sp,16
 800252c:	2007883a 	mov	r3,r4
 8002530:	2805883a 	mov	r2,r5
 8002534:	e1bffe15 	stw	r6,-8(fp)
 8002538:	e1ffff15 	stw	r7,-4(fp)
 800253c:	e0fffc05 	stb	r3,-16(fp)
 8002540:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 8002544:	0005883a 	mov	r2,zero

}
 8002548:	e037883a 	mov	sp,fp
 800254c:	df000017 	ldw	fp,0(sp)
 8002550:	dec00104 	addi	sp,sp,4
 8002554:	f800283a 	ret

08002558 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 8002558:	defffd04 	addi	sp,sp,-12
 800255c:	df000215 	stw	fp,8(sp)
 8002560:	df000204 	addi	fp,sp,8
 8002564:	2005883a 	mov	r2,r4
 8002568:	e17fff15 	stw	r5,-4(fp)
 800256c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8002570:	0005883a 	mov	r2,zero

}
 8002574:	e037883a 	mov	sp,fp
 8002578:	df000017 	ldw	fp,0(sp)
 800257c:	dec00104 	addi	sp,sp,4
 8002580:	f800283a 	ret

08002584 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002584:	defffb04 	addi	sp,sp,-20
 8002588:	df000415 	stw	fp,16(sp)
 800258c:	df000404 	addi	fp,sp,16
 8002590:	2007883a 	mov	r3,r4
 8002594:	2805883a 	mov	r2,r5
 8002598:	e1bffe15 	stw	r6,-8(fp)
 800259c:	e1ffff15 	stw	r7,-4(fp)
 80025a0:	e0fffc05 	stb	r3,-16(fp)
 80025a4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80025a8:	0005883a 	mov	r2,zero
}
 80025ac:	e037883a 	mov	sp,fp
 80025b0:	df000017 	ldw	fp,0(sp)
 80025b4:	dec00104 	addi	sp,sp,4
 80025b8:	f800283a 	ret

080025bc <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 80025bc:	defffd04 	addi	sp,sp,-12
 80025c0:	df000215 	stw	fp,8(sp)
 80025c4:	df000204 	addi	fp,sp,8
 80025c8:	2005883a 	mov	r2,r4
 80025cc:	e17fff15 	stw	r5,-4(fp)
 80025d0:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80025d4:	0005883a 	mov	r2,zero
}
 80025d8:	e037883a 	mov	sp,fp
 80025dc:	df000017 	ldw	fp,0(sp)
 80025e0:	dec00104 	addi	sp,sp,4
 80025e4:	f800283a 	ret

080025e8 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80025e8:	defffb04 	addi	sp,sp,-20
 80025ec:	df000415 	stw	fp,16(sp)
 80025f0:	df000404 	addi	fp,sp,16
 80025f4:	2007883a 	mov	r3,r4
 80025f8:	2805883a 	mov	r2,r5
 80025fc:	e1bffe15 	stw	r6,-8(fp)
 8002600:	e1ffff15 	stw	r7,-4(fp)
 8002604:	e0fffc05 	stb	r3,-16(fp)
 8002608:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 800260c:	0005883a 	mov	r2,zero
}
 8002610:	e037883a 	mov	sp,fp
 8002614:	df000017 	ldw	fp,0(sp)
 8002618:	dec00104 	addi	sp,sp,4
 800261c:	f800283a 	ret

08002620 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8002620:	deffff04 	addi	sp,sp,-4
 8002624:	df000015 	stw	fp,0(sp)
 8002628:	d839883a 	mov	fp,sp
    return( usb_task_state );
 800262c:	d0a00203 	ldbu	r2,-32760(gp)
}
 8002630:	e037883a 	mov	sp,fp
 8002634:	df000017 	ldw	fp,0(sp)
 8002638:	dec00104 	addi	sp,sp,4
 800263c:	f800283a 	ret

08002640 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8002640:	defffe04 	addi	sp,sp,-8
 8002644:	df000115 	stw	fp,4(sp)
 8002648:	df000104 	addi	fp,sp,4
 800264c:	2005883a 	mov	r2,r4
 8002650:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 8002654:	e0bfff03 	ldbu	r2,-4(fp)
 8002658:	100690fa 	slli	r3,r2,3
 800265c:	008200b4 	movhi	r2,2050
 8002660:	10ba9404 	addi	r2,r2,-5552
 8002664:	1885883a 	add	r2,r3,r2
}
 8002668:	e037883a 	mov	sp,fp
 800266c:	df000017 	ldw	fp,0(sp)
 8002670:	dec00104 	addi	sp,sp,4
 8002674:	f800283a 	ret

08002678 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002678:	defffc04 	addi	sp,sp,-16
 800267c:	df000315 	stw	fp,12(sp)
 8002680:	df000304 	addi	fp,sp,12
 8002684:	e13ffe15 	stw	r4,-8(fp)
 8002688:	2805883a 	mov	r2,r5
 800268c:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8002690:	e03ffd05 	stb	zero,-12(fp)
 8002694:	00000d06 	br	80026cc <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002698:	e0bffd03 	ldbu	r2,-12(fp)
 800269c:	e0fffe17 	ldw	r3,-8(fp)
 80026a0:	1887883a 	add	r3,r3,r2
 80026a4:	e0bffd03 	ldbu	r2,-12(fp)
 80026a8:	1085883a 	add	r2,r2,r2
 80026ac:	1009883a 	mov	r4,r2
 80026b0:	e0bffe17 	ldw	r2,-8(fp)
 80026b4:	1105883a 	add	r2,r2,r4
 80026b8:	10800003 	ldbu	r2,0(r2)
 80026bc:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 80026c0:	e0bffd03 	ldbu	r2,-12(fp)
 80026c4:	10800044 	addi	r2,r2,1
 80026c8:	e0bffd05 	stb	r2,-12(fp)
 80026cc:	e0fffd03 	ldbu	r3,-12(fp)
 80026d0:	e0bfff03 	ldbu	r2,-4(fp)
 80026d4:	18bff036 	bltu	r3,r2,8002698 <__alt_data_end+0xfc002698>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 80026d8:	e0bfff03 	ldbu	r2,-4(fp)
 80026dc:	e0fffe17 	ldw	r3,-8(fp)
 80026e0:	1885883a 	add	r2,r3,r2
 80026e4:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 80026e8:	e0bffe17 	ldw	r2,-8(fp)
}
 80026ec:	e037883a 	mov	sp,fp
 80026f0:	df000017 	ldw	fp,0(sp)
 80026f4:	dec00104 	addi	sp,sp,4
 80026f8:	f800283a 	ret

080026fc <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 80026fc:	defff604 	addi	sp,sp,-40
 8002700:	dfc00915 	stw	ra,36(sp)
 8002704:	df000815 	stw	fp,32(sp)
 8002708:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 800270c:	00bfffc4 	movi	r2,-1
 8002710:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	//////printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8002714:	00800044 	movi	r2,1
 8002718:	e0bffd05 	stb	r2,-12(fp)
 800271c:	00000d06 	br	8002754 <GetDriverandReport+0x58>
		tpl_ptr = GetDevtable(i);
 8002720:	e0bffd03 	ldbu	r2,-12(fp)
 8002724:	1009883a 	mov	r4,r2
 8002728:	80026400 	call	8002640 <GetDevtable>
 800272c:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 8002730:	e0bffe17 	ldw	r2,-8(fp)
 8002734:	10800017 	ldw	r2,0(r2)
 8002738:	10000326 	beq	r2,zero,8002748 <GetDriverandReport+0x4c>
			//////printf("Device: %d", i);
			//////printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
 800273c:	e0bffe17 	ldw	r2,-8(fp)
 8002740:	10800103 	ldbu	r2,4(r2)
 8002744:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	//////printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8002748:	e0bffd03 	ldbu	r2,-12(fp)
 800274c:	10800044 	addi	r2,r2,1
 8002750:	e0bffd05 	stb	r2,-12(fp)
 8002754:	e0bffd03 	ldbu	r2,-12(fp)
 8002758:	10800230 	cmpltui	r2,r2,8
 800275c:	103ff01e 	bne	r2,zero,8002720 <__alt_data_end+0xfc002720>
			//////printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8002760:	d0a00403 	ldbu	r2,-32752(gp)
 8002764:	11003fcc 	andi	r4,r2,255
 8002768:	d0a75143 	ldbu	r2,-25275(gp)
 800276c:	10803fcc 	andi	r2,r2,255
 8002770:	e0ffff44 	addi	r3,fp,-3
 8002774:	d8c00415 	stw	r3,16(sp)
 8002778:	00c00044 	movi	r3,1
 800277c:	d8c00315 	stw	r3,12(sp)
 8002780:	d8800215 	stw	r2,8(sp)
 8002784:	d8000115 	stw	zero,4(sp)
 8002788:	d8000015 	stw	zero,0(sp)
 800278c:	01c00084 	movi	r7,2
 8002790:	01802844 	movi	r6,161
 8002794:	000b883a 	mov	r5,zero
 8002798:	80018400 	call	8001840 <XferCtrlReq>
 800279c:	e0bfff05 	stb	r2,-4(fp)
	} else {
		//////printf("Update rate: ");
		//////printf("%x \n", tmpbyte);
	}
	//////printf("Protocol: ");
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80027a0:	d0a00403 	ldbu	r2,-32752(gp)
 80027a4:	11003fcc 	andi	r4,r2,255
 80027a8:	d0a75143 	ldbu	r2,-25275(gp)
 80027ac:	10803fcc 	andi	r2,r2,255
 80027b0:	e0ffff44 	addi	r3,fp,-3
 80027b4:	d8c00415 	stw	r3,16(sp)
 80027b8:	00c00044 	movi	r3,1
 80027bc:	d8c00315 	stw	r3,12(sp)
 80027c0:	d8800215 	stw	r2,8(sp)
 80027c4:	d8000115 	stw	zero,4(sp)
 80027c8:	d8000015 	stw	zero,0(sp)
 80027cc:	01c000c4 	movi	r7,3
 80027d0:	01802844 	movi	r6,161
 80027d4:	000b883a 	mov	r5,zero
 80027d8:	80018400 	call	8001840 <XferCtrlReq>
 80027dc:	e0bfff05 	stb	r2,-4(fp)
		//////printf("GetProto Error. Error code ");
		//////printf("%x \n", rcode);
	} else {
		//////printf("%d \n", tmpbyte);
	}
	return device;
 80027e0:	e0bffd43 	ldbu	r2,-11(fp)
}
 80027e4:	e037883a 	mov	sp,fp
 80027e8:	dfc00117 	ldw	ra,4(sp)
 80027ec:	df000017 	ldw	fp,0(sp)
 80027f0:	dec00204 	addi	sp,sp,8
 80027f4:	f800283a 	ret

080027f8 <setLED>:

void setLED(int LED) {
 80027f8:	defffe04 	addi	sp,sp,-8
 80027fc:	df000115 	stw	fp,4(sp)
 8002800:	df000104 	addi	fp,sp,4
 8002804:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8002808:	00807404 	movi	r2,464
 800280c:	10c00037 	ldwio	r3,0(r2)
 8002810:	01000044 	movi	r4,1
 8002814:	e0bfff17 	ldw	r2,-4(fp)
 8002818:	2084983a 	sll	r2,r4,r2
 800281c:	1886b03a 	or	r3,r3,r2
 8002820:	00807404 	movi	r2,464
 8002824:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 8002828:	0001883a 	nop
 800282c:	e037883a 	mov	sp,fp
 8002830:	df000017 	ldw	fp,0(sp)
 8002834:	dec00104 	addi	sp,sp,4
 8002838:	f800283a 	ret

0800283c <clearLED>:

void clearLED(int LED) {
 800283c:	defffe04 	addi	sp,sp,-8
 8002840:	df000115 	stw	fp,4(sp)
 8002844:	df000104 	addi	fp,sp,4
 8002848:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 800284c:	00807404 	movi	r2,464
 8002850:	10c00037 	ldwio	r3,0(r2)
 8002854:	01000044 	movi	r4,1
 8002858:	e0bfff17 	ldw	r2,-4(fp)
 800285c:	2084983a 	sll	r2,r4,r2
 8002860:	0084303a 	nor	r2,zero,r2
 8002864:	1886703a 	and	r3,r3,r2
 8002868:	00807404 	movi	r2,464
 800286c:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 8002870:	0001883a 	nop
 8002874:	e037883a 	mov	sp,fp
 8002878:	df000017 	ldw	fp,0(sp)
 800287c:	dec00104 	addi	sp,sp,4
 8002880:	f800283a 	ret

08002884 <printSignedHex0>:

void printSignedHex0(signed char value) {
 8002884:	defffc04 	addi	sp,sp,-16
 8002888:	dfc00315 	stw	ra,12(sp)
 800288c:	df000215 	stw	fp,8(sp)
 8002890:	df000204 	addi	fp,sp,8
 8002894:	2005883a 	mov	r2,r4
 8002898:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 800289c:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 80028a0:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80028a4:	00807804 	movi	r2,480
 80028a8:	10800037 	ldwio	r2,0(r2)
 80028ac:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 80028b0:	e0bfff07 	ldb	r2,-4(fp)
 80028b4:	1000060e 	bge	r2,zero,80028d0 <printSignedHex0+0x4c>
		setLED(11);
 80028b8:	010002c4 	movi	r4,11
 80028bc:	80027f80 	call	80027f8 <setLED>
		value = -value;
 80028c0:	e0bfff03 	ldbu	r2,-4(fp)
 80028c4:	0085c83a 	sub	r2,zero,r2
 80028c8:	e0bfff05 	stb	r2,-4(fp)
 80028cc:	00000206 	br	80028d8 <printSignedHex0+0x54>
	} else {
		clearLED(11);
 80028d0:	010002c4 	movi	r4,11
 80028d4:	800283c0 	call	800283c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 80028d8:	e0bfff03 	ldbu	r2,-4(fp)
 80028dc:	108018c4 	addi	r2,r2,99
 80028e0:	10803fcc 	andi	r2,r2,255
 80028e4:	108031f0 	cmpltui	r2,r2,199
 80028e8:	1000031e 	bne	r2,zero,80028f8 <printSignedHex0+0x74>
		setLED(13);
 80028ec:	01000344 	movi	r4,13
 80028f0:	80027f80 	call	80027f8 <setLED>
 80028f4:	00000206 	br	8002900 <printSignedHex0+0x7c>
	else
		clearLED(13);
 80028f8:	01000344 	movi	r4,13
 80028fc:	800283c0 	call	800283c <clearLED>

	value = value % 100;
 8002900:	e0bfff07 	ldb	r2,-4(fp)
 8002904:	01401904 	movi	r5,100
 8002908:	1009883a 	mov	r4,r2
 800290c:	80081fc0 	call	80081fc <__modsi3>
 8002910:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8002914:	e0bfff07 	ldb	r2,-4(fp)
 8002918:	01400284 	movi	r5,10
 800291c:	1009883a 	mov	r4,r2
 8002920:	80081780 	call	8008178 <__divsi3>
 8002924:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 8002928:	e0bfff07 	ldb	r2,-4(fp)
 800292c:	01400284 	movi	r5,10
 8002930:	1009883a 	mov	r4,r2
 8002934:	80081fc0 	call	80081fc <__modsi3>
 8002938:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 800293c:	e0bffe8b 	ldhu	r2,-6(fp)
 8002940:	10803fcc 	andi	r2,r2,255
 8002944:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 8002948:	e0bffe03 	ldbu	r2,-8(fp)
 800294c:	1004933a 	slli	r2,r2,12
 8002950:	1007883a 	mov	r3,r2
 8002954:	e0bffe8b 	ldhu	r2,-6(fp)
 8002958:	1884b03a 	or	r2,r3,r2
 800295c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 8002960:	e0bffe43 	ldbu	r2,-7(fp)
 8002964:	1004923a 	slli	r2,r2,8
 8002968:	1007883a 	mov	r3,r2
 800296c:	e0bffe8b 	ldhu	r2,-6(fp)
 8002970:	1884b03a 	or	r2,r3,r2
 8002974:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8002978:	e0fffe8b 	ldhu	r3,-6(fp)
 800297c:	00807804 	movi	r2,480
 8002980:	10c00035 	stwio	r3,0(r2)
}
 8002984:	0001883a 	nop
 8002988:	e037883a 	mov	sp,fp
 800298c:	dfc00117 	ldw	ra,4(sp)
 8002990:	df000017 	ldw	fp,0(sp)
 8002994:	dec00204 	addi	sp,sp,8
 8002998:	f800283a 	ret

0800299c <printSignedHex1>:

void printSignedHex1(signed char value) {
 800299c:	defffb04 	addi	sp,sp,-20
 80029a0:	dfc00415 	stw	ra,16(sp)
 80029a4:	df000315 	stw	fp,12(sp)
 80029a8:	df000304 	addi	fp,sp,12
 80029ac:	2005883a 	mov	r2,r4
 80029b0:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 80029b4:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 80029b8:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80029bc:	00807804 	movi	r2,480
 80029c0:	10800037 	ldwio	r2,0(r2)
 80029c4:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 80029c8:	e0bfff07 	ldb	r2,-4(fp)
 80029cc:	1000060e 	bge	r2,zero,80029e8 <printSignedHex1+0x4c>
		setLED(10);
 80029d0:	01000284 	movi	r4,10
 80029d4:	80027f80 	call	80027f8 <setLED>
		value = -value;
 80029d8:	e0bfff03 	ldbu	r2,-4(fp)
 80029dc:	0085c83a 	sub	r2,zero,r2
 80029e0:	e0bfff05 	stb	r2,-4(fp)
 80029e4:	00000206 	br	80029f0 <printSignedHex1+0x54>
	} else {
		clearLED(10);
 80029e8:	01000284 	movi	r4,10
 80029ec:	800283c0 	call	800283c <clearLED>
	}
	//handled hundreds
	if (value / 100)
 80029f0:	e0bfff03 	ldbu	r2,-4(fp)
 80029f4:	108018c4 	addi	r2,r2,99
 80029f8:	10803fcc 	andi	r2,r2,255
 80029fc:	108031f0 	cmpltui	r2,r2,199
 8002a00:	1000031e 	bne	r2,zero,8002a10 <printSignedHex1+0x74>
		setLED(12);
 8002a04:	01000304 	movi	r4,12
 8002a08:	80027f80 	call	80027f8 <setLED>
 8002a0c:	00000206 	br	8002a18 <printSignedHex1+0x7c>
	else
		clearLED(12);
 8002a10:	01000304 	movi	r4,12
 8002a14:	800283c0 	call	800283c <clearLED>

	value = value % 100;
 8002a18:	e0bfff07 	ldb	r2,-4(fp)
 8002a1c:	01401904 	movi	r5,100
 8002a20:	1009883a 	mov	r4,r2
 8002a24:	80081fc0 	call	80081fc <__modsi3>
 8002a28:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8002a2c:	e0bfff07 	ldb	r2,-4(fp)
 8002a30:	01400284 	movi	r5,10
 8002a34:	1009883a 	mov	r4,r2
 8002a38:	80081780 	call	8008178 <__divsi3>
 8002a3c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 8002a40:	e0bfff07 	ldb	r2,-4(fp)
 8002a44:	01400284 	movi	r5,10
 8002a48:	1009883a 	mov	r4,r2
 8002a4c:	80081fc0 	call	80081fc <__modsi3>
 8002a50:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 8002a54:	e0bfff07 	ldb	r2,-4(fp)
 8002a58:	01400284 	movi	r5,10
 8002a5c:	1009883a 	mov	r4,r2
 8002a60:	80081780 	call	8008178 <__divsi3>
 8002a64:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 8002a68:	e0bfff07 	ldb	r2,-4(fp)
 8002a6c:	01400284 	movi	r5,10
 8002a70:	1009883a 	mov	r4,r2
 8002a74:	80081fc0 	call	80081fc <__modsi3>
 8002a78:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 8002a7c:	e0bffe17 	ldw	r2,-8(fp)
 8002a80:	10bfc00c 	andi	r2,r2,65280
 8002a84:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 8002a88:	e0bffd03 	ldbu	r2,-12(fp)
 8002a8c:	1004913a 	slli	r2,r2,4
 8002a90:	1007883a 	mov	r3,r2
 8002a94:	e0bffe17 	ldw	r2,-8(fp)
 8002a98:	10c4b03a 	or	r2,r2,r3
 8002a9c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 8002aa0:	e0bffd43 	ldbu	r2,-11(fp)
 8002aa4:	e0fffe17 	ldw	r3,-8(fp)
 8002aa8:	1884b03a 	or	r2,r3,r2
 8002aac:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 8002ab0:	e0fffe17 	ldw	r3,-8(fp)
 8002ab4:	00807804 	movi	r2,480
 8002ab8:	10c00035 	stwio	r3,0(r2)
}
 8002abc:	0001883a 	nop
 8002ac0:	e037883a 	mov	sp,fp
 8002ac4:	dfc00117 	ldw	ra,4(sp)
 8002ac8:	df000017 	ldw	fp,0(sp)
 8002acc:	dec00204 	addi	sp,sp,8
 8002ad0:	f800283a 	ret

08002ad4 <setKeycode>:

void setKeycode(WORD keycode0, WORD keycode1, WORD keycode2, WORD keycode3, WORD keycode4, WORD keycode5, unsigned int acc)
{
 8002ad4:	deffb804 	addi	sp,sp,-288
 8002ad8:	dfc04715 	stw	ra,284(sp)
 8002adc:	df004615 	stw	fp,280(sp)
 8002ae0:	dc404515 	stw	r17,276(sp)
 8002ae4:	dc004415 	stw	r16,272(sp)
 8002ae8:	df004604 	addi	fp,sp,280
 8002aec:	2013883a 	mov	r9,r4
 8002af0:	2811883a 	mov	r8,r5
 8002af4:	300b883a 	mov	r5,r6
 8002af8:	3809883a 	mov	r4,r7
 8002afc:	e0c00217 	ldw	r3,8(fp)
 8002b00:	e0800317 	ldw	r2,12(fp)
 8002b04:	e27fef0d 	sth	r9,-68(fp)
 8002b08:	e23ff00d 	sth	r8,-64(fp)
 8002b0c:	e17ff10d 	sth	r5,-60(fp)
 8002b10:	e13ff20d 	sth	r4,-56(fp)
 8002b14:	e0fff30d 	sth	r3,-52(fp)
 8002b18:	e0bff40d 	sth	r2,-48(fp)
	static int prev_direction[2], prev_rotation[2], DAS;
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode0); // was x8002000
 8002b1c:	e0ffef0b 	ldhu	r3,-68(fp)
 8002b20:	00808804 	movi	r2,544
 8002b24:	10c00035 	stwio	r3,0(r2)
	struct piece next_piece, prev_next_piece;
	alt_u32 new_window, prev_new_window, left_window, right_window, top_window, bottom_window;
	int DAS_interval;
	int drop_interval;

	WORD keycode[6] = {keycode0, keycode1, keycode2, keycode3, keycode4, keycode5};
 8002b28:	e0bfef0b 	ldhu	r2,-68(fp)
 8002b2c:	e0bfec0d 	sth	r2,-80(fp)
 8002b30:	e0bff00b 	ldhu	r2,-64(fp)
 8002b34:	e0bfec8d 	sth	r2,-78(fp)
 8002b38:	e0bff10b 	ldhu	r2,-60(fp)
 8002b3c:	e0bfed0d 	sth	r2,-76(fp)
 8002b40:	e0bff20b 	ldhu	r2,-56(fp)
 8002b44:	e0bfed8d 	sth	r2,-74(fp)
 8002b48:	e0bff30b 	ldhu	r2,-52(fp)
 8002b4c:	e0bfee0d 	sth	r2,-72(fp)
 8002b50:	e0bff40b 	ldhu	r2,-48(fp)
 8002b54:	e0bfee8d 	sth	r2,-70(fp)

	if (vga_ctrl->ASSERTION & 0x00000004) {
 8002b58:	d0a00317 	ldw	r2,-32756(gp)
 8002b5c:	10880317 	ldw	r2,8204(r2)
 8002b60:	1080010c 	andi	r2,r2,4
 8002b64:	10007a26 	beq	r2,zero,8002d50 <setKeycode+0x27c>
		// In game over screen
		//printf("In game over\n");
		for (unsigned t = 0; t < 6; t++) {
 8002b68:	e03fc315 	stw	zero,-244(fp)
 8002b6c:	00007406 	br	8002d40 <setKeycode+0x26c>
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
			if (keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 81 && keycode[t] != 7 && keycode[t] != 9 && keycode[t] != 40) {
 8002b70:	e0bfc317 	ldw	r2,-244(fp)
 8002b74:	1085883a 	add	r2,r2,r2
 8002b78:	e0ffc104 	addi	r3,fp,-252
 8002b7c:	1885883a 	add	r2,r3,r2
 8002b80:	10802b04 	addi	r2,r2,172
 8002b84:	1080000b 	ldhu	r2,0(r2)
 8002b88:	10bfffcc 	andi	r2,r2,65535
 8002b8c:	108013e0 	cmpeqi	r2,r2,79
 8002b90:	10002d1e 	bne	r2,zero,8002c48 <setKeycode+0x174>
 8002b94:	e0bfc317 	ldw	r2,-244(fp)
 8002b98:	1085883a 	add	r2,r2,r2
 8002b9c:	e0ffc104 	addi	r3,fp,-252
 8002ba0:	1885883a 	add	r2,r3,r2
 8002ba4:	10802b04 	addi	r2,r2,172
 8002ba8:	1080000b 	ldhu	r2,0(r2)
 8002bac:	10bfffcc 	andi	r2,r2,65535
 8002bb0:	10801420 	cmpeqi	r2,r2,80
 8002bb4:	1000241e 	bne	r2,zero,8002c48 <setKeycode+0x174>
 8002bb8:	e0bfc317 	ldw	r2,-244(fp)
 8002bbc:	1085883a 	add	r2,r2,r2
 8002bc0:	e0ffc104 	addi	r3,fp,-252
 8002bc4:	1885883a 	add	r2,r3,r2
 8002bc8:	10802b04 	addi	r2,r2,172
 8002bcc:	1080000b 	ldhu	r2,0(r2)
 8002bd0:	10bfffcc 	andi	r2,r2,65535
 8002bd4:	10801460 	cmpeqi	r2,r2,81
 8002bd8:	10001b1e 	bne	r2,zero,8002c48 <setKeycode+0x174>
 8002bdc:	e0bfc317 	ldw	r2,-244(fp)
 8002be0:	1085883a 	add	r2,r2,r2
 8002be4:	e0ffc104 	addi	r3,fp,-252
 8002be8:	1885883a 	add	r2,r3,r2
 8002bec:	10802b04 	addi	r2,r2,172
 8002bf0:	1080000b 	ldhu	r2,0(r2)
 8002bf4:	10bfffcc 	andi	r2,r2,65535
 8002bf8:	108001e0 	cmpeqi	r2,r2,7
 8002bfc:	1000121e 	bne	r2,zero,8002c48 <setKeycode+0x174>
 8002c00:	e0bfc317 	ldw	r2,-244(fp)
 8002c04:	1085883a 	add	r2,r2,r2
 8002c08:	e0ffc104 	addi	r3,fp,-252
 8002c0c:	1885883a 	add	r2,r3,r2
 8002c10:	10802b04 	addi	r2,r2,172
 8002c14:	1080000b 	ldhu	r2,0(r2)
 8002c18:	10bfffcc 	andi	r2,r2,65535
 8002c1c:	10800260 	cmpeqi	r2,r2,9
 8002c20:	1000091e 	bne	r2,zero,8002c48 <setKeycode+0x174>
 8002c24:	e0bfc317 	ldw	r2,-244(fp)
 8002c28:	1085883a 	add	r2,r2,r2
 8002c2c:	e0ffc104 	addi	r3,fp,-252
 8002c30:	1885883a 	add	r2,r3,r2
 8002c34:	10802b04 	addi	r2,r2,172
 8002c38:	1080000b 	ldhu	r2,0(r2)
 8002c3c:	10bfffcc 	andi	r2,r2,65535
 8002c40:	10800a20 	cmpeqi	r2,r2,40
 8002c44:	10003a26 	beq	r2,zero,8002d30 <setKeycode+0x25c>
				continue;
			}
			else if (keycode[t] == 7 || keycode[t] == 9 || keycode[t] == 40) {
 8002c48:	e0bfc317 	ldw	r2,-244(fp)
 8002c4c:	1085883a 	add	r2,r2,r2
 8002c50:	e0ffc104 	addi	r3,fp,-252
 8002c54:	1885883a 	add	r2,r3,r2
 8002c58:	10802b04 	addi	r2,r2,172
 8002c5c:	1080000b 	ldhu	r2,0(r2)
 8002c60:	10bfffcc 	andi	r2,r2,65535
 8002c64:	108001e0 	cmpeqi	r2,r2,7
 8002c68:	1000121e 	bne	r2,zero,8002cb4 <setKeycode+0x1e0>
 8002c6c:	e0bfc317 	ldw	r2,-244(fp)
 8002c70:	1085883a 	add	r2,r2,r2
 8002c74:	e0ffc104 	addi	r3,fp,-252
 8002c78:	1885883a 	add	r2,r3,r2
 8002c7c:	10802b04 	addi	r2,r2,172
 8002c80:	1080000b 	ldhu	r2,0(r2)
 8002c84:	10bfffcc 	andi	r2,r2,65535
 8002c88:	10800260 	cmpeqi	r2,r2,9
 8002c8c:	1000091e 	bne	r2,zero,8002cb4 <setKeycode+0x1e0>
 8002c90:	e0bfc317 	ldw	r2,-244(fp)
 8002c94:	1085883a 	add	r2,r2,r2
 8002c98:	e0ffc104 	addi	r3,fp,-252
 8002c9c:	1885883a 	add	r2,r3,r2
 8002ca0:	10802b04 	addi	r2,r2,172
 8002ca4:	1080000b 	ldhu	r2,0(r2)
 8002ca8:	10bfffcc 	andi	r2,r2,65535
 8002cac:	10800a18 	cmpnei	r2,r2,40
 8002cb0:	1000201e 	bne	r2,zero,8002d34 <setKeycode+0x260>
				vga_ctrl->ASSERTION &= 0xFFFFFFFB;
 8002cb4:	d0a00317 	ldw	r2,-32756(gp)
 8002cb8:	d0e00317 	ldw	r3,-32756(gp)
 8002cbc:	19080317 	ldw	r4,8204(r3)
 8002cc0:	00fffec4 	movi	r3,-5
 8002cc4:	20c6703a 	and	r3,r4,r3
 8002cc8:	10c80315 	stw	r3,8204(r2)
				vga_ctrl->ASSERTION |= 0x00000002;
 8002ccc:	d0a00317 	ldw	r2,-32756(gp)
 8002cd0:	d0e00317 	ldw	r3,-32756(gp)
 8002cd4:	18c80317 	ldw	r3,8204(r3)
 8002cd8:	18c00094 	ori	r3,r3,2
 8002cdc:	10c80315 	stw	r3,8204(r2)
				for (int i = 0; i < 20; i++) {
 8002ce0:	e03fc415 	stw	zero,-240(fp)
 8002ce4:	00000e06 	br	8002d20 <setKeycode+0x24c>
					vga_ctrl->BOARD[i] = 0x00000000;
 8002ce8:	d0e00317 	ldw	r3,-32756(gp)
 8002cec:	e0bfc417 	ldw	r2,-240(fp)
 8002cf0:	10800084 	addi	r2,r2,2
 8002cf4:	1085883a 	add	r2,r2,r2
 8002cf8:	1085883a 	add	r2,r2,r2
 8002cfc:	1885883a 	add	r2,r3,r2
 8002d00:	10000015 	stw	zero,0(r2)
					vga_ctrl->DELAY = 0x00000000;
 8002d04:	d0a00317 	ldw	r2,-32756(gp)
 8002d08:	10001815 	stw	zero,96(r2)
					vga_ctrl->LEVEL_LINES = 0x00000000;
 8002d0c:	d0a00317 	ldw	r2,-32756(gp)
 8002d10:	10000015 	stw	zero,0(r2)
				continue;
			}
			else if (keycode[t] == 7 || keycode[t] == 9 || keycode[t] == 40) {
				vga_ctrl->ASSERTION &= 0xFFFFFFFB;
				vga_ctrl->ASSERTION |= 0x00000002;
				for (int i = 0; i < 20; i++) {
 8002d14:	e0bfc417 	ldw	r2,-240(fp)
 8002d18:	10800044 	addi	r2,r2,1
 8002d1c:	e0bfc415 	stw	r2,-240(fp)
 8002d20:	e0bfc417 	ldw	r2,-240(fp)
 8002d24:	10800510 	cmplti	r2,r2,20
 8002d28:	103fef1e 	bne	r2,zero,8002ce8 <__alt_data_end+0xfc002ce8>
					vga_ctrl->BOARD[i] = 0x00000000;
					vga_ctrl->DELAY = 0x00000000;
					vga_ctrl->LEVEL_LINES = 0x00000000;
				}
				break;
 8002d2c:	0002fd06 	br	8003924 <setKeycode+0xe50>
		// In game over screen
		//printf("In game over\n");
		for (unsigned t = 0; t < 6; t++) {
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
			if (keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 81 && keycode[t] != 7 && keycode[t] != 9 && keycode[t] != 40) {
				continue;
 8002d30:	0001883a 	nop
	WORD keycode[6] = {keycode0, keycode1, keycode2, keycode3, keycode4, keycode5};

	if (vga_ctrl->ASSERTION & 0x00000004) {
		// In game over screen
		//printf("In game over\n");
		for (unsigned t = 0; t < 6; t++) {
 8002d34:	e0bfc317 	ldw	r2,-244(fp)
 8002d38:	10800044 	addi	r2,r2,1
 8002d3c:	e0bfc315 	stw	r2,-244(fp)
 8002d40:	e0bfc317 	ldw	r2,-244(fp)
 8002d44:	108001b0 	cmpltui	r2,r2,6
 8002d48:	103f891e 	bne	r2,zero,8002b70 <__alt_data_end+0xfc002b70>
 8002d4c:	0002f506 	br	8003924 <setKeycode+0xe50>
				}
				break;
			}
		}
	}
	else if ((vga_ctrl->ASSERTION & 0x00000002) == 0) {
 8002d50:	d0a00317 	ldw	r2,-32756(gp)
 8002d54:	10880317 	ldw	r2,8204(r2)
 8002d58:	1080008c 	andi	r2,r2,2
 8002d5c:	1001eb1e 	bne	r2,zero,800350c <setKeycode+0xa38>
		//printf("In board\n");

		// Indicates held key contributes to the DAS (probably the slowest playstyle)
	if (acc) {
 8002d60:	e0800417 	ldw	r2,16(fp)
 8002d64:	10001726 	beq	r2,zero,8002dc4 <setKeycode+0x2f0>
		DAS++;
 8002d68:	d0a75717 	ldw	r2,-25252(gp)
 8002d6c:	10800044 	addi	r2,r2,1
 8002d70:	d0a75715 	stw	r2,-25252(gp)
		if (DAS > 3) {
 8002d74:	d0a75717 	ldw	r2,-25252(gp)
 8002d78:	10800110 	cmplti	r2,r2,4
 8002d7c:	1000031e 	bne	r2,zero,8002d8c <setKeycode+0x2b8>
			DAS_interval = 1;
 8002d80:	00800044 	movi	r2,1
 8002d84:	e0bfc215 	stw	r2,-248(fp)
 8002d88:	00000806 	br	8002dac <setKeycode+0x2d8>
		}
		else if (DAS > 1) {
 8002d8c:	d0a75717 	ldw	r2,-25252(gp)
 8002d90:	10800090 	cmplti	r2,r2,2
 8002d94:	1000031e 	bne	r2,zero,8002da4 <setKeycode+0x2d0>
			DAS_interval = 2;
 8002d98:	00800084 	movi	r2,2
 8002d9c:	e0bfc215 	stw	r2,-248(fp)
 8002da0:	00000206 	br	8002dac <setKeycode+0x2d8>
		}
		else {
			DAS_interval = 3;
 8002da4:	008000c4 	movi	r2,3
 8002da8:	e0bfc215 	stw	r2,-248(fp)
		}
		if (DAS % DAS_interval != 0) {
 8002dac:	d0a75717 	ldw	r2,-25252(gp)
 8002db0:	e17fc217 	ldw	r5,-248(fp)
 8002db4:	1009883a 	mov	r4,r2
 8002db8:	80081fc0 	call	80081fc <__modsi3>
 8002dbc:	10000226 	beq	r2,zero,8002dc8 <setKeycode+0x2f4>
			return;
 8002dc0:	0002d806 	br	8003924 <setKeycode+0xe50>
		}
	}
	else {
		DAS = 0;
 8002dc4:	d0275715 	stw	zero,-25252(gp)
	}

	// Iterate through all keys and determine whether the resulting operation is legal
	for (unsigned t = 0; t < 6; t++) {
 8002dc8:	e03fc515 	stw	zero,-236(fp)
 8002dcc:	0001b006 	br	8003490 <setKeycode+0x9bc>
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
		if (keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 81 && keycode[t] != 7 && keycode[t] != 9) {
 8002dd0:	e0bfc517 	ldw	r2,-236(fp)
 8002dd4:	1085883a 	add	r2,r2,r2
 8002dd8:	e0ffc104 	addi	r3,fp,-252
 8002ddc:	1885883a 	add	r2,r3,r2
 8002de0:	10802b04 	addi	r2,r2,172
 8002de4:	1080000b 	ldhu	r2,0(r2)
 8002de8:	10bfffcc 	andi	r2,r2,65535
 8002dec:	108013e0 	cmpeqi	r2,r2,79
 8002df0:	1000241e 	bne	r2,zero,8002e84 <setKeycode+0x3b0>
 8002df4:	e0bfc517 	ldw	r2,-236(fp)
 8002df8:	1085883a 	add	r2,r2,r2
 8002dfc:	e0ffc104 	addi	r3,fp,-252
 8002e00:	1885883a 	add	r2,r3,r2
 8002e04:	10802b04 	addi	r2,r2,172
 8002e08:	1080000b 	ldhu	r2,0(r2)
 8002e0c:	10bfffcc 	andi	r2,r2,65535
 8002e10:	10801420 	cmpeqi	r2,r2,80
 8002e14:	10001b1e 	bne	r2,zero,8002e84 <setKeycode+0x3b0>
 8002e18:	e0bfc517 	ldw	r2,-236(fp)
 8002e1c:	1085883a 	add	r2,r2,r2
 8002e20:	e0ffc104 	addi	r3,fp,-252
 8002e24:	1885883a 	add	r2,r3,r2
 8002e28:	10802b04 	addi	r2,r2,172
 8002e2c:	1080000b 	ldhu	r2,0(r2)
 8002e30:	10bfffcc 	andi	r2,r2,65535
 8002e34:	10801460 	cmpeqi	r2,r2,81
 8002e38:	1000121e 	bne	r2,zero,8002e84 <setKeycode+0x3b0>
 8002e3c:	e0bfc517 	ldw	r2,-236(fp)
 8002e40:	1085883a 	add	r2,r2,r2
 8002e44:	e0ffc104 	addi	r3,fp,-252
 8002e48:	1885883a 	add	r2,r3,r2
 8002e4c:	10802b04 	addi	r2,r2,172
 8002e50:	1080000b 	ldhu	r2,0(r2)
 8002e54:	10bfffcc 	andi	r2,r2,65535
 8002e58:	108001e0 	cmpeqi	r2,r2,7
 8002e5c:	1000091e 	bne	r2,zero,8002e84 <setKeycode+0x3b0>
 8002e60:	e0bfc517 	ldw	r2,-236(fp)
 8002e64:	1085883a 	add	r2,r2,r2
 8002e68:	e0ffc104 	addi	r3,fp,-252
 8002e6c:	1885883a 	add	r2,r3,r2
 8002e70:	10802b04 	addi	r2,r2,172
 8002e74:	1080000b 	ldhu	r2,0(r2)
 8002e78:	10bfffcc 	andi	r2,r2,65535
 8002e7c:	10800260 	cmpeqi	r2,r2,9
 8002e80:	10017f26 	beq	r2,zero,8003480 <setKeycode+0x9ac>
			continue;
		}
		else if (t == 0) {
 8002e84:	e0bfc517 	ldw	r2,-236(fp)
 8002e88:	1000281e 	bne	r2,zero,8002f2c <setKeycode+0x458>
			////printf("Window = %x\n", vga_ctrl->WINDOW);
			curr_piece = assemble_piece(vga_ctrl->WINDOW);
 8002e8c:	d0a00317 	ldw	r2,-32756(gp)
 8002e90:	10c80117 	ldw	r3,8196(r2)
 8002e94:	e0bfd104 	addi	r2,fp,-188
 8002e98:	180b883a 	mov	r5,r3
 8002e9c:	1009883a 	mov	r4,r2
 8002ea0:	80055380 	call	8005538 <assemble_piece>
			next_piece = curr_piece;
 8002ea4:	e0bfd117 	ldw	r2,-188(fp)
 8002ea8:	e0bfda15 	stw	r2,-152(fp)
 8002eac:	e0bfd217 	ldw	r2,-184(fp)
 8002eb0:	e0bfdb15 	stw	r2,-148(fp)
 8002eb4:	e0bfd317 	ldw	r2,-180(fp)
 8002eb8:	e0bfdc15 	stw	r2,-144(fp)
 8002ebc:	e0bfd417 	ldw	r2,-176(fp)
 8002ec0:	e0bfdd15 	stw	r2,-140(fp)
 8002ec4:	e0bfd517 	ldw	r2,-172(fp)
 8002ec8:	e0bfde15 	stw	r2,-136(fp)
 8002ecc:	e0bfd617 	ldw	r2,-168(fp)
 8002ed0:	e0bfdf15 	stw	r2,-132(fp)
 8002ed4:	e0bfd717 	ldw	r2,-164(fp)
 8002ed8:	e0bfe015 	stw	r2,-128(fp)
 8002edc:	e0bfd817 	ldw	r2,-160(fp)
 8002ee0:	e0bfe115 	stw	r2,-124(fp)
 8002ee4:	e0bfd917 	ldw	r2,-156(fp)
 8002ee8:	e0bfe215 	stw	r2,-120(fp)
			new_window = vga_ctrl->WINDOW;
 8002eec:	d0a00317 	ldw	r2,-32756(gp)
 8002ef0:	10880117 	ldw	r2,8196(r2)
 8002ef4:	e0bfc115 	stw	r2,-252(fp)
			if ((vga_ctrl->WINDOW & 0x0000001C) == (T_PIECE << 2)) {
 8002ef8:	d0a00317 	ldw	r2,-32756(gp)
 8002efc:	10880117 	ldw	r2,8196(r2)
 8002f00:	1080070c 	andi	r2,r2,28
 8002f04:	10800418 	cmpnei	r2,r2,16
 8002f08:	1000081e 	bne	r2,zero,8002f2c <setKeycode+0x458>
				for (int i = 0; i < 4; i++) {
 8002f0c:	e03fc615 	stw	zero,-232(fp)
 8002f10:	00000306 	br	8002f20 <setKeycode+0x44c>
 8002f14:	e0bfc617 	ldw	r2,-232(fp)
 8002f18:	10800044 	addi	r2,r2,1
 8002f1c:	e0bfc615 	stw	r2,-232(fp)
 8002f20:	e0bfc617 	ldw	r2,-232(fp)
 8002f24:	10800110 	cmplti	r2,r2,4
 8002f28:	103ffa1e 	bne	r2,zero,8002f14 <__alt_data_end+0xfc002f14>
					//printf("[%d,%d], ", curr_piece.col[i], curr_piece.row[i]);
				}
			}
			//printf("window = %x\n", vga_ctrl->WINDOW);
		}
		prev_new_window = new_window;
 8002f2c:	e0bfc117 	ldw	r2,-252(fp)
 8002f30:	e0bfcb15 	stw	r2,-212(fp)
		prev_next_piece = next_piece;
 8002f34:	e0bfda17 	ldw	r2,-152(fp)
 8002f38:	e0bfe315 	stw	r2,-116(fp)
 8002f3c:	e0bfdb17 	ldw	r2,-148(fp)
 8002f40:	e0bfe415 	stw	r2,-112(fp)
 8002f44:	e0bfdc17 	ldw	r2,-144(fp)
 8002f48:	e0bfe515 	stw	r2,-108(fp)
 8002f4c:	e0bfdd17 	ldw	r2,-140(fp)
 8002f50:	e0bfe615 	stw	r2,-104(fp)
 8002f54:	e0bfde17 	ldw	r2,-136(fp)
 8002f58:	e0bfe715 	stw	r2,-100(fp)
 8002f5c:	e0bfdf17 	ldw	r2,-132(fp)
 8002f60:	e0bfe815 	stw	r2,-96(fp)
 8002f64:	e0bfe017 	ldw	r2,-128(fp)
 8002f68:	e0bfe915 	stw	r2,-92(fp)
 8002f6c:	e0bfe117 	ldw	r2,-124(fp)
 8002f70:	e0bfea15 	stw	r2,-88(fp)
 8002f74:	e0bfe217 	ldw	r2,-120(fp)
 8002f78:	e0bfeb15 	stw	r2,-84(fp)
		left_window = (new_window & 0x00001E00) >> 9;
 8002f7c:	e0bfc117 	ldw	r2,-252(fp)
 8002f80:	1087800c 	andi	r2,r2,7680
 8002f84:	1004d27a 	srli	r2,r2,9
 8002f88:	e0bfcc15 	stw	r2,-208(fp)
		right_window = (new_window & 0x000001E0) >> 5;
 8002f8c:	e0bfc117 	ldw	r2,-252(fp)
 8002f90:	1080780c 	andi	r2,r2,480
 8002f94:	1004d17a 	srli	r2,r2,5
 8002f98:	e0bfcd15 	stw	r2,-204(fp)
		top_window = (new_window & 0x007C0000) >> 18;
 8002f9c:	e0bfc117 	ldw	r2,-252(fp)
 8002fa0:	10801f2c 	andhi	r2,r2,124
 8002fa4:	1004d4ba 	srli	r2,r2,18
 8002fa8:	e0bfce15 	stw	r2,-200(fp)
		bottom_window = (new_window & 0x0003E000) >> 13;
 8002fac:	e0ffc117 	ldw	r3,-252(fp)
 8002fb0:	00800134 	movhi	r2,4
 8002fb4:	10b80004 	addi	r2,r2,-8192
 8002fb8:	1884703a 	and	r2,r3,r2
 8002fbc:	1004d37a 	srli	r2,r2,13
 8002fc0:	e0bfcf15 	stw	r2,-196(fp)

		if (keycode[t] == 79) {	// Right arrow (move right)
 8002fc4:	e0bfc517 	ldw	r2,-236(fp)
 8002fc8:	1085883a 	add	r2,r2,r2
 8002fcc:	e0ffc104 	addi	r3,fp,-252
 8002fd0:	1885883a 	add	r2,r3,r2
 8002fd4:	10802b04 	addi	r2,r2,172
 8002fd8:	1080000b 	ldhu	r2,0(r2)
 8002fdc:	10bfffcc 	andi	r2,r2,65535
 8002fe0:	108013d8 	cmpnei	r2,r2,79
 8002fe4:	10002a1e 	bne	r2,zero,8003090 <setKeycode+0x5bc>
			next_piece.col[0] += 2, next_piece.col[1] += 2, next_piece.col[2] += 2, next_piece.col[3] += 2;
 8002fe8:	e0bfde17 	ldw	r2,-136(fp)
 8002fec:	10800084 	addi	r2,r2,2
 8002ff0:	e0bfde15 	stw	r2,-136(fp)
 8002ff4:	e0bfdf17 	ldw	r2,-132(fp)
 8002ff8:	10800084 	addi	r2,r2,2
 8002ffc:	e0bfdf15 	stw	r2,-132(fp)
 8003000:	e0bfe017 	ldw	r2,-128(fp)
 8003004:	10800084 	addi	r2,r2,2
 8003008:	e0bfe015 	stw	r2,-128(fp)
 800300c:	e0bfe117 	ldw	r2,-124(fp)
 8003010:	10800084 	addi	r2,r2,2
 8003014:	e0bfe115 	stw	r2,-124(fp)
			if (left_window >= 6) {
 8003018:	e0bfcc17 	ldw	r2,-208(fp)
 800301c:	108001b0 	cmpltui	r2,r2,6
 8003020:	1000041e 	bne	r2,zero,8003034 <setKeycode+0x560>
				new_window += (1 << 9);
 8003024:	e0bfc117 	ldw	r2,-252(fp)
 8003028:	10808004 	addi	r2,r2,512
 800302c:	e0bfc115 	stw	r2,-252(fp)
 8003030:	00000a06 	br	800305c <setKeycode+0x588>
			}
			else if (right_window <= 2) {
 8003034:	e0bfcd17 	ldw	r2,-204(fp)
 8003038:	108000e8 	cmpgeui	r2,r2,3
 800303c:	1000041e 	bne	r2,zero,8003050 <setKeycode+0x57c>
				new_window += (1 << 5);
 8003040:	e0bfc117 	ldw	r2,-252(fp)
 8003044:	10800804 	addi	r2,r2,32
 8003048:	e0bfc115 	stw	r2,-252(fp)
 800304c:	00000306 	br	800305c <setKeycode+0x588>
			}
			else {
				new_window += (1 << 5 | 1 << 9);
 8003050:	e0bfc117 	ldw	r2,-252(fp)
 8003054:	10808804 	addi	r2,r2,544
 8003058:	e0bfc115 	stw	r2,-252(fp)
			}

			if ((new_window & 0x0000001C) == (T_PIECE << 2)) {
 800305c:	e0bfc117 	ldw	r2,-252(fp)
 8003060:	1080070c 	andi	r2,r2,28
 8003064:	10800418 	cmpnei	r2,r2,16
 8003068:	1000d81e 	bne	r2,zero,80033cc <setKeycode+0x8f8>
				for (int i = 0; i < 4; i++) {
 800306c:	e03fc715 	stw	zero,-228(fp)
 8003070:	00000306 	br	8003080 <setKeycode+0x5ac>
 8003074:	e0bfc717 	ldw	r2,-228(fp)
 8003078:	10800044 	addi	r2,r2,1
 800307c:	e0bfc715 	stw	r2,-228(fp)
 8003080:	e0bfc717 	ldw	r2,-228(fp)
 8003084:	10800110 	cmplti	r2,r2,4
 8003088:	103ffa1e 	bne	r2,zero,8003074 <__alt_data_end+0xfc003074>
 800308c:	0000cf06 	br	80033cc <setKeycode+0x8f8>
					//printf("(%d,%d), ", next_piece.col[i], next_piece.row[i]);
				}
				//printf("new window = %x\n", new_window);
			}
		}
		else if (keycode[t] == 80) {	// Left arrow (move left)
 8003090:	e0bfc517 	ldw	r2,-236(fp)
 8003094:	1085883a 	add	r2,r2,r2
 8003098:	e0ffc104 	addi	r3,fp,-252
 800309c:	1885883a 	add	r2,r3,r2
 80030a0:	10802b04 	addi	r2,r2,172
 80030a4:	1080000b 	ldhu	r2,0(r2)
 80030a8:	10bfffcc 	andi	r2,r2,65535
 80030ac:	10801418 	cmpnei	r2,r2,80
 80030b0:	10001e1e 	bne	r2,zero,800312c <setKeycode+0x658>
			next_piece.col[0] -= 2, next_piece.col[1] -= 2, next_piece.col[2] -= 2, next_piece.col[3] -= 2;
 80030b4:	e0bfde17 	ldw	r2,-136(fp)
 80030b8:	10bfff84 	addi	r2,r2,-2
 80030bc:	e0bfde15 	stw	r2,-136(fp)
 80030c0:	e0bfdf17 	ldw	r2,-132(fp)
 80030c4:	10bfff84 	addi	r2,r2,-2
 80030c8:	e0bfdf15 	stw	r2,-132(fp)
 80030cc:	e0bfe017 	ldw	r2,-128(fp)
 80030d0:	10bfff84 	addi	r2,r2,-2
 80030d4:	e0bfe015 	stw	r2,-128(fp)
 80030d8:	e0bfe117 	ldw	r2,-124(fp)
 80030dc:	10bfff84 	addi	r2,r2,-2
 80030e0:	e0bfe115 	stw	r2,-124(fp)
			if (right_window <= 3) {
 80030e4:	e0bfcd17 	ldw	r2,-204(fp)
 80030e8:	10800128 	cmpgeui	r2,r2,4
 80030ec:	1000041e 	bne	r2,zero,8003100 <setKeycode+0x62c>
				new_window -= (1 << 5);
 80030f0:	e0bfc117 	ldw	r2,-252(fp)
 80030f4:	10bff804 	addi	r2,r2,-32
 80030f8:	e0bfc115 	stw	r2,-252(fp)
 80030fc:	0000b306 	br	80033cc <setKeycode+0x8f8>
			}
			else if (left_window >= 7) {
 8003100:	e0bfcc17 	ldw	r2,-208(fp)
 8003104:	108001f0 	cmpltui	r2,r2,7
 8003108:	1000041e 	bne	r2,zero,800311c <setKeycode+0x648>
				new_window -= (1 << 9);
 800310c:	e0bfc117 	ldw	r2,-252(fp)
 8003110:	10bf8004 	addi	r2,r2,-512
 8003114:	e0bfc115 	stw	r2,-252(fp)
 8003118:	0000ac06 	br	80033cc <setKeycode+0x8f8>
			}
			else {
				new_window -= (1 << 5 | 1 << 9);
 800311c:	e0bfc117 	ldw	r2,-252(fp)
 8003120:	10bf7804 	addi	r2,r2,-544
 8003124:	e0bfc115 	stw	r2,-252(fp)
 8003128:	0000a806 	br	80033cc <setKeycode+0x8f8>
			}
		}
		else if (keycode[t] == 81) {	// Down arrow (move down)
 800312c:	e0bfc517 	ldw	r2,-236(fp)
 8003130:	1085883a 	add	r2,r2,r2
 8003134:	e0ffc104 	addi	r3,fp,-252
 8003138:	1885883a 	add	r2,r3,r2
 800313c:	10802b04 	addi	r2,r2,172
 8003140:	1080000b 	ldhu	r2,0(r2)
 8003144:	10bfffcc 	andi	r2,r2,65535
 8003148:	10801458 	cmpnei	r2,r2,81
 800314c:	1000231e 	bne	r2,zero,80031dc <setKeycode+0x708>
			next_piece.row[0]++, next_piece.row[1]++, next_piece.row[2]++, next_piece.row[3]++;
 8003150:	e0bfda17 	ldw	r2,-152(fp)
 8003154:	10800044 	addi	r2,r2,1
 8003158:	e0bfda15 	stw	r2,-152(fp)
 800315c:	e0bfdb17 	ldw	r2,-148(fp)
 8003160:	10800044 	addi	r2,r2,1
 8003164:	e0bfdb15 	stw	r2,-148(fp)
 8003168:	e0bfdc17 	ldw	r2,-144(fp)
 800316c:	10800044 	addi	r2,r2,1
 8003170:	e0bfdc15 	stw	r2,-144(fp)
 8003174:	e0bfdd17 	ldw	r2,-140(fp)
 8003178:	10800044 	addi	r2,r2,1
 800317c:	e0bfdd15 	stw	r2,-140(fp)
			if (bottom_window < 3) {
 8003180:	e0bfcf17 	ldw	r2,-196(fp)
 8003184:	108000e8 	cmpgeui	r2,r2,3
 8003188:	1000041e 	bne	r2,zero,800319c <setKeycode+0x6c8>
				new_window += (1 << 13);
 800318c:	e0bfc117 	ldw	r2,-252(fp)
 8003190:	10880004 	addi	r2,r2,8192
 8003194:	e0bfc115 	stw	r2,-252(fp)
 8003198:	00000d06 	br	80031d0 <setKeycode+0x6fc>
			}
			else if (top_window > 15) {
 800319c:	e0bfce17 	ldw	r2,-200(fp)
 80031a0:	10800430 	cmpltui	r2,r2,16
 80031a4:	1000051e 	bne	r2,zero,80031bc <setKeycode+0x6e8>
				new_window += (1 << 18);
 80031a8:	e0ffc117 	ldw	r3,-252(fp)
 80031ac:	00800134 	movhi	r2,4
 80031b0:	1885883a 	add	r2,r3,r2
 80031b4:	e0bfc115 	stw	r2,-252(fp)
 80031b8:	00000506 	br	80031d0 <setKeycode+0x6fc>
			}
			else {
				new_window += (1 << 13 | 1 << 18);
 80031bc:	e0ffc117 	ldw	r3,-252(fp)
 80031c0:	00800134 	movhi	r2,4
 80031c4:	10880004 	addi	r2,r2,8192
 80031c8:	1885883a 	add	r2,r3,r2
 80031cc:	e0bfc115 	stw	r2,-252(fp)
			}
			prev_direction[2] = 1;
 80031d0:	00800044 	movi	r2,1
 80031d4:	d0a75a15 	stw	r2,-25240(gp)
 80031d8:	00007c06 	br	80033cc <setKeycode+0x8f8>
		}

		else if (keycode[t] == 7 || keycode[t] == 9) {
 80031dc:	e0bfc517 	ldw	r2,-236(fp)
 80031e0:	1085883a 	add	r2,r2,r2
 80031e4:	e0ffc104 	addi	r3,fp,-252
 80031e8:	1885883a 	add	r2,r3,r2
 80031ec:	10802b04 	addi	r2,r2,172
 80031f0:	1080000b 	ldhu	r2,0(r2)
 80031f4:	10bfffcc 	andi	r2,r2,65535
 80031f8:	108001e0 	cmpeqi	r2,r2,7
 80031fc:	1000091e 	bne	r2,zero,8003224 <setKeycode+0x750>
 8003200:	e0bfc517 	ldw	r2,-236(fp)
 8003204:	1085883a 	add	r2,r2,r2
 8003208:	e0ffc104 	addi	r3,fp,-252
 800320c:	1885883a 	add	r2,r3,r2
 8003210:	10802b04 	addi	r2,r2,172
 8003214:	1080000b 	ldhu	r2,0(r2)
 8003218:	10bfffcc 	andi	r2,r2,65535
 800321c:	10800258 	cmpnei	r2,r2,9
 8003220:	10006a1e 	bne	r2,zero,80033cc <setKeycode+0x8f8>
			if (keycode[t] == 7 && !prev_rotation[0]) {	// D (rotate CW)
 8003224:	e0bfc517 	ldw	r2,-236(fp)
 8003228:	1085883a 	add	r2,r2,r2
 800322c:	e0ffc104 	addi	r3,fp,-252
 8003230:	1885883a 	add	r2,r3,r2
 8003234:	10802b04 	addi	r2,r2,172
 8003238:	1080000b 	ldhu	r2,0(r2)
 800323c:	10bfffcc 	andi	r2,r2,65535
 8003240:	108001d8 	cmpnei	r2,r2,7
 8003244:	1000221e 	bne	r2,zero,80032d0 <setKeycode+0x7fc>
 8003248:	d0a75a17 	ldw	r2,-25240(gp)
 800324c:	1000201e 	bne	r2,zero,80032d0 <setKeycode+0x7fc>
				prev_rotation[0] = 1;
 8003250:	00800044 	movi	r2,1
 8003254:	d0a75a15 	stw	r2,-25240(gp)
				next_piece = rotate_piece(curr_piece, -1);
 8003258:	e0ffda04 	addi	r3,fp,-152
 800325c:	00bfffc4 	movi	r2,-1
 8003260:	d8800615 	stw	r2,24(sp)
 8003264:	e0bfd417 	ldw	r2,-176(fp)
 8003268:	d8800015 	stw	r2,0(sp)
 800326c:	e0bfd517 	ldw	r2,-172(fp)
 8003270:	d8800115 	stw	r2,4(sp)
 8003274:	e0bfd617 	ldw	r2,-168(fp)
 8003278:	d8800215 	stw	r2,8(sp)
 800327c:	e0bfd717 	ldw	r2,-164(fp)
 8003280:	d8800315 	stw	r2,12(sp)
 8003284:	e0bfd817 	ldw	r2,-160(fp)
 8003288:	d8800415 	stw	r2,16(sp)
 800328c:	e0bfd917 	ldw	r2,-156(fp)
 8003290:	d8800515 	stw	r2,20(sp)
 8003294:	e17fd117 	ldw	r5,-188(fp)
 8003298:	e1bfd217 	ldw	r6,-184(fp)
 800329c:	e1ffd317 	ldw	r7,-180(fp)
 80032a0:	1809883a 	mov	r4,r3
 80032a4:	8004a180 	call	8004a18 <rotate_piece>
				new_window = (new_window & 0xFFFFFFFC) | next_piece.orient;
 80032a8:	e0ffc117 	ldw	r3,-252(fp)
 80032ac:	00bfff04 	movi	r2,-4
 80032b0:	1886703a 	and	r3,r3,r2
 80032b4:	e0bfe217 	ldw	r2,-120(fp)
 80032b8:	1004d0fa 	srli	r2,r2,3
 80032bc:	108000cc 	andi	r2,r2,3
 80032c0:	10803fcc 	andi	r2,r2,255
 80032c4:	1884b03a 	or	r2,r3,r2
 80032c8:	e0bfc115 	stw	r2,-252(fp)
 80032cc:	00000106 	br	80032d4 <setKeycode+0x800>
			}
			else {
				prev_rotation[0] = 0;
 80032d0:	d0275a15 	stw	zero,-25240(gp)
			}

			if (keycode[t] == 9 && !prev_rotation[1]) {	// F (rotate CCW)
 80032d4:	e0bfc517 	ldw	r2,-236(fp)
 80032d8:	1085883a 	add	r2,r2,r2
 80032dc:	e0ffc104 	addi	r3,fp,-252
 80032e0:	1885883a 	add	r2,r3,r2
 80032e4:	10802b04 	addi	r2,r2,172
 80032e8:	1080000b 	ldhu	r2,0(r2)
 80032ec:	10bfffcc 	andi	r2,r2,65535
 80032f0:	10800258 	cmpnei	r2,r2,9
 80032f4:	1000341e 	bne	r2,zero,80033c8 <setKeycode+0x8f4>
 80032f8:	d0a75b17 	ldw	r2,-25236(gp)
 80032fc:	1000321e 	bne	r2,zero,80033c8 <setKeycode+0x8f4>
				prev_rotation[1] = 1;
 8003300:	00800044 	movi	r2,1
 8003304:	d0a75b15 	stw	r2,-25236(gp)
				next_piece = rotate_piece(curr_piece, 1);
 8003308:	e0fff504 	addi	r3,fp,-44
 800330c:	00800044 	movi	r2,1
 8003310:	d8800615 	stw	r2,24(sp)
 8003314:	e0bfd417 	ldw	r2,-176(fp)
 8003318:	d8800015 	stw	r2,0(sp)
 800331c:	e0bfd517 	ldw	r2,-172(fp)
 8003320:	d8800115 	stw	r2,4(sp)
 8003324:	e0bfd617 	ldw	r2,-168(fp)
 8003328:	d8800215 	stw	r2,8(sp)
 800332c:	e0bfd717 	ldw	r2,-164(fp)
 8003330:	d8800315 	stw	r2,12(sp)
 8003334:	e0bfd817 	ldw	r2,-160(fp)
 8003338:	d8800415 	stw	r2,16(sp)
 800333c:	e0bfd917 	ldw	r2,-156(fp)
 8003340:	d8800515 	stw	r2,20(sp)
 8003344:	e17fd117 	ldw	r5,-188(fp)
 8003348:	e1bfd217 	ldw	r6,-184(fp)
 800334c:	e1ffd317 	ldw	r7,-180(fp)
 8003350:	1809883a 	mov	r4,r3
 8003354:	8004a180 	call	8004a18 <rotate_piece>
 8003358:	e0bff517 	ldw	r2,-44(fp)
 800335c:	e0bfda15 	stw	r2,-152(fp)
 8003360:	e0bff617 	ldw	r2,-40(fp)
 8003364:	e0bfdb15 	stw	r2,-148(fp)
 8003368:	e0bff717 	ldw	r2,-36(fp)
 800336c:	e0bfdc15 	stw	r2,-144(fp)
 8003370:	e0bff817 	ldw	r2,-32(fp)
 8003374:	e0bfdd15 	stw	r2,-140(fp)
 8003378:	e0bff917 	ldw	r2,-28(fp)
 800337c:	e0bfde15 	stw	r2,-136(fp)
 8003380:	e0bffa17 	ldw	r2,-24(fp)
 8003384:	e0bfdf15 	stw	r2,-132(fp)
 8003388:	e0bffb17 	ldw	r2,-20(fp)
 800338c:	e0bfe015 	stw	r2,-128(fp)
 8003390:	e0bffc17 	ldw	r2,-16(fp)
 8003394:	e0bfe115 	stw	r2,-124(fp)
 8003398:	e0bffd17 	ldw	r2,-12(fp)
 800339c:	e0bfe215 	stw	r2,-120(fp)
				new_window = (new_window & 0xFFFFFFFC) | next_piece.orient;
 80033a0:	e0ffc117 	ldw	r3,-252(fp)
 80033a4:	00bfff04 	movi	r2,-4
 80033a8:	1886703a 	and	r3,r3,r2
 80033ac:	e0bfe217 	ldw	r2,-120(fp)
 80033b0:	1004d0fa 	srli	r2,r2,3
 80033b4:	108000cc 	andi	r2,r2,3
 80033b8:	10803fcc 	andi	r2,r2,255
 80033bc:	1884b03a 	or	r2,r3,r2
 80033c0:	e0bfc115 	stw	r2,-252(fp)
 80033c4:	00000106 	br	80033cc <setKeycode+0x8f8>
			}
			else {
				prev_rotation[1] = 0;
 80033c8:	d0275b15 	stw	zero,-25236(gp)
			}
		}

		if (!is_legal_world(next_piece)) {
 80033cc:	e0bfde17 	ldw	r2,-136(fp)
 80033d0:	d8800015 	stw	r2,0(sp)
 80033d4:	e0bfdf17 	ldw	r2,-132(fp)
 80033d8:	d8800115 	stw	r2,4(sp)
 80033dc:	e0bfe017 	ldw	r2,-128(fp)
 80033e0:	d8800215 	stw	r2,8(sp)
 80033e4:	e0bfe117 	ldw	r2,-124(fp)
 80033e8:	d8800315 	stw	r2,12(sp)
 80033ec:	e0bfe217 	ldw	r2,-120(fp)
 80033f0:	d8800415 	stw	r2,16(sp)
 80033f4:	e13fda17 	ldw	r4,-152(fp)
 80033f8:	e17fdb17 	ldw	r5,-148(fp)
 80033fc:	e1bfdc17 	ldw	r6,-144(fp)
 8003400:	e1ffdd17 	ldw	r7,-140(fp)
 8003404:	80048100 	call	8004810 <is_legal_world>
 8003408:	10001e1e 	bne	r2,zero,8003484 <setKeycode+0x9b0>
			//printf("Illegal - continue using window = %x\n", prev_new_window);
			for (int i = 0; i < 4; i++) {
 800340c:	e03fc815 	stw	zero,-224(fp)
 8003410:	00000306 	br	8003420 <setKeycode+0x94c>
 8003414:	e0bfc817 	ldw	r2,-224(fp)
 8003418:	10800044 	addi	r2,r2,1
 800341c:	e0bfc815 	stw	r2,-224(fp)
 8003420:	e0bfc817 	ldw	r2,-224(fp)
 8003424:	10800110 	cmplti	r2,r2,4
 8003428:	103ffa1e 	bne	r2,zero,8003414 <__alt_data_end+0xfc003414>
				//printf("{%d,%d}, ", prev_next_piece.col[i], prev_next_piece.row[i]);
			}
			new_window = prev_new_window;
 800342c:	e0bfcb17 	ldw	r2,-212(fp)
 8003430:	e0bfc115 	stw	r2,-252(fp)
			next_piece = prev_next_piece;
 8003434:	e0bfe317 	ldw	r2,-116(fp)
 8003438:	e0bfda15 	stw	r2,-152(fp)
 800343c:	e0bfe417 	ldw	r2,-112(fp)
 8003440:	e0bfdb15 	stw	r2,-148(fp)
 8003444:	e0bfe517 	ldw	r2,-108(fp)
 8003448:	e0bfdc15 	stw	r2,-144(fp)
 800344c:	e0bfe617 	ldw	r2,-104(fp)
 8003450:	e0bfdd15 	stw	r2,-140(fp)
 8003454:	e0bfe717 	ldw	r2,-100(fp)
 8003458:	e0bfde15 	stw	r2,-136(fp)
 800345c:	e0bfe817 	ldw	r2,-96(fp)
 8003460:	e0bfdf15 	stw	r2,-132(fp)
 8003464:	e0bfe917 	ldw	r2,-92(fp)
 8003468:	e0bfe015 	stw	r2,-128(fp)
 800346c:	e0bfea17 	ldw	r2,-88(fp)
 8003470:	e0bfe115 	stw	r2,-124(fp)
 8003474:	e0bfeb17 	ldw	r2,-84(fp)
 8003478:	e0bfe215 	stw	r2,-120(fp)
 800347c:	00000106 	br	8003484 <setKeycode+0x9b0>

	// Iterate through all keys and determine whether the resulting operation is legal
	for (unsigned t = 0; t < 6; t++) {
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
		if (keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 81 && keycode[t] != 7 && keycode[t] != 9) {
			continue;
 8003480:	0001883a 	nop
	else {
		DAS = 0;
	}

	// Iterate through all keys and determine whether the resulting operation is legal
	for (unsigned t = 0; t < 6; t++) {
 8003484:	e0bfc517 	ldw	r2,-236(fp)
 8003488:	10800044 	addi	r2,r2,1
 800348c:	e0bfc515 	stw	r2,-236(fp)
 8003490:	e0bfc517 	ldw	r2,-236(fp)
 8003494:	108001b0 	cmpltui	r2,r2,6
 8003498:	103e4d1e 	bne	r2,zero,8002dd0 <__alt_data_end+0xfc002dd0>
			}
			new_window = prev_new_window;
			next_piece = prev_next_piece;
		}
	}
	if (is_legal_world(next_piece)) {
 800349c:	e0bfde17 	ldw	r2,-136(fp)
 80034a0:	d8800015 	stw	r2,0(sp)
 80034a4:	e0bfdf17 	ldw	r2,-132(fp)
 80034a8:	d8800115 	stw	r2,4(sp)
 80034ac:	e0bfe017 	ldw	r2,-128(fp)
 80034b0:	d8800215 	stw	r2,8(sp)
 80034b4:	e0bfe117 	ldw	r2,-124(fp)
 80034b8:	d8800315 	stw	r2,12(sp)
 80034bc:	e0bfe217 	ldw	r2,-120(fp)
 80034c0:	d8800415 	stw	r2,16(sp)
 80034c4:	e13fda17 	ldw	r4,-152(fp)
 80034c8:	e17fdb17 	ldw	r5,-148(fp)
 80034cc:	e1bfdc17 	ldw	r6,-144(fp)
 80034d0:	e1ffdd17 	ldw	r7,-140(fp)
 80034d4:	80048100 	call	8004810 <is_legal_world>
 80034d8:	10011226 	beq	r2,zero,8003924 <setKeycode+0xe50>
		vga_ctrl->WINDOW = new_window;
 80034dc:	d0a00317 	ldw	r2,-32756(gp)
 80034e0:	e0ffc117 	ldw	r3,-252(fp)
 80034e4:	10c80115 	stw	r3,8196(r2)
		//printf("Use: %x\n", new_window);
		for (int i = 0; i < 4; i++) {
 80034e8:	e03fc915 	stw	zero,-220(fp)
 80034ec:	00000306 	br	80034fc <setKeycode+0xa28>
 80034f0:	e0bfc917 	ldw	r2,-220(fp)
 80034f4:	10800044 	addi	r2,r2,1
 80034f8:	e0bfc915 	stw	r2,-220(fp)
 80034fc:	e0bfc917 	ldw	r2,-220(fp)
 8003500:	10800110 	cmplti	r2,r2,4
 8003504:	103ffa1e 	bne	r2,zero,80034f0 <__alt_data_end+0xfc0034f0>
 8003508:	00010606 	br	8003924 <setKeycode+0xe50>
	else {
		// Level select menu - accept keys: left, right, d, f, enter, 1, 2, 3, 4, 5, 6, 7, 8, 9
		// Numbers determine multipliers to selected level (i.e. if hovering level 3 and press 2, actual level is 3 + 20 = 23).
		//printf("In level select\n");
		//printf("because Assertion = %x\n and ASSERTION & 0x00000002 == %x\n", vga_ctrl->ASSERTION, vga_ctrl->ASSERTION & 0x00000002);
		for (unsigned t = 0; t < 6; t++) {
 800350c:	e03fca15 	stw	zero,-216(fp)
 8003510:	00010106 	br	8003918 <setKeycode+0xe44>
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
			if ((keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 7 && keycode[t] != 9 && keycode[t] != 40) && ((keycode[t] > 38) || (keycode[t] < 30))) {
 8003514:	e0bfca17 	ldw	r2,-216(fp)
 8003518:	1085883a 	add	r2,r2,r2
 800351c:	e0ffc104 	addi	r3,fp,-252
 8003520:	1885883a 	add	r2,r3,r2
 8003524:	10802b04 	addi	r2,r2,172
 8003528:	1080000b 	ldhu	r2,0(r2)
 800352c:	10bfffcc 	andi	r2,r2,65535
 8003530:	108013e0 	cmpeqi	r2,r2,79
 8003534:	1000361e 	bne	r2,zero,8003610 <setKeycode+0xb3c>
 8003538:	e0bfca17 	ldw	r2,-216(fp)
 800353c:	1085883a 	add	r2,r2,r2
 8003540:	e0ffc104 	addi	r3,fp,-252
 8003544:	1885883a 	add	r2,r3,r2
 8003548:	10802b04 	addi	r2,r2,172
 800354c:	1080000b 	ldhu	r2,0(r2)
 8003550:	10bfffcc 	andi	r2,r2,65535
 8003554:	10801420 	cmpeqi	r2,r2,80
 8003558:	10002d1e 	bne	r2,zero,8003610 <setKeycode+0xb3c>
 800355c:	e0bfca17 	ldw	r2,-216(fp)
 8003560:	1085883a 	add	r2,r2,r2
 8003564:	e0ffc104 	addi	r3,fp,-252
 8003568:	1885883a 	add	r2,r3,r2
 800356c:	10802b04 	addi	r2,r2,172
 8003570:	1080000b 	ldhu	r2,0(r2)
 8003574:	10bfffcc 	andi	r2,r2,65535
 8003578:	108001e0 	cmpeqi	r2,r2,7
 800357c:	1000241e 	bne	r2,zero,8003610 <setKeycode+0xb3c>
 8003580:	e0bfca17 	ldw	r2,-216(fp)
 8003584:	1085883a 	add	r2,r2,r2
 8003588:	e0ffc104 	addi	r3,fp,-252
 800358c:	1885883a 	add	r2,r3,r2
 8003590:	10802b04 	addi	r2,r2,172
 8003594:	1080000b 	ldhu	r2,0(r2)
 8003598:	10bfffcc 	andi	r2,r2,65535
 800359c:	10800260 	cmpeqi	r2,r2,9
 80035a0:	10001b1e 	bne	r2,zero,8003610 <setKeycode+0xb3c>
 80035a4:	e0bfca17 	ldw	r2,-216(fp)
 80035a8:	1085883a 	add	r2,r2,r2
 80035ac:	e0ffc104 	addi	r3,fp,-252
 80035b0:	1885883a 	add	r2,r3,r2
 80035b4:	10802b04 	addi	r2,r2,172
 80035b8:	1080000b 	ldhu	r2,0(r2)
 80035bc:	10bfffcc 	andi	r2,r2,65535
 80035c0:	10800a20 	cmpeqi	r2,r2,40
 80035c4:	1000121e 	bne	r2,zero,8003610 <setKeycode+0xb3c>
 80035c8:	e0bfca17 	ldw	r2,-216(fp)
 80035cc:	1085883a 	add	r2,r2,r2
 80035d0:	e0ffc104 	addi	r3,fp,-252
 80035d4:	1885883a 	add	r2,r3,r2
 80035d8:	10802b04 	addi	r2,r2,172
 80035dc:	1080000b 	ldhu	r2,0(r2)
 80035e0:	10bfffcc 	andi	r2,r2,65535
 80035e4:	108009e8 	cmpgeui	r2,r2,39
 80035e8:	1000c71e 	bne	r2,zero,8003908 <setKeycode+0xe34>
 80035ec:	e0bfca17 	ldw	r2,-216(fp)
 80035f0:	1085883a 	add	r2,r2,r2
 80035f4:	e0ffc104 	addi	r3,fp,-252
 80035f8:	1885883a 	add	r2,r3,r2
 80035fc:	10802b04 	addi	r2,r2,172
 8003600:	1080000b 	ldhu	r2,0(r2)
 8003604:	10bfffcc 	andi	r2,r2,65535
 8003608:	108007a8 	cmpgeui	r2,r2,30
 800360c:	1000be26 	beq	r2,zero,8003908 <setKeycode+0xe34>
				continue;
			}
			if (keycode[t] == 79) { // Right
 8003610:	e0bfca17 	ldw	r2,-216(fp)
 8003614:	1085883a 	add	r2,r2,r2
 8003618:	e0ffc104 	addi	r3,fp,-252
 800361c:	1885883a 	add	r2,r3,r2
 8003620:	10802b04 	addi	r2,r2,172
 8003624:	1080000b 	ldhu	r2,0(r2)
 8003628:	10bfffcc 	andi	r2,r2,65535
 800362c:	108013d8 	cmpnei	r2,r2,79
 8003630:	1000121e 	bne	r2,zero,800367c <setKeycode+0xba8>
				if (vga_ctrl->LEVEL_HOVER == 9) {
 8003634:	d0a00317 	ldw	r2,-32756(gp)
 8003638:	10801b17 	ldw	r2,108(r2)
 800363c:	10800258 	cmpnei	r2,r2,9
 8003640:	1000031e 	bne	r2,zero,8003650 <setKeycode+0xb7c>
					vga_ctrl->LEVEL_HOVER = 0;
 8003644:	d0a00317 	ldw	r2,-32756(gp)
 8003648:	10001b15 	stw	zero,108(r2)
 800364c:	00000806 	br	8003670 <setKeycode+0xb9c>
				}
				else {
					vga_ctrl->LEVEL_HOVER = (vga_ctrl->LEVEL_HOVER + 1) % 10;
 8003650:	d4200317 	ldw	r16,-32756(gp)
 8003654:	d0a00317 	ldw	r2,-32756(gp)
 8003658:	10801b17 	ldw	r2,108(r2)
 800365c:	10800044 	addi	r2,r2,1
 8003660:	01400284 	movi	r5,10
 8003664:	1009883a 	mov	r4,r2
 8003668:	80082d40 	call	80082d4 <__umodsi3>
 800366c:	80801b15 	stw	r2,108(r16)
				}
				vga_ctrl->SCORE = 0;
 8003670:	d0a00317 	ldw	r2,-32756(gp)
 8003674:	10000115 	stw	zero,4(r2)
 8003678:	0000a406 	br	800390c <setKeycode+0xe38>
			}
			else if (keycode[t] == 80) { //Left
 800367c:	e0bfca17 	ldw	r2,-216(fp)
 8003680:	1085883a 	add	r2,r2,r2
 8003684:	e0ffc104 	addi	r3,fp,-252
 8003688:	1885883a 	add	r2,r3,r2
 800368c:	10802b04 	addi	r2,r2,172
 8003690:	1080000b 	ldhu	r2,0(r2)
 8003694:	10bfffcc 	andi	r2,r2,65535
 8003698:	10801418 	cmpnei	r2,r2,80
 800369c:	1000121e 	bne	r2,zero,80036e8 <setKeycode+0xc14>
				if (vga_ctrl->LEVEL_HOVER == 0) {
 80036a0:	d0a00317 	ldw	r2,-32756(gp)
 80036a4:	10801b17 	ldw	r2,108(r2)
 80036a8:	1000041e 	bne	r2,zero,80036bc <setKeycode+0xbe8>
					vga_ctrl->LEVEL_HOVER = 9;
 80036ac:	d0a00317 	ldw	r2,-32756(gp)
 80036b0:	00c00244 	movi	r3,9
 80036b4:	10c01b15 	stw	r3,108(r2)
 80036b8:	00000806 	br	80036dc <setKeycode+0xc08>
				}
				else {
					vga_ctrl->LEVEL_HOVER = (vga_ctrl->LEVEL_HOVER - 1) % 10;
 80036bc:	d4200317 	ldw	r16,-32756(gp)
 80036c0:	d0a00317 	ldw	r2,-32756(gp)
 80036c4:	10801b17 	ldw	r2,108(r2)
 80036c8:	10bfffc4 	addi	r2,r2,-1
 80036cc:	01400284 	movi	r5,10
 80036d0:	1009883a 	mov	r4,r2
 80036d4:	80082d40 	call	80082d4 <__umodsi3>
 80036d8:	80801b15 	stw	r2,108(r16)
				}
				vga_ctrl->SCORE = 0;
 80036dc:	d0a00317 	ldw	r2,-32756(gp)
 80036e0:	10000115 	stw	zero,4(r2)
 80036e4:	00008906 	br	800390c <setKeycode+0xe38>
			}
			else if (keycode[t] == 7 || keycode[t] == 9) {
 80036e8:	e0bfca17 	ldw	r2,-216(fp)
 80036ec:	1085883a 	add	r2,r2,r2
 80036f0:	e0ffc104 	addi	r3,fp,-252
 80036f4:	1885883a 	add	r2,r3,r2
 80036f8:	10802b04 	addi	r2,r2,172
 80036fc:	1080000b 	ldhu	r2,0(r2)
 8003700:	10bfffcc 	andi	r2,r2,65535
 8003704:	108001e0 	cmpeqi	r2,r2,7
 8003708:	1000091e 	bne	r2,zero,8003730 <setKeycode+0xc5c>
 800370c:	e0bfca17 	ldw	r2,-216(fp)
 8003710:	1085883a 	add	r2,r2,r2
 8003714:	e0ffc104 	addi	r3,fp,-252
 8003718:	1885883a 	add	r2,r3,r2
 800371c:	10802b04 	addi	r2,r2,172
 8003720:	1080000b 	ldhu	r2,0(r2)
 8003724:	10bfffcc 	andi	r2,r2,65535
 8003728:	10800258 	cmpnei	r2,r2,9
 800372c:	1000201e 	bne	r2,zero,80037b0 <setKeycode+0xcdc>
				vga_ctrl->ASSERTION &= 0xFFFFFFFD;
 8003730:	d0a00317 	ldw	r2,-32756(gp)
 8003734:	d0e00317 	ldw	r3,-32756(gp)
 8003738:	19080317 	ldw	r4,8204(r3)
 800373c:	00ffff44 	movi	r3,-3
 8003740:	20c6703a 	and	r3,r4,r3
 8003744:	10c80315 	stw	r3,8204(r2)
				vga_ctrl->LEVEL_LINES = convert_to_BDC(vga_ctrl->LEVEL_HOVER) << 16;
 8003748:	d4200317 	ldw	r16,-32756(gp)
 800374c:	d0a00317 	ldw	r2,-32756(gp)
 8003750:	10801b17 	ldw	r2,108(r2)
 8003754:	1009883a 	mov	r4,r2
 8003758:	8003b240 	call	8003b24 <convert_to_BDC>
 800375c:	1004943a 	slli	r2,r2,16
 8003760:	80800015 	stw	r2,0(r16)
				drop_interval = (100 - convert_to_dec(vga_ctrl->LEVEL_LINES >> 16));
 8003764:	d0a00317 	ldw	r2,-32756(gp)
 8003768:	10800017 	ldw	r2,0(r2)
 800376c:	1004d43a 	srli	r2,r2,16
 8003770:	1009883a 	mov	r4,r2
 8003774:	8003a400 	call	8003a40 <convert_to_dec>
 8003778:	1007883a 	mov	r3,r2
 800377c:	00801904 	movi	r2,100
 8003780:	10c5c83a 	sub	r2,r2,r3
 8003784:	e0bfd015 	stw	r2,-192(fp)
				vga_ctrl->DROP_INTERVAL = (drop_interval < 0) ? 1 : drop_interval;
 8003788:	d0e00317 	ldw	r3,-32756(gp)
 800378c:	e0bfd017 	ldw	r2,-192(fp)
 8003790:	10000216 	blt	r2,zero,800379c <setKeycode+0xcc8>
 8003794:	e0bfd017 	ldw	r2,-192(fp)
 8003798:	00000106 	br	80037a0 <setKeycode+0xccc>
 800379c:	00800044 	movi	r2,1
 80037a0:	18880415 	stw	r2,8208(r3)
				vga_ctrl->SCORE = 0;
 80037a4:	d0a00317 	ldw	r2,-32756(gp)
 80037a8:	10000115 	stw	zero,4(r2)
 80037ac:	00005706 	br	800390c <setKeycode+0xe38>
			}
			else if (keycode[t] == 40) {
 80037b0:	e0bfca17 	ldw	r2,-216(fp)
 80037b4:	1085883a 	add	r2,r2,r2
 80037b8:	e0ffc104 	addi	r3,fp,-252
 80037bc:	1885883a 	add	r2,r3,r2
 80037c0:	10802b04 	addi	r2,r2,172
 80037c4:	1080000b 	ldhu	r2,0(r2)
 80037c8:	10bfffcc 	andi	r2,r2,65535
 80037cc:	10800a18 	cmpnei	r2,r2,40
 80037d0:	1000211e 	bne	r2,zero,8003858 <setKeycode+0xd84>
				vga_ctrl->ASSERTION &= 0xFFFFFFFD;
 80037d4:	d0a00317 	ldw	r2,-32756(gp)
 80037d8:	d0e00317 	ldw	r3,-32756(gp)
 80037dc:	19080317 	ldw	r4,8204(r3)
 80037e0:	00ffff44 	movi	r3,-3
 80037e4:	20c6703a 	and	r3,r4,r3
 80037e8:	10c80315 	stw	r3,8204(r2)
				vga_ctrl->LEVEL_LINES = convert_to_BDC(vga_ctrl->LEVEL_HOVER + 10) << 16;
 80037ec:	d4200317 	ldw	r16,-32756(gp)
 80037f0:	d0a00317 	ldw	r2,-32756(gp)
 80037f4:	10801b17 	ldw	r2,108(r2)
 80037f8:	10800284 	addi	r2,r2,10
 80037fc:	1009883a 	mov	r4,r2
 8003800:	8003b240 	call	8003b24 <convert_to_BDC>
 8003804:	1004943a 	slli	r2,r2,16
 8003808:	80800015 	stw	r2,0(r16)
				drop_interval = (100 - convert_to_dec(vga_ctrl->LEVEL_LINES >> 16));
 800380c:	d0a00317 	ldw	r2,-32756(gp)
 8003810:	10800017 	ldw	r2,0(r2)
 8003814:	1004d43a 	srli	r2,r2,16
 8003818:	1009883a 	mov	r4,r2
 800381c:	8003a400 	call	8003a40 <convert_to_dec>
 8003820:	1007883a 	mov	r3,r2
 8003824:	00801904 	movi	r2,100
 8003828:	10c5c83a 	sub	r2,r2,r3
 800382c:	e0bfd015 	stw	r2,-192(fp)
				vga_ctrl->DROP_INTERVAL = (drop_interval < 0) ? 1 : drop_interval;
 8003830:	d0e00317 	ldw	r3,-32756(gp)
 8003834:	e0bfd017 	ldw	r2,-192(fp)
 8003838:	10000216 	blt	r2,zero,8003844 <setKeycode+0xd70>
 800383c:	e0bfd017 	ldw	r2,-192(fp)
 8003840:	00000106 	br	8003848 <setKeycode+0xd74>
 8003844:	00800044 	movi	r2,1
 8003848:	18880415 	stw	r2,8208(r3)
				vga_ctrl->SCORE = 0;
 800384c:	d0a00317 	ldw	r2,-32756(gp)
 8003850:	10000115 	stw	zero,4(r2)
 8003854:	00002d06 	br	800390c <setKeycode+0xe38>
			}
			else {
				vga_ctrl->ASSERTION &= 0xFFFFFFFD;
 8003858:	d0a00317 	ldw	r2,-32756(gp)
 800385c:	d0e00317 	ldw	r3,-32756(gp)
 8003860:	19080317 	ldw	r4,8204(r3)
 8003864:	00ffff44 	movi	r3,-3
 8003868:	20c6703a 	and	r3,r4,r3
 800386c:	10c80315 	stw	r3,8204(r2)
				vga_ctrl->LEVEL_LINES = convert_to_BDC(vga_ctrl->LEVEL_HOVER + (keycode[t] - 29) * 10) << 16;
 8003870:	d4200317 	ldw	r16,-32756(gp)
 8003874:	d0a00317 	ldw	r2,-32756(gp)
 8003878:	14401b17 	ldw	r17,108(r2)
 800387c:	e0bfca17 	ldw	r2,-216(fp)
 8003880:	1085883a 	add	r2,r2,r2
 8003884:	e0ffc104 	addi	r3,fp,-252
 8003888:	1885883a 	add	r2,r3,r2
 800388c:	10802b04 	addi	r2,r2,172
 8003890:	1080000b 	ldhu	r2,0(r2)
 8003894:	10bfffcc 	andi	r2,r2,65535
 8003898:	10bff8c4 	addi	r2,r2,-29
 800389c:	01400284 	movi	r5,10
 80038a0:	1009883a 	mov	r4,r2
 80038a4:	800832c0 	call	800832c <__mulsi3>
 80038a8:	8885883a 	add	r2,r17,r2
 80038ac:	1009883a 	mov	r4,r2
 80038b0:	8003b240 	call	8003b24 <convert_to_BDC>
 80038b4:	1004943a 	slli	r2,r2,16
 80038b8:	80800015 	stw	r2,0(r16)
				drop_interval = (100 - convert_to_dec(vga_ctrl->LEVEL_LINES >> 16));
 80038bc:	d0a00317 	ldw	r2,-32756(gp)
 80038c0:	10800017 	ldw	r2,0(r2)
 80038c4:	1004d43a 	srli	r2,r2,16
 80038c8:	1009883a 	mov	r4,r2
 80038cc:	8003a400 	call	8003a40 <convert_to_dec>
 80038d0:	1007883a 	mov	r3,r2
 80038d4:	00801904 	movi	r2,100
 80038d8:	10c5c83a 	sub	r2,r2,r3
 80038dc:	e0bfd015 	stw	r2,-192(fp)
				vga_ctrl->DROP_INTERVAL = (drop_interval < 0) ? 1 : drop_interval;
 80038e0:	d0e00317 	ldw	r3,-32756(gp)
 80038e4:	e0bfd017 	ldw	r2,-192(fp)
 80038e8:	10000216 	blt	r2,zero,80038f4 <setKeycode+0xe20>
 80038ec:	e0bfd017 	ldw	r2,-192(fp)
 80038f0:	00000106 	br	80038f8 <setKeycode+0xe24>
 80038f4:	00800044 	movi	r2,1
 80038f8:	18880415 	stw	r2,8208(r3)
				vga_ctrl->SCORE = 0;
 80038fc:	d0a00317 	ldw	r2,-32756(gp)
 8003900:	10000115 	stw	zero,4(r2)
 8003904:	00000106 	br	800390c <setKeycode+0xe38>
		//printf("In level select\n");
		//printf("because Assertion = %x\n and ASSERTION & 0x00000002 == %x\n", vga_ctrl->ASSERTION, vga_ctrl->ASSERTION & 0x00000002);
		for (unsigned t = 0; t < 6; t++) {
		////printf("Keycode[%d] = %d\n", t, keycode[t]);
			if ((keycode[t] != 79 && keycode[t] != 80 && keycode[t] != 7 && keycode[t] != 9 && keycode[t] != 40) && ((keycode[t] > 38) || (keycode[t] < 30))) {
				continue;
 8003908:	0001883a 	nop
	else {
		// Level select menu - accept keys: left, right, d, f, enter, 1, 2, 3, 4, 5, 6, 7, 8, 9
		// Numbers determine multipliers to selected level (i.e. if hovering level 3 and press 2, actual level is 3 + 20 = 23).
		//printf("In level select\n");
		//printf("because Assertion = %x\n and ASSERTION & 0x00000002 == %x\n", vga_ctrl->ASSERTION, vga_ctrl->ASSERTION & 0x00000002);
		for (unsigned t = 0; t < 6; t++) {
 800390c:	e0bfca17 	ldw	r2,-216(fp)
 8003910:	10800044 	addi	r2,r2,1
 8003914:	e0bfca15 	stw	r2,-216(fp)
 8003918:	e0bfca17 	ldw	r2,-216(fp)
 800391c:	108001b0 	cmpltui	r2,r2,6
 8003920:	103efc1e 	bne	r2,zero,8003514 <__alt_data_end+0xfc003514>
				vga_ctrl->DROP_INTERVAL = (drop_interval < 0) ? 1 : drop_interval;
				vga_ctrl->SCORE = 0;
			}
		}
	}
}
 8003924:	e6fffe04 	addi	sp,fp,-8
 8003928:	dfc00317 	ldw	ra,12(sp)
 800392c:	df000217 	ldw	fp,8(sp)
 8003930:	dc400117 	ldw	r17,4(sp)
 8003934:	dc000017 	ldw	r16,0(sp)
 8003938:	dec00404 	addi	sp,sp,16
 800393c:	f800283a 	ret

08003940 <vga_clear>:
 * Description: Clear out the memory associated with the
 * VGA controller component.
 *
 * Expected behavior: Line, level, and current score are reset.
 */
void vga_clear() {
 8003940:	defffd04 	addi	sp,sp,-12
 8003944:	df000215 	stw	fp,8(sp)
 8003948:	df000204 	addi	fp,sp,8
	vga_ctrl->LEVEL_LINES = 0x00000000;
 800394c:	d0a00317 	ldw	r2,-32756(gp)
 8003950:	10000015 	stw	zero,0(r2)
	vga_ctrl->SCORE	 	  = 0x00000000;
 8003954:	d0a00317 	ldw	r2,-32756(gp)
 8003958:	10000115 	stw	zero,4(r2)
	for (int i = 0; i < BOARD_ROWS; i++) {
 800395c:	e03ffe15 	stw	zero,-8(fp)
 8003960:	00000a06 	br	800398c <vga_clear+0x4c>
		vga_ctrl->BOARD[i] = 0x00000000;
 8003964:	d0e00317 	ldw	r3,-32756(gp)
 8003968:	e0bffe17 	ldw	r2,-8(fp)
 800396c:	10800084 	addi	r2,r2,2
 8003970:	1085883a 	add	r2,r2,r2
 8003974:	1085883a 	add	r2,r2,r2
 8003978:	1885883a 	add	r2,r3,r2
 800397c:	10000015 	stw	zero,0(r2)
 * Expected behavior: Line, level, and current score are reset.
 */
void vga_clear() {
	vga_ctrl->LEVEL_LINES = 0x00000000;
	vga_ctrl->SCORE	 	  = 0x00000000;
	for (int i = 0; i < BOARD_ROWS; i++) {
 8003980:	e0bffe17 	ldw	r2,-8(fp)
 8003984:	10800044 	addi	r2,r2,1
 8003988:	e0bffe15 	stw	r2,-8(fp)
 800398c:	e0bffe17 	ldw	r2,-8(fp)
 8003990:	10800510 	cmplti	r2,r2,20
 8003994:	103ff31e 	bne	r2,zero,8003964 <__alt_data_end+0xfc003964>
		vga_ctrl->BOARD[i] = 0x00000000;
	}
	vga_ctrl->NEXT = 0x00000000;
 8003998:	d0a00317 	ldw	r2,-32756(gp)
 800399c:	10001615 	stw	zero,88(r2)
	vga_ctrl->FRAME = 0x00000000;
 80039a0:	d0a00317 	ldw	r2,-32756(gp)
 80039a4:	10001715 	stw	zero,92(r2)
	vga_ctrl->DELAY = 0x00000000;
 80039a8:	d0a00317 	ldw	r2,-32756(gp)
 80039ac:	10001815 	stw	zero,96(r2)
	vga_ctrl->LINES_CLEARED = 0x00000000;
 80039b0:	d0a00317 	ldw	r2,-32756(gp)
 80039b4:	10001915 	stw	zero,100(r2)
	vga_ctrl->LEVEL_SELECT = 0x00000000;
 80039b8:	d0a00317 	ldw	r2,-32756(gp)
 80039bc:	10001a15 	stw	zero,104(r2)
	vga_ctrl->LEVEL_HOVER = 0x00000000;
 80039c0:	d0a00317 	ldw	r2,-32756(gp)
 80039c4:	10001b15 	stw	zero,108(r2)
	for (int i = 0; i < RESERVE_LENGTH; i++) {
 80039c8:	e03fff15 	stw	zero,-4(fp)
 80039cc:	00000a06 	br	80039f8 <vga_clear+0xb8>
		vga_ctrl->RESERVED[i]	  = 0x00000000;
 80039d0:	d0e00317 	ldw	r3,-32756(gp)
 80039d4:	e0bfff17 	ldw	r2,-4(fp)
 80039d8:	10800704 	addi	r2,r2,28
 80039dc:	1085883a 	add	r2,r2,r2
 80039e0:	1085883a 	add	r2,r2,r2
 80039e4:	1885883a 	add	r2,r3,r2
 80039e8:	10000015 	stw	zero,0(r2)
	vga_ctrl->FRAME = 0x00000000;
	vga_ctrl->DELAY = 0x00000000;
	vga_ctrl->LINES_CLEARED = 0x00000000;
	vga_ctrl->LEVEL_SELECT = 0x00000000;
	vga_ctrl->LEVEL_HOVER = 0x00000000;
	for (int i = 0; i < RESERVE_LENGTH; i++) {
 80039ec:	e0bfff17 	ldw	r2,-4(fp)
 80039f0:	10800044 	addi	r2,r2,1
 80039f4:	e0bfff15 	stw	r2,-4(fp)
 80039f8:	e0bfff17 	ldw	r2,-4(fp)
 80039fc:	1081f910 	cmplti	r2,r2,2020
 8003a00:	103ff31e 	bne	r2,zero,80039d0 <__alt_data_end+0xfc0039d0>
		vga_ctrl->RESERVED[i]	  = 0x00000000;
	}
	vga_ctrl->PALETTE 	  = 0x00000000;
 8003a04:	d0a00317 	ldw	r2,-32756(gp)
 8003a08:	10080015 	stw	zero,8192(r2)
	vga_ctrl->WINDOW	  = 0x00000000;
 8003a0c:	d0a00317 	ldw	r2,-32756(gp)
 8003a10:	10080115 	stw	zero,8196(r2)
	vga_ctrl->ASSERTION = 0x00000002;
 8003a14:	d0a00317 	ldw	r2,-32756(gp)
 8003a18:	00c00084 	movi	r3,2
 8003a1c:	10c80315 	stw	r3,8204(r2)
	vga_ctrl->DROP_INTERVAL = 0xFFFFFFFFF;
 8003a20:	d0a00317 	ldw	r2,-32756(gp)
 8003a24:	00ffffc4 	movi	r3,-1
 8003a28:	10c80415 	stw	r3,8208(r2)
	//printf("vga_ctrl->ASSERTION upon reset is %x\n", vga_ctrl->ASSERTION);
}
 8003a2c:	0001883a 	nop
 8003a30:	e037883a 	mov	sp,fp
 8003a34:	df000017 	ldw	fp,0(sp)
 8003a38:	dec00104 	addi	sp,sp,4
 8003a3c:	f800283a 	ret

08003a40 <convert_to_dec>:

// Convert BDC (8 digits) to decimal
alt_u32 convert_to_dec(alt_u32 base) {
 8003a40:	defff804 	addi	sp,sp,-32
 8003a44:	dfc00715 	stw	ra,28(sp)
 8003a48:	df000615 	stw	fp,24(sp)
 8003a4c:	df000604 	addi	fp,sp,24
 8003a50:	e13fff15 	stw	r4,-4(fp)
    alt_u32 return_number = 0;
 8003a54:	e03ffa15 	stw	zero,-24(fp)
    unsigned int digit;
    unsigned int factor;
    unsigned int bdc_mask = 0x0000000F;
 8003a58:	008003c4 	movi	r2,15
 8003a5c:	e0bffc15 	stw	r2,-16(fp)
    for (unsigned i = 0; i < 8; i++) {
 8003a60:	e03ffb15 	stw	zero,-20(fp)
 8003a64:	00002606 	br	8003b00 <convert_to_dec+0xc0>
        digit = (base & (bdc_mask << (i * 4))) >> (i * 4);
 8003a68:	e0bffb17 	ldw	r2,-20(fp)
 8003a6c:	1085883a 	add	r2,r2,r2
 8003a70:	1085883a 	add	r2,r2,r2
 8003a74:	1007883a 	mov	r3,r2
 8003a78:	e0bffc17 	ldw	r2,-16(fp)
 8003a7c:	10c6983a 	sll	r3,r2,r3
 8003a80:	e0bfff17 	ldw	r2,-4(fp)
 8003a84:	1886703a 	and	r3,r3,r2
 8003a88:	e0bffb17 	ldw	r2,-20(fp)
 8003a8c:	1085883a 	add	r2,r2,r2
 8003a90:	1085883a 	add	r2,r2,r2
 8003a94:	1884d83a 	srl	r2,r3,r2
 8003a98:	e0bffd15 	stw	r2,-12(fp)
        factor = pow(10, i);
 8003a9c:	e13ffb17 	ldw	r4,-20(fp)
 8003aa0:	800b61c0 	call	800b61c <__floatunsidf>
 8003aa4:	1009883a 	mov	r4,r2
 8003aa8:	180b883a 	mov	r5,r3
 8003aac:	200d883a 	mov	r6,r4
 8003ab0:	280f883a 	mov	r7,r5
 8003ab4:	0009883a 	mov	r4,zero
 8003ab8:	01500934 	movhi	r5,16420
 8003abc:	80064580 	call	8006458 <pow>
 8003ac0:	100b883a 	mov	r5,r2
 8003ac4:	180d883a 	mov	r6,r3
 8003ac8:	2809883a 	mov	r4,r5
 8003acc:	300b883a 	mov	r5,r6
 8003ad0:	80081040 	call	8008104 <__fixunsdfsi>
 8003ad4:	e0bffe15 	stw	r2,-8(fp)
        return_number += (digit * factor);
 8003ad8:	e17ffe17 	ldw	r5,-8(fp)
 8003adc:	e13ffd17 	ldw	r4,-12(fp)
 8003ae0:	800832c0 	call	800832c <__mulsi3>
 8003ae4:	1007883a 	mov	r3,r2
 8003ae8:	e0bffa17 	ldw	r2,-24(fp)
 8003aec:	10c5883a 	add	r2,r2,r3
 8003af0:	e0bffa15 	stw	r2,-24(fp)
alt_u32 convert_to_dec(alt_u32 base) {
    alt_u32 return_number = 0;
    unsigned int digit;
    unsigned int factor;
    unsigned int bdc_mask = 0x0000000F;
    for (unsigned i = 0; i < 8; i++) {
 8003af4:	e0bffb17 	ldw	r2,-20(fp)
 8003af8:	10800044 	addi	r2,r2,1
 8003afc:	e0bffb15 	stw	r2,-20(fp)
 8003b00:	e0bffb17 	ldw	r2,-20(fp)
 8003b04:	10800230 	cmpltui	r2,r2,8
 8003b08:	103fd71e 	bne	r2,zero,8003a68 <__alt_data_end+0xfc003a68>
        digit = (base & (bdc_mask << (i * 4))) >> (i * 4);
        factor = pow(10, i);
        return_number += (digit * factor);
    }
    return return_number;
 8003b0c:	e0bffa17 	ldw	r2,-24(fp)
}
 8003b10:	e037883a 	mov	sp,fp
 8003b14:	dfc00117 	ldw	ra,4(sp)
 8003b18:	df000017 	ldw	fp,0(sp)
 8003b1c:	dec00204 	addi	sp,sp,8
 8003b20:	f800283a 	ret

08003b24 <convert_to_BDC>:

// Convert a decimal number (8 digits) to its BDC hexadecimal number (32 bit)
alt_u32 convert_to_BDC(alt_u32 dec) {
 8003b24:	defff504 	addi	sp,sp,-44
 8003b28:	dfc00a15 	stw	ra,40(sp)
 8003b2c:	df000915 	stw	fp,36(sp)
 8003b30:	dc400815 	stw	r17,32(sp)
 8003b34:	dc000715 	stw	r16,28(sp)
 8003b38:	df000904 	addi	fp,sp,36
 8003b3c:	e13ffd15 	stw	r4,-12(fp)
    alt_u32 return_number = 0;
 8003b40:	e03ff715 	stw	zero,-36(fp)
    unsigned int number;
    unsigned int digit;
    unsigned int factor;
    unsigned int hex;
    unsigned int bdc_mask = 0x0000000F;
 8003b44:	008003c4 	movi	r2,15
 8003b48:	e0bff915 	stw	r2,-28(fp)
    for (unsigned i = 0; i < 8; i++) {
 8003b4c:	e03ff815 	stw	zero,-32(fp)
 8003b50:	00004d06 	br	8003c88 <convert_to_BDC+0x164>
        number = dec % (int) (pow(10, i + 1));
 8003b54:	e0bff817 	ldw	r2,-32(fp)
 8003b58:	10800044 	addi	r2,r2,1
 8003b5c:	1009883a 	mov	r4,r2
 8003b60:	800b61c0 	call	800b61c <__floatunsidf>
 8003b64:	1009883a 	mov	r4,r2
 8003b68:	180b883a 	mov	r5,r3
 8003b6c:	200d883a 	mov	r6,r4
 8003b70:	280f883a 	mov	r7,r5
 8003b74:	0009883a 	mov	r4,zero
 8003b78:	01500934 	movhi	r5,16420
 8003b7c:	80064580 	call	8006458 <pow>
 8003b80:	100b883a 	mov	r5,r2
 8003b84:	180d883a 	mov	r6,r3
 8003b88:	2809883a 	mov	r4,r5
 8003b8c:	300b883a 	mov	r5,r6
 8003b90:	800b4c00 	call	800b4c0 <__fixdfsi>
 8003b94:	1007883a 	mov	r3,r2
 8003b98:	e0bffd17 	ldw	r2,-12(fp)
 8003b9c:	180b883a 	mov	r5,r3
 8003ba0:	1009883a 	mov	r4,r2
 8003ba4:	80082d40 	call	80082d4 <__umodsi3>
 8003ba8:	e0bffa15 	stw	r2,-24(fp)
        factor = pow(10, i);
 8003bac:	e13ff817 	ldw	r4,-32(fp)
 8003bb0:	800b61c0 	call	800b61c <__floatunsidf>
 8003bb4:	1009883a 	mov	r4,r2
 8003bb8:	180b883a 	mov	r5,r3
 8003bbc:	200d883a 	mov	r6,r4
 8003bc0:	280f883a 	mov	r7,r5
 8003bc4:	0009883a 	mov	r4,zero
 8003bc8:	01500934 	movhi	r5,16420
 8003bcc:	80064580 	call	8006458 <pow>
 8003bd0:	100b883a 	mov	r5,r2
 8003bd4:	180d883a 	mov	r6,r3
 8003bd8:	2809883a 	mov	r4,r5
 8003bdc:	300b883a 	mov	r5,r6
 8003be0:	80081040 	call	8008104 <__fixunsdfsi>
 8003be4:	e0bffb15 	stw	r2,-20(fp)
        digit = number / pow(10, i);
 8003be8:	e13ffa17 	ldw	r4,-24(fp)
 8003bec:	800b61c0 	call	800b61c <__floatunsidf>
 8003bf0:	1021883a 	mov	r16,r2
 8003bf4:	1823883a 	mov	r17,r3
 8003bf8:	e13ff817 	ldw	r4,-32(fp)
 8003bfc:	800b61c0 	call	800b61c <__floatunsidf>
 8003c00:	1009883a 	mov	r4,r2
 8003c04:	180b883a 	mov	r5,r3
 8003c08:	200d883a 	mov	r6,r4
 8003c0c:	280f883a 	mov	r7,r5
 8003c10:	0009883a 	mov	r4,zero
 8003c14:	01500934 	movhi	r5,16420
 8003c18:	80064580 	call	8006458 <pow>
 8003c1c:	1009883a 	mov	r4,r2
 8003c20:	180b883a 	mov	r5,r3
 8003c24:	200d883a 	mov	r6,r4
 8003c28:	280f883a 	mov	r7,r5
 8003c2c:	8009883a 	mov	r4,r16
 8003c30:	880b883a 	mov	r5,r17
 8003c34:	80097300 	call	8009730 <__divdf3>
 8003c38:	1009883a 	mov	r4,r2
 8003c3c:	180b883a 	mov	r5,r3
 8003c40:	2005883a 	mov	r2,r4
 8003c44:	2807883a 	mov	r3,r5
 8003c48:	1009883a 	mov	r4,r2
 8003c4c:	180b883a 	mov	r5,r3
 8003c50:	80081040 	call	8008104 <__fixunsdfsi>
 8003c54:	e0bffc15 	stw	r2,-16(fp)
        return_number += (digit << (i * 4));
 8003c58:	e0bff817 	ldw	r2,-32(fp)
 8003c5c:	1085883a 	add	r2,r2,r2
 8003c60:	1085883a 	add	r2,r2,r2
 8003c64:	1007883a 	mov	r3,r2
 8003c68:	e0bffc17 	ldw	r2,-16(fp)
 8003c6c:	10c4983a 	sll	r2,r2,r3
 8003c70:	e0fff717 	ldw	r3,-36(fp)
 8003c74:	1885883a 	add	r2,r3,r2
 8003c78:	e0bff715 	stw	r2,-36(fp)
    unsigned int number;
    unsigned int digit;
    unsigned int factor;
    unsigned int hex;
    unsigned int bdc_mask = 0x0000000F;
    for (unsigned i = 0; i < 8; i++) {
 8003c7c:	e0bff817 	ldw	r2,-32(fp)
 8003c80:	10800044 	addi	r2,r2,1
 8003c84:	e0bff815 	stw	r2,-32(fp)
 8003c88:	e0bff817 	ldw	r2,-32(fp)
 8003c8c:	10800230 	cmpltui	r2,r2,8
 8003c90:	103fb01e 	bne	r2,zero,8003b54 <__alt_data_end+0xfc003b54>
        number = dec % (int) (pow(10, i + 1));
        factor = pow(10, i);
        digit = number / pow(10, i);
        return_number += (digit << (i * 4));
    }
    return return_number;
 8003c94:	e0bff717 	ldw	r2,-36(fp)
}
 8003c98:	e6fffe04 	addi	sp,fp,-8
 8003c9c:	dfc00317 	ldw	ra,12(sp)
 8003ca0:	df000217 	ldw	fp,8(sp)
 8003ca4:	dc400117 	ldw	r17,4(sp)
 8003ca8:	dc000017 	ldw	r16,0(sp)
 8003cac:	dec00404 	addi	sp,sp,16
 8003cb0:	f800283a 	ret

08003cb4 <increase_level>:
 *
 * Description: Increment the current level.
 *
 * Expected behavior: Level increases by 1 and no hexadecimal digits are displayed on VGA.
 */
void increase_level() {
 8003cb4:	defff704 	addi	sp,sp,-36
 8003cb8:	dfc00815 	stw	ra,32(sp)
 8003cbc:	df000715 	stw	fp,28(sp)
 8003cc0:	df000704 	addi	fp,sp,28
	alt_u32 decimal_mask = 0xFFFF0000;
 8003cc4:	00bffff4 	movhi	r2,65535
 8003cc8:	e0bff915 	stw	r2,-28(fp)
	alt_u32 nine_mask = 0x00090000;
 8003ccc:	00800274 	movhi	r2,9
 8003cd0:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 lines_mask 	 = 0x0000FFFF;
 8003cd4:	00bfffd4 	movui	r2,65535
 8003cd8:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 curr_lines   = vga_ctrl->LEVEL_LINES & lines_mask;
 8003cdc:	d0a00317 	ldw	r2,-32756(gp)
 8003ce0:	10c00017 	ldw	r3,0(r2)
 8003ce4:	e0bffd17 	ldw	r2,-12(fp)
 8003ce8:	1884703a 	and	r2,r3,r2
 8003cec:	e0bffe15 	stw	r2,-8(fp)
	vga_ctrl->LEVEL_LINES &= decimal_mask;
 8003cf0:	d0a00317 	ldw	r2,-32756(gp)
 8003cf4:	d0e00317 	ldw	r3,-32756(gp)
 8003cf8:	19000017 	ldw	r4,0(r3)
 8003cfc:	e0fff917 	ldw	r3,-28(fp)
 8003d00:	20c6703a 	and	r3,r4,r3
 8003d04:	10c00015 	stw	r3,0(r2)

	int zeroth_bit = 16, third_bit = 18;
 8003d08:	00800404 	movi	r2,16
 8003d0c:	e0bffb15 	stw	r2,-20(fp)
 8003d10:	00800484 	movi	r2,18
 8003d14:	e0bffc15 	stw	r2,-16(fp)
	while (1) {
		if ( (vga_ctrl->LEVEL_LINES & nine_mask) == nine_mask) {
 8003d18:	d0a00317 	ldw	r2,-32756(gp)
 8003d1c:	10c00017 	ldw	r3,0(r2)
 8003d20:	e0bffa17 	ldw	r2,-24(fp)
 8003d24:	1886703a 	and	r3,r3,r2
 8003d28:	e0bffa17 	ldw	r2,-24(fp)
 8003d2c:	1880131e 	bne	r3,r2,8003d7c <increase_level+0xc8>
			decimal_mask <<= 4;
 8003d30:	e0bff917 	ldw	r2,-28(fp)
 8003d34:	1004913a 	slli	r2,r2,4
 8003d38:	e0bff915 	stw	r2,-28(fp)
			nine_mask <<= 4;
 8003d3c:	e0bffa17 	ldw	r2,-24(fp)
 8003d40:	1004913a 	slli	r2,r2,4
 8003d44:	e0bffa15 	stw	r2,-24(fp)
			vga_ctrl->LEVEL_LINES &= decimal_mask;
 8003d48:	d0a00317 	ldw	r2,-32756(gp)
 8003d4c:	d0e00317 	ldw	r3,-32756(gp)
 8003d50:	19000017 	ldw	r4,0(r3)
 8003d54:	e0fff917 	ldw	r3,-28(fp)
 8003d58:	20c6703a 	and	r3,r4,r3
 8003d5c:	10c00015 	stw	r3,0(r2)
			zeroth_bit += 4;
 8003d60:	e0bffb17 	ldw	r2,-20(fp)
 8003d64:	10800104 	addi	r2,r2,4
 8003d68:	e0bffb15 	stw	r2,-20(fp)
			third_bit += 4;
 8003d6c:	e0bffc17 	ldw	r2,-16(fp)
 8003d70:	10800104 	addi	r2,r2,4
 8003d74:	e0bffc15 	stw	r2,-16(fp)
 8003d78:	003fe706 	br	8003d18 <__alt_data_end+0xfc003d18>
		}
		else {
			vga_ctrl->LEVEL_LINES += (~decimal_mask + 1 + curr_lines);
 8003d7c:	d0a00317 	ldw	r2,-32756(gp)
 8003d80:	d0e00317 	ldw	r3,-32756(gp)
 8003d84:	19000017 	ldw	r4,0(r3)
 8003d88:	e17ffe17 	ldw	r5,-8(fp)
 8003d8c:	e0fff917 	ldw	r3,-28(fp)
 8003d90:	28c7c83a 	sub	r3,r5,r3
 8003d94:	20c7883a 	add	r3,r4,r3
 8003d98:	10c00015 	stw	r3,0(r2)
			break;
 8003d9c:	0001883a 	nop
		}
	}

	int drop_interval = (100 - convert_to_dec(vga_ctrl->LEVEL_LINES >> 16));
 8003da0:	d0a00317 	ldw	r2,-32756(gp)
 8003da4:	10800017 	ldw	r2,0(r2)
 8003da8:	1004d43a 	srli	r2,r2,16
 8003dac:	1009883a 	mov	r4,r2
 8003db0:	8003a400 	call	8003a40 <convert_to_dec>
 8003db4:	1007883a 	mov	r3,r2
 8003db8:	00801904 	movi	r2,100
 8003dbc:	10c5c83a 	sub	r2,r2,r3
 8003dc0:	e0bfff15 	stw	r2,-4(fp)
	vga_ctrl->DROP_INTERVAL = (drop_interval < 0) ? 1 : drop_interval;
 8003dc4:	d0e00317 	ldw	r3,-32756(gp)
 8003dc8:	e0bfff17 	ldw	r2,-4(fp)
 8003dcc:	10000216 	blt	r2,zero,8003dd8 <increase_level+0x124>
 8003dd0:	e0bfff17 	ldw	r2,-4(fp)
 8003dd4:	00000106 	br	8003ddc <increase_level+0x128>
 8003dd8:	00800044 	movi	r2,1
 8003ddc:	18880415 	stw	r2,8208(r3)
}
 8003de0:	0001883a 	nop
 8003de4:	e037883a 	mov	sp,fp
 8003de8:	dfc00117 	ldw	ra,4(sp)
 8003dec:	df000017 	ldw	fp,0(sp)
 8003df0:	dec00204 	addi	sp,sp,8
 8003df4:	f800283a 	ret

08003df8 <step_lines>:
 *
 * Description: Step the current line count by a parameter amount.
 *
 * Expected behavior: Line count increases by the parameter amount and no hexadecimal digits are displayed on VGA.
 */
void step_lines(alt_u8 step) {
 8003df8:	defff904 	addi	sp,sp,-28
 8003dfc:	df000615 	stw	fp,24(sp)
 8003e00:	df000604 	addi	fp,sp,24
 8003e04:	2005883a 	mov	r2,r4
 8003e08:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 decimal_mask = 0xFFFFFFFF;
 8003e0c:	00bfffc4 	movi	r2,-1
 8003e10:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 BCD_mask = 0x0000000F;
 8003e14:	008003c4 	movi	r2,15
 8003e18:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 max_BCD = 9 - step;
 8003e1c:	e0bfff03 	ldbu	r2,-4(fp)
 8003e20:	00c00244 	movi	r3,9
 8003e24:	1885c83a 	sub	r2,r3,r2
 8003e28:	e0bffc15 	stw	r2,-16(fp)

	int zeroth_bit = 0, third_bit = 3;
 8003e2c:	e03ffd15 	stw	zero,-12(fp)
 8003e30:	008000c4 	movi	r2,3
 8003e34:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		if (decimal_mask == 0xFFFF0000) {
 8003e38:	e0fffa17 	ldw	r3,-24(fp)
 8003e3c:	00bffff4 	movhi	r2,65535
 8003e40:	18802626 	beq	r3,r2,8003edc <step_lines+0xe4>
			// Signifies `line count` overflow.
			break;
		}
		if ( (vga_ctrl->LEVEL_LINES & BCD_mask) > max_BCD) {
 8003e44:	d0a00317 	ldw	r2,-32756(gp)
 8003e48:	10c00017 	ldw	r3,0(r2)
 8003e4c:	e0bffb17 	ldw	r2,-20(fp)
 8003e50:	1884703a 	and	r2,r3,r2
 8003e54:	e0fffc17 	ldw	r3,-16(fp)
 8003e58:	1880162e 	bgeu	r3,r2,8003eb4 <step_lines+0xbc>
			decimal_mask <<= 4;
 8003e5c:	e0bffa17 	ldw	r2,-24(fp)
 8003e60:	1004913a 	slli	r2,r2,4
 8003e64:	e0bffa15 	stw	r2,-24(fp)
			BCD_mask <<= 4;
 8003e68:	e0bffb17 	ldw	r2,-20(fp)
 8003e6c:	1004913a 	slli	r2,r2,4
 8003e70:	e0bffb15 	stw	r2,-20(fp)
			max_BCD <<= 4;
 8003e74:	e0bffc17 	ldw	r2,-16(fp)
 8003e78:	1004913a 	slli	r2,r2,4
 8003e7c:	e0bffc15 	stw	r2,-16(fp)
			vga_ctrl->LEVEL_LINES &= decimal_mask;
 8003e80:	d0a00317 	ldw	r2,-32756(gp)
 8003e84:	d0e00317 	ldw	r3,-32756(gp)
 8003e88:	19000017 	ldw	r4,0(r3)
 8003e8c:	e0fffa17 	ldw	r3,-24(fp)
 8003e90:	20c6703a 	and	r3,r4,r3
 8003e94:	10c00015 	stw	r3,0(r2)
			zeroth_bit += 4;
 8003e98:	e0bffd17 	ldw	r2,-12(fp)
 8003e9c:	10800104 	addi	r2,r2,4
 8003ea0:	e0bffd15 	stw	r2,-12(fp)
			third_bit += 4;
 8003ea4:	e0bffe17 	ldw	r2,-8(fp)
 8003ea8:	10800104 	addi	r2,r2,4
 8003eac:	e0bffe15 	stw	r2,-8(fp)
 8003eb0:	003fe106 	br	8003e38 <__alt_data_end+0xfc003e38>
		}
		else {
			vga_ctrl->LEVEL_LINES += (~decimal_mask + step);
 8003eb4:	d0a00317 	ldw	r2,-32756(gp)
 8003eb8:	d0e00317 	ldw	r3,-32756(gp)
 8003ebc:	19000017 	ldw	r4,0(r3)
 8003ec0:	e17fff03 	ldbu	r5,-4(fp)
 8003ec4:	e0fffa17 	ldw	r3,-24(fp)
 8003ec8:	28c7c83a 	sub	r3,r5,r3
 8003ecc:	20c7883a 	add	r3,r4,r3
 8003ed0:	18ffffc4 	addi	r3,r3,-1
 8003ed4:	10c00015 	stw	r3,0(r2)
			break;
 8003ed8:	00000106 	br	8003ee0 <step_lines+0xe8>

	int zeroth_bit = 0, third_bit = 3;
	while (1) {
		if (decimal_mask == 0xFFFF0000) {
			// Signifies `line count` overflow.
			break;
 8003edc:	0001883a 	nop
		else {
			vga_ctrl->LEVEL_LINES += (~decimal_mask + step);
			break;
		}
	}
}
 8003ee0:	0001883a 	nop
 8003ee4:	e037883a 	mov	sp,fp
 8003ee8:	df000017 	ldw	fp,0(sp)
 8003eec:	dec00104 	addi	sp,sp,4
 8003ef0:	f800283a 	ret

08003ef4 <set_palette>:

// Dark = Color index 1
// Light = Color index 2
void set_palette(alt_u8 new_red1, alt_u8 new_green1, alt_u8 new_blue1, alt_u8 new_red2, alt_u8 new_green2, alt_u8 new_blue2) {
 8003ef4:	defff904 	addi	sp,sp,-28
 8003ef8:	df000615 	stw	fp,24(sp)
 8003efc:	df000604 	addi	fp,sp,24
 8003f00:	2013883a 	mov	r9,r4
 8003f04:	2811883a 	mov	r8,r5
 8003f08:	300b883a 	mov	r5,r6
 8003f0c:	3809883a 	mov	r4,r7
 8003f10:	e0c00117 	ldw	r3,4(fp)
 8003f14:	e0800217 	ldw	r2,8(fp)
 8003f18:	e27ffa05 	stb	r9,-24(fp)
 8003f1c:	e23ffb05 	stb	r8,-20(fp)
 8003f20:	e17ffc05 	stb	r5,-16(fp)
 8003f24:	e13ffd05 	stb	r4,-12(fp)
 8003f28:	e0fffe05 	stb	r3,-8(fp)
 8003f2c:	e0bfff05 	stb	r2,-4(fp)
	vga_ctrl->PALETTE = new_red2 << 21 | new_green2 << 17 | new_blue2 << 13 | new_red1 << 9 | new_green1 << 5 | new_blue1 << 1;
 8003f30:	d0e00317 	ldw	r3,-32756(gp)
 8003f34:	e0bffd03 	ldbu	r2,-12(fp)
 8003f38:	1008957a 	slli	r4,r2,21
 8003f3c:	e0bffe03 	ldbu	r2,-8(fp)
 8003f40:	1004947a 	slli	r2,r2,17
 8003f44:	2088b03a 	or	r4,r4,r2
 8003f48:	e0bfff03 	ldbu	r2,-4(fp)
 8003f4c:	1004937a 	slli	r2,r2,13
 8003f50:	2088b03a 	or	r4,r4,r2
 8003f54:	e0bffa03 	ldbu	r2,-24(fp)
 8003f58:	1004927a 	slli	r2,r2,9
 8003f5c:	2088b03a 	or	r4,r4,r2
 8003f60:	e0bffb03 	ldbu	r2,-20(fp)
 8003f64:	1004917a 	slli	r2,r2,5
 8003f68:	2088b03a 	or	r4,r4,r2
 8003f6c:	e0bffc03 	ldbu	r2,-16(fp)
 8003f70:	1085883a 	add	r2,r2,r2
 8003f74:	2084b03a 	or	r2,r4,r2
 8003f78:	18880015 	stw	r2,8192(r3)
}
 8003f7c:	0001883a 	nop
 8003f80:	e037883a 	mov	sp,fp
 8003f84:	df000017 	ldw	fp,0(sp)
 8003f88:	dec00104 	addi	sp,sp,4
 8003f8c:	f800283a 	ret

08003f90 <test_inc_level_line_values>:
 * Description: Testing of incrementing the memory associated with
 * level value and line count.
 *
 * Expected behavior: Line increases (still has alphabet), then the level increases (still has alphabet).
 */
void test_inc_level_line_values() {
 8003f90:	defffb04 	addi	sp,sp,-20
 8003f94:	df000415 	stw	fp,16(sp)
 8003f98:	df000404 	addi	fp,sp,16
	alt_u32 decimal_mask = 0xFFFFFFFF;
 8003f9c:	00bfffc4 	movi	r2,-1
 8003fa0:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 nine_mask = 0x00000009;
 8003fa4:	00800244 	movi	r2,9
 8003fa8:	e0bffd15 	stw	r2,-12(fp)

	int zeroth_bit = 0, third_bit = 3;
 8003fac:	e03ffe15 	stw	zero,-8(fp)
 8003fb0:	008000c4 	movi	r2,3
 8003fb4:	e0bfff15 	stw	r2,-4(fp)
	while (1) {
		if ( (vga_ctrl->LEVEL_LINES & nine_mask) == nine_mask) {
 8003fb8:	d0a00317 	ldw	r2,-32756(gp)
 8003fbc:	10c00017 	ldw	r3,0(r2)
 8003fc0:	e0bffd17 	ldw	r2,-12(fp)
 8003fc4:	1886703a 	and	r3,r3,r2
 8003fc8:	e0bffd17 	ldw	r2,-12(fp)
 8003fcc:	1880131e 	bne	r3,r2,800401c <test_inc_level_line_values+0x8c>
			decimal_mask <<= 4;
 8003fd0:	e0bffc17 	ldw	r2,-16(fp)
 8003fd4:	1004913a 	slli	r2,r2,4
 8003fd8:	e0bffc15 	stw	r2,-16(fp)
			nine_mask <<= 4;
 8003fdc:	e0bffd17 	ldw	r2,-12(fp)
 8003fe0:	1004913a 	slli	r2,r2,4
 8003fe4:	e0bffd15 	stw	r2,-12(fp)
			vga_ctrl->LEVEL_LINES &= decimal_mask;
 8003fe8:	d0a00317 	ldw	r2,-32756(gp)
 8003fec:	d0e00317 	ldw	r3,-32756(gp)
 8003ff0:	19000017 	ldw	r4,0(r3)
 8003ff4:	e0fffc17 	ldw	r3,-16(fp)
 8003ff8:	20c6703a 	and	r3,r4,r3
 8003ffc:	10c00015 	stw	r3,0(r2)
			zeroth_bit += 4;
 8004000:	e0bffe17 	ldw	r2,-8(fp)
 8004004:	10800104 	addi	r2,r2,4
 8004008:	e0bffe15 	stw	r2,-8(fp)
			third_bit += 4;
 800400c:	e0bfff17 	ldw	r2,-4(fp)
 8004010:	10800104 	addi	r2,r2,4
 8004014:	e0bfff15 	stw	r2,-4(fp)
 8004018:	003fe706 	br	8003fb8 <__alt_data_end+0xfc003fb8>
		}
		else {
			vga_ctrl->LEVEL_LINES += (~decimal_mask + 1);
 800401c:	d0a00317 	ldw	r2,-32756(gp)
 8004020:	d0e00317 	ldw	r3,-32756(gp)
 8004024:	19000017 	ldw	r4,0(r3)
 8004028:	e0fffc17 	ldw	r3,-16(fp)
 800402c:	20c7c83a 	sub	r3,r4,r3
 8004030:	10c00015 	stw	r3,0(r2)
			break;
 8004034:	0001883a 	nop
		}
	}
}
 8004038:	0001883a 	nop
 800403c:	e037883a 	mov	sp,fp
 8004040:	df000017 	ldw	fp,0(sp)
 8004044:	dec00104 	addi	sp,sp,4
 8004048:	f800283a 	ret

0800404c <test_score_values>:
 * Description: Testing of incrementing the memory associated with
 * level value and line count.
 *
 * Expected behavior: Line increases, then the level increases.
 */
void test_score_values() {
 800404c:	defffb04 	addi	sp,sp,-20
 8004050:	df000415 	stw	fp,16(sp)
 8004054:	df000404 	addi	fp,sp,16
	alt_u32 decimal_mask = 0xFFFFFFFF;
 8004058:	00bfffc4 	movi	r2,-1
 800405c:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 nine_mask = 0x00000009;
 8004060:	00800244 	movi	r2,9
 8004064:	e0bffd15 	stw	r2,-12(fp)

	int zeroth_bit = 0, third_bit = 3;
 8004068:	e03ffe15 	stw	zero,-8(fp)
 800406c:	008000c4 	movi	r2,3
 8004070:	e0bfff15 	stw	r2,-4(fp)
	while (1) {
		if ( (vga_ctrl->SCORE & nine_mask) == nine_mask) {
 8004074:	d0a00317 	ldw	r2,-32756(gp)
 8004078:	10c00117 	ldw	r3,4(r2)
 800407c:	e0bffd17 	ldw	r2,-12(fp)
 8004080:	1886703a 	and	r3,r3,r2
 8004084:	e0bffd17 	ldw	r2,-12(fp)
 8004088:	1880131e 	bne	r3,r2,80040d8 <test_score_values+0x8c>
			decimal_mask <<= 4;
 800408c:	e0bffc17 	ldw	r2,-16(fp)
 8004090:	1004913a 	slli	r2,r2,4
 8004094:	e0bffc15 	stw	r2,-16(fp)
			nine_mask <<= 4;
 8004098:	e0bffd17 	ldw	r2,-12(fp)
 800409c:	1004913a 	slli	r2,r2,4
 80040a0:	e0bffd15 	stw	r2,-12(fp)
			vga_ctrl->SCORE &= decimal_mask;
 80040a4:	d0a00317 	ldw	r2,-32756(gp)
 80040a8:	d0e00317 	ldw	r3,-32756(gp)
 80040ac:	19000117 	ldw	r4,4(r3)
 80040b0:	e0fffc17 	ldw	r3,-16(fp)
 80040b4:	20c6703a 	and	r3,r4,r3
 80040b8:	10c00115 	stw	r3,4(r2)
			zeroth_bit += 4;
 80040bc:	e0bffe17 	ldw	r2,-8(fp)
 80040c0:	10800104 	addi	r2,r2,4
 80040c4:	e0bffe15 	stw	r2,-8(fp)
			third_bit += 4;
 80040c8:	e0bfff17 	ldw	r2,-4(fp)
 80040cc:	10800104 	addi	r2,r2,4
 80040d0:	e0bfff15 	stw	r2,-4(fp)
 80040d4:	003fe706 	br	8004074 <__alt_data_end+0xfc004074>
		}
		else {
			vga_ctrl->SCORE += (~decimal_mask + 1);
 80040d8:	d0a00317 	ldw	r2,-32756(gp)
 80040dc:	d0e00317 	ldw	r3,-32756(gp)
 80040e0:	19000117 	ldw	r4,4(r3)
 80040e4:	e0fffc17 	ldw	r3,-16(fp)
 80040e8:	20c7c83a 	sub	r3,r4,r3
 80040ec:	10c00115 	stw	r3,4(r2)
			break;
 80040f0:	0001883a 	nop
		}
	}
}
 80040f4:	0001883a 	nop
 80040f8:	e037883a 	mov	sp,fp
 80040fc:	df000017 	ldw	fp,0(sp)
 8004100:	dec00104 	addi	sp,sp,4
 8004104:	f800283a 	ret

08004108 <test_board_values>:
 * Description: Testing of randomizing the board values.
 *
 * Expected behavior: Random blocks appear in the board per row.
 * There should be 4 visible types of blocks that appear (i.e. the templates).
 */
void test_board_values() {
 8004108:	defffc04 	addi	sp,sp,-16
 800410c:	dfc00315 	stw	ra,12(sp)
 8004110:	df000215 	stw	fp,8(sp)
 8004114:	dc000115 	stw	r16,4(sp)
 8004118:	df000204 	addi	fp,sp,8
	for (int i = 0; i < BOARD_ROWS; i++) {
 800411c:	e03ffe15 	stw	zero,-8(fp)
 8004120:	00001006 	br	8004164 <test_board_values+0x5c>
		vga_ctrl->BOARD[i] = rand() % ROW_10_MASK;
 8004124:	d4200317 	ldw	r16,-32756(gp)
 8004128:	800b8900 	call	800b890 <rand>
 800412c:	01400434 	movhi	r5,16
 8004130:	297fffc4 	addi	r5,r5,-1
 8004134:	1009883a 	mov	r4,r2
 8004138:	80081fc0 	call	80081fc <__modsi3>
 800413c:	1007883a 	mov	r3,r2
 8004140:	e0bffe17 	ldw	r2,-8(fp)
 8004144:	10800084 	addi	r2,r2,2
 8004148:	1085883a 	add	r2,r2,r2
 800414c:	1085883a 	add	r2,r2,r2
 8004150:	8085883a 	add	r2,r16,r2
 8004154:	10c00015 	stw	r3,0(r2)
 *
 * Expected behavior: Random blocks appear in the board per row.
 * There should be 4 visible types of blocks that appear (i.e. the templates).
 */
void test_board_values() {
	for (int i = 0; i < BOARD_ROWS; i++) {
 8004158:	e0bffe17 	ldw	r2,-8(fp)
 800415c:	10800044 	addi	r2,r2,1
 8004160:	e0bffe15 	stw	r2,-8(fp)
 8004164:	e0bffe17 	ldw	r2,-8(fp)
 8004168:	10800510 	cmplti	r2,r2,20
 800416c:	103fed1e 	bne	r2,zero,8004124 <__alt_data_end+0xfc004124>
		vga_ctrl->BOARD[i] = rand() % ROW_10_MASK;
	}
}
 8004170:	0001883a 	nop
 8004174:	e6ffff04 	addi	sp,fp,-4
 8004178:	dfc00217 	ldw	ra,8(sp)
 800417c:	df000117 	ldw	fp,4(sp)
 8004180:	dc000017 	ldw	r16,0(sp)
 8004184:	dec00304 	addi	sp,sp,12
 8004188:	f800283a 	ret

0800418c <test_next_piece>:
 * Description: Testing of randomizing the next tetromino piece.
 *
 * Expected behavior: Random tetromino pieces appear in the next block window.
 * The tetromino pieces should be centered in the window in their initial orientations.
 */
void test_next_piece() {
 800418c:	defffd04 	addi	sp,sp,-12
 8004190:	dfc00215 	stw	ra,8(sp)
 8004194:	df000115 	stw	fp,4(sp)
 8004198:	df000104 	addi	fp,sp,4
	alt_u32 next_piece_id = rand() % 0x00000007;
 800419c:	800b8900 	call	800b890 <rand>
 80041a0:	014001c4 	movi	r5,7
 80041a4:	1009883a 	mov	r4,r2
 80041a8:	80081fc0 	call	80081fc <__modsi3>
 80041ac:	e0bfff15 	stw	r2,-4(fp)
	vga_ctrl->NEXT = next_piece_id << 2;
 80041b0:	d0e00317 	ldw	r3,-32756(gp)
 80041b4:	e0bfff17 	ldw	r2,-4(fp)
 80041b8:	1085883a 	add	r2,r2,r2
 80041bc:	1085883a 	add	r2,r2,r2
 80041c0:	18801615 	stw	r2,88(r3)
	//////printf("Next piece was %x\n.", next_piece_id);
}
 80041c4:	0001883a 	nop
 80041c8:	e037883a 	mov	sp,fp
 80041cc:	dfc00117 	ldw	ra,4(sp)
 80041d0:	df000017 	ldw	fp,0(sp)
 80041d4:	dec00204 	addi	sp,sp,8
 80041d8:	f800283a 	ret

080041dc <test_spawn_current_piece>:
 * | [12:9] Window align left : 3
 * | [8:5] Window align right : 6
 * | [4:2] Current piece identifier : random
 * | [1:0] Current piece rotation identifier : 2'b00
 */
void test_spawn_current_piece() {
 80041dc:	defffc04 	addi	sp,sp,-16
 80041e0:	dfc00315 	stw	ra,12(sp)
 80041e4:	df000215 	stw	fp,8(sp)
 80041e8:	df000204 	addi	fp,sp,8
	alt_u32 current_piece_id = random_piece(), active0, active1;
 80041ec:	80042340 	call	8004234 <random_piece>
 80041f0:	10803fcc 	andi	r2,r2,255
 80041f4:	e0bffe15 	stw	r2,-8(fp)
	alt_u32 clear_mask = ROW_10_MASK;
 80041f8:	00800434 	movhi	r2,16
 80041fc:	10bfffc4 	addi	r2,r2,-1
 8004200:	e0bfff15 	stw	r2,-4(fp)
	// Vertical alignment
	vga_ctrl->WINDOW = (current_piece_id << 2 | 0x00000006 << 5 | 0x00000003 << 9 | 0x00000001 << 13);
 8004204:	d0e00317 	ldw	r3,-32756(gp)
 8004208:	e0bffe17 	ldw	r2,-8(fp)
 800420c:	1085883a 	add	r2,r2,r2
 8004210:	1085883a 	add	r2,r2,r2
 8004214:	1089b014 	ori	r2,r2,9920
 8004218:	18880115 	stw	r2,8196(r3)
	//////printf("WINDOW is %x\n", vga_ctrl->WINDOW);
}
 800421c:	0001883a 	nop
 8004220:	e037883a 	mov	sp,fp
 8004224:	dfc00117 	ldw	ra,4(sp)
 8004228:	df000017 	ldw	fp,0(sp)
 800422c:	dec00204 	addi	sp,sp,8
 8004230:	f800283a 	ret

08004234 <random_piece>:

// Probe the seed / random number and mod it by 7 to obtain a number within [0, 6]
alt_u8 random_piece() {
 8004234:	defffe04 	addi	sp,sp,-8
 8004238:	dfc00115 	stw	ra,4(sp)
 800423c:	df000015 	stw	fp,0(sp)
 8004240:	d839883a 	mov	fp,sp
	return vga_ctrl->SEED % 0x00000007;
 8004244:	d0a00317 	ldw	r2,-32756(gp)
 8004248:	10880217 	ldw	r2,8200(r2)
 800424c:	014001c4 	movi	r5,7
 8004250:	1009883a 	mov	r4,r2
 8004254:	80082d40 	call	80082d4 <__umodsi3>
}
 8004258:	e037883a 	mov	sp,fp
 800425c:	dfc00117 	ldw	ra,4(sp)
 8004260:	df000017 	ldw	fp,0(sp)
 8004264:	dec00204 	addi	sp,sp,8
 8004268:	f800283a 	ret

0800426c <initial_spawn_piece>:

void initial_spawn_piece() {
 800426c:	defffe04 	addi	sp,sp,-8
 8004270:	dfc00115 	stw	ra,4(sp)
 8004274:	df000015 	stw	fp,0(sp)
 8004278:	d839883a 	mov	fp,sp
	// Spawn the current piece and the next piece.
	vga_ctrl->WINDOW = (0 << 2 | 0x00000006 << 5 | 0x00000003 << 9 | 0x00000001 << 13);
 800427c:	d0a00317 	ldw	r2,-32756(gp)
 8004280:	00c9b004 	movi	r3,9920
 8004284:	10c80115 	stw	r3,8196(r2)
	//vga_ctrl->WINDOW = (6 << 2 | 0x00000006 << 5 | 0x00000003 << 9 | 0x00000007 << 13 | 0x00000003 << 18);
	spawn_next_piece();
 8004288:	80042a40 	call	80042a4 <spawn_next_piece>
	//////printf("WINDOW is %x\n", vga_ctrl->WINDOW);
}
 800428c:	0001883a 	nop
 8004290:	e037883a 	mov	sp,fp
 8004294:	dfc00117 	ldw	ra,4(sp)
 8004298:	df000017 	ldw	fp,0(sp)
 800429c:	dec00204 	addi	sp,sp,8
 80042a0:	f800283a 	ret

080042a4 <spawn_next_piece>:

// (Unused) Generate a new random piece to be used
void spawn_next_piece() {
 80042a4:	defffd04 	addi	sp,sp,-12
 80042a8:	dfc00215 	stw	ra,8(sp)
 80042ac:	df000115 	stw	fp,4(sp)
 80042b0:	df000104 	addi	fp,sp,4
	alt_u32 next_piece_id = random_piece();
 80042b4:	80042340 	call	8004234 <random_piece>
 80042b8:	10803fcc 	andi	r2,r2,255
 80042bc:	e0bfff15 	stw	r2,-4(fp)
	vga_ctrl->NEXT = next_piece_id << 2;
 80042c0:	d0e00317 	ldw	r3,-32756(gp)
 80042c4:	e0bfff17 	ldw	r2,-4(fp)
 80042c8:	1085883a 	add	r2,r2,r2
 80042cc:	1085883a 	add	r2,r2,r2
 80042d0:	18801615 	stw	r2,88(r3)
}
 80042d4:	0001883a 	nop
 80042d8:	e037883a 	mov	sp,fp
 80042dc:	dfc00117 	ldw	ra,4(sp)
 80042e0:	df000017 	ldw	fp,0(sp)
 80042e4:	dec00204 	addi	sp,sp,8
 80042e8:	f800283a 	ret

080042ec <fetch_next_piece>:

// Set the current piece to the next piece (unused)
void fetch_next_piece() {
 80042ec:	defffe04 	addi	sp,sp,-8
 80042f0:	dfc00115 	stw	ra,4(sp)
 80042f4:	df000015 	stw	fp,0(sp)
 80042f8:	d839883a 	mov	fp,sp
	vga_ctrl->WINDOW = (vga_ctrl->NEXT | 0x00000006 << 5 | 0x00000003 << 9 | 0x00000001 << 13);
 80042fc:	d0a00317 	ldw	r2,-32756(gp)
 8004300:	d0e00317 	ldw	r3,-32756(gp)
 8004304:	18c01617 	ldw	r3,88(r3)
 8004308:	18c9b014 	ori	r3,r3,9920
 800430c:	10c80115 	stw	r3,8196(r2)

	spawn_next_piece();
 8004310:	80042a40 	call	80042a4 <spawn_next_piece>
}
 8004314:	0001883a 	nop
 8004318:	e037883a 	mov	sp,fp
 800431c:	dfc00117 	ldw	ra,4(sp)
 8004320:	df000017 	ldw	fp,0(sp)
 8004324:	dec00204 	addi	sp,sp,8
 8004328:	f800283a 	ret

0800432c <drop_curr_piece>:

// Should be generic checks for legality.
// Check if the dropped world is legal - if so, don't fetch the next piece and drop the current piece.
// If the dropped world is not legal, set the current world as the new world and fetch the next piece.
void drop_curr_piece() {
 800432c:	deffe004 	addi	sp,sp,-128
 8004330:	dfc01f15 	stw	ra,124(sp)
 8004334:	df001e15 	stw	fp,120(sp)
 8004338:	df001e04 	addi	fp,sp,120
	alt_u32 inc = 0x00000001;
 800433c:	00800044 	movi	r2,1
 8004340:	e0bfe815 	stw	r2,-96(fp)
	alt_u32 piece_identifier = vga_ctrl->WINDOW & 0x0000001F;
 8004344:	d0a00317 	ldw	r2,-32756(gp)
 8004348:	10880117 	ldw	r2,8196(r2)
 800434c:	108007cc 	andi	r2,r2,31
 8004350:	e0bfe915 	stw	r2,-92(fp)
	alt_u32 top_window = vga_ctrl->WINDOW & 0x007C0000;
 8004354:	d0a00317 	ldw	r2,-32756(gp)
 8004358:	10880117 	ldw	r2,8196(r2)
 800435c:	10801f2c 	andhi	r2,r2,124
 8004360:	e0bfea15 	stw	r2,-88(fp)
	alt_u32 bottom_window = vga_ctrl->WINDOW & 0x0003E000;
 8004364:	d0a00317 	ldw	r2,-32756(gp)
 8004368:	10c80117 	ldw	r3,8196(r2)
 800436c:	00800134 	movhi	r2,4
 8004370:	10b80004 	addi	r2,r2,-8192
 8004374:	1884703a 	and	r2,r3,r2
 8004378:	e0bfeb15 	stw	r2,-84(fp)

	// Current orientation and position of the piece.
	struct piece curr_piece = assemble_piece(vga_ctrl->WINDOW);
 800437c:	d0a00317 	ldw	r2,-32756(gp)
 8004380:	10c80117 	ldw	r3,8196(r2)
 8004384:	e0bfee04 	addi	r2,fp,-72
 8004388:	180b883a 	mov	r5,r3
 800438c:	1009883a 	mov	r4,r2
 8004390:	80055380 	call	8005538 <assemble_piece>

	// Supposed orientation and position of the piece if it dropped one block.
	struct piece next_piece = curr_piece;
 8004394:	e0bfee17 	ldw	r2,-72(fp)
 8004398:	e0bff715 	stw	r2,-36(fp)
 800439c:	e0bfef17 	ldw	r2,-68(fp)
 80043a0:	e0bff815 	stw	r2,-32(fp)
 80043a4:	e0bff017 	ldw	r2,-64(fp)
 80043a8:	e0bff915 	stw	r2,-28(fp)
 80043ac:	e0bff117 	ldw	r2,-60(fp)
 80043b0:	e0bffa15 	stw	r2,-24(fp)
 80043b4:	e0bff217 	ldw	r2,-56(fp)
 80043b8:	e0bffb15 	stw	r2,-20(fp)
 80043bc:	e0bff317 	ldw	r2,-52(fp)
 80043c0:	e0bffc15 	stw	r2,-16(fp)
 80043c4:	e0bff417 	ldw	r2,-48(fp)
 80043c8:	e0bffd15 	stw	r2,-12(fp)
 80043cc:	e0bff517 	ldw	r2,-44(fp)
 80043d0:	e0bffe15 	stw	r2,-8(fp)
 80043d4:	e0bff617 	ldw	r2,-40(fp)
 80043d8:	e0bfff15 	stw	r2,-4(fp)
	for (unsigned i = 0; i < 4; i++) {
 80043dc:	e03fe715 	stw	zero,-100(fp)
 80043e0:	00001206 	br	800442c <drop_curr_piece+0x100>
		next_piece.row[i]++;
 80043e4:	e0bfe717 	ldw	r2,-100(fp)
 80043e8:	1085883a 	add	r2,r2,r2
 80043ec:	1085883a 	add	r2,r2,r2
 80043f0:	e0ffe704 	addi	r3,fp,-100
 80043f4:	1885883a 	add	r2,r3,r2
 80043f8:	10801004 	addi	r2,r2,64
 80043fc:	10800017 	ldw	r2,0(r2)
 8004400:	10c00044 	addi	r3,r2,1
 8004404:	e0bfe717 	ldw	r2,-100(fp)
 8004408:	1085883a 	add	r2,r2,r2
 800440c:	1085883a 	add	r2,r2,r2
 8004410:	e13fe704 	addi	r4,fp,-100
 8004414:	2085883a 	add	r2,r4,r2
 8004418:	10801004 	addi	r2,r2,64
 800441c:	10c00015 	stw	r3,0(r2)
	// Current orientation and position of the piece.
	struct piece curr_piece = assemble_piece(vga_ctrl->WINDOW);

	// Supposed orientation and position of the piece if it dropped one block.
	struct piece next_piece = curr_piece;
	for (unsigned i = 0; i < 4; i++) {
 8004420:	e0bfe717 	ldw	r2,-100(fp)
 8004424:	10800044 	addi	r2,r2,1
 8004428:	e0bfe715 	stw	r2,-100(fp)
 800442c:	e0bfe717 	ldw	r2,-100(fp)
 8004430:	10800130 	cmpltui	r2,r2,4
 8004434:	103feb1e 	bne	r2,zero,80043e4 <__alt_data_end+0xfc0043e4>
		next_piece.row[i]++;
	}

	if (!is_legal_world(curr_piece) && top_window == 0) {
 8004438:	e0bff217 	ldw	r2,-56(fp)
 800443c:	d8800015 	stw	r2,0(sp)
 8004440:	e0bff317 	ldw	r2,-52(fp)
 8004444:	d8800115 	stw	r2,4(sp)
 8004448:	e0bff417 	ldw	r2,-48(fp)
 800444c:	d8800215 	stw	r2,8(sp)
 8004450:	e0bff517 	ldw	r2,-44(fp)
 8004454:	d8800315 	stw	r2,12(sp)
 8004458:	e0bff617 	ldw	r2,-40(fp)
 800445c:	d8800415 	stw	r2,16(sp)
 8004460:	e13fee17 	ldw	r4,-72(fp)
 8004464:	e17fef17 	ldw	r5,-68(fp)
 8004468:	e1bff017 	ldw	r6,-64(fp)
 800446c:	e1fff117 	ldw	r7,-60(fp)
 8004470:	80048100 	call	8004810 <is_legal_world>
 8004474:	1000041e 	bne	r2,zero,8004488 <drop_curr_piece+0x15c>
 8004478:	e0bfea17 	ldw	r2,-88(fp)
 800447c:	1000021e 	bne	r2,zero,8004488 <drop_curr_piece+0x15c>
		// Game Over
		//////printf("Game.\n");
		game_over_sequence();
 8004480:	8005fbc0 	call	8005fbc <game_over_sequence>
		////printf("Fix the piece on the board that is %x\n.", vga_ctrl->WINDOW);
		fill_board(curr_piece);
		//clear_lines();
		fetch_next_piece();
	}
}
 8004484:	00003306 	br	8004554 <drop_curr_piece+0x228>
	if (!is_legal_world(curr_piece) && top_window == 0) {
		// Game Over
		//////printf("Game.\n");
		game_over_sequence();
	}
	else if (is_legal_world(next_piece)) {
 8004488:	e0bffb17 	ldw	r2,-20(fp)
 800448c:	d8800015 	stw	r2,0(sp)
 8004490:	e0bffc17 	ldw	r2,-16(fp)
 8004494:	d8800115 	stw	r2,4(sp)
 8004498:	e0bffd17 	ldw	r2,-12(fp)
 800449c:	d8800215 	stw	r2,8(sp)
 80044a0:	e0bffe17 	ldw	r2,-8(fp)
 80044a4:	d8800315 	stw	r2,12(sp)
 80044a8:	e0bfff17 	ldw	r2,-4(fp)
 80044ac:	d8800415 	stw	r2,16(sp)
 80044b0:	e13ff717 	ldw	r4,-36(fp)
 80044b4:	e17ff817 	ldw	r5,-32(fp)
 80044b8:	e1bff917 	ldw	r6,-28(fp)
 80044bc:	e1fffa17 	ldw	r7,-24(fp)
 80044c0:	80048100 	call	8004810 <is_legal_world>
 80044c4:	10001326 	beq	r2,zero,8004514 <drop_curr_piece+0x1e8>
		//////printf("Is a legal world.\n");
		alt_u32 bottom_inc = 0x00002000;
 80044c8:	00880004 	movi	r2,8192
 80044cc:	e0bfec15 	stw	r2,-80(fp)
		alt_u32 top_inc = (bottom_window >= 0x00006000) ? inc << 18 : 0;
 80044d0:	e0bfeb17 	ldw	r2,-84(fp)
 80044d4:	10980030 	cmpltui	r2,r2,24576
 80044d8:	1000031e 	bne	r2,zero,80044e8 <drop_curr_piece+0x1bc>
 80044dc:	e0bfe817 	ldw	r2,-96(fp)
 80044e0:	100494ba 	slli	r2,r2,18
 80044e4:	00000106 	br	80044ec <drop_curr_piece+0x1c0>
 80044e8:	0005883a 	mov	r2,zero
 80044ec:	e0bfed15 	stw	r2,-76(fp)

		vga_ctrl->WINDOW += (bottom_inc | top_inc);
 80044f0:	d0a00317 	ldw	r2,-32756(gp)
 80044f4:	d0e00317 	ldw	r3,-32756(gp)
 80044f8:	19080117 	ldw	r4,8196(r3)
 80044fc:	e17fec17 	ldw	r5,-80(fp)
 8004500:	e0ffed17 	ldw	r3,-76(fp)
 8004504:	28c6b03a 	or	r3,r5,r3
 8004508:	20c7883a 	add	r3,r4,r3
 800450c:	10c80115 	stw	r3,8196(r2)
		////printf("Fix the piece on the board that is %x\n.", vga_ctrl->WINDOW);
		fill_board(curr_piece);
		//clear_lines();
		fetch_next_piece();
	}
}
 8004510:	00001006 	br	8004554 <drop_curr_piece+0x228>

		vga_ctrl->WINDOW += (bottom_inc | top_inc);
	}
	else {
		////printf("Fix the piece on the board that is %x\n.", vga_ctrl->WINDOW);
		fill_board(curr_piece);
 8004514:	e0bff217 	ldw	r2,-56(fp)
 8004518:	d8800015 	stw	r2,0(sp)
 800451c:	e0bff317 	ldw	r2,-52(fp)
 8004520:	d8800115 	stw	r2,4(sp)
 8004524:	e0bff417 	ldw	r2,-48(fp)
 8004528:	d8800215 	stw	r2,8(sp)
 800452c:	e0bff517 	ldw	r2,-44(fp)
 8004530:	d8800315 	stw	r2,12(sp)
 8004534:	e0bff617 	ldw	r2,-40(fp)
 8004538:	d8800415 	stw	r2,16(sp)
 800453c:	e13fee17 	ldw	r4,-72(fp)
 8004540:	e17fef17 	ldw	r5,-68(fp)
 8004544:	e1bff017 	ldw	r6,-64(fp)
 8004548:	e1fff117 	ldw	r7,-60(fp)
 800454c:	80046cc0 	call	80046cc <fill_board>
		//clear_lines();
		fetch_next_piece();
 8004550:	80042ec0 	call	80042ec <fetch_next_piece>
	}
}
 8004554:	0001883a 	nop
 8004558:	e037883a 	mov	sp,fp
 800455c:	dfc00117 	ldw	ra,4(sp)
 8004560:	df000017 	ldw	fp,0(sp)
 8004564:	dec00204 	addi	sp,sp,8
 8004568:	f800283a 	ret

0800456c <increase_lines_and_score>:

// Increase lines and score by the `lines cleared` reg amount
void increase_lines_and_score() {
 800456c:	defffa04 	addi	sp,sp,-24
 8004570:	dfc00515 	stw	ra,20(sp)
 8004574:	df000415 	stw	fp,16(sp)
 8004578:	dc000315 	stw	r16,12(sp)
 800457c:	df000404 	addi	fp,sp,16
	alt_u32 lines_increase = vga_ctrl->LINES_CLEARED;
 8004580:	d0a00317 	ldw	r2,-32756(gp)
 8004584:	10801917 	ldw	r2,100(r2)
 8004588:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 score_increase = compute_score(lines_increase);	// decimal
 800458c:	e13ffc17 	ldw	r4,-16(fp)
 8004590:	80045f40 	call	80045f4 <compute_score>
 8004594:	e0bffd15 	stw	r2,-12(fp)
	step_lines(lines_increase);
 8004598:	e0bffc17 	ldw	r2,-16(fp)
 800459c:	10803fcc 	andi	r2,r2,255
 80045a0:	1009883a 	mov	r4,r2
 80045a4:	8003df80 	call	8003df8 <step_lines>
	alt_u32 score_decimal = convert_to_dec(vga_ctrl->SCORE) + score_increase;
 80045a8:	d0a00317 	ldw	r2,-32756(gp)
 80045ac:	10800117 	ldw	r2,4(r2)
 80045b0:	1009883a 	mov	r4,r2
 80045b4:	8003a400 	call	8003a40 <convert_to_dec>
 80045b8:	1007883a 	mov	r3,r2
 80045bc:	e0bffd17 	ldw	r2,-12(fp)
 80045c0:	1885883a 	add	r2,r3,r2
 80045c4:	e0bffe15 	stw	r2,-8(fp)
	vga_ctrl->SCORE = convert_to_BDC(score_decimal);
 80045c8:	d4200317 	ldw	r16,-32756(gp)
 80045cc:	e13ffe17 	ldw	r4,-8(fp)
 80045d0:	8003b240 	call	8003b24 <convert_to_BDC>
 80045d4:	80800115 	stw	r2,4(r16)
}
 80045d8:	0001883a 	nop
 80045dc:	e6ffff04 	addi	sp,fp,-4
 80045e0:	dfc00217 	ldw	ra,8(sp)
 80045e4:	df000117 	ldw	fp,4(sp)
 80045e8:	dc000017 	ldw	r16,0(sp)
 80045ec:	dec00304 	addi	sp,sp,12
 80045f0:	f800283a 	ret

080045f4 <compute_score>:

// Simple NES calculation for score given # lines cleared
alt_u32 compute_score(alt_u32 lines_cleared) {
 80045f4:	defffc04 	addi	sp,sp,-16
 80045f8:	dfc00315 	stw	ra,12(sp)
 80045fc:	df000215 	stw	fp,8(sp)
 8004600:	df000204 	addi	fp,sp,8
 8004604:	e13fff15 	stw	r4,-4(fp)
	alt_u32 level = convert_to_dec((vga_ctrl->LEVEL_LINES & 0xFFFF0000) >> 16);
 8004608:	d0a00317 	ldw	r2,-32756(gp)
 800460c:	10800017 	ldw	r2,0(r2)
 8004610:	1004d43a 	srli	r2,r2,16
 8004614:	1009883a 	mov	r4,r2
 8004618:	8003a400 	call	8003a40 <convert_to_dec>
 800461c:	e0bffe15 	stw	r2,-8(fp)
	switch (lines_cleared) {
 8004620:	e0bfff17 	ldw	r2,-4(fp)
 8004624:	10c000a0 	cmpeqi	r3,r2,2
 8004628:	1800101e 	bne	r3,zero,800466c <compute_score+0x78>
 800462c:	10c000e8 	cmpgeui	r3,r2,3
 8004630:	1800031e 	bne	r3,zero,8004640 <compute_score+0x4c>
 8004634:	10800060 	cmpeqi	r2,r2,1
 8004638:	1000061e 	bne	r2,zero,8004654 <compute_score+0x60>
 800463c:	00001d06 	br	80046b4 <compute_score+0xc0>
 8004640:	10c000e0 	cmpeqi	r3,r2,3
 8004644:	18000f1e 	bne	r3,zero,8004684 <compute_score+0x90>
 8004648:	10800120 	cmpeqi	r2,r2,4
 800464c:	1000131e 	bne	r2,zero,800469c <compute_score+0xa8>
 8004650:	00001806 	br	80046b4 <compute_score+0xc0>
		case 1:
			return 40 * (level + 1);
 8004654:	e0bffe17 	ldw	r2,-8(fp)
 8004658:	10800044 	addi	r2,r2,1
 800465c:	01400a04 	movi	r5,40
 8004660:	1009883a 	mov	r4,r2
 8004664:	800832c0 	call	800832c <__mulsi3>
 8004668:	00001306 	br	80046b8 <compute_score+0xc4>
		case 2:
			return 100 * (level + 1);
 800466c:	e0bffe17 	ldw	r2,-8(fp)
 8004670:	10800044 	addi	r2,r2,1
 8004674:	01401904 	movi	r5,100
 8004678:	1009883a 	mov	r4,r2
 800467c:	800832c0 	call	800832c <__mulsi3>
 8004680:	00000d06 	br	80046b8 <compute_score+0xc4>
		case 3:
			return 300 * (level + 1);
 8004684:	e0bffe17 	ldw	r2,-8(fp)
 8004688:	10800044 	addi	r2,r2,1
 800468c:	01404b04 	movi	r5,300
 8004690:	1009883a 	mov	r4,r2
 8004694:	800832c0 	call	800832c <__mulsi3>
 8004698:	00000706 	br	80046b8 <compute_score+0xc4>
		case 4:
			return 1200 * (level + 1);
 800469c:	e0bffe17 	ldw	r2,-8(fp)
 80046a0:	10800044 	addi	r2,r2,1
 80046a4:	01412c04 	movi	r5,1200
 80046a8:	1009883a 	mov	r4,r2
 80046ac:	800832c0 	call	800832c <__mulsi3>
 80046b0:	00000106 	br	80046b8 <compute_score+0xc4>
	}
	return 0;
 80046b4:	0005883a 	mov	r2,zero
}
 80046b8:	e037883a 	mov	sp,fp
 80046bc:	dfc00117 	ldw	ra,4(sp)
 80046c0:	df000017 	ldw	fp,0(sp)
 80046c4:	dec00204 	addi	sp,sp,8
 80046c8:	f800283a 	ret

080046cc <fill_board>:

// Write to the board (aka RAM slots) with the current piece to be fixed
void fill_board(struct piece curr_piece) {
 80046cc:	defff904 	addi	sp,sp,-28
 80046d0:	df000215 	stw	fp,8(sp)
 80046d4:	df000204 	addi	fp,sp,8
 80046d8:	e1000115 	stw	r4,4(fp)
 80046dc:	e1400215 	stw	r5,8(fp)
 80046e0:	e1800315 	stw	r6,12(fp)
 80046e4:	e1c00415 	stw	r7,16(fp)
	alt_u8 template_block;
	switch (curr_piece.type) {
 80046e8:	e0800917 	ldw	r2,36(fp)
 80046ec:	108001cc 	andi	r2,r2,7
 80046f0:	10803fcc 	andi	r2,r2,255
 80046f4:	10c001e8 	cmpgeui	r3,r2,7
 80046f8:	1800161e 	bne	r3,zero,8004754 <fill_board+0x88>
 80046fc:	100690ba 	slli	r3,r2,2
 8004700:	00820034 	movhi	r2,2048
 8004704:	1091c504 	addi	r2,r2,18196
 8004708:	1885883a 	add	r2,r3,r2
 800470c:	10800017 	ldw	r2,0(r2)
 8004710:	1000683a 	jmp	r2
 8004714:	08004730 	cmpltui	zero,at,284
 8004718:	08004730 	cmpltui	zero,at,284
 800471c:	0800473c 	xorhi	zero,at,284
 8004720:	08004748 	cmpgei	zero,at,285
 8004724:	08004730 	cmpltui	zero,at,284
 8004728:	08004748 	cmpgei	zero,at,285
 800472c:	0800473c 	xorhi	zero,at,284
		case O_PIECE: case I_PIECE: case T_PIECE:
			template_block = WHITE_MASK;
 8004730:	008000c4 	movi	r2,3
 8004734:	e0bffe05 	stb	r2,-8(fp)
			break;
 8004738:	00000606 	br	8004754 <fill_board+0x88>
		case Z_PIECE: case L_PIECE:
			template_block = LIGHT_MASK;
 800473c:	00800084 	movi	r2,2
 8004740:	e0bffe05 	stb	r2,-8(fp)
			break;
 8004744:	00000306 	br	8004754 <fill_board+0x88>
		case S_PIECE: case J_PIECE:
			template_block = DARK_MASK;
 8004748:	00800044 	movi	r2,1
 800474c:	e0bffe05 	stb	r2,-8(fp)
			break;
 8004750:	0001883a 	nop
	}
	for (unsigned block = 0; block < 4; block++) {
 8004754:	e03fff15 	stw	zero,-4(fp)
 8004758:	00002506 	br	80047f0 <fill_board+0x124>
		vga_ctrl->BOARD[curr_piece.row[block]] |= template_block << curr_piece.col[block];
 800475c:	d1200317 	ldw	r4,-32756(gp)
 8004760:	e0bfff17 	ldw	r2,-4(fp)
 8004764:	1085883a 	add	r2,r2,r2
 8004768:	1085883a 	add	r2,r2,r2
 800476c:	e0c00104 	addi	r3,fp,4
 8004770:	1885883a 	add	r2,r3,r2
 8004774:	11400017 	ldw	r5,0(r2)
 8004778:	d0e00317 	ldw	r3,-32756(gp)
 800477c:	e0bfff17 	ldw	r2,-4(fp)
 8004780:	1085883a 	add	r2,r2,r2
 8004784:	1085883a 	add	r2,r2,r2
 8004788:	e1800104 	addi	r6,fp,4
 800478c:	3085883a 	add	r2,r6,r2
 8004790:	10800017 	ldw	r2,0(r2)
 8004794:	10800084 	addi	r2,r2,2
 8004798:	1085883a 	add	r2,r2,r2
 800479c:	1085883a 	add	r2,r2,r2
 80047a0:	1885883a 	add	r2,r3,r2
 80047a4:	10c00017 	ldw	r3,0(r2)
 80047a8:	e1bffe03 	ldbu	r6,-8(fp)
 80047ac:	e0bfff17 	ldw	r2,-4(fp)
 80047b0:	10800104 	addi	r2,r2,4
 80047b4:	1085883a 	add	r2,r2,r2
 80047b8:	1085883a 	add	r2,r2,r2
 80047bc:	e1c00104 	addi	r7,fp,4
 80047c0:	3885883a 	add	r2,r7,r2
 80047c4:	10800017 	ldw	r2,0(r2)
 80047c8:	3084983a 	sll	r2,r6,r2
 80047cc:	1886b03a 	or	r3,r3,r2
 80047d0:	28800084 	addi	r2,r5,2
 80047d4:	1085883a 	add	r2,r2,r2
 80047d8:	1085883a 	add	r2,r2,r2
 80047dc:	2085883a 	add	r2,r4,r2
 80047e0:	10c00015 	stw	r3,0(r2)
			break;
		case S_PIECE: case J_PIECE:
			template_block = DARK_MASK;
			break;
	}
	for (unsigned block = 0; block < 4; block++) {
 80047e4:	e0bfff17 	ldw	r2,-4(fp)
 80047e8:	10800044 	addi	r2,r2,1
 80047ec:	e0bfff15 	stw	r2,-4(fp)
 80047f0:	e0bfff17 	ldw	r2,-4(fp)
 80047f4:	10800130 	cmpltui	r2,r2,4
 80047f8:	103fd81e 	bne	r2,zero,800475c <__alt_data_end+0xfc00475c>
		vga_ctrl->BOARD[curr_piece.row[block]] |= template_block << curr_piece.col[block];
	}
}
 80047fc:	0001883a 	nop
 8004800:	e037883a 	mov	sp,fp
 8004804:	df000017 	ldw	fp,0(sp)
 8004808:	dec00504 	addi	sp,sp,20
 800480c:	f800283a 	ret

08004810 <is_legal_world>:

// Check if a DROP (increment in row), ROTATION (change in orient), or SHIFT (change in col) is valid.
enum bool is_legal_world(struct piece new_piece) {
 8004810:	defff704 	addi	sp,sp,-36
 8004814:	df000415 	stw	fp,16(sp)
 8004818:	df000404 	addi	fp,sp,16
 800481c:	e1000115 	stw	r4,4(fp)
 8004820:	e1400215 	stw	r5,8(fp)
 8004824:	e1800315 	stw	r6,12(fp)
 8004828:	e1c00415 	stw	r7,16(fp)
	// If any checks fail, return `FALSE`. Return `TRUE` at the end of the function.
	// Check if the new piece is within the boundaries of the board.
	unsigned prev_col = 0, prev_row = 0;
 800482c:	e03ffc15 	stw	zero,-16(fp)
 8004830:	e03ffd15 	stw	zero,-12(fp)

	for (unsigned block = 0; block < 4; block++) {
 8004834:	e03ffe15 	stw	zero,-8(fp)
 8004838:	00006f06 	br	80049f8 <is_legal_world+0x1e8>
		if (new_piece.row[block] < 0 || new_piece.row[block] > 19 || new_piece.col[block] < 0 || new_piece.col[block] > 18) {
 800483c:	e0bffe17 	ldw	r2,-8(fp)
 8004840:	1085883a 	add	r2,r2,r2
 8004844:	1085883a 	add	r2,r2,r2
 8004848:	e0c00104 	addi	r3,fp,4
 800484c:	1885883a 	add	r2,r3,r2
 8004850:	10800017 	ldw	r2,0(r2)
 8004854:	10001916 	blt	r2,zero,80048bc <is_legal_world+0xac>
 8004858:	e0bffe17 	ldw	r2,-8(fp)
 800485c:	1085883a 	add	r2,r2,r2
 8004860:	1085883a 	add	r2,r2,r2
 8004864:	e1000104 	addi	r4,fp,4
 8004868:	2085883a 	add	r2,r4,r2
 800486c:	10800017 	ldw	r2,0(r2)
 8004870:	10800508 	cmpgei	r2,r2,20
 8004874:	1000111e 	bne	r2,zero,80048bc <is_legal_world+0xac>
 8004878:	e0bffe17 	ldw	r2,-8(fp)
 800487c:	10800104 	addi	r2,r2,4
 8004880:	1085883a 	add	r2,r2,r2
 8004884:	1085883a 	add	r2,r2,r2
 8004888:	e0c00104 	addi	r3,fp,4
 800488c:	1885883a 	add	r2,r3,r2
 8004890:	10800017 	ldw	r2,0(r2)
 8004894:	10000916 	blt	r2,zero,80048bc <is_legal_world+0xac>
 8004898:	e0bffe17 	ldw	r2,-8(fp)
 800489c:	10800104 	addi	r2,r2,4
 80048a0:	1085883a 	add	r2,r2,r2
 80048a4:	1085883a 	add	r2,r2,r2
 80048a8:	e1000104 	addi	r4,fp,4
 80048ac:	2085883a 	add	r2,r4,r2
 80048b0:	10800017 	ldw	r2,0(r2)
 80048b4:	108004d0 	cmplti	r2,r2,19
 80048b8:	1000021e 	bne	r2,zero,80048c4 <is_legal_world+0xb4>
			////printf("Piece is out of bounds.\n");
			////printf("Specifically, (col,row) = (%d,%d)\n", new_piece.col[block], new_piece.row[block]);
			return ILLEGAL;
 80048bc:	0005883a 	mov	r2,zero
 80048c0:	00005106 	br	8004a08 <is_legal_world+0x1f8>
		}

		// Check if the new piece does not collide with another block on the board.
		alt_u32 board_block_data = vga_ctrl->BOARD[new_piece.row[block]] & (ROW_1_MASK << new_piece.col[block]);
 80048c4:	d0e00317 	ldw	r3,-32756(gp)
 80048c8:	e0bffe17 	ldw	r2,-8(fp)
 80048cc:	1085883a 	add	r2,r2,r2
 80048d0:	1085883a 	add	r2,r2,r2
 80048d4:	e1000104 	addi	r4,fp,4
 80048d8:	2085883a 	add	r2,r4,r2
 80048dc:	10800017 	ldw	r2,0(r2)
 80048e0:	10800084 	addi	r2,r2,2
 80048e4:	1085883a 	add	r2,r2,r2
 80048e8:	1085883a 	add	r2,r2,r2
 80048ec:	1885883a 	add	r2,r3,r2
 80048f0:	10c00017 	ldw	r3,0(r2)
 80048f4:	e0bffe17 	ldw	r2,-8(fp)
 80048f8:	10800104 	addi	r2,r2,4
 80048fc:	1085883a 	add	r2,r2,r2
 8004900:	1085883a 	add	r2,r2,r2
 8004904:	e1000104 	addi	r4,fp,4
 8004908:	2085883a 	add	r2,r4,r2
 800490c:	10800017 	ldw	r2,0(r2)
 8004910:	010000c4 	movi	r4,3
 8004914:	2084983a 	sll	r2,r4,r2
 8004918:	1884703a 	and	r2,r3,r2
 800491c:	e0bfff15 	stw	r2,-4(fp)
		if (board_block_data) {
 8004920:	e0bfff17 	ldw	r2,-4(fp)
 8004924:	10000226 	beq	r2,zero,8004930 <is_legal_world+0x120>
			////printf("Piece conflicts with the board.\n");
			return ILLEGAL;
 8004928:	0005883a 	mov	r2,zero
 800492c:	00003606 	br	8004a08 <is_legal_world+0x1f8>
		}

		if (new_piece.row[block] < prev_row) {
 8004930:	e0bffe17 	ldw	r2,-8(fp)
 8004934:	1085883a 	add	r2,r2,r2
 8004938:	1085883a 	add	r2,r2,r2
 800493c:	e0c00104 	addi	r3,fp,4
 8004940:	1885883a 	add	r2,r3,r2
 8004944:	10800017 	ldw	r2,0(r2)
 8004948:	1007883a 	mov	r3,r2
 800494c:	e0bffd17 	ldw	r2,-12(fp)
 8004950:	1880022e 	bgeu	r3,r2,800495c <is_legal_world+0x14c>
			return ILLEGAL;
 8004954:	0005883a 	mov	r2,zero
 8004958:	00002b06 	br	8004a08 <is_legal_world+0x1f8>
		}
		else if (new_piece.row[block] == prev_row){
 800495c:	e0bffe17 	ldw	r2,-8(fp)
 8004960:	1085883a 	add	r2,r2,r2
 8004964:	1085883a 	add	r2,r2,r2
 8004968:	e1000104 	addi	r4,fp,4
 800496c:	2085883a 	add	r2,r4,r2
 8004970:	10800017 	ldw	r2,0(r2)
 8004974:	1007883a 	mov	r3,r2
 8004978:	e0bffd17 	ldw	r2,-12(fp)
 800497c:	18800c1e 	bne	r3,r2,80049b0 <is_legal_world+0x1a0>
			if (new_piece.col[block] <= prev_col) {
 8004980:	e0bffe17 	ldw	r2,-8(fp)
 8004984:	10800104 	addi	r2,r2,4
 8004988:	1085883a 	add	r2,r2,r2
 800498c:	1085883a 	add	r2,r2,r2
 8004990:	e0c00104 	addi	r3,fp,4
 8004994:	1885883a 	add	r2,r3,r2
 8004998:	10800017 	ldw	r2,0(r2)
 800499c:	1007883a 	mov	r3,r2
 80049a0:	e0bffc17 	ldw	r2,-16(fp)
 80049a4:	10c00236 	bltu	r2,r3,80049b0 <is_legal_world+0x1a0>
				return ILLEGAL;
 80049a8:	0005883a 	mov	r2,zero
 80049ac:	00001606 	br	8004a08 <is_legal_world+0x1f8>
			}
		}

		prev_col = new_piece.col[block];
 80049b0:	e0bffe17 	ldw	r2,-8(fp)
 80049b4:	10800104 	addi	r2,r2,4
 80049b8:	1085883a 	add	r2,r2,r2
 80049bc:	1085883a 	add	r2,r2,r2
 80049c0:	e1000104 	addi	r4,fp,4
 80049c4:	2085883a 	add	r2,r4,r2
 80049c8:	10800017 	ldw	r2,0(r2)
 80049cc:	e0bffc15 	stw	r2,-16(fp)
		prev_row = new_piece.row[block];
 80049d0:	e0bffe17 	ldw	r2,-8(fp)
 80049d4:	1085883a 	add	r2,r2,r2
 80049d8:	1085883a 	add	r2,r2,r2
 80049dc:	e0c00104 	addi	r3,fp,4
 80049e0:	1885883a 	add	r2,r3,r2
 80049e4:	10800017 	ldw	r2,0(r2)
 80049e8:	e0bffd15 	stw	r2,-12(fp)
enum bool is_legal_world(struct piece new_piece) {
	// If any checks fail, return `FALSE`. Return `TRUE` at the end of the function.
	// Check if the new piece is within the boundaries of the board.
	unsigned prev_col = 0, prev_row = 0;

	for (unsigned block = 0; block < 4; block++) {
 80049ec:	e0bffe17 	ldw	r2,-8(fp)
 80049f0:	10800044 	addi	r2,r2,1
 80049f4:	e0bffe15 	stw	r2,-8(fp)
 80049f8:	e0bffe17 	ldw	r2,-8(fp)
 80049fc:	10800130 	cmpltui	r2,r2,4
 8004a00:	103f8e1e 	bne	r2,zero,800483c <__alt_data_end+0xfc00483c>
		prev_col = new_piece.col[block];
		prev_row = new_piece.row[block];
	}

	// Passed all checks for `FALSE` legality.
	return LEGAL;
 8004a04:	00800044 	movi	r2,1
}
 8004a08:	e037883a 	mov	sp,fp
 8004a0c:	df000017 	ldw	fp,0(sp)
 8004a10:	dec00504 	addi	sp,sp,20
 8004a14:	f800283a 	ret

08004a18 <rotate_piece>:


// Convert struct piece to its supposed rotated form
struct piece rotate_piece(struct piece curr_piece, int dir) {
 8004a18:	defff204 	addi	sp,sp,-56
 8004a1c:	df000a15 	stw	fp,40(sp)
 8004a20:	df000a04 	addi	fp,sp,40
 8004a24:	e13fff15 	stw	r4,-4(fp)
 8004a28:	e1400115 	stw	r5,4(fp)
 8004a2c:	e1800215 	stw	r6,8(fp)
 8004a30:	e1c00315 	stw	r7,12(fp)
	struct piece return_piece;
	return_piece.type = curr_piece.type;
 8004a34:	e0800917 	ldw	r2,36(fp)
 8004a38:	108001cc 	andi	r2,r2,7
 8004a3c:	110001cc 	andi	r4,r2,7
 8004a40:	e0fffe03 	ldbu	r3,-8(fp)
 8004a44:	00bffe04 	movi	r2,-8
 8004a48:	1884703a 	and	r2,r3,r2
 8004a4c:	1007883a 	mov	r3,r2
 8004a50:	2005883a 	mov	r2,r4
 8004a54:	1884b03a 	or	r2,r3,r2
 8004a58:	e0bffe05 	stb	r2,-8(fp)
	return_piece.orient = curr_piece.orient + dir;
 8004a5c:	e0800917 	ldw	r2,36(fp)
 8004a60:	1004d0fa 	srli	r2,r2,3
 8004a64:	108000cc 	andi	r2,r2,3
 8004a68:	1007883a 	mov	r3,r2
 8004a6c:	e0800a17 	ldw	r2,40(fp)
 8004a70:	1885883a 	add	r2,r3,r2
 8004a74:	108000cc 	andi	r2,r2,3
 8004a78:	108000cc 	andi	r2,r2,3
 8004a7c:	100890fa 	slli	r4,r2,3
 8004a80:	e0fffe03 	ldbu	r3,-8(fp)
 8004a84:	00bff9c4 	movi	r2,-25
 8004a88:	1884703a 	and	r2,r3,r2
 8004a8c:	1007883a 	mov	r3,r2
 8004a90:	2005883a 	mov	r2,r4
 8004a94:	1884b03a 	or	r2,r3,r2
 8004a98:	e0bffe05 	stb	r2,-8(fp)

	switch (curr_piece.type) {
 8004a9c:	e0800917 	ldw	r2,36(fp)
 8004aa0:	108001cc 	andi	r2,r2,7
 8004aa4:	10803fcc 	andi	r2,r2,255
 8004aa8:	10c001e8 	cmpgeui	r3,r2,7
 8004aac:	18028a1e 	bne	r3,zero,80054d8 <rotate_piece+0xac0>
 8004ab0:	100690ba 	slli	r3,r2,2
 8004ab4:	00820034 	movhi	r2,2048
 8004ab8:	1092b204 	addi	r2,r2,19144
 8004abc:	1885883a 	add	r2,r3,r2
 8004ac0:	10800017 	ldw	r2,0(r2)
 8004ac4:	1000683a 	jmp	r2
 8004ac8:	08004ae4 	muli	zero,at,299
 8004acc:	08004b30 	cmpltui	zero,at,300
 8004ad0:	08004bf4 	orhi	zero,at,303
 8004ad4:	08004ca8 	cmpgeui	zero,at,306
 8004ad8:	08004d5c 	xori	zero,at,309
 8004adc:	08004f94 	ori	zero,at,318
 8004ae0:	080051d4 	ori	zero,at,327
	case O_PIECE:
		return_piece = curr_piece;
 8004ae4:	e0800117 	ldw	r2,4(fp)
 8004ae8:	e0bff615 	stw	r2,-40(fp)
 8004aec:	e0800217 	ldw	r2,8(fp)
 8004af0:	e0bff715 	stw	r2,-36(fp)
 8004af4:	e0800317 	ldw	r2,12(fp)
 8004af8:	e0bff815 	stw	r2,-32(fp)
 8004afc:	e0800417 	ldw	r2,16(fp)
 8004b00:	e0bff915 	stw	r2,-28(fp)
 8004b04:	e0800517 	ldw	r2,20(fp)
 8004b08:	e0bffa15 	stw	r2,-24(fp)
 8004b0c:	e0800617 	ldw	r2,24(fp)
 8004b10:	e0bffb15 	stw	r2,-20(fp)
 8004b14:	e0800717 	ldw	r2,28(fp)
 8004b18:	e0bffc15 	stw	r2,-16(fp)
 8004b1c:	e0800817 	ldw	r2,32(fp)
 8004b20:	e0bffd15 	stw	r2,-12(fp)
 8004b24:	e0800917 	ldw	r2,36(fp)
 8004b28:	e0bffe15 	stw	r2,-8(fp)
		break;
 8004b2c:	00026a06 	br	80054d8 <rotate_piece+0xac0>
	case I_PIECE:
		switch (return_piece.orient) {
 8004b30:	e0bffe17 	ldw	r2,-8(fp)
 8004b34:	1004d0fa 	srli	r2,r2,3
 8004b38:	108000cc 	andi	r2,r2,3
 8004b3c:	10803fcc 	andi	r2,r2,255
 8004b40:	10c00060 	cmpeqi	r3,r2,1
 8004b44:	1800161e 	bne	r3,zero,8004ba0 <rotate_piece+0x188>
 8004b48:	108000e0 	cmpeqi	r2,r2,3
 8004b4c:	1000141e 	bne	r2,zero,8004ba0 <rotate_piece+0x188>
		case INITIAL: case INITIAL_FLIPPED:
			return_piece.col[0] = curr_piece.col[0] - 4;
 8004b50:	e0800517 	ldw	r2,20(fp)
 8004b54:	10bfff04 	addi	r2,r2,-4
 8004b58:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = curr_piece.col[0] - 2;
 8004b5c:	e0800517 	ldw	r2,20(fp)
 8004b60:	10bfff84 	addi	r2,r2,-2
 8004b64:	e0bffb15 	stw	r2,-20(fp)
			return_piece.col[2] = curr_piece.col[0];
 8004b68:	e0800517 	ldw	r2,20(fp)
 8004b6c:	e0bffc15 	stw	r2,-16(fp)
			return_piece.col[3] = curr_piece.col[0] + 2;
 8004b70:	e0800517 	ldw	r2,20(fp)
 8004b74:	10800084 	addi	r2,r2,2
 8004b78:	e0bffd15 	stw	r2,-12(fp)

			return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[2];
 8004b7c:	e0800317 	ldw	r2,12(fp)
 8004b80:	e0bff915 	stw	r2,-28(fp)
 8004b84:	e0bff917 	ldw	r2,-28(fp)
 8004b88:	e0bff815 	stw	r2,-32(fp)
 8004b8c:	e0bff817 	ldw	r2,-32(fp)
 8004b90:	e0bff715 	stw	r2,-36(fp)
 8004b94:	e0bff717 	ldw	r2,-36(fp)
 8004b98:	e0bff615 	stw	r2,-40(fp)
			break;
 8004b9c:	00001406 	br	8004bf0 <rotate_piece+0x1d8>
		case CW: case CCW:
			return_piece.col[0] = return_piece.col[1] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[2];
 8004ba0:	e0800717 	ldw	r2,28(fp)
 8004ba4:	e0bffd15 	stw	r2,-12(fp)
 8004ba8:	e0bffd17 	ldw	r2,-12(fp)
 8004bac:	e0bffc15 	stw	r2,-16(fp)
 8004bb0:	e0bffc17 	ldw	r2,-16(fp)
 8004bb4:	e0bffb15 	stw	r2,-20(fp)
 8004bb8:	e0bffb17 	ldw	r2,-20(fp)
 8004bbc:	e0bffa15 	stw	r2,-24(fp)
			return_piece.row[0] = curr_piece.row[0] - 4;
 8004bc0:	e0800117 	ldw	r2,4(fp)
 8004bc4:	10bfff04 	addi	r2,r2,-4
 8004bc8:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[1] = curr_piece.row[0] - 2;
 8004bcc:	e0800117 	ldw	r2,4(fp)
 8004bd0:	10bfff84 	addi	r2,r2,-2
 8004bd4:	e0bff715 	stw	r2,-36(fp)
			return_piece.row[2] = curr_piece.row[0];
 8004bd8:	e0800117 	ldw	r2,4(fp)
 8004bdc:	e0bff815 	stw	r2,-32(fp)
			return_piece.row[3] = curr_piece.row[0] + 2;
 8004be0:	e0800117 	ldw	r2,4(fp)
 8004be4:	10800084 	addi	r2,r2,2
 8004be8:	e0bff915 	stw	r2,-28(fp)
			break;
 8004bec:	0001883a 	nop
		}
		break;
 8004bf0:	00023906 	br	80054d8 <rotate_piece+0xac0>
	case Z_PIECE:
		switch (return_piece.orient) {
 8004bf4:	e0bffe17 	ldw	r2,-8(fp)
 8004bf8:	1004d0fa 	srli	r2,r2,3
 8004bfc:	108000cc 	andi	r2,r2,3
 8004c00:	10803fcc 	andi	r2,r2,255
 8004c04:	10c00060 	cmpeqi	r3,r2,1
 8004c08:	1800141e 	bne	r3,zero,8004c5c <rotate_piece+0x244>
 8004c0c:	108000e0 	cmpeqi	r2,r2,3
 8004c10:	1000121e 	bne	r2,zero,8004c5c <rotate_piece+0x244>
		case INITIAL: case INITIAL_FLIPPED:
			return_piece.col[0] = curr_piece.col[1] - 2;
 8004c14:	e0800617 	ldw	r2,24(fp)
 8004c18:	10bfff84 	addi	r2,r2,-2
 8004c1c:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = return_piece.col[2] = curr_piece.col[1];
 8004c20:	e0800617 	ldw	r2,24(fp)
 8004c24:	e0bffc15 	stw	r2,-16(fp)
 8004c28:	e0bffc17 	ldw	r2,-16(fp)
 8004c2c:	e0bffb15 	stw	r2,-20(fp)
			return_piece.col[3] = curr_piece.col[0];
 8004c30:	e0800517 	ldw	r2,20(fp)
 8004c34:	e0bffd15 	stw	r2,-12(fp)

			return_piece.row[0] = return_piece.row[1] = curr_piece.row[2];
 8004c38:	e0800317 	ldw	r2,12(fp)
 8004c3c:	e0bff715 	stw	r2,-36(fp)
 8004c40:	e0bff717 	ldw	r2,-36(fp)
 8004c44:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[2] = return_piece.row[3] = curr_piece.row[3];
 8004c48:	e0800417 	ldw	r2,16(fp)
 8004c4c:	e0bff915 	stw	r2,-28(fp)
 8004c50:	e0bff917 	ldw	r2,-28(fp)
 8004c54:	e0bff815 	stw	r2,-32(fp)
			break;
 8004c58:	00001206 	br	8004ca4 <rotate_piece+0x28c>
		case CW: case CCW:
			return_piece.col[0] = return_piece.col[2] = curr_piece.col[3];
 8004c5c:	e0800817 	ldw	r2,32(fp)
 8004c60:	e0bffc15 	stw	r2,-16(fp)
 8004c64:	e0bffc17 	ldw	r2,-16(fp)
 8004c68:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = return_piece.col[3] = curr_piece.col[2];
 8004c6c:	e0800717 	ldw	r2,28(fp)
 8004c70:	e0bffd15 	stw	r2,-12(fp)
 8004c74:	e0bffd17 	ldw	r2,-12(fp)
 8004c78:	e0bffb15 	stw	r2,-20(fp)

			return_piece.row[0] = curr_piece.row[0] - 2;
 8004c7c:	e0800117 	ldw	r2,4(fp)
 8004c80:	10bfff84 	addi	r2,r2,-2
 8004c84:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[1] = return_piece.row[2] = curr_piece.row[0];
 8004c88:	e0800117 	ldw	r2,4(fp)
 8004c8c:	e0bff815 	stw	r2,-32(fp)
 8004c90:	e0bff817 	ldw	r2,-32(fp)
 8004c94:	e0bff715 	stw	r2,-36(fp)
			return_piece.row[3] = curr_piece.row[2];
 8004c98:	e0800317 	ldw	r2,12(fp)
 8004c9c:	e0bff915 	stw	r2,-28(fp)
			break;
 8004ca0:	0001883a 	nop
		}
		break;
 8004ca4:	00020c06 	br	80054d8 <rotate_piece+0xac0>
	case S_PIECE:
		switch (return_piece.orient) {
 8004ca8:	e0bffe17 	ldw	r2,-8(fp)
 8004cac:	1004d0fa 	srli	r2,r2,3
 8004cb0:	108000cc 	andi	r2,r2,3
 8004cb4:	10803fcc 	andi	r2,r2,255
 8004cb8:	10c00060 	cmpeqi	r3,r2,1
 8004cbc:	1800141e 	bne	r3,zero,8004d10 <rotate_piece+0x2f8>
 8004cc0:	108000e0 	cmpeqi	r2,r2,3
 8004cc4:	1000121e 	bne	r2,zero,8004d10 <rotate_piece+0x2f8>
		case INITIAL: case INITIAL_FLIPPED:
			return_piece.col[0] = return_piece.col[3] = curr_piece.col[0];
 8004cc8:	e0800517 	ldw	r2,20(fp)
 8004ccc:	e0bffd15 	stw	r2,-12(fp)
 8004cd0:	e0bffd17 	ldw	r2,-12(fp)
 8004cd4:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = curr_piece.col[2];
 8004cd8:	e0800717 	ldw	r2,28(fp)
 8004cdc:	e0bffb15 	stw	r2,-20(fp)
			return_piece.col[2] = curr_piece.col[0] - 2;
 8004ce0:	e0800517 	ldw	r2,20(fp)
 8004ce4:	10bfff84 	addi	r2,r2,-2
 8004ce8:	e0bffc15 	stw	r2,-16(fp)

			return_piece.row[0] = return_piece.row[1] = curr_piece.row[2];
 8004cec:	e0800317 	ldw	r2,12(fp)
 8004cf0:	e0bff715 	stw	r2,-36(fp)
 8004cf4:	e0bff717 	ldw	r2,-36(fp)
 8004cf8:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[2] = return_piece.row[3] = curr_piece.row[3];
 8004cfc:	e0800417 	ldw	r2,16(fp)
 8004d00:	e0bff915 	stw	r2,-28(fp)
 8004d04:	e0bff917 	ldw	r2,-28(fp)
 8004d08:	e0bff815 	stw	r2,-32(fp)
			break;
 8004d0c:	00001206 	br	8004d58 <rotate_piece+0x340>
		case CW: case CCW:
			return_piece.col[0] = return_piece.col[1] = curr_piece.col[0];
 8004d10:	e0800517 	ldw	r2,20(fp)
 8004d14:	e0bffb15 	stw	r2,-20(fp)
 8004d18:	e0bffb17 	ldw	r2,-20(fp)
 8004d1c:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[2] = return_piece.col[3] = curr_piece.col[1];
 8004d20:	e0800617 	ldw	r2,24(fp)
 8004d24:	e0bffd15 	stw	r2,-12(fp)
 8004d28:	e0bffd17 	ldw	r2,-12(fp)
 8004d2c:	e0bffc15 	stw	r2,-16(fp)

			return_piece.row[0] = curr_piece.row[0] - 2;
 8004d30:	e0800117 	ldw	r2,4(fp)
 8004d34:	10bfff84 	addi	r2,r2,-2
 8004d38:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[1] = return_piece.row[2] = curr_piece.row[0];
 8004d3c:	e0800117 	ldw	r2,4(fp)
 8004d40:	e0bff815 	stw	r2,-32(fp)
 8004d44:	e0bff817 	ldw	r2,-32(fp)
 8004d48:	e0bff715 	stw	r2,-36(fp)
			return_piece.row[3] = curr_piece.row[2];
 8004d4c:	e0800317 	ldw	r2,12(fp)
 8004d50:	e0bff915 	stw	r2,-28(fp)
			break;
 8004d54:	0001883a 	nop
		}
		break;
 8004d58:	0001df06 	br	80054d8 <rotate_piece+0xac0>
	case T_PIECE:
		switch (return_piece.orient) {
 8004d5c:	e0bffe17 	ldw	r2,-8(fp)
 8004d60:	1004d0fa 	srli	r2,r2,3
 8004d64:	108000cc 	andi	r2,r2,3
 8004d68:	10803fcc 	andi	r2,r2,255
 8004d6c:	10c000a0 	cmpeqi	r3,r2,2
 8004d70:	1800451e 	bne	r3,zero,8004e88 <rotate_piece+0x470>
 8004d74:	10c000e0 	cmpeqi	r3,r2,3
 8004d78:	1800581e 	bne	r3,zero,8004edc <rotate_piece+0x4c4>
 8004d7c:	10800060 	cmpeqi	r2,r2,1
 8004d80:	1000141e 	bne	r2,zero,8004dd4 <rotate_piece+0x3bc>
		case INITIAL:	// pivot: [3]
			return_piece.col[0] = curr_piece.col[3] - 2;
 8004d84:	e0800817 	ldw	r2,32(fp)
 8004d88:	10bfff84 	addi	r2,r2,-2
 8004d8c:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = return_piece.col[3] = curr_piece.col[3];
 8004d90:	e0800817 	ldw	r2,32(fp)
 8004d94:	e0bffd15 	stw	r2,-12(fp)
 8004d98:	e0bffd17 	ldw	r2,-12(fp)
 8004d9c:	e0bffb15 	stw	r2,-20(fp)
			return_piece.col[2] = curr_piece.col[3] + 2;
 8004da0:	e0800817 	ldw	r2,32(fp)
 8004da4:	10800084 	addi	r2,r2,2
 8004da8:	e0bffc15 	stw	r2,-16(fp)

			return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = curr_piece.row[3] - 2;
 8004dac:	e0800417 	ldw	r2,16(fp)
 8004db0:	10bfff84 	addi	r2,r2,-2
 8004db4:	e0bff815 	stw	r2,-32(fp)
 8004db8:	e0bff817 	ldw	r2,-32(fp)
 8004dbc:	e0bff715 	stw	r2,-36(fp)
 8004dc0:	e0bff717 	ldw	r2,-36(fp)
 8004dc4:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[3] = curr_piece.row[3];
 8004dc8:	e0800417 	ldw	r2,16(fp)
 8004dcc:	e0bff915 	stw	r2,-28(fp)
			break;
 8004dd0:	00006f06 	br	8004f90 <rotate_piece+0x578>
		case CW:
			switch (curr_piece.orient) {
 8004dd4:	e0800917 	ldw	r2,36(fp)
 8004dd8:	1004d0fa 	srli	r2,r2,3
 8004ddc:	108000cc 	andi	r2,r2,3
 8004de0:	10803fcc 	andi	r2,r2,255
 8004de4:	10000326 	beq	r2,zero,8004df4 <rotate_piece+0x3dc>
 8004de8:	108000a0 	cmpeqi	r2,r2,2
 8004dec:	1000131e 	bne	r2,zero,8004e3c <rotate_piece+0x424>
				return_piece.row[0] = curr_piece.row[0];
				return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
				return_piece.row[3] = curr_piece.row[3] + 2;
				break;
			}
			break;
 8004df0:	00006706 	br	8004f90 <rotate_piece+0x578>
			return_piece.row[3] = curr_piece.row[3];
			break;
		case CW:
			switch (curr_piece.orient) {
			case INITIAL:
				return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[1];
 8004df4:	e0800617 	ldw	r2,24(fp)
 8004df8:	e0bffd15 	stw	r2,-12(fp)
 8004dfc:	e0bffd17 	ldw	r2,-12(fp)
 8004e00:	e0bffc15 	stw	r2,-16(fp)
 8004e04:	e0bffc17 	ldw	r2,-16(fp)
 8004e08:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[0];
 8004e0c:	e0800517 	ldw	r2,20(fp)
 8004e10:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = curr_piece.row[0] - 2;
 8004e14:	e0800117 	ldw	r2,4(fp)
 8004e18:	10bfff84 	addi	r2,r2,-2
 8004e1c:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = return_piece.row[2] = curr_piece.row[0];
 8004e20:	e0800117 	ldw	r2,4(fp)
 8004e24:	e0bff815 	stw	r2,-32(fp)
 8004e28:	e0bff817 	ldw	r2,-32(fp)
 8004e2c:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[3] = curr_piece.row[3];
 8004e30:	e0800417 	ldw	r2,16(fp)
 8004e34:	e0bff915 	stw	r2,-28(fp)
				break;
 8004e38:	00001206 	br	8004e84 <rotate_piece+0x46c>
			case INITIAL_FLIPPED:
				return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[0];
 8004e3c:	e0800517 	ldw	r2,20(fp)
 8004e40:	e0bffd15 	stw	r2,-12(fp)
 8004e44:	e0bffd17 	ldw	r2,-12(fp)
 8004e48:	e0bffc15 	stw	r2,-16(fp)
 8004e4c:	e0bffc17 	ldw	r2,-16(fp)
 8004e50:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[1];
 8004e54:	e0800617 	ldw	r2,24(fp)
 8004e58:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = curr_piece.row[0];
 8004e5c:	e0800117 	ldw	r2,4(fp)
 8004e60:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
 8004e64:	e0800217 	ldw	r2,8(fp)
 8004e68:	e0bff815 	stw	r2,-32(fp)
 8004e6c:	e0bff817 	ldw	r2,-32(fp)
 8004e70:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[3] = curr_piece.row[3] + 2;
 8004e74:	e0800417 	ldw	r2,16(fp)
 8004e78:	10800084 	addi	r2,r2,2
 8004e7c:	e0bff915 	stw	r2,-28(fp)
				break;
 8004e80:	0001883a 	nop
			}
			break;
 8004e84:	00004206 	br	8004f90 <rotate_piece+0x578>
			case INITIAL_FLIPPED:	// pivot: [3]
				return_piece.col[0] = return_piece.col[2] = curr_piece.col[3];
 8004e88:	e0800817 	ldw	r2,32(fp)
 8004e8c:	e0bffc15 	stw	r2,-16(fp)
 8004e90:	e0bffc17 	ldw	r2,-16(fp)
 8004e94:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[3] - 2;
 8004e98:	e0800817 	ldw	r2,32(fp)
 8004e9c:	10bfff84 	addi	r2,r2,-2
 8004ea0:	e0bffb15 	stw	r2,-20(fp)
				return_piece.col[3] = curr_piece.col[3] + 2;
 8004ea4:	e0800817 	ldw	r2,32(fp)
 8004ea8:	10800084 	addi	r2,r2,2
 8004eac:	e0bffd15 	stw	r2,-12(fp)

				return_piece.row[0] = curr_piece.row[3] - 4;
 8004eb0:	e0800417 	ldw	r2,16(fp)
 8004eb4:	10bfff04 	addi	r2,r2,-4
 8004eb8:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[3] - 2;
 8004ebc:	e0800417 	ldw	r2,16(fp)
 8004ec0:	10bfff84 	addi	r2,r2,-2
 8004ec4:	e0bff915 	stw	r2,-28(fp)
 8004ec8:	e0bff917 	ldw	r2,-28(fp)
 8004ecc:	e0bff815 	stw	r2,-32(fp)
 8004ed0:	e0bff817 	ldw	r2,-32(fp)
 8004ed4:	e0bff715 	stw	r2,-36(fp)
				break;
 8004ed8:	00002d06 	br	8004f90 <rotate_piece+0x578>
			case CCW:
				switch (curr_piece.orient) {
 8004edc:	e0800917 	ldw	r2,36(fp)
 8004ee0:	1004d0fa 	srli	r2,r2,3
 8004ee4:	108000cc 	andi	r2,r2,3
 8004ee8:	10803fcc 	andi	r2,r2,255
 8004eec:	10000326 	beq	r2,zero,8004efc <rotate_piece+0x4e4>
 8004ef0:	108000a0 	cmpeqi	r2,r2,2
 8004ef4:	1000131e 	bne	r2,zero,8004f44 <rotate_piece+0x52c>
					return_piece.row[0] = curr_piece.row[0];
					return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
					return_piece.row[3] = curr_piece.row[1] + 2;
					break;
				}
				break;
 8004ef8:	00002406 	br	8004f8c <rotate_piece+0x574>
				return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[3] - 2;
				break;
			case CCW:
				switch (curr_piece.orient) {
				case INITIAL:
					return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = curr_piece.col[1];
 8004efc:	e0800617 	ldw	r2,24(fp)
 8004f00:	e0bffd15 	stw	r2,-12(fp)
 8004f04:	e0bffd17 	ldw	r2,-12(fp)
 8004f08:	e0bffb15 	stw	r2,-20(fp)
 8004f0c:	e0bffb17 	ldw	r2,-20(fp)
 8004f10:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = curr_piece.col[2];
 8004f14:	e0800717 	ldw	r2,28(fp)
 8004f18:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = curr_piece.row[0] - 2;
 8004f1c:	e0800117 	ldw	r2,4(fp)
 8004f20:	10bfff84 	addi	r2,r2,-2
 8004f24:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[1] = return_piece.row[2] = curr_piece.row[0];
 8004f28:	e0800117 	ldw	r2,4(fp)
 8004f2c:	e0bff815 	stw	r2,-32(fp)
 8004f30:	e0bff817 	ldw	r2,-32(fp)
 8004f34:	e0bff715 	stw	r2,-36(fp)
					return_piece.row[3] = curr_piece.row[3];
 8004f38:	e0800417 	ldw	r2,16(fp)
 8004f3c:	e0bff915 	stw	r2,-28(fp)
					break;
 8004f40:	00001206 	br	8004f8c <rotate_piece+0x574>
				case INITIAL_FLIPPED:
					return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = curr_piece.col[0];
 8004f44:	e0800517 	ldw	r2,20(fp)
 8004f48:	e0bffd15 	stw	r2,-12(fp)
 8004f4c:	e0bffd17 	ldw	r2,-12(fp)
 8004f50:	e0bffb15 	stw	r2,-20(fp)
 8004f54:	e0bffb17 	ldw	r2,-20(fp)
 8004f58:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = curr_piece.col[3];
 8004f5c:	e0800817 	ldw	r2,32(fp)
 8004f60:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = curr_piece.row[0];
 8004f64:	e0800117 	ldw	r2,4(fp)
 8004f68:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
 8004f6c:	e0800217 	ldw	r2,8(fp)
 8004f70:	e0bff815 	stw	r2,-32(fp)
 8004f74:	e0bff817 	ldw	r2,-32(fp)
 8004f78:	e0bff715 	stw	r2,-36(fp)
					return_piece.row[3] = curr_piece.row[1] + 2;
 8004f7c:	e0800217 	ldw	r2,8(fp)
 8004f80:	10800084 	addi	r2,r2,2
 8004f84:	e0bff915 	stw	r2,-28(fp)
					break;
 8004f88:	0001883a 	nop
				}
				break;
 8004f8c:	0001883a 	nop
			}
		break;
 8004f90:	00015106 	br	80054d8 <rotate_piece+0xac0>
	case J_PIECE:
		switch (return_piece.orient) {
 8004f94:	e0bffe17 	ldw	r2,-8(fp)
 8004f98:	1004d0fa 	srli	r2,r2,3
 8004f9c:	108000cc 	andi	r2,r2,3
 8004fa0:	10803fcc 	andi	r2,r2,255
 8004fa4:	10c000a0 	cmpeqi	r3,r2,2
 8004fa8:	1800461e 	bne	r3,zero,80050c4 <rotate_piece+0x6ac>
 8004fac:	10c000e0 	cmpeqi	r3,r2,3
 8004fb0:	1800591e 	bne	r3,zero,8005118 <rotate_piece+0x700>
 8004fb4:	10800060 	cmpeqi	r2,r2,1
 8004fb8:	1000151e 	bne	r2,zero,8005010 <rotate_piece+0x5f8>
		case INITIAL:	// pivot: 0
			return_piece.col[0] = curr_piece.col[0] - 2;
 8004fbc:	e0800517 	ldw	r2,20(fp)
 8004fc0:	10bfff84 	addi	r2,r2,-2
 8004fc4:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[1] = curr_piece.col[0];
 8004fc8:	e0800517 	ldw	r2,20(fp)
 8004fcc:	e0bffb15 	stw	r2,-20(fp)
			return_piece.col[2] = return_piece.col[3] = curr_piece.col[0] + 2;
 8004fd0:	e0800517 	ldw	r2,20(fp)
 8004fd4:	10800084 	addi	r2,r2,2
 8004fd8:	e0bffd15 	stw	r2,-12(fp)
 8004fdc:	e0bffd17 	ldw	r2,-12(fp)
 8004fe0:	e0bffc15 	stw	r2,-16(fp)

			return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = curr_piece.row[0] + 2;
 8004fe4:	e0800117 	ldw	r2,4(fp)
 8004fe8:	10800084 	addi	r2,r2,2
 8004fec:	e0bff815 	stw	r2,-32(fp)
 8004ff0:	e0bff817 	ldw	r2,-32(fp)
 8004ff4:	e0bff715 	stw	r2,-36(fp)
 8004ff8:	e0bff717 	ldw	r2,-36(fp)
 8004ffc:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[3] = curr_piece.row[0] + 4;
 8005000:	e0800117 	ldw	r2,4(fp)
 8005004:	10800104 	addi	r2,r2,4
 8005008:	e0bff915 	stw	r2,-28(fp)
			break;
 800500c:	00007006 	br	80051d0 <rotate_piece+0x7b8>
		case CW:
			switch (curr_piece.orient) {
 8005010:	e0800917 	ldw	r2,36(fp)
 8005014:	1004d0fa 	srli	r2,r2,3
 8005018:	108000cc 	andi	r2,r2,3
 800501c:	10803fcc 	andi	r2,r2,255
 8005020:	10000326 	beq	r2,zero,8005030 <rotate_piece+0x618>
 8005024:	108000a0 	cmpeqi	r2,r2,2
 8005028:	1000131e 	bne	r2,zero,8005078 <rotate_piece+0x660>
				return_piece.row[0] = curr_piece.row[0];
				return_piece.row[1] = curr_piece.row[1];
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[1] + 2;
				break;
			}
			break;
 800502c:	00006806 	br	80051d0 <rotate_piece+0x7b8>
			return_piece.row[3] = curr_piece.row[0] + 4;
			break;
		case CW:
			switch (curr_piece.orient) {
			case INITIAL:
				return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = curr_piece.col[1];
 8005030:	e0800617 	ldw	r2,24(fp)
 8005034:	e0bffd15 	stw	r2,-12(fp)
 8005038:	e0bffd17 	ldw	r2,-12(fp)
 800503c:	e0bffb15 	stw	r2,-20(fp)
 8005040:	e0bffb17 	ldw	r2,-20(fp)
 8005044:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[2] = curr_piece.col[0];
 8005048:	e0800517 	ldw	r2,20(fp)
 800504c:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = curr_piece.row[0] - 2;
 8005050:	e0800117 	ldw	r2,4(fp)
 8005054:	10bfff84 	addi	r2,r2,-2
 8005058:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = curr_piece.row[0];
 800505c:	e0800117 	ldw	r2,4(fp)
 8005060:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[3];
 8005064:	e0800417 	ldw	r2,16(fp)
 8005068:	e0bff915 	stw	r2,-28(fp)
 800506c:	e0bff917 	ldw	r2,-28(fp)
 8005070:	e0bff815 	stw	r2,-32(fp)
				break;
 8005074:	00001206 	br	80050c0 <rotate_piece+0x6a8>
			case INITIAL_FLIPPED:
				return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = curr_piece.col[2];
 8005078:	e0800717 	ldw	r2,28(fp)
 800507c:	e0bffd15 	stw	r2,-12(fp)
 8005080:	e0bffd17 	ldw	r2,-12(fp)
 8005084:	e0bffb15 	stw	r2,-20(fp)
 8005088:	e0bffb17 	ldw	r2,-20(fp)
 800508c:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[2] = curr_piece.col[0];
 8005090:	e0800517 	ldw	r2,20(fp)
 8005094:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = curr_piece.row[0];
 8005098:	e0800117 	ldw	r2,4(fp)
 800509c:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = curr_piece.row[1];
 80050a0:	e0800217 	ldw	r2,8(fp)
 80050a4:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[1] + 2;
 80050a8:	e0800217 	ldw	r2,8(fp)
 80050ac:	10800084 	addi	r2,r2,2
 80050b0:	e0bff915 	stw	r2,-28(fp)
 80050b4:	e0bff917 	ldw	r2,-28(fp)
 80050b8:	e0bff815 	stw	r2,-32(fp)
				break;
 80050bc:	0001883a 	nop
			}
			break;
 80050c0:	00004306 	br	80051d0 <rotate_piece+0x7b8>
		case INITIAL_FLIPPED:	// pivot: 3
			return_piece.col[0] = return_piece.col[1] = curr_piece.col[3] - 2;
 80050c4:	e0800817 	ldw	r2,32(fp)
 80050c8:	10bfff84 	addi	r2,r2,-2
 80050cc:	e0bffb15 	stw	r2,-20(fp)
 80050d0:	e0bffb17 	ldw	r2,-20(fp)
 80050d4:	e0bffa15 	stw	r2,-24(fp)
			return_piece.col[2] = curr_piece.col[3];
 80050d8:	e0800817 	ldw	r2,32(fp)
 80050dc:	e0bffc15 	stw	r2,-16(fp)
			return_piece.col[3] = curr_piece.col[3] + 2;
 80050e0:	e0800817 	ldw	r2,32(fp)
 80050e4:	10800084 	addi	r2,r2,2
 80050e8:	e0bffd15 	stw	r2,-12(fp)

			return_piece.row[0] = curr_piece.row[3] - 4;
 80050ec:	e0800417 	ldw	r2,16(fp)
 80050f0:	10bfff04 	addi	r2,r2,-4
 80050f4:	e0bff615 	stw	r2,-40(fp)
			return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[3] - 2;
 80050f8:	e0800417 	ldw	r2,16(fp)
 80050fc:	10bfff84 	addi	r2,r2,-2
 8005100:	e0bff915 	stw	r2,-28(fp)
 8005104:	e0bff917 	ldw	r2,-28(fp)
 8005108:	e0bff815 	stw	r2,-32(fp)
 800510c:	e0bff817 	ldw	r2,-32(fp)
 8005110:	e0bff715 	stw	r2,-36(fp)
			break;
 8005114:	00002e06 	br	80051d0 <rotate_piece+0x7b8>
		case CCW:
			switch (curr_piece.orient) {
 8005118:	e0800917 	ldw	r2,36(fp)
 800511c:	1004d0fa 	srli	r2,r2,3
 8005120:	108000cc 	andi	r2,r2,3
 8005124:	10803fcc 	andi	r2,r2,255
 8005128:	10000326 	beq	r2,zero,8005138 <rotate_piece+0x720>
 800512c:	108000a0 	cmpeqi	r2,r2,2
 8005130:	1000141e 	bne	r2,zero,8005184 <rotate_piece+0x76c>
				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0];
				return_piece.row[2] = curr_piece.row[1];
				return_piece.row[3] = curr_piece.row[1] + 2;
				break;
			}
			break;
 8005134:	00002506 	br	80051cc <rotate_piece+0x7b4>
			return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[3] - 2;
			break;
		case CCW:
			switch (curr_piece.orient) {
			case INITIAL:
				return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[1];
 8005138:	e0800617 	ldw	r2,24(fp)
 800513c:	e0bffd15 	stw	r2,-12(fp)
 8005140:	e0bffd17 	ldw	r2,-12(fp)
 8005144:	e0bffc15 	stw	r2,-16(fp)
 8005148:	e0bffc17 	ldw	r2,-16(fp)
 800514c:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[2];
 8005150:	e0800717 	ldw	r2,28(fp)
 8005154:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0] - 2;
 8005158:	e0800117 	ldw	r2,4(fp)
 800515c:	10bfff84 	addi	r2,r2,-2
 8005160:	e0bff715 	stw	r2,-36(fp)
 8005164:	e0bff717 	ldw	r2,-36(fp)
 8005168:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[2] = curr_piece.row[0];
 800516c:	e0800117 	ldw	r2,4(fp)
 8005170:	e0bff815 	stw	r2,-32(fp)
				return_piece.row[3] = curr_piece.row[0] + 2;
 8005174:	e0800117 	ldw	r2,4(fp)
 8005178:	10800084 	addi	r2,r2,2
 800517c:	e0bff915 	stw	r2,-28(fp)
				break;
 8005180:	00001206 	br	80051cc <rotate_piece+0x7b4>
			case INITIAL_FLIPPED:
				return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[2];
 8005184:	e0800717 	ldw	r2,28(fp)
 8005188:	e0bffd15 	stw	r2,-12(fp)
 800518c:	e0bffd17 	ldw	r2,-12(fp)
 8005190:	e0bffc15 	stw	r2,-16(fp)
 8005194:	e0bffc17 	ldw	r2,-16(fp)
 8005198:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[3];
 800519c:	e0800817 	ldw	r2,32(fp)
 80051a0:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0];
 80051a4:	e0800117 	ldw	r2,4(fp)
 80051a8:	e0bff715 	stw	r2,-36(fp)
 80051ac:	e0bff717 	ldw	r2,-36(fp)
 80051b0:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[2] = curr_piece.row[1];
 80051b4:	e0800217 	ldw	r2,8(fp)
 80051b8:	e0bff815 	stw	r2,-32(fp)
				return_piece.row[3] = curr_piece.row[1] + 2;
 80051bc:	e0800217 	ldw	r2,8(fp)
 80051c0:	10800084 	addi	r2,r2,2
 80051c4:	e0bff915 	stw	r2,-28(fp)
				break;
 80051c8:	0001883a 	nop
			}
			break;
 80051cc:	0001883a 	nop
		}
		break;
 80051d0:	0000c106 	br	80054d8 <rotate_piece+0xac0>
	case L_PIECE:
		switch (return_piece.orient) {
 80051d4:	e0bffe17 	ldw	r2,-8(fp)
 80051d8:	1004d0fa 	srli	r2,r2,3
 80051dc:	108000cc 	andi	r2,r2,3
 80051e0:	10803fcc 	andi	r2,r2,255
 80051e4:	10c000a0 	cmpeqi	r3,r2,2
 80051e8:	18005f1e 	bne	r3,zero,8005368 <rotate_piece+0x950>
 80051ec:	10c000e0 	cmpeqi	r3,r2,3
 80051f0:	18008b1e 	bne	r3,zero,8005420 <rotate_piece+0xa08>
 80051f4:	10800060 	cmpeqi	r2,r2,1
 80051f8:	10002e1e 	bne	r2,zero,80052b4 <rotate_piece+0x89c>
		case INITIAL:
			switch (curr_piece.orient) {
 80051fc:	e0800917 	ldw	r2,36(fp)
 8005200:	1004d0fa 	srli	r2,r2,3
 8005204:	108000cc 	andi	r2,r2,3
 8005208:	10803fcc 	andi	r2,r2,255
 800520c:	10c00060 	cmpeqi	r3,r2,1
 8005210:	1800031e 	bne	r3,zero,8005220 <rotate_piece+0x808>
 8005214:	108000e0 	cmpeqi	r2,r2,3
 8005218:	1000131e 	bne	r2,zero,8005268 <rotate_piece+0x850>

				return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
				return_piece.row[3] = curr_piece.row[3];
				break;
			}
			break;
 800521c:	0000ad06 	br	80054d4 <rotate_piece+0xabc>
	case L_PIECE:
		switch (return_piece.orient) {
		case INITIAL:
			switch (curr_piece.orient) {
			case CW:
				return_piece.col[0] = return_piece.col[3] = curr_piece.col[0];
 8005220:	e0800517 	ldw	r2,20(fp)
 8005224:	e0bffd15 	stw	r2,-12(fp)
 8005228:	e0bffd17 	ldw	r2,-12(fp)
 800522c:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[1];
 8005230:	e0800617 	ldw	r2,24(fp)
 8005234:	e0bffb15 	stw	r2,-20(fp)
				return_piece.col[2] = curr_piece.col[1] + 2;
 8005238:	e0800617 	ldw	r2,24(fp)
 800523c:	10800084 	addi	r2,r2,2
 8005240:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = curr_piece.row[2];
 8005244:	e0800317 	ldw	r2,12(fp)
 8005248:	e0bff815 	stw	r2,-32(fp)
 800524c:	e0bff817 	ldw	r2,-32(fp)
 8005250:	e0bff715 	stw	r2,-36(fp)
 8005254:	e0bff717 	ldw	r2,-36(fp)
 8005258:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[3] = curr_piece.row[3];
 800525c:	e0800417 	ldw	r2,16(fp)
 8005260:	e0bff915 	stw	r2,-28(fp)
				break;
 8005264:	00001206 	br	80052b0 <rotate_piece+0x898>
			case CCW:
				return_piece.col[0] = return_piece.col[3] = curr_piece.col[0] - 2;
 8005268:	e0800517 	ldw	r2,20(fp)
 800526c:	10bfff84 	addi	r2,r2,-2
 8005270:	e0bffd15 	stw	r2,-12(fp)
 8005274:	e0bffd17 	ldw	r2,-12(fp)
 8005278:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[0];
 800527c:	e0800517 	ldw	r2,20(fp)
 8005280:	e0bffb15 	stw	r2,-20(fp)
				return_piece.col[2] = curr_piece.col[3];
 8005284:	e0800817 	ldw	r2,32(fp)
 8005288:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = curr_piece.row[1];
 800528c:	e0800217 	ldw	r2,8(fp)
 8005290:	e0bff815 	stw	r2,-32(fp)
 8005294:	e0bff817 	ldw	r2,-32(fp)
 8005298:	e0bff715 	stw	r2,-36(fp)
 800529c:	e0bff717 	ldw	r2,-36(fp)
 80052a0:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[3] = curr_piece.row[3];
 80052a4:	e0800417 	ldw	r2,16(fp)
 80052a8:	e0bff915 	stw	r2,-28(fp)
				break;
 80052ac:	0001883a 	nop
			}
			break;
 80052b0:	00008806 	br	80054d4 <rotate_piece+0xabc>
		case CW:
			switch (curr_piece.orient) {
 80052b4:	e0800917 	ldw	r2,36(fp)
 80052b8:	1004d0fa 	srli	r2,r2,3
 80052bc:	108000cc 	andi	r2,r2,3
 80052c0:	10803fcc 	andi	r2,r2,255
 80052c4:	10000326 	beq	r2,zero,80052d4 <rotate_piece+0x8bc>
 80052c8:	108000a0 	cmpeqi	r2,r2,2
 80052cc:	1000131e 	bne	r2,zero,800531c <rotate_piece+0x904>
				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0];
				return_piece.row[2] = curr_piece.row[1];
				return_piece.row[3] = curr_piece.row[1] + 2;
				break;
			}
			break;
 80052d0:	00008006 	br	80054d4 <rotate_piece+0xabc>
			}
			break;
		case CW:
			switch (curr_piece.orient) {
			case INITIAL:
				return_piece.col[0] = curr_piece.col[0];
 80052d4:	e0800517 	ldw	r2,20(fp)
 80052d8:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[1];
 80052dc:	e0800617 	ldw	r2,24(fp)
 80052e0:	e0bffd15 	stw	r2,-12(fp)
 80052e4:	e0bffd17 	ldw	r2,-12(fp)
 80052e8:	e0bffc15 	stw	r2,-16(fp)
 80052ec:	e0bffc17 	ldw	r2,-16(fp)
 80052f0:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0] - 2;
 80052f4:	e0800117 	ldw	r2,4(fp)
 80052f8:	10bfff84 	addi	r2,r2,-2
 80052fc:	e0bff715 	stw	r2,-36(fp)
 8005300:	e0bff717 	ldw	r2,-36(fp)
 8005304:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[2] = curr_piece.row[0];
 8005308:	e0800117 	ldw	r2,4(fp)
 800530c:	e0bff815 	stw	r2,-32(fp)
				return_piece.row[3] = curr_piece.row[3];
 8005310:	e0800417 	ldw	r2,16(fp)
 8005314:	e0bff915 	stw	r2,-28(fp)
				break;
 8005318:	00001206 	br	8005364 <rotate_piece+0x94c>
			case INITIAL_FLIPPED:
				return_piece.col[0] = curr_piece.col[1];
 800531c:	e0800617 	ldw	r2,24(fp)
 8005320:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = return_piece.col[2] = return_piece.col[3] = curr_piece.col[2];
 8005324:	e0800717 	ldw	r2,28(fp)
 8005328:	e0bffd15 	stw	r2,-12(fp)
 800532c:	e0bffd17 	ldw	r2,-12(fp)
 8005330:	e0bffc15 	stw	r2,-16(fp)
 8005334:	e0bffc17 	ldw	r2,-16(fp)
 8005338:	e0bffb15 	stw	r2,-20(fp)

				return_piece.row[0] = return_piece.row[1] = curr_piece.row[0];
 800533c:	e0800117 	ldw	r2,4(fp)
 8005340:	e0bff715 	stw	r2,-36(fp)
 8005344:	e0bff717 	ldw	r2,-36(fp)
 8005348:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[2] = curr_piece.row[1];
 800534c:	e0800217 	ldw	r2,8(fp)
 8005350:	e0bff815 	stw	r2,-32(fp)
				return_piece.row[3] = curr_piece.row[1] + 2;
 8005354:	e0800217 	ldw	r2,8(fp)
 8005358:	10800084 	addi	r2,r2,2
 800535c:	e0bff915 	stw	r2,-28(fp)
				break;
 8005360:	0001883a 	nop
			}
			break;
 8005364:	00005b06 	br	80054d4 <rotate_piece+0xabc>
		case INITIAL_FLIPPED:
			switch (curr_piece.orient) {
 8005368:	e0800917 	ldw	r2,36(fp)
 800536c:	1004d0fa 	srli	r2,r2,3
 8005370:	108000cc 	andi	r2,r2,3
 8005374:	10803fcc 	andi	r2,r2,255
 8005378:	10c00060 	cmpeqi	r3,r2,1
 800537c:	1800031e 	bne	r3,zero,800538c <rotate_piece+0x974>
 8005380:	108000e0 	cmpeqi	r2,r2,3
 8005384:	1000131e 	bne	r2,zero,80053d4 <rotate_piece+0x9bc>

				return_piece.row[0] = curr_piece.row[0];
				return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[1];
				break;
			}
			break;
 8005388:	00005206 	br	80054d4 <rotate_piece+0xabc>
			}
			break;
		case INITIAL_FLIPPED:
			switch (curr_piece.orient) {
			case CW:
				return_piece.col[0] = return_piece.col[3] = curr_piece.col[1] + 2;
 800538c:	e0800617 	ldw	r2,24(fp)
 8005390:	10800084 	addi	r2,r2,2
 8005394:	e0bffd15 	stw	r2,-12(fp)
 8005398:	e0bffd17 	ldw	r2,-12(fp)
 800539c:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[0];
 80053a0:	e0800517 	ldw	r2,20(fp)
 80053a4:	e0bffb15 	stw	r2,-20(fp)
				return_piece.col[2] = curr_piece.col[1];
 80053a8:	e0800617 	ldw	r2,24(fp)
 80053ac:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = curr_piece.row[0];
 80053b0:	e0800117 	ldw	r2,4(fp)
 80053b4:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[2];
 80053b8:	e0800317 	ldw	r2,12(fp)
 80053bc:	e0bff915 	stw	r2,-28(fp)
 80053c0:	e0bff917 	ldw	r2,-28(fp)
 80053c4:	e0bff815 	stw	r2,-32(fp)
 80053c8:	e0bff817 	ldw	r2,-32(fp)
 80053cc:	e0bff715 	stw	r2,-36(fp)
				break;
 80053d0:	00001206 	br	800541c <rotate_piece+0xa04>
			case CCW:
				return_piece.col[0] = return_piece.col[3] = curr_piece.col[3];
 80053d4:	e0800817 	ldw	r2,32(fp)
 80053d8:	e0bffd15 	stw	r2,-12(fp)
 80053dc:	e0bffd17 	ldw	r2,-12(fp)
 80053e0:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[1] = curr_piece.col[0] - 2;
 80053e4:	e0800517 	ldw	r2,20(fp)
 80053e8:	10bfff84 	addi	r2,r2,-2
 80053ec:	e0bffb15 	stw	r2,-20(fp)
				return_piece.col[2] = curr_piece.col[1];
 80053f0:	e0800617 	ldw	r2,24(fp)
 80053f4:	e0bffc15 	stw	r2,-16(fp)

				return_piece.row[0] = curr_piece.row[0];
 80053f8:	e0800117 	ldw	r2,4(fp)
 80053fc:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = curr_piece.row[1];
 8005400:	e0800217 	ldw	r2,8(fp)
 8005404:	e0bff915 	stw	r2,-28(fp)
 8005408:	e0bff917 	ldw	r2,-28(fp)
 800540c:	e0bff815 	stw	r2,-32(fp)
 8005410:	e0bff817 	ldw	r2,-32(fp)
 8005414:	e0bff715 	stw	r2,-36(fp)
				break;
 8005418:	0001883a 	nop
			}
			break;
 800541c:	00002d06 	br	80054d4 <rotate_piece+0xabc>
		case CCW:
			switch (curr_piece.orient) {
 8005420:	e0800917 	ldw	r2,36(fp)
 8005424:	1004d0fa 	srli	r2,r2,3
 8005428:	108000cc 	andi	r2,r2,3
 800542c:	10803fcc 	andi	r2,r2,255
 8005430:	10000326 	beq	r2,zero,8005440 <rotate_piece+0xa28>
 8005434:	108000a0 	cmpeqi	r2,r2,2
 8005438:	1000131e 	bne	r2,zero,8005488 <rotate_piece+0xa70>
				return_piece.row[0] = curr_piece.row[0];
				return_piece.row[1] = curr_piece.row[1];
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[1] + 2;
				break;
			}
			break;
 800543c:	00002406 	br	80054d0 <rotate_piece+0xab8>
			}
			break;
		case CCW:
			switch (curr_piece.orient) {
			case INITIAL:
				return_piece.col[0] = return_piece.col[1] = return_piece.col[2] = curr_piece.col[1];
 8005440:	e0800617 	ldw	r2,24(fp)
 8005444:	e0bffc15 	stw	r2,-16(fp)
 8005448:	e0bffc17 	ldw	r2,-16(fp)
 800544c:	e0bffb15 	stw	r2,-20(fp)
 8005450:	e0bffb17 	ldw	r2,-20(fp)
 8005454:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[3] = curr_piece.col[2];
 8005458:	e0800717 	ldw	r2,28(fp)
 800545c:	e0bffd15 	stw	r2,-12(fp)

				return_piece.row[0] = curr_piece.row[0] - 2;
 8005460:	e0800117 	ldw	r2,4(fp)
 8005464:	10bfff84 	addi	r2,r2,-2
 8005468:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = curr_piece.row[0];
 800546c:	e0800117 	ldw	r2,4(fp)
 8005470:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[3];
 8005474:	e0800417 	ldw	r2,16(fp)
 8005478:	e0bff915 	stw	r2,-28(fp)
 800547c:	e0bff917 	ldw	r2,-28(fp)
 8005480:	e0bff815 	stw	r2,-32(fp)
				break;
 8005484:	00001206 	br	80054d0 <rotate_piece+0xab8>
			case INITIAL_FLIPPED:
				return_piece.col[0] = return_piece.col[1] = return_piece.col[2] = curr_piece.col[2];
 8005488:	e0800717 	ldw	r2,28(fp)
 800548c:	e0bffc15 	stw	r2,-16(fp)
 8005490:	e0bffc17 	ldw	r2,-16(fp)
 8005494:	e0bffb15 	stw	r2,-20(fp)
 8005498:	e0bffb17 	ldw	r2,-20(fp)
 800549c:	e0bffa15 	stw	r2,-24(fp)
				return_piece.col[3] = curr_piece.col[0];
 80054a0:	e0800517 	ldw	r2,20(fp)
 80054a4:	e0bffd15 	stw	r2,-12(fp)

				return_piece.row[0] = curr_piece.row[0];
 80054a8:	e0800117 	ldw	r2,4(fp)
 80054ac:	e0bff615 	stw	r2,-40(fp)
				return_piece.row[1] = curr_piece.row[1];
 80054b0:	e0800217 	ldw	r2,8(fp)
 80054b4:	e0bff715 	stw	r2,-36(fp)
				return_piece.row[2] = return_piece.row[3] = curr_piece.row[1] + 2;
 80054b8:	e0800217 	ldw	r2,8(fp)
 80054bc:	10800084 	addi	r2,r2,2
 80054c0:	e0bff915 	stw	r2,-28(fp)
 80054c4:	e0bff917 	ldw	r2,-28(fp)
 80054c8:	e0bff815 	stw	r2,-32(fp)
				break;
 80054cc:	0001883a 	nop
			}
			break;
 80054d0:	0001883a 	nop
		}
		break;
 80054d4:	0001883a 	nop
	}
	return return_piece;
 80054d8:	e0bfff17 	ldw	r2,-4(fp)
 80054dc:	e0fff617 	ldw	r3,-40(fp)
 80054e0:	10c00015 	stw	r3,0(r2)
 80054e4:	e0fff717 	ldw	r3,-36(fp)
 80054e8:	10c00115 	stw	r3,4(r2)
 80054ec:	e0fff817 	ldw	r3,-32(fp)
 80054f0:	10c00215 	stw	r3,8(r2)
 80054f4:	e0fff917 	ldw	r3,-28(fp)
 80054f8:	10c00315 	stw	r3,12(r2)
 80054fc:	e0fffa17 	ldw	r3,-24(fp)
 8005500:	10c00415 	stw	r3,16(r2)
 8005504:	e0fffb17 	ldw	r3,-20(fp)
 8005508:	10c00515 	stw	r3,20(r2)
 800550c:	e0fffc17 	ldw	r3,-16(fp)
 8005510:	10c00615 	stw	r3,24(r2)
 8005514:	e0fffd17 	ldw	r3,-12(fp)
 8005518:	10c00715 	stw	r3,28(r2)
 800551c:	e0fffe17 	ldw	r3,-8(fp)
 8005520:	10c00815 	stw	r3,32(r2)
}
 8005524:	e0bfff17 	ldw	r2,-4(fp)
 8005528:	e037883a 	mov	sp,fp
 800552c:	df000017 	ldw	fp,0(sp)
 8005530:	dec00404 	addi	sp,sp,16
 8005534:	f800283a 	ret

08005538 <assemble_piece>:
/* piece:
 * 	  row in [0, 19]
 *    col in [0, 18] multiples of 2 {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}
 *
 */
struct piece assemble_piece(alt_u32 piece_memory) {
 8005538:	deffeb04 	addi	sp,sp,-84
 800553c:	df001415 	stw	fp,80(sp)
 8005540:	df001404 	addi	fp,sp,80
 8005544:	e13ffe15 	stw	r4,-8(fp)
 8005548:	e17fff15 	stw	r5,-4(fp)
	struct piece return_piece;

	// Need to check for edge cases.

	// Obtain the fields from the WINDOW memory.
	return_piece.type = (piece_memory & 0x0000001C) >> 2;
 800554c:	e0bfff17 	ldw	r2,-4(fp)
 8005550:	1080070c 	andi	r2,r2,28
 8005554:	1004d0ba 	srli	r2,r2,2
 8005558:	108001cc 	andi	r2,r2,7
 800555c:	110001cc 	andi	r4,r2,7
 8005560:	e0fffd03 	ldbu	r3,-12(fp)
 8005564:	00bffe04 	movi	r2,-8
 8005568:	1884703a 	and	r2,r3,r2
 800556c:	1007883a 	mov	r3,r2
 8005570:	2005883a 	mov	r2,r4
 8005574:	1884b03a 	or	r2,r3,r2
 8005578:	e0bffd05 	stb	r2,-12(fp)
	return_piece.orient = (piece_memory & 0x00000003);
 800557c:	e0bfff17 	ldw	r2,-4(fp)
 8005580:	108000cc 	andi	r2,r2,3
 8005584:	108000cc 	andi	r2,r2,3
 8005588:	100890fa 	slli	r4,r2,3
 800558c:	e0fffd03 	ldbu	r3,-12(fp)
 8005590:	00bff9c4 	movi	r2,-25
 8005594:	1884703a 	and	r2,r3,r2
 8005598:	1007883a 	mov	r3,r2
 800559c:	2005883a 	mov	r2,r4
 80055a0:	1884b03a 	or	r2,r3,r2
 80055a4:	e0bffd05 	stb	r2,-12(fp)
	alt_u32 top_window = (piece_memory & 0x007C0000) >> 18;
 80055a8:	e0bfff17 	ldw	r2,-4(fp)
 80055ac:	10801f2c 	andhi	r2,r2,124
 80055b0:	1004d4ba 	srli	r2,r2,18
 80055b4:	e0bff015 	stw	r2,-64(fp)
	alt_u32 bottom_window = (piece_memory & 0x0003E000) >> 13;
 80055b8:	e0ffff17 	ldw	r3,-4(fp)
 80055bc:	00800134 	movhi	r2,4
 80055c0:	10b80004 	addi	r2,r2,-8192
 80055c4:	1884703a 	and	r2,r3,r2
 80055c8:	1004d37a 	srli	r2,r2,13
 80055cc:	e0bff115 	stw	r2,-60(fp)
	alt_u32 left_window = (piece_memory & 0x00001E00) >> 9;
 80055d0:	e0bfff17 	ldw	r2,-4(fp)
 80055d4:	1087800c 	andi	r2,r2,7680
 80055d8:	1004d27a 	srli	r2,r2,9
 80055dc:	e0bff215 	stw	r2,-56(fp)
	alt_u32 right_window = (piece_memory & 0x000001E0) >> 5;
 80055e0:	e0bfff17 	ldw	r2,-4(fp)
 80055e4:	1080780c 	andi	r2,r2,480
 80055e8:	1004d17a 	srli	r2,r2,5
 80055ec:	e0bff315 	stw	r2,-52(fp)

	alt_u8 left_col, right_col, bottom_row;

	switch (return_piece.type) {
 80055f0:	e0bffd17 	ldw	r2,-12(fp)
 80055f4:	108001cc 	andi	r2,r2,7
 80055f8:	10803fcc 	andi	r2,r2,255
 80055fc:	10c001e8 	cmpgeui	r3,r2,7
 8005600:	18023c1e 	bne	r3,zero,8005ef4 <assemble_piece+0x9bc>
 8005604:	100690ba 	slli	r3,r2,2
 8005608:	00820034 	movhi	r2,2048
 800560c:	10958704 	addi	r2,r2,22044
 8005610:	1885883a 	add	r2,r3,r2
 8005614:	10800017 	ldw	r2,0(r2)
 8005618:	1000683a 	jmp	r2
 800561c:	08005638 	rdprs	zero,at,344
 8005620:	080056d0 	cmplti	zero,at,347
 8005624:	08005838 	rdprs	zero,at,352
 8005628:	0800590c 	andi	zero,at,356
 800562c:	080059e0 	cmpeqi	zero,at,359
 8005630:	08005b94 	ori	zero,at,366
 8005634:	08005d44 	addi	zero,at,373
		case O_PIECE:
			// 'O' piece
			// 0 1
			// 2 3
			/* bottom_row = (if the piece is touching the bottom of the board -> the bottom of the window) (else it is levitating one above the bottom of the window every time)*/
			bottom_row = bottom_window;
 8005638:	e0bff117 	ldw	r2,-60(fp)
 800563c:	e0bff405 	stb	r2,-48(fp)
			if (right_window == 2) {
 8005640:	e0bff317 	ldw	r2,-52(fp)
 8005644:	10800098 	cmpnei	r2,r2,2
 8005648:	1000031e 	bne	r2,zero,8005658 <assemble_piece+0x120>
				left_col = left_window;
 800564c:	e0bff217 	ldw	r2,-56(fp)
 8005650:	e0bfec05 	stb	r2,-80(fp)
 8005654:	00000306 	br	8005664 <assemble_piece+0x12c>
			}
			else {
				left_col = left_window + 1;
 8005658:	e0bff217 	ldw	r2,-56(fp)
 800565c:	10800044 	addi	r2,r2,1
 8005660:	e0bfec05 	stb	r2,-80(fp)
			}

			if (left_window == 7) {
 8005664:	e0bff217 	ldw	r2,-56(fp)
 8005668:	108001d8 	cmpnei	r2,r2,7
 800566c:	1000031e 	bne	r2,zero,800567c <assemble_piece+0x144>
				right_col = right_window;
 8005670:	e0bff317 	ldw	r2,-52(fp)
 8005674:	e0bfec45 	stb	r2,-79(fp)
 8005678:	00000306 	br	8005688 <assemble_piece+0x150>
			}
			else {
				right_col = right_window - 1;
 800567c:	e0bff317 	ldw	r2,-52(fp)
 8005680:	10bfffc4 	addi	r2,r2,-1
 8005684:	e0bfec45 	stb	r2,-79(fp)
			}
			//left_col = (right_window == 2) ? left_window : (left_window + 1);
			//right_col = (left_window == 7) ? right_window : (right_window - 1);
			return_piece.col[0] = return_piece.col[2] = left_col;
 8005688:	e0bfec03 	ldbu	r2,-80(fp)
 800568c:	e0bffb15 	stw	r2,-20(fp)
 8005690:	e0bffb17 	ldw	r2,-20(fp)
 8005694:	e0bff915 	stw	r2,-28(fp)
			return_piece.row[0] = return_piece.row[1] = bottom_row - 1;
 8005698:	e0bff403 	ldbu	r2,-48(fp)
 800569c:	10bfffc4 	addi	r2,r2,-1
 80056a0:	e0bff615 	stw	r2,-40(fp)
 80056a4:	e0bff617 	ldw	r2,-40(fp)
 80056a8:	e0bff515 	stw	r2,-44(fp)
			return_piece.col[1] = return_piece.col[3] = right_col;
 80056ac:	e0bfec43 	ldbu	r2,-79(fp)
 80056b0:	e0bffc15 	stw	r2,-16(fp)
 80056b4:	e0bffc17 	ldw	r2,-16(fp)
 80056b8:	e0bffa15 	stw	r2,-24(fp)
			return_piece.row[2] = return_piece.row[3] = bottom_row;
 80056bc:	e0bff403 	ldbu	r2,-48(fp)
 80056c0:	e0bff815 	stw	r2,-32(fp)
 80056c4:	e0bff817 	ldw	r2,-32(fp)
 80056c8:	e0bff715 	stw	r2,-36(fp)
			break;
 80056cc:	00020906 	br	8005ef4 <assemble_piece+0x9bc>
		case I_PIECE:
			switch (return_piece.orient) {
 80056d0:	e0bffd17 	ldw	r2,-12(fp)
 80056d4:	1004d0fa 	srli	r2,r2,3
 80056d8:	108000cc 	andi	r2,r2,3
 80056dc:	10803fcc 	andi	r2,r2,255
 80056e0:	10c00060 	cmpeqi	r3,r2,1
 80056e4:	18002a1e 	bne	r3,zero,8005790 <assemble_piece+0x258>
 80056e8:	108000e0 	cmpeqi	r2,r2,3
 80056ec:	1000281e 	bne	r2,zero,8005790 <assemble_piece+0x258>
				case INITIAL: case INITIAL_FLIPPED:
					// 'I' piece flat
					// 0 1 2 3
					bottom_row = bottom_window - 1;
 80056f0:	e0bff117 	ldw	r2,-60(fp)
 80056f4:	10bfffc4 	addi	r2,r2,-1
 80056f8:	e0bff405 	stb	r2,-48(fp)
					left_col = left_window;
 80056fc:	e0bff217 	ldw	r2,-56(fp)
 8005700:	e0bfec05 	stb	r2,-80(fp)
					if (right_window != left_col + 3) {
 8005704:	e0bfec03 	ldbu	r2,-80(fp)
 8005708:	108000c4 	addi	r2,r2,3
 800570c:	1007883a 	mov	r3,r2
 8005710:	e0bff317 	ldw	r2,-52(fp)
 8005714:	18800226 	beq	r3,r2,8005720 <assemble_piece+0x1e8>
						left_col = -50;
 8005718:	00bff384 	movi	r2,-50
 800571c:	e0bfec05 	stb	r2,-80(fp)
					}
					for (int i = 0; i < 4; i++) {
 8005720:	e03fed15 	stw	zero,-76(fp)
 8005724:	00001606 	br	8005780 <assemble_piece+0x248>
						return_piece.col[i] = left_col + i;
 8005728:	e0ffec03 	ldbu	r3,-80(fp)
 800572c:	e0bfed17 	ldw	r2,-76(fp)
 8005730:	1887883a 	add	r3,r3,r2
 8005734:	e0bfed17 	ldw	r2,-76(fp)
 8005738:	10800104 	addi	r2,r2,4
 800573c:	1085883a 	add	r2,r2,r2
 8005740:	1085883a 	add	r2,r2,r2
 8005744:	e13fec04 	addi	r4,fp,-80
 8005748:	2085883a 	add	r2,r4,r2
 800574c:	10800904 	addi	r2,r2,36
 8005750:	10c00015 	stw	r3,0(r2)
						return_piece.row[i] = bottom_row;
 8005754:	e0fff403 	ldbu	r3,-48(fp)
 8005758:	e0bfed17 	ldw	r2,-76(fp)
 800575c:	1085883a 	add	r2,r2,r2
 8005760:	1085883a 	add	r2,r2,r2
 8005764:	e13fec04 	addi	r4,fp,-80
 8005768:	2085883a 	add	r2,r4,r2
 800576c:	10800904 	addi	r2,r2,36
 8005770:	10c00015 	stw	r3,0(r2)
					bottom_row = bottom_window - 1;
					left_col = left_window;
					if (right_window != left_col + 3) {
						left_col = -50;
					}
					for (int i = 0; i < 4; i++) {
 8005774:	e0bfed17 	ldw	r2,-76(fp)
 8005778:	10800044 	addi	r2,r2,1
 800577c:	e0bfed15 	stw	r2,-76(fp)
 8005780:	e0bfed17 	ldw	r2,-76(fp)
 8005784:	10800110 	cmplti	r2,r2,4
 8005788:	103fe71e 	bne	r2,zero,8005728 <__alt_data_end+0xfc005728>
						return_piece.col[i] = left_col + i;
						return_piece.row[i] = bottom_row;
					}
					break;
 800578c:	00002906 	br	8005834 <assemble_piece+0x2fc>
					// 'I' piece vertical (say right_col is the sole column)
					// 0
					// 1
					// 2
					// 3
					bottom_row = bottom_window;
 8005790:	e0bff117 	ldw	r2,-60(fp)
 8005794:	e0bff405 	stb	r2,-48(fp)
					if (left_window == 7) {
 8005798:	e0bff217 	ldw	r2,-56(fp)
 800579c:	108001d8 	cmpnei	r2,r2,7
 80057a0:	1000031e 	bne	r2,zero,80057b0 <assemble_piece+0x278>
						right_col = right_window;
 80057a4:	e0bff317 	ldw	r2,-52(fp)
 80057a8:	e0bfec45 	stb	r2,-79(fp)
 80057ac:	00000306 	br	80057bc <assemble_piece+0x284>
					}
					else {
						right_col = right_window - 1;
 80057b0:	e0bff317 	ldw	r2,-52(fp)
 80057b4:	10bfffc4 	addi	r2,r2,-1
 80057b8:	e0bfec45 	stb	r2,-79(fp)
					}

					for (int i = 0; i < 4; i++) {
 80057bc:	e03fee15 	stw	zero,-72(fp)
 80057c0:	00001806 	br	8005824 <assemble_piece+0x2ec>
						return_piece.col[i] = right_col;
 80057c4:	e0ffec43 	ldbu	r3,-79(fp)
 80057c8:	e0bfee17 	ldw	r2,-72(fp)
 80057cc:	10800104 	addi	r2,r2,4
 80057d0:	1085883a 	add	r2,r2,r2
 80057d4:	1085883a 	add	r2,r2,r2
 80057d8:	e13fec04 	addi	r4,fp,-80
 80057dc:	2085883a 	add	r2,r4,r2
 80057e0:	10800904 	addi	r2,r2,36
 80057e4:	10c00015 	stw	r3,0(r2)
						return_piece.row[i] = bottom_row - (3 - i);
 80057e8:	e0fff403 	ldbu	r3,-48(fp)
 80057ec:	010000c4 	movi	r4,3
 80057f0:	e0bfee17 	ldw	r2,-72(fp)
 80057f4:	2085c83a 	sub	r2,r4,r2
 80057f8:	1887c83a 	sub	r3,r3,r2
 80057fc:	e0bfee17 	ldw	r2,-72(fp)
 8005800:	1085883a 	add	r2,r2,r2
 8005804:	1085883a 	add	r2,r2,r2
 8005808:	e13fec04 	addi	r4,fp,-80
 800580c:	2085883a 	add	r2,r4,r2
 8005810:	10800904 	addi	r2,r2,36
 8005814:	10c00015 	stw	r3,0(r2)
					}
					else {
						right_col = right_window - 1;
					}

					for (int i = 0; i < 4; i++) {
 8005818:	e0bfee17 	ldw	r2,-72(fp)
 800581c:	10800044 	addi	r2,r2,1
 8005820:	e0bfee15 	stw	r2,-72(fp)
 8005824:	e0bfee17 	ldw	r2,-72(fp)
 8005828:	10800110 	cmplti	r2,r2,4
 800582c:	103fe51e 	bne	r2,zero,80057c4 <__alt_data_end+0xfc0057c4>
						return_piece.col[i] = right_col;
						return_piece.row[i] = bottom_row - (3 - i);
					}
					break;
 8005830:	0001883a 	nop
			}
			break;
 8005834:	0001af06 	br	8005ef4 <assemble_piece+0x9bc>
		case Z_PIECE:
			switch (return_piece.orient) {
 8005838:	e0bffd17 	ldw	r2,-12(fp)
 800583c:	1004d0fa 	srli	r2,r2,3
 8005840:	108000cc 	andi	r2,r2,3
 8005844:	10803fcc 	andi	r2,r2,255
 8005848:	10c00060 	cmpeqi	r3,r2,1
 800584c:	1800181e 	bne	r3,zero,80058b0 <assemble_piece+0x378>
 8005850:	108000e0 	cmpeqi	r2,r2,3
 8005854:	1000161e 	bne	r2,zero,80058b0 <assemble_piece+0x378>
				case INITIAL: case INITIAL_FLIPPED:
					// 'Z' piece flat
					// 0 1
					//   2 3
					bottom_row = bottom_window;
 8005858:	e0bff117 	ldw	r2,-60(fp)
 800585c:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = right_window - 2;
 8005860:	e0bff317 	ldw	r2,-52(fp)
 8005864:	10bfff84 	addi	r2,r2,-2
 8005868:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = return_piece.col[2] = right_window - 1;
 800586c:	e0bff317 	ldw	r2,-52(fp)
 8005870:	10bfffc4 	addi	r2,r2,-1
 8005874:	e0bffb15 	stw	r2,-20(fp)
 8005878:	e0bffb17 	ldw	r2,-20(fp)
 800587c:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[3] = right_window;
 8005880:	e0bff317 	ldw	r2,-52(fp)
 8005884:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = return_piece.row[1] = bottom_row - 1;
 8005888:	e0bff403 	ldbu	r2,-48(fp)
 800588c:	10bfffc4 	addi	r2,r2,-1
 8005890:	e0bff615 	stw	r2,-40(fp)
 8005894:	e0bff617 	ldw	r2,-40(fp)
 8005898:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[2] = return_piece.row[3] = bottom_row;
 800589c:	e0bff403 	ldbu	r2,-48(fp)
 80058a0:	e0bff815 	stw	r2,-32(fp)
 80058a4:	e0bff817 	ldw	r2,-32(fp)
 80058a8:	e0bff715 	stw	r2,-36(fp)
					break;
 80058ac:	00001606 	br	8005908 <assemble_piece+0x3d0>
				case CW: case CCW:
					// 'Z' piece rotated
					//   0
					// 1 2
					// 3
					bottom_row = bottom_window;
 80058b0:	e0bff117 	ldw	r2,-60(fp)
 80058b4:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[2] = right_window;
 80058b8:	e0bff317 	ldw	r2,-52(fp)
 80058bc:	e0bffb15 	stw	r2,-20(fp)
 80058c0:	e0bffb17 	ldw	r2,-20(fp)
 80058c4:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = return_piece.col[3] = right_window - 1;
 80058c8:	e0bff317 	ldw	r2,-52(fp)
 80058cc:	10bfffc4 	addi	r2,r2,-1
 80058d0:	e0bffc15 	stw	r2,-16(fp)
 80058d4:	e0bffc17 	ldw	r2,-16(fp)
 80058d8:	e0bffa15 	stw	r2,-24(fp)

					return_piece.row[0] = bottom_row - 2;
 80058dc:	e0bff403 	ldbu	r2,-48(fp)
 80058e0:	10bfff84 	addi	r2,r2,-2
 80058e4:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 80058e8:	e0bff403 	ldbu	r2,-48(fp)
 80058ec:	10bfffc4 	addi	r2,r2,-1
 80058f0:	e0bff715 	stw	r2,-36(fp)
 80058f4:	e0bff717 	ldw	r2,-36(fp)
 80058f8:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[3] = bottom_row;
 80058fc:	e0bff403 	ldbu	r2,-48(fp)
 8005900:	e0bff815 	stw	r2,-32(fp)
					break;
 8005904:	0001883a 	nop
			}
			break;
 8005908:	00017a06 	br	8005ef4 <assemble_piece+0x9bc>
		case S_PIECE:
			switch (return_piece.orient) {
 800590c:	e0bffd17 	ldw	r2,-12(fp)
 8005910:	1004d0fa 	srli	r2,r2,3
 8005914:	108000cc 	andi	r2,r2,3
 8005918:	10803fcc 	andi	r2,r2,255
 800591c:	10c00060 	cmpeqi	r3,r2,1
 8005920:	1800181e 	bne	r3,zero,8005984 <assemble_piece+0x44c>
 8005924:	108000e0 	cmpeqi	r2,r2,3
 8005928:	1000161e 	bne	r2,zero,8005984 <assemble_piece+0x44c>
				case INITIAL: case INITIAL_FLIPPED:
					// 'S' piece flat
					//   0 1
					// 2 3
					bottom_row = bottom_window;
 800592c:	e0bff117 	ldw	r2,-60(fp)
 8005930:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[3] = right_window - 1;
 8005934:	e0bff317 	ldw	r2,-52(fp)
 8005938:	10bfffc4 	addi	r2,r2,-1
 800593c:	e0bffc15 	stw	r2,-16(fp)
 8005940:	e0bffc17 	ldw	r2,-16(fp)
 8005944:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window;
 8005948:	e0bff317 	ldw	r2,-52(fp)
 800594c:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = right_window - 2;
 8005950:	e0bff317 	ldw	r2,-52(fp)
 8005954:	10bfff84 	addi	r2,r2,-2
 8005958:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = return_piece.row[1] = bottom_row - 1;
 800595c:	e0bff403 	ldbu	r2,-48(fp)
 8005960:	10bfffc4 	addi	r2,r2,-1
 8005964:	e0bff615 	stw	r2,-40(fp)
 8005968:	e0bff617 	ldw	r2,-40(fp)
 800596c:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005970:	e0bff403 	ldbu	r2,-48(fp)
 8005974:	e0bff815 	stw	r2,-32(fp)
 8005978:	e0bff817 	ldw	r2,-32(fp)
 800597c:	e0bff715 	stw	r2,-36(fp)
					break;
 8005980:	00001606 	br	80059dc <assemble_piece+0x4a4>
				case CW: case CCW:
					// 'S' piece rotated
					// 0
					// 1 2
					//   3
					bottom_row = bottom_window;
 8005984:	e0bff117 	ldw	r2,-60(fp)
 8005988:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[1] = right_window - 1;
 800598c:	e0bff317 	ldw	r2,-52(fp)
 8005990:	10bfffc4 	addi	r2,r2,-1
 8005994:	e0bffa15 	stw	r2,-24(fp)
 8005998:	e0bffa17 	ldw	r2,-24(fp)
 800599c:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[2] = return_piece.col[3] = right_window;
 80059a0:	e0bff317 	ldw	r2,-52(fp)
 80059a4:	e0bffc15 	stw	r2,-16(fp)
 80059a8:	e0bffc17 	ldw	r2,-16(fp)
 80059ac:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = bottom_row - 2;
 80059b0:	e0bff403 	ldbu	r2,-48(fp)
 80059b4:	10bfff84 	addi	r2,r2,-2
 80059b8:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 80059bc:	e0bff403 	ldbu	r2,-48(fp)
 80059c0:	10bfffc4 	addi	r2,r2,-1
 80059c4:	e0bff715 	stw	r2,-36(fp)
 80059c8:	e0bff717 	ldw	r2,-36(fp)
 80059cc:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[3] = bottom_row;
 80059d0:	e0bff403 	ldbu	r2,-48(fp)
 80059d4:	e0bff815 	stw	r2,-32(fp)
					break;
 80059d8:	0001883a 	nop
			}
			break;
 80059dc:	00014506 	br	8005ef4 <assemble_piece+0x9bc>
		case T_PIECE:
			switch (return_piece.orient) {
 80059e0:	e0bffd17 	ldw	r2,-12(fp)
 80059e4:	1004d0fa 	srli	r2,r2,3
 80059e8:	108000cc 	andi	r2,r2,3
 80059ec:	10803fcc 	andi	r2,r2,255
 80059f0:	10c000a0 	cmpeqi	r3,r2,2
 80059f4:	18003a1e 	bne	r3,zero,8005ae0 <assemble_piece+0x5a8>
 80059f8:	10c000e0 	cmpeqi	r3,r2,3
 80059fc:	18004e1e 	bne	r3,zero,8005b38 <assemble_piece+0x600>
 8005a00:	10800060 	cmpeqi	r2,r2,1
 8005a04:	1000161e 	bne	r2,zero,8005a60 <assemble_piece+0x528>
				case INITIAL:
					// 'T' piece
					// 0 1 2
					//   3
					bottom_row = bottom_window;
 8005a08:	e0bff117 	ldw	r2,-60(fp)
 8005a0c:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = right_window - 2;
 8005a10:	e0bff317 	ldw	r2,-52(fp)
 8005a14:	10bfff84 	addi	r2,r2,-2
 8005a18:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = return_piece.col[3] = right_window - 1;
 8005a1c:	e0bff317 	ldw	r2,-52(fp)
 8005a20:	10bfffc4 	addi	r2,r2,-1
 8005a24:	e0bffc15 	stw	r2,-16(fp)
 8005a28:	e0bffc17 	ldw	r2,-16(fp)
 8005a2c:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = right_window;
 8005a30:	e0bff317 	ldw	r2,-52(fp)
 8005a34:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 8005a38:	e0bff403 	ldbu	r2,-48(fp)
 8005a3c:	10bfffc4 	addi	r2,r2,-1
 8005a40:	e0bff715 	stw	r2,-36(fp)
 8005a44:	e0bff717 	ldw	r2,-36(fp)
 8005a48:	e0bff615 	stw	r2,-40(fp)
 8005a4c:	e0bff617 	ldw	r2,-40(fp)
 8005a50:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[3] = bottom_row;
 8005a54:	e0bff403 	ldbu	r2,-48(fp)
 8005a58:	e0bff815 	stw	r2,-32(fp)
					break;
 8005a5c:	00004c06 	br	8005b90 <assemble_piece+0x658>
				case CW:
					//   0
					// 1 2
					//   3
					bottom_row = bottom_window;
 8005a60:	e0bff117 	ldw	r2,-60(fp)
 8005a64:	e0bff405 	stb	r2,-48(fp)

					if (left_window == 7) {
 8005a68:	e0bff217 	ldw	r2,-56(fp)
 8005a6c:	108001d8 	cmpnei	r2,r2,7
 8005a70:	1000031e 	bne	r2,zero,8005a80 <assemble_piece+0x548>
						left_col = left_window;
 8005a74:	e0bff217 	ldw	r2,-56(fp)
 8005a78:	e0bfec05 	stb	r2,-80(fp)
 8005a7c:	00000306 	br	8005a8c <assemble_piece+0x554>
					}
					else {
						left_col = right_window - 3;
 8005a80:	e0bff317 	ldw	r2,-52(fp)
 8005a84:	10bfff44 	addi	r2,r2,-3
 8005a88:	e0bfec05 	stb	r2,-80(fp)
					}
					return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = left_col + 2;
 8005a8c:	e0bfec03 	ldbu	r2,-80(fp)
 8005a90:	10800084 	addi	r2,r2,2
 8005a94:	e0bffc15 	stw	r2,-16(fp)
 8005a98:	e0bffc17 	ldw	r2,-16(fp)
 8005a9c:	e0bffb15 	stw	r2,-20(fp)
 8005aa0:	e0bffb17 	ldw	r2,-20(fp)
 8005aa4:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = left_col + 1;
 8005aa8:	e0bfec03 	ldbu	r2,-80(fp)
 8005aac:	10800044 	addi	r2,r2,1
 8005ab0:	e0bffa15 	stw	r2,-24(fp)

					return_piece.row[0] = bottom_row - 2;
 8005ab4:	e0bff403 	ldbu	r2,-48(fp)
 8005ab8:	10bfff84 	addi	r2,r2,-2
 8005abc:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 8005ac0:	e0bff403 	ldbu	r2,-48(fp)
 8005ac4:	10bfffc4 	addi	r2,r2,-1
 8005ac8:	e0bff715 	stw	r2,-36(fp)
 8005acc:	e0bff717 	ldw	r2,-36(fp)
 8005ad0:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[3] = bottom_row;
 8005ad4:	e0bff403 	ldbu	r2,-48(fp)
 8005ad8:	e0bff815 	stw	r2,-32(fp)
					break;
 8005adc:	00002c06 	br	8005b90 <assemble_piece+0x658>
				case INITIAL_FLIPPED:
					//   0
					// 1 2 3
					bottom_row = bottom_window;
 8005ae0:	e0bff117 	ldw	r2,-60(fp)
 8005ae4:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[2] = right_window - 1;
 8005ae8:	e0bff317 	ldw	r2,-52(fp)
 8005aec:	10bfffc4 	addi	r2,r2,-1
 8005af0:	e0bffb15 	stw	r2,-20(fp)
 8005af4:	e0bffb17 	ldw	r2,-20(fp)
 8005af8:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window - 2;
 8005afc:	e0bff317 	ldw	r2,-52(fp)
 8005b00:	10bfff84 	addi	r2,r2,-2
 8005b04:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[3] = right_window;
 8005b08:	e0bff317 	ldw	r2,-52(fp)
 8005b0c:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = bottom_row - 1;
 8005b10:	e0bff403 	ldbu	r2,-48(fp)
 8005b14:	10bfffc4 	addi	r2,r2,-1
 8005b18:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005b1c:	e0bff403 	ldbu	r2,-48(fp)
 8005b20:	e0bff815 	stw	r2,-32(fp)
 8005b24:	e0bff817 	ldw	r2,-32(fp)
 8005b28:	e0bff715 	stw	r2,-36(fp)
 8005b2c:	e0bff717 	ldw	r2,-36(fp)
 8005b30:	e0bff615 	stw	r2,-40(fp)
					break;
 8005b34:	00001606 	br	8005b90 <assemble_piece+0x658>
				case CCW:
					// 0
					// 1 2
					// 3
					bottom_row = bottom_window;
 8005b38:	e0bff117 	ldw	r2,-60(fp)
 8005b3c:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = right_window - 1;
 8005b40:	e0bff317 	ldw	r2,-52(fp)
 8005b44:	10bfffc4 	addi	r2,r2,-1
 8005b48:	e0bffc15 	stw	r2,-16(fp)
 8005b4c:	e0bffc17 	ldw	r2,-16(fp)
 8005b50:	e0bffa15 	stw	r2,-24(fp)
 8005b54:	e0bffa17 	ldw	r2,-24(fp)
 8005b58:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[2] = right_window;
 8005b5c:	e0bff317 	ldw	r2,-52(fp)
 8005b60:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = bottom_row - 2;
 8005b64:	e0bff403 	ldbu	r2,-48(fp)
 8005b68:	10bfff84 	addi	r2,r2,-2
 8005b6c:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 8005b70:	e0bff403 	ldbu	r2,-48(fp)
 8005b74:	10bfffc4 	addi	r2,r2,-1
 8005b78:	e0bff715 	stw	r2,-36(fp)
 8005b7c:	e0bff717 	ldw	r2,-36(fp)
 8005b80:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[3] = bottom_row;
 8005b84:	e0bff403 	ldbu	r2,-48(fp)
 8005b88:	e0bff815 	stw	r2,-32(fp)
					break;
 8005b8c:	0001883a 	nop
			}
			break;
 8005b90:	0000d806 	br	8005ef4 <assemble_piece+0x9bc>
		case J_PIECE:
			switch (return_piece.orient) {
 8005b94:	e0bffd17 	ldw	r2,-12(fp)
 8005b98:	1004d0fa 	srli	r2,r2,3
 8005b9c:	108000cc 	andi	r2,r2,3
 8005ba0:	10803fcc 	andi	r2,r2,255
 8005ba4:	10c000a0 	cmpeqi	r3,r2,2
 8005ba8:	1800391e 	bne	r3,zero,8005c90 <assemble_piece+0x758>
 8005bac:	10c000e0 	cmpeqi	r3,r2,3
 8005bb0:	18004d1e 	bne	r3,zero,8005ce8 <assemble_piece+0x7b0>
 8005bb4:	10800060 	cmpeqi	r2,r2,1
 8005bb8:	1000161e 	bne	r2,zero,8005c14 <assemble_piece+0x6dc>
				case INITIAL:
					// 0 1 2
					//     3
					bottom_row = bottom_window;
 8005bbc:	e0bff117 	ldw	r2,-60(fp)
 8005bc0:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = right_window - 2;
 8005bc4:	e0bff317 	ldw	r2,-52(fp)
 8005bc8:	10bfff84 	addi	r2,r2,-2
 8005bcc:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window - 1;
 8005bd0:	e0bff317 	ldw	r2,-52(fp)
 8005bd4:	10bfffc4 	addi	r2,r2,-1
 8005bd8:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = return_piece.col[3] = right_window;
 8005bdc:	e0bff317 	ldw	r2,-52(fp)
 8005be0:	e0bffc15 	stw	r2,-16(fp)
 8005be4:	e0bffc17 	ldw	r2,-16(fp)
 8005be8:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 8005bec:	e0bff403 	ldbu	r2,-48(fp)
 8005bf0:	10bfffc4 	addi	r2,r2,-1
 8005bf4:	e0bff715 	stw	r2,-36(fp)
 8005bf8:	e0bff717 	ldw	r2,-36(fp)
 8005bfc:	e0bff615 	stw	r2,-40(fp)
 8005c00:	e0bff617 	ldw	r2,-40(fp)
 8005c04:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[3] = bottom_row;
 8005c08:	e0bff403 	ldbu	r2,-48(fp)
 8005c0c:	e0bff815 	stw	r2,-32(fp)
					break;
 8005c10:	00004b06 	br	8005d40 <assemble_piece+0x808>
				case CW:
					//   0
					//   1
					// 2 3
					bottom_row = bottom_window;
 8005c14:	e0bff117 	ldw	r2,-60(fp)
 8005c18:	e0bff405 	stb	r2,-48(fp)
					if (left_window == 7) {
 8005c1c:	e0bff217 	ldw	r2,-56(fp)
 8005c20:	108001d8 	cmpnei	r2,r2,7
 8005c24:	1000031e 	bne	r2,zero,8005c34 <assemble_piece+0x6fc>
						right_col = right_window;
 8005c28:	e0bff317 	ldw	r2,-52(fp)
 8005c2c:	e0bfec45 	stb	r2,-79(fp)
 8005c30:	00000306 	br	8005c40 <assemble_piece+0x708>
					}
					else {
						right_col = right_window - 1;
 8005c34:	e0bff317 	ldw	r2,-52(fp)
 8005c38:	10bfffc4 	addi	r2,r2,-1
 8005c3c:	e0bfec45 	stb	r2,-79(fp)
					}
					return_piece.col[0] = return_piece.col[1] = return_piece.col[3] = right_col;
 8005c40:	e0bfec43 	ldbu	r2,-79(fp)
 8005c44:	e0bffc15 	stw	r2,-16(fp)
 8005c48:	e0bffc17 	ldw	r2,-16(fp)
 8005c4c:	e0bffa15 	stw	r2,-24(fp)
 8005c50:	e0bffa17 	ldw	r2,-24(fp)
 8005c54:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[2] = right_col - 1;
 8005c58:	e0bfec43 	ldbu	r2,-79(fp)
 8005c5c:	10bfffc4 	addi	r2,r2,-1
 8005c60:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = bottom_row - 2;
 8005c64:	e0bff403 	ldbu	r2,-48(fp)
 8005c68:	10bfff84 	addi	r2,r2,-2
 8005c6c:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = bottom_row - 1;
 8005c70:	e0bff403 	ldbu	r2,-48(fp)
 8005c74:	10bfffc4 	addi	r2,r2,-1
 8005c78:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005c7c:	e0bff403 	ldbu	r2,-48(fp)
 8005c80:	e0bff815 	stw	r2,-32(fp)
 8005c84:	e0bff817 	ldw	r2,-32(fp)
 8005c88:	e0bff715 	stw	r2,-36(fp)
					break;
 8005c8c:	00002c06 	br	8005d40 <assemble_piece+0x808>
				case INITIAL_FLIPPED:
					// 0
					// 1 2 3
					bottom_row = bottom_window;
 8005c90:	e0bff117 	ldw	r2,-60(fp)
 8005c94:	e0bff405 	stb	r2,-48(fp)

					return_piece.col[0] = return_piece.col[1] = right_window - 2;
 8005c98:	e0bff317 	ldw	r2,-52(fp)
 8005c9c:	10bfff84 	addi	r2,r2,-2
 8005ca0:	e0bffa15 	stw	r2,-24(fp)
 8005ca4:	e0bffa17 	ldw	r2,-24(fp)
 8005ca8:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[2] = right_window - 1;
 8005cac:	e0bff317 	ldw	r2,-52(fp)
 8005cb0:	10bfffc4 	addi	r2,r2,-1
 8005cb4:	e0bffb15 	stw	r2,-20(fp)
					return_piece.col[3] = right_window;
 8005cb8:	e0bff317 	ldw	r2,-52(fp)
 8005cbc:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = bottom_row - 1;
 8005cc0:	e0bff403 	ldbu	r2,-48(fp)
 8005cc4:	10bfffc4 	addi	r2,r2,-1
 8005cc8:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005ccc:	e0bff403 	ldbu	r2,-48(fp)
 8005cd0:	e0bff815 	stw	r2,-32(fp)
 8005cd4:	e0bff817 	ldw	r2,-32(fp)
 8005cd8:	e0bff715 	stw	r2,-36(fp)
 8005cdc:	e0bff717 	ldw	r2,-36(fp)
 8005ce0:	e0bff615 	stw	r2,-40(fp)
					break;
 8005ce4:	00001606 	br	8005d40 <assemble_piece+0x808>
				case CCW:
					// 0 1
					// 2
					// 3
					bottom_row = bottom_window;
 8005ce8:	e0bff117 	ldw	r2,-60(fp)
 8005cec:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[2] = return_piece.col[3] = right_window - 1;
 8005cf0:	e0bff317 	ldw	r2,-52(fp)
 8005cf4:	10bfffc4 	addi	r2,r2,-1
 8005cf8:	e0bffc15 	stw	r2,-16(fp)
 8005cfc:	e0bffc17 	ldw	r2,-16(fp)
 8005d00:	e0bffb15 	stw	r2,-20(fp)
 8005d04:	e0bffb17 	ldw	r2,-20(fp)
 8005d08:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window;
 8005d0c:	e0bff317 	ldw	r2,-52(fp)
 8005d10:	e0bffa15 	stw	r2,-24(fp)

					return_piece.row[0] = return_piece.row[1] = bottom_row - 2;
 8005d14:	e0bff403 	ldbu	r2,-48(fp)
 8005d18:	10bfff84 	addi	r2,r2,-2
 8005d1c:	e0bff615 	stw	r2,-40(fp)
 8005d20:	e0bff617 	ldw	r2,-40(fp)
 8005d24:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[2] = bottom_row - 1;
 8005d28:	e0bff403 	ldbu	r2,-48(fp)
 8005d2c:	10bfffc4 	addi	r2,r2,-1
 8005d30:	e0bff715 	stw	r2,-36(fp)
					return_piece.row[3] = bottom_row;
 8005d34:	e0bff403 	ldbu	r2,-48(fp)
 8005d38:	e0bff815 	stw	r2,-32(fp)
					break;
 8005d3c:	0001883a 	nop
			}
			break;
 8005d40:	00006c06 	br	8005ef4 <assemble_piece+0x9bc>
		case L_PIECE:
			switch (return_piece.orient) {
 8005d44:	e0bffd17 	ldw	r2,-12(fp)
 8005d48:	1004d0fa 	srli	r2,r2,3
 8005d4c:	108000cc 	andi	r2,r2,3
 8005d50:	10803fcc 	andi	r2,r2,255
 8005d54:	10c000a0 	cmpeqi	r3,r2,2
 8005d58:	1800391e 	bne	r3,zero,8005e40 <assemble_piece+0x908>
 8005d5c:	10c000e0 	cmpeqi	r3,r2,3
 8005d60:	18004d1e 	bne	r3,zero,8005e98 <assemble_piece+0x960>
 8005d64:	10800060 	cmpeqi	r2,r2,1
 8005d68:	1000161e 	bne	r2,zero,8005dc4 <assemble_piece+0x88c>
				case INITIAL:
					// 0 1 2
					// 3
					bottom_row = bottom_window;
 8005d6c:	e0bff117 	ldw	r2,-60(fp)
 8005d70:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[3] = right_window - 2;
 8005d74:	e0bff317 	ldw	r2,-52(fp)
 8005d78:	10bfff84 	addi	r2,r2,-2
 8005d7c:	e0bffc15 	stw	r2,-16(fp)
 8005d80:	e0bffc17 	ldw	r2,-16(fp)
 8005d84:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window - 1;
 8005d88:	e0bff317 	ldw	r2,-52(fp)
 8005d8c:	10bfffc4 	addi	r2,r2,-1
 8005d90:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = right_window;
 8005d94:	e0bff317 	ldw	r2,-52(fp)
 8005d98:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = return_piece.row[1] = return_piece.row[2] = bottom_row - 1;
 8005d9c:	e0bff403 	ldbu	r2,-48(fp)
 8005da0:	10bfffc4 	addi	r2,r2,-1
 8005da4:	e0bff715 	stw	r2,-36(fp)
 8005da8:	e0bff717 	ldw	r2,-36(fp)
 8005dac:	e0bff615 	stw	r2,-40(fp)
 8005db0:	e0bff617 	ldw	r2,-40(fp)
 8005db4:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[3] = bottom_row;
 8005db8:	e0bff403 	ldbu	r2,-48(fp)
 8005dbc:	e0bff815 	stw	r2,-32(fp)

					break;
 8005dc0:	00004b06 	br	8005ef0 <assemble_piece+0x9b8>
				case CW:
					// 0 1
					//   2
					//   3
					bottom_row = bottom_window;
 8005dc4:	e0bff117 	ldw	r2,-60(fp)
 8005dc8:	e0bff405 	stb	r2,-48(fp)
					if (left_window == 7) {
 8005dcc:	e0bff217 	ldw	r2,-56(fp)
 8005dd0:	108001d8 	cmpnei	r2,r2,7
 8005dd4:	1000031e 	bne	r2,zero,8005de4 <assemble_piece+0x8ac>
						right_col = right_window;
 8005dd8:	e0bff317 	ldw	r2,-52(fp)
 8005ddc:	e0bfec45 	stb	r2,-79(fp)
 8005de0:	00000306 	br	8005df0 <assemble_piece+0x8b8>
					}
					else {
						right_col = right_window - 1;
 8005de4:	e0bff317 	ldw	r2,-52(fp)
 8005de8:	10bfffc4 	addi	r2,r2,-1
 8005dec:	e0bfec45 	stb	r2,-79(fp)
					}
					return_piece.col[0] = right_col - 1;
 8005df0:	e0bfec43 	ldbu	r2,-79(fp)
 8005df4:	10bfffc4 	addi	r2,r2,-1
 8005df8:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = return_piece.col[2] = return_piece.col[3] = right_col;
 8005dfc:	e0bfec43 	ldbu	r2,-79(fp)
 8005e00:	e0bffc15 	stw	r2,-16(fp)
 8005e04:	e0bffc17 	ldw	r2,-16(fp)
 8005e08:	e0bffb15 	stw	r2,-20(fp)
 8005e0c:	e0bffb17 	ldw	r2,-20(fp)
 8005e10:	e0bffa15 	stw	r2,-24(fp)

					return_piece.row[0] = return_piece.row[1] = bottom_row - 2;
 8005e14:	e0bff403 	ldbu	r2,-48(fp)
 8005e18:	10bfff84 	addi	r2,r2,-2
 8005e1c:	e0bff615 	stw	r2,-40(fp)
 8005e20:	e0bff617 	ldw	r2,-40(fp)
 8005e24:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[2] = bottom_row - 1;
 8005e28:	e0bff403 	ldbu	r2,-48(fp)
 8005e2c:	10bfffc4 	addi	r2,r2,-1
 8005e30:	e0bff715 	stw	r2,-36(fp)
					return_piece.row[3] = bottom_row;
 8005e34:	e0bff403 	ldbu	r2,-48(fp)
 8005e38:	e0bff815 	stw	r2,-32(fp)
					break;
 8005e3c:	00002c06 	br	8005ef0 <assemble_piece+0x9b8>
				case INITIAL_FLIPPED:
					//     0
					// 1 2 3
					bottom_row = bottom_window;
 8005e40:	e0bff117 	ldw	r2,-60(fp)
 8005e44:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[3] = right_window;
 8005e48:	e0bff317 	ldw	r2,-52(fp)
 8005e4c:	e0bffc15 	stw	r2,-16(fp)
 8005e50:	e0bffc17 	ldw	r2,-16(fp)
 8005e54:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[1] = right_window - 2;
 8005e58:	e0bff317 	ldw	r2,-52(fp)
 8005e5c:	10bfff84 	addi	r2,r2,-2
 8005e60:	e0bffa15 	stw	r2,-24(fp)
					return_piece.col[2] = right_window - 1;
 8005e64:	e0bff317 	ldw	r2,-52(fp)
 8005e68:	10bfffc4 	addi	r2,r2,-1
 8005e6c:	e0bffb15 	stw	r2,-20(fp)

					return_piece.row[0] = bottom_row - 1;
 8005e70:	e0bff403 	ldbu	r2,-48(fp)
 8005e74:	10bfffc4 	addi	r2,r2,-1
 8005e78:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005e7c:	e0bff403 	ldbu	r2,-48(fp)
 8005e80:	e0bff815 	stw	r2,-32(fp)
 8005e84:	e0bff817 	ldw	r2,-32(fp)
 8005e88:	e0bff715 	stw	r2,-36(fp)
 8005e8c:	e0bff717 	ldw	r2,-36(fp)
 8005e90:	e0bff615 	stw	r2,-40(fp)
					break;
 8005e94:	00001606 	br	8005ef0 <assemble_piece+0x9b8>
				case CCW:
					// 0
					// 1
					// 2 3
					bottom_row = bottom_window;
 8005e98:	e0bff117 	ldw	r2,-60(fp)
 8005e9c:	e0bff405 	stb	r2,-48(fp)
					return_piece.col[0] = return_piece.col[1] = return_piece.col[2] = right_window - 1;
 8005ea0:	e0bff317 	ldw	r2,-52(fp)
 8005ea4:	10bfffc4 	addi	r2,r2,-1
 8005ea8:	e0bffb15 	stw	r2,-20(fp)
 8005eac:	e0bffb17 	ldw	r2,-20(fp)
 8005eb0:	e0bffa15 	stw	r2,-24(fp)
 8005eb4:	e0bffa17 	ldw	r2,-24(fp)
 8005eb8:	e0bff915 	stw	r2,-28(fp)
					return_piece.col[3] = right_window;
 8005ebc:	e0bff317 	ldw	r2,-52(fp)
 8005ec0:	e0bffc15 	stw	r2,-16(fp)

					return_piece.row[0] = bottom_row - 2;
 8005ec4:	e0bff403 	ldbu	r2,-48(fp)
 8005ec8:	10bfff84 	addi	r2,r2,-2
 8005ecc:	e0bff515 	stw	r2,-44(fp)
					return_piece.row[1] = bottom_row - 1;
 8005ed0:	e0bff403 	ldbu	r2,-48(fp)
 8005ed4:	10bfffc4 	addi	r2,r2,-1
 8005ed8:	e0bff615 	stw	r2,-40(fp)
					return_piece.row[2] = return_piece.row[3] = bottom_row;
 8005edc:	e0bff403 	ldbu	r2,-48(fp)
 8005ee0:	e0bff815 	stw	r2,-32(fp)
 8005ee4:	e0bff817 	ldw	r2,-32(fp)
 8005ee8:	e0bff715 	stw	r2,-36(fp)
					break;
 8005eec:	0001883a 	nop
			}
			break;
 8005ef0:	0001883a 	nop
	}

	for (int i = 0; i < 4; i++) {
 8005ef4:	e03fef15 	stw	zero,-68(fp)
 8005ef8:	00001506 	br	8005f50 <assemble_piece+0xa18>
		return_piece.col[i] *= 2;
 8005efc:	e0bfef17 	ldw	r2,-68(fp)
 8005f00:	10800104 	addi	r2,r2,4
 8005f04:	1085883a 	add	r2,r2,r2
 8005f08:	1085883a 	add	r2,r2,r2
 8005f0c:	e0ffec04 	addi	r3,fp,-80
 8005f10:	1885883a 	add	r2,r3,r2
 8005f14:	10800904 	addi	r2,r2,36
 8005f18:	10800017 	ldw	r2,0(r2)
 8005f1c:	1085883a 	add	r2,r2,r2
 8005f20:	1007883a 	mov	r3,r2
 8005f24:	e0bfef17 	ldw	r2,-68(fp)
 8005f28:	10800104 	addi	r2,r2,4
 8005f2c:	1085883a 	add	r2,r2,r2
 8005f30:	1085883a 	add	r2,r2,r2
 8005f34:	e13fec04 	addi	r4,fp,-80
 8005f38:	2085883a 	add	r2,r4,r2
 8005f3c:	10800904 	addi	r2,r2,36
 8005f40:	10c00015 	stw	r3,0(r2)
					break;
			}
			break;
	}

	for (int i = 0; i < 4; i++) {
 8005f44:	e0bfef17 	ldw	r2,-68(fp)
 8005f48:	10800044 	addi	r2,r2,1
 8005f4c:	e0bfef15 	stw	r2,-68(fp)
 8005f50:	e0bfef17 	ldw	r2,-68(fp)
 8005f54:	10800110 	cmplti	r2,r2,4
 8005f58:	103fe81e 	bne	r2,zero,8005efc <__alt_data_end+0xfc005efc>
		return_piece.col[i] *= 2;
	}

	return return_piece;
 8005f5c:	e0bffe17 	ldw	r2,-8(fp)
 8005f60:	e0fff517 	ldw	r3,-44(fp)
 8005f64:	10c00015 	stw	r3,0(r2)
 8005f68:	e0fff617 	ldw	r3,-40(fp)
 8005f6c:	10c00115 	stw	r3,4(r2)
 8005f70:	e0fff717 	ldw	r3,-36(fp)
 8005f74:	10c00215 	stw	r3,8(r2)
 8005f78:	e0fff817 	ldw	r3,-32(fp)
 8005f7c:	10c00315 	stw	r3,12(r2)
 8005f80:	e0fff917 	ldw	r3,-28(fp)
 8005f84:	10c00415 	stw	r3,16(r2)
 8005f88:	e0fffa17 	ldw	r3,-24(fp)
 8005f8c:	10c00515 	stw	r3,20(r2)
 8005f90:	e0fffb17 	ldw	r3,-20(fp)
 8005f94:	10c00615 	stw	r3,24(r2)
 8005f98:	e0fffc17 	ldw	r3,-16(fp)
 8005f9c:	10c00715 	stw	r3,28(r2)
 8005fa0:	e0fffd17 	ldw	r3,-12(fp)
 8005fa4:	10c00815 	stw	r3,32(r2)
}
 8005fa8:	e0bffe17 	ldw	r2,-8(fp)
 8005fac:	e037883a 	mov	sp,fp
 8005fb0:	df000017 	ldw	fp,0(sp)
 8005fb4:	dec00104 	addi	sp,sp,4
 8005fb8:	f800283a 	ret

08005fbc <game_over_sequence>:

// (Unused)
void game_over_sequence() {
 8005fbc:	defffe04 	addi	sp,sp,-8
 8005fc0:	df000115 	stw	fp,4(sp)
 8005fc4:	df000104 	addi	fp,sp,4
	for (unsigned i = 0; i < 20; i++) {
 8005fc8:	e03fff15 	stw	zero,-4(fp)
 8005fcc:	00001d06 	br	8006044 <game_over_sequence+0x88>
		if (vga_ctrl->BOARD[i] & GAMEOVER_MASK) {
 8005fd0:	d0e00317 	ldw	r3,-32756(gp)
 8005fd4:	e0bfff17 	ldw	r2,-4(fp)
 8005fd8:	10800084 	addi	r2,r2,2
 8005fdc:	1085883a 	add	r2,r2,r2
 8005fe0:	1085883a 	add	r2,r2,r2
 8005fe4:	1885883a 	add	r2,r3,r2
 8005fe8:	10800017 	ldw	r2,0(r2)
 8005fec:	1080042c 	andhi	r2,r2,16
 8005ff0:	10000426 	beq	r2,zero,8006004 <game_over_sequence+0x48>
	return return_piece;
}

// (Unused)
void game_over_sequence() {
	for (unsigned i = 0; i < 20; i++) {
 8005ff4:	e0bfff17 	ldw	r2,-4(fp)
 8005ff8:	10800044 	addi	r2,r2,1
 8005ffc:	e0bfff15 	stw	r2,-4(fp)
 8006000:	00001006 	br	8006044 <game_over_sequence+0x88>
		if (vga_ctrl->BOARD[i] & GAMEOVER_MASK) {
			continue;
		}
		else {
			vga_ctrl->BOARD[i] |= GAMEOVER_MASK;
 8006004:	d1200317 	ldw	r4,-32756(gp)
 8006008:	d0e00317 	ldw	r3,-32756(gp)
 800600c:	e0bfff17 	ldw	r2,-4(fp)
 8006010:	10800084 	addi	r2,r2,2
 8006014:	1085883a 	add	r2,r2,r2
 8006018:	1085883a 	add	r2,r2,r2
 800601c:	1885883a 	add	r2,r3,r2
 8006020:	10800017 	ldw	r2,0(r2)
 8006024:	10c00434 	orhi	r3,r2,16
 8006028:	e0bfff17 	ldw	r2,-4(fp)
 800602c:	10800084 	addi	r2,r2,2
 8006030:	1085883a 	add	r2,r2,r2
 8006034:	1085883a 	add	r2,r2,r2
 8006038:	2085883a 	add	r2,r4,r2
 800603c:	10c00015 	stw	r3,0(r2)
			return;
 8006040:	00000306 	br	8006050 <game_over_sequence+0x94>
	return return_piece;
}

// (Unused)
void game_over_sequence() {
	for (unsigned i = 0; i < 20; i++) {
 8006044:	e0bfff17 	ldw	r2,-4(fp)
 8006048:	10800530 	cmpltui	r2,r2,20
 800604c:	103fe01e 	bne	r2,zero,8005fd0 <__alt_data_end+0xfc005fd0>
		else {
			vga_ctrl->BOARD[i] |= GAMEOVER_MASK;
			return;
		}
	}
}
 8006050:	e037883a 	mov	sp,fp
 8006054:	df000017 	ldw	fp,0(sp)
 8006058:	dec00104 	addi	sp,sp,4
 800605c:	f800283a 	ret

08006060 <main>:

int main() {
 8006060:	deffee04 	addi	sp,sp,-72
 8006064:	dfc01115 	stw	ra,68(sp)
 8006068:	df001015 	stw	fp,64(sp)
 800606c:	dc800f15 	stw	r18,60(sp)
 8006070:	dc400e15 	stw	r17,56(sp)
 8006074:	dc000d15 	stw	r16,52(sp)
 8006078:	df001004 	addi	fp,sp,64
	vga_clear();
 800607c:	80039400 	call	8003940 <vga_clear>
	SGTL_setup();	// Unused / unfinished (tried looking for information about it on the day before the project was due)
 8006080:	80003c00 	call	80003c0 <SGTL_setup>
	// dark = red, light = green
	set_palette(colors[4].red, colors[4].green, colors[4].blue, colors[2].red, colors[2].green, colors[2].blue);
 8006084:	008200b4 	movhi	r2,2050
 8006088:	10abc104 	addi	r2,r2,-20732
 800608c:	10801c03 	ldbu	r2,112(r2)
 8006090:	11003fcc 	andi	r4,r2,255
 8006094:	008200b4 	movhi	r2,2050
 8006098:	10abc104 	addi	r2,r2,-20732
 800609c:	10801c43 	ldbu	r2,113(r2)
 80060a0:	11403fcc 	andi	r5,r2,255
 80060a4:	008200b4 	movhi	r2,2050
 80060a8:	10abc104 	addi	r2,r2,-20732
 80060ac:	10801c83 	ldbu	r2,114(r2)
 80060b0:	11803fcc 	andi	r6,r2,255
 80060b4:	008200b4 	movhi	r2,2050
 80060b8:	10abc104 	addi	r2,r2,-20732
 80060bc:	10801083 	ldbu	r2,66(r2)
 80060c0:	11c03fcc 	andi	r7,r2,255
 80060c4:	008200b4 	movhi	r2,2050
 80060c8:	10abc104 	addi	r2,r2,-20732
 80060cc:	108010c3 	ldbu	r2,67(r2)
 80060d0:	10c03fcc 	andi	r3,r2,255
 80060d4:	008200b4 	movhi	r2,2050
 80060d8:	10abc104 	addi	r2,r2,-20732
 80060dc:	10801103 	ldbu	r2,68(r2)
 80060e0:	10803fcc 	andi	r2,r2,255
 80060e4:	d8800115 	stw	r2,4(sp)
 80060e8:	d8c00015 	stw	r3,0(sp)
 80060ec:	8003ef40 	call	8003ef4 <set_palette>
	alt_u32 counter = 0;
 80060f0:	e03ff615 	stw	zero,-40(fp)
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 80060f4:	e03ff305 	stb	zero,-52(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 80060f8:	e03ff345 	stb	zero,-51(fp)
	BYTE device;
	WORD keycode;

	//////printf("initializing MAX3421E...\n");
	MAX3421E_init();
 80060fc:	80016480 	call	8001648 <MAX3421E_init>
	//////printf("initializing USB...\n");
	USB_init();
 8006100:	8001e180 	call	8001e18 <USB_init>

	int to_clear = 0, prev_lines = 0, curr_lines = 0;
 8006104:	e03ff715 	stw	zero,-36(fp)
 8006108:	e03ff415 	stw	zero,-48(fp)
 800610c:	e03ff515 	stw	zero,-44(fp)

	initial_spawn_piece();
 8006110:	800426c0 	call	800426c <initial_spawn_piece>
	while (1) {
		MAX3421E_Task();
 8006114:	80016dc0 	call	80016dc <MAX3421E_Task>
		USB_Task();
 8006118:	8001eb00 	call	8001eb0 <USB_Task>
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 800611c:	80026200 	call	8002620 <GetUsbTaskState>
 8006120:	10803fcc 	andi	r2,r2,255
 8006124:	10801018 	cmpnei	r2,r2,64
 8006128:	1000b11e 	bne	r2,zero,80063f0 <main+0x390>
			if (vga_ctrl->LINES_CLEARED != 0) {
 800612c:	d0a00317 	ldw	r2,-32756(gp)
 8006130:	10801917 	ldw	r2,100(r2)
 8006134:	10002e26 	beq	r2,zero,80061f0 <main+0x190>
				////printf("Assert clear\n");
				increase_lines_and_score();
 8006138:	800456c0 	call	800456c <increase_lines_and_score>
				curr_lines += vga_ctrl->LINES_CLEARED;
 800613c:	d0a00317 	ldw	r2,-32756(gp)
 8006140:	10c01917 	ldw	r3,100(r2)
 8006144:	e0bff517 	ldw	r2,-44(fp)
 8006148:	1885883a 	add	r2,r3,r2
 800614c:	e0bff515 	stw	r2,-44(fp)
				vga_ctrl->LINES_CLEARED = 0x00000000;
 8006150:	d0a00317 	ldw	r2,-32756(gp)
 8006154:	10001915 	stw	zero,100(r2)
				if (curr_lines - prev_lines >= 10) {
 8006158:	e0fff517 	ldw	r3,-44(fp)
 800615c:	e0bff417 	ldw	r2,-48(fp)
 8006160:	1885c83a 	sub	r2,r3,r2
 8006164:	10800290 	cmplti	r2,r2,10
 8006168:	1000211e 	bne	r2,zero,80061f0 <main+0x190>
					increase_level();
 800616c:	8003cb40 	call	8003cb4 <increase_level>
					set_palette(vga_ctrl->SEED & 0x000000FF, rand(), (vga_ctrl->SEED & 0x00FF0000) >> 16, rand() * 2, (vga_ctrl->SEED & 0xFF000000) >> 24, (vga_ctrl->SEED & 0x0000FF00) >> 8);
 8006170:	d0a00317 	ldw	r2,-32756(gp)
 8006174:	10880217 	ldw	r2,8200(r2)
 8006178:	14003fcc 	andi	r16,r2,255
 800617c:	800b8900 	call	800b890 <rand>
 8006180:	14403fcc 	andi	r17,r2,255
 8006184:	d0a00317 	ldw	r2,-32756(gp)
 8006188:	10880217 	ldw	r2,8200(r2)
 800618c:	10803fec 	andhi	r2,r2,255
 8006190:	1004d43a 	srli	r2,r2,16
 8006194:	14803fcc 	andi	r18,r2,255
 8006198:	800b8900 	call	800b890 <rand>
 800619c:	1085883a 	add	r2,r2,r2
 80061a0:	10c03fcc 	andi	r3,r2,255
 80061a4:	d0a00317 	ldw	r2,-32756(gp)
 80061a8:	10880217 	ldw	r2,8200(r2)
 80061ac:	1004d63a 	srli	r2,r2,24
 80061b0:	1009883a 	mov	r4,r2
 80061b4:	d0a00317 	ldw	r2,-32756(gp)
 80061b8:	10880217 	ldw	r2,8200(r2)
 80061bc:	10bfc00c 	andi	r2,r2,65280
 80061c0:	1004d23a 	srli	r2,r2,8
 80061c4:	10803fcc 	andi	r2,r2,255
 80061c8:	d8800115 	stw	r2,4(sp)
 80061cc:	d9000015 	stw	r4,0(sp)
 80061d0:	180f883a 	mov	r7,r3
 80061d4:	900d883a 	mov	r6,r18
 80061d8:	880b883a 	mov	r5,r17
 80061dc:	8009883a 	mov	r4,r16
 80061e0:	8003ef40 	call	8003ef4 <set_palette>
					prev_lines += 10;
 80061e4:	e0bff417 	ldw	r2,-48(fp)
 80061e8:	10800284 	addi	r2,r2,10
 80061ec:	e0bff415 	stw	r2,-48(fp)
				}
				////printf("Done");
				////printf("LINES CLEARED = %d\n", vga_ctrl->LINES_CLEARED);
			}
			if (vga_ctrl->ASSERTION & 0x00000004) {
 80061f0:	d0a00317 	ldw	r2,-32756(gp)
 80061f4:	10880317 	ldw	r2,8204(r2)
 80061f8:	1080010c 	andi	r2,r2,4
 80061fc:	10000326 	beq	r2,zero,800620c <main+0x1ac>
				vga_ctrl->DROP_INTERVAL = 0xFFFFFFFFF;
 8006200:	d0a00317 	ldw	r2,-32756(gp)
 8006204:	00ffffc4 	movi	r3,-1
 8006208:	10c80415 	stw	r3,8208(r2)
			}

			if (!runningdebugflag) {
 800620c:	e0bff303 	ldbu	r2,-52(fp)
 8006210:	1000071e 	bne	r2,zero,8006230 <main+0x1d0>
				runningdebugflag = 1;
 8006214:	00800044 	movi	r2,1
 8006218:	e0bff305 	stb	r2,-52(fp)
				setLED(9);
 800621c:	01000244 	movi	r4,9
 8006220:	80027f80 	call	80027f8 <setLED>
				device = GetDriverandReport();
 8006224:	80026fc0 	call	80026fc <GetDriverandReport>
 8006228:	e0bff385 	stb	r2,-50(fp)
 800622c:	003fb906 	br	8006114 <__alt_data_end+0xfc006114>
			}
			else if (device == 1) {
 8006230:	e0bff383 	ldbu	r2,-50(fp)
 8006234:	10800058 	cmpnei	r2,r2,1
 8006238:	1000391e 	bne	r2,zero,8006320 <main+0x2c0>
				//run keyboard debug polling
				////printf("Polling\n");
				rcode = kbdPoll(&kbdbuf);
 800623c:	e0bffa44 	addi	r2,fp,-23
 8006240:	1009883a 	mov	r4,r2
 8006244:	8000f980 	call	8000f98 <kbdPoll>
 8006248:	e0bff805 	stb	r2,-32(fp)
				if (rcode == hrNAK) {
 800624c:	e0bff803 	ldbu	r2,-32(fp)
 8006250:	10800118 	cmpnei	r2,r2,4
 8006254:	1000131e 	bne	r2,zero,80062a4 <main+0x244>
					////printf("keycode[0] = %d\n", kbdbuf.keycode[0]);
					setKeycode(kbdbuf.keycode[0], kbdbuf.keycode[1], kbdbuf.keycode[2], kbdbuf.keycode[3], kbdbuf.keycode[4], kbdbuf.keycode[5], 1);
 8006258:	e0bffac3 	ldbu	r2,-21(fp)
 800625c:	12003fcc 	andi	r8,r2,255
 8006260:	e0bffb03 	ldbu	r2,-20(fp)
 8006264:	11403fcc 	andi	r5,r2,255
 8006268:	e0bffb43 	ldbu	r2,-19(fp)
 800626c:	11803fcc 	andi	r6,r2,255
 8006270:	e0bffb83 	ldbu	r2,-18(fp)
 8006274:	11c03fcc 	andi	r7,r2,255
 8006278:	e0bffbc3 	ldbu	r2,-17(fp)
 800627c:	10803fcc 	andi	r2,r2,255
 8006280:	e0fffc03 	ldbu	r3,-16(fp)
 8006284:	18c03fcc 	andi	r3,r3,255
 8006288:	01000044 	movi	r4,1
 800628c:	d9000215 	stw	r4,8(sp)
 8006290:	d8c00115 	stw	r3,4(sp)
 8006294:	d8800015 	stw	r2,0(sp)
 8006298:	4009883a 	mov	r4,r8
 800629c:	8002ad40 	call	8002ad4 <setKeycode>
					continue;
 80062a0:	00006c06 	br	8006454 <main+0x3f4>
					//kbdbuf.keycode[0] = 0; //NAK means no new data
				} else if (rcode) {
 80062a4:	e0bff803 	ldbu	r2,-32(fp)
 80062a8:	1000651e 	bne	r2,zero,8006440 <main+0x3e0>
					continue;
					////printf("Rcode: ");
					////printf("%x \n", rcode);
				}
				else {
					setKeycode(kbdbuf.keycode[0], kbdbuf.keycode[1], kbdbuf.keycode[2], kbdbuf.keycode[3], kbdbuf.keycode[4], kbdbuf.keycode[5], 0);
 80062ac:	e0bffac3 	ldbu	r2,-21(fp)
 80062b0:	11003fcc 	andi	r4,r2,255
 80062b4:	e0bffb03 	ldbu	r2,-20(fp)
 80062b8:	11403fcc 	andi	r5,r2,255
 80062bc:	e0bffb43 	ldbu	r2,-19(fp)
 80062c0:	11803fcc 	andi	r6,r2,255
 80062c4:	e0bffb83 	ldbu	r2,-18(fp)
 80062c8:	11c03fcc 	andi	r7,r2,255
 80062cc:	e0bffbc3 	ldbu	r2,-17(fp)
 80062d0:	10803fcc 	andi	r2,r2,255
 80062d4:	e0fffc03 	ldbu	r3,-16(fp)
 80062d8:	18c03fcc 	andi	r3,r3,255
 80062dc:	d8000215 	stw	zero,8(sp)
 80062e0:	d8c00115 	stw	r3,4(sp)
 80062e4:	d8800015 	stw	r2,0(sp)
 80062e8:	8002ad40 	call	8002ad4 <setKeycode>
				}
				printSignedHex0(kbdbuf.keycode[0]);
 80062ec:	e0bffac3 	ldbu	r2,-21(fp)
 80062f0:	10803fcc 	andi	r2,r2,255
 80062f4:	1080201c 	xori	r2,r2,128
 80062f8:	10bfe004 	addi	r2,r2,-128
 80062fc:	1009883a 	mov	r4,r2
 8006300:	80028840 	call	8002884 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 8006304:	e0bffb03 	ldbu	r2,-20(fp)
 8006308:	10803fcc 	andi	r2,r2,255
 800630c:	1080201c 	xori	r2,r2,128
 8006310:	10bfe004 	addi	r2,r2,-128
 8006314:	1009883a 	mov	r4,r2
 8006318:	800299c0 	call	800299c <printSignedHex1>
 800631c:	003f7d06 	br	8006114 <__alt_data_end+0xfc006114>
			}

			else if (device == 2) {
 8006320:	e0bff383 	ldbu	r2,-50(fp)
 8006324:	10800098 	cmpnei	r2,r2,2
 8006328:	103f7a1e 	bne	r2,zero,8006114 <__alt_data_end+0xfc006114>
				rcode = mousePoll(&buf);
 800632c:	e0bff844 	addi	r2,fp,-31
 8006330:	1009883a 	mov	r4,r2
 8006334:	8000f100 	call	8000f10 <mousePoll>
 8006338:	e0bff805 	stb	r2,-32(fp)
				if (rcode == hrNAK) {
 800633c:	e0bff803 	ldbu	r2,-32(fp)
 8006340:	10800118 	cmpnei	r2,r2,4
 8006344:	10004026 	beq	r2,zero,8006448 <main+0x3e8>
					//NAK means no new data
					continue;
				} else if (rcode) {
 8006348:	e0bff803 	ldbu	r2,-32(fp)
 800634c:	1000401e 	bne	r2,zero,8006450 <main+0x3f0>
					//////printf("%x \n", rcode);
					continue;
				}
				//////printf("X displacement: ");
				//////printf("%d ", (signed char) buf.Xdispl);
				printSignedHex0((signed char) buf.Xdispl);
 8006350:	e0bff883 	ldbu	r2,-30(fp)
 8006354:	10803fcc 	andi	r2,r2,255
 8006358:	1080201c 	xori	r2,r2,128
 800635c:	10bfe004 	addi	r2,r2,-128
 8006360:	1009883a 	mov	r4,r2
 8006364:	80028840 	call	8002884 <printSignedHex0>
				//////printf("Y displacement: ");
				//////printf("%d ", (signed char) buf.Ydispl);
				printSignedHex1((signed char) buf.Ydispl);
 8006368:	e0bff8c3 	ldbu	r2,-29(fp)
 800636c:	10803fcc 	andi	r2,r2,255
 8006370:	1080201c 	xori	r2,r2,128
 8006374:	10bfe004 	addi	r2,r2,-128
 8006378:	1009883a 	mov	r4,r2
 800637c:	800299c0 	call	800299c <printSignedHex1>
				//////printf("Buttons: ");
				//////printf("%x\n", buf.button);
				if (buf.button & 0x04)
 8006380:	e0bff843 	ldbu	r2,-31(fp)
 8006384:	10803fcc 	andi	r2,r2,255
 8006388:	1080010c 	andi	r2,r2,4
 800638c:	10000326 	beq	r2,zero,800639c <main+0x33c>
					setLED(2);
 8006390:	01000084 	movi	r4,2
 8006394:	80027f80 	call	80027f8 <setLED>
 8006398:	00000206 	br	80063a4 <main+0x344>
				else
					clearLED(2);
 800639c:	01000084 	movi	r4,2
 80063a0:	800283c0 	call	800283c <clearLED>
				if (buf.button & 0x02)
 80063a4:	e0bff843 	ldbu	r2,-31(fp)
 80063a8:	10803fcc 	andi	r2,r2,255
 80063ac:	1080008c 	andi	r2,r2,2
 80063b0:	10000326 	beq	r2,zero,80063c0 <main+0x360>
					setLED(1);
 80063b4:	01000044 	movi	r4,1
 80063b8:	80027f80 	call	80027f8 <setLED>
 80063bc:	00000206 	br	80063c8 <main+0x368>
				else
					clearLED(1);
 80063c0:	01000044 	movi	r4,1
 80063c4:	800283c0 	call	800283c <clearLED>
				if (buf.button & 0x01)
 80063c8:	e0bff843 	ldbu	r2,-31(fp)
 80063cc:	10803fcc 	andi	r2,r2,255
 80063d0:	1080004c 	andi	r2,r2,1
 80063d4:	10000326 	beq	r2,zero,80063e4 <main+0x384>
					setLED(0);
 80063d8:	0009883a 	mov	r4,zero
 80063dc:	80027f80 	call	80027f8 <setLED>
 80063e0:	003f4c06 	br	8006114 <__alt_data_end+0xfc006114>
				else
					clearLED(0);
 80063e4:	0009883a 	mov	r4,zero
 80063e8:	800283c0 	call	800283c <clearLED>
 80063ec:	003f4906 	br	8006114 <__alt_data_end+0xfc006114>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 80063f0:	80026200 	call	8002620 <GetUsbTaskState>
 80063f4:	10803fcc 	andi	r2,r2,255
 80063f8:	10803fd8 	cmpnei	r2,r2,255
 80063fc:	1000071e 	bne	r2,zero,800641c <main+0x3bc>
			//////printf("Error checking\n");
			if (!errorflag) {
 8006400:	e0bff343 	ldbu	r2,-51(fp)
 8006404:	103f431e 	bne	r2,zero,8006114 <__alt_data_end+0xfc006114>
				errorflag = 1;
 8006408:	00800044 	movi	r2,1
 800640c:	e0bff345 	stb	r2,-51(fp)
				clearLED(9);
 8006410:	01000244 	movi	r4,9
 8006414:	800283c0 	call	800283c <clearLED>
 8006418:	003f3e06 	br	8006114 <__alt_data_end+0xfc006114>
		} else //not in USB running state
		{

			//////printf("USB task state: ");
			//////printf("%x\n", GetUsbTaskState());
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 800641c:	e0bff303 	ldbu	r2,-52(fp)
 8006420:	10000326 	beq	r2,zero,8006430 <main+0x3d0>
				runningdebugflag = 0;
 8006424:	e03ff305 	stb	zero,-52(fp)
				MAX3421E_init();
 8006428:	80016480 	call	8001648 <MAX3421E_init>
				USB_init();
 800642c:	8001e180 	call	8001e18 <USB_init>
			}
			errorflag = 0;
 8006430:	e03ff345 	stb	zero,-51(fp)
			clearLED(9);
 8006434:	01000244 	movi	r4,9
 8006438:	800283c0 	call	800283c <clearLED>
 800643c:	003f3506 	br	8006114 <__alt_data_end+0xfc006114>
					////printf("keycode[0] = %d\n", kbdbuf.keycode[0]);
					setKeycode(kbdbuf.keycode[0], kbdbuf.keycode[1], kbdbuf.keycode[2], kbdbuf.keycode[3], kbdbuf.keycode[4], kbdbuf.keycode[5], 1);
					continue;
					//kbdbuf.keycode[0] = 0; //NAK means no new data
				} else if (rcode) {
					continue;
 8006440:	0001883a 	nop
 8006444:	003f3306 	br	8006114 <__alt_data_end+0xfc006114>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 8006448:	0001883a 	nop
 800644c:	003f3106 	br	8006114 <__alt_data_end+0xfc006114>
				} else if (rcode) {
					//////printf("Rcode: ");
					//////printf("%x \n", rcode);
					continue;
 8006450:	0001883a 	nop
			errorflag = 0;
			clearLED(9);
		}


	}
 8006454:	003f2f06 	br	8006114 <__alt_data_end+0xfc006114>

08006458 <pow>:
 8006458:	deffee04 	addi	sp,sp,-72
 800645c:	dc800b15 	stw	r18,44(sp)
 8006460:	048200b4 	movhi	r18,2050
 8006464:	ddc01015 	stw	r23,64(sp)
 8006468:	dd800f15 	stw	r22,60(sp)
 800646c:	dd400e15 	stw	r21,56(sp)
 8006470:	dd000d15 	stw	r20,52(sp)
 8006474:	dcc00c15 	stw	r19,48(sp)
 8006478:	dc400a15 	stw	r17,40(sp)
 800647c:	dc000915 	stw	r16,36(sp)
 8006480:	dfc01115 	stw	ra,68(sp)
 8006484:	94b2db04 	addi	r18,r18,-13460
 8006488:	202f883a 	mov	r23,r4
 800648c:	282d883a 	mov	r22,r5
 8006490:	302b883a 	mov	r21,r6
 8006494:	3829883a 	mov	r20,r7
 8006498:	800691c0 	call	800691c <__ieee754_pow>
 800649c:	1023883a 	mov	r17,r2
 80064a0:	90800017 	ldw	r2,0(r18)
 80064a4:	04ffffc4 	movi	r19,-1
 80064a8:	1821883a 	mov	r16,r3
 80064ac:	14c00426 	beq	r2,r19,80064c0 <pow+0x68>
 80064b0:	a809883a 	mov	r4,r21
 80064b4:	a00b883a 	mov	r5,r20
 80064b8:	8007c780 	call	8007c78 <__fpclassifyd>
 80064bc:	10000d1e 	bne	r2,zero,80064f4 <pow+0x9c>
 80064c0:	8805883a 	mov	r2,r17
 80064c4:	8007883a 	mov	r3,r16
 80064c8:	dfc01117 	ldw	ra,68(sp)
 80064cc:	ddc01017 	ldw	r23,64(sp)
 80064d0:	dd800f17 	ldw	r22,60(sp)
 80064d4:	dd400e17 	ldw	r21,56(sp)
 80064d8:	dd000d17 	ldw	r20,52(sp)
 80064dc:	dcc00c17 	ldw	r19,48(sp)
 80064e0:	dc800b17 	ldw	r18,44(sp)
 80064e4:	dc400a17 	ldw	r17,40(sp)
 80064e8:	dc000917 	ldw	r16,36(sp)
 80064ec:	dec01204 	addi	sp,sp,72
 80064f0:	f800283a 	ret
 80064f4:	b809883a 	mov	r4,r23
 80064f8:	b00b883a 	mov	r5,r22
 80064fc:	8007c780 	call	8007c78 <__fpclassifyd>
 8006500:	000d883a 	mov	r6,zero
 8006504:	000f883a 	mov	r7,zero
 8006508:	1000201e 	bne	r2,zero,800658c <pow+0x134>
 800650c:	a809883a 	mov	r4,r21
 8006510:	a00b883a 	mov	r5,r20
 8006514:	800a1000 	call	800a100 <__eqdf2>
 8006518:	103fe91e 	bne	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 800651c:	01000044 	movi	r4,1
 8006520:	d9000015 	stw	r4,0(sp)
 8006524:	90800017 	ldw	r2,0(r18)
 8006528:	010200b4 	movhi	r4,2050
 800652c:	00cffc34 	movhi	r3,16368
 8006530:	212ae504 	addi	r4,r4,-21612
 8006534:	d9000115 	stw	r4,4(sp)
 8006538:	d8000815 	stw	zero,32(sp)
 800653c:	ddc00215 	stw	r23,8(sp)
 8006540:	dd800315 	stw	r22,12(sp)
 8006544:	dd400415 	stw	r21,16(sp)
 8006548:	dd000515 	stw	r20,20(sp)
 800654c:	d8000615 	stw	zero,24(sp)
 8006550:	d8c00715 	stw	r3,28(sp)
 8006554:	14c02826 	beq	r2,r19,80065f8 <pow+0x1a0>
 8006558:	01000084 	movi	r4,2
 800655c:	11002626 	beq	r2,r4,80065f8 <pow+0x1a0>
 8006560:	d809883a 	mov	r4,sp
 8006564:	8007cec0 	call	8007cec <matherr>
 8006568:	10006b26 	beq	r2,zero,8006718 <pow+0x2c0>
 800656c:	d8800817 	ldw	r2,32(sp)
 8006570:	10000326 	beq	r2,zero,8006580 <pow+0x128>
 8006574:	800b7280 	call	800b728 <__errno>
 8006578:	d8c00817 	ldw	r3,32(sp)
 800657c:	10c00015 	stw	r3,0(r2)
 8006580:	d8800617 	ldw	r2,24(sp)
 8006584:	d8c00717 	ldw	r3,28(sp)
 8006588:	003fcf06 	br	80064c8 <__alt_data_end+0xfc0064c8>
 800658c:	b809883a 	mov	r4,r23
 8006590:	b00b883a 	mov	r5,r22
 8006594:	800a1000 	call	800a100 <__eqdf2>
 8006598:	1000191e 	bne	r2,zero,8006600 <pow+0x1a8>
 800659c:	000d883a 	mov	r6,zero
 80065a0:	000f883a 	mov	r7,zero
 80065a4:	a809883a 	mov	r4,r21
 80065a8:	a00b883a 	mov	r5,r20
 80065ac:	800a1000 	call	800a100 <__eqdf2>
 80065b0:	10003a1e 	bne	r2,zero,800669c <pow+0x244>
 80065b4:	00c00044 	movi	r3,1
 80065b8:	d8c00015 	stw	r3,0(sp)
 80065bc:	90800017 	ldw	r2,0(r18)
 80065c0:	00c200b4 	movhi	r3,2050
 80065c4:	18eae504 	addi	r3,r3,-21612
 80065c8:	d8c00115 	stw	r3,4(sp)
 80065cc:	d8000815 	stw	zero,32(sp)
 80065d0:	ddc00215 	stw	r23,8(sp)
 80065d4:	dd800315 	stw	r22,12(sp)
 80065d8:	dd400415 	stw	r21,16(sp)
 80065dc:	dd000515 	stw	r20,20(sp)
 80065e0:	d8000615 	stw	zero,24(sp)
 80065e4:	d8000715 	stw	zero,28(sp)
 80065e8:	103fdd26 	beq	r2,zero,8006560 <__alt_data_end+0xfc006560>
 80065ec:	0005883a 	mov	r2,zero
 80065f0:	00cffc34 	movhi	r3,16368
 80065f4:	003fb406 	br	80064c8 <__alt_data_end+0xfc0064c8>
 80065f8:	0005883a 	mov	r2,zero
 80065fc:	003fb206 	br	80064c8 <__alt_data_end+0xfc0064c8>
 8006600:	8809883a 	mov	r4,r17
 8006604:	800b883a 	mov	r5,r16
 8006608:	8007c5c0 	call	8007c5c <finite>
 800660c:	10004626 	beq	r2,zero,8006728 <pow+0x2d0>
 8006610:	000d883a 	mov	r6,zero
 8006614:	000f883a 	mov	r7,zero
 8006618:	8809883a 	mov	r4,r17
 800661c:	800b883a 	mov	r5,r16
 8006620:	800a1000 	call	800a100 <__eqdf2>
 8006624:	103fa61e 	bne	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 8006628:	b809883a 	mov	r4,r23
 800662c:	b00b883a 	mov	r5,r22
 8006630:	8007c5c0 	call	8007c5c <finite>
 8006634:	103fa226 	beq	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 8006638:	a809883a 	mov	r4,r21
 800663c:	a00b883a 	mov	r5,r20
 8006640:	8007c5c0 	call	8007c5c <finite>
 8006644:	103f9e26 	beq	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 8006648:	00800104 	movi	r2,4
 800664c:	d8800015 	stw	r2,0(sp)
 8006650:	90c00017 	ldw	r3,0(r18)
 8006654:	008200b4 	movhi	r2,2050
 8006658:	10aae504 	addi	r2,r2,-21612
 800665c:	d8800115 	stw	r2,4(sp)
 8006660:	d8000815 	stw	zero,32(sp)
 8006664:	ddc00215 	stw	r23,8(sp)
 8006668:	dd800315 	stw	r22,12(sp)
 800666c:	dd400415 	stw	r21,16(sp)
 8006670:	dd000515 	stw	r20,20(sp)
 8006674:	d8000615 	stw	zero,24(sp)
 8006678:	d8000715 	stw	zero,28(sp)
 800667c:	00800084 	movi	r2,2
 8006680:	18804726 	beq	r3,r2,80067a0 <pow+0x348>
 8006684:	d809883a 	mov	r4,sp
 8006688:	8007cec0 	call	8007cec <matherr>
 800668c:	10004426 	beq	r2,zero,80067a0 <pow+0x348>
 8006690:	d8800817 	ldw	r2,32(sp)
 8006694:	103fba26 	beq	r2,zero,8006580 <__alt_data_end+0xfc006580>
 8006698:	003fb606 	br	8006574 <__alt_data_end+0xfc006574>
 800669c:	a809883a 	mov	r4,r21
 80066a0:	a00b883a 	mov	r5,r20
 80066a4:	8007c5c0 	call	8007c5c <finite>
 80066a8:	103f8526 	beq	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 80066ac:	000d883a 	mov	r6,zero
 80066b0:	000f883a 	mov	r7,zero
 80066b4:	a809883a 	mov	r4,r21
 80066b8:	a00b883a 	mov	r5,r20
 80066bc:	800a2640 	call	800a264 <__ledf2>
 80066c0:	103f7f0e 	bge	r2,zero,80064c0 <__alt_data_end+0xfc0064c0>
 80066c4:	00c00044 	movi	r3,1
 80066c8:	d8c00015 	stw	r3,0(sp)
 80066cc:	90800017 	ldw	r2,0(r18)
 80066d0:	00c200b4 	movhi	r3,2050
 80066d4:	18eae504 	addi	r3,r3,-21612
 80066d8:	d8c00115 	stw	r3,4(sp)
 80066dc:	d8000815 	stw	zero,32(sp)
 80066e0:	ddc00215 	stw	r23,8(sp)
 80066e4:	dd800315 	stw	r22,12(sp)
 80066e8:	dd400415 	stw	r21,16(sp)
 80066ec:	dd000515 	stw	r20,20(sp)
 80066f0:	d8000615 	stw	zero,24(sp)
 80066f4:	10002526 	beq	r2,zero,800678c <pow+0x334>
 80066f8:	00fffc34 	movhi	r3,65520
 80066fc:	d8c00715 	stw	r3,28(sp)
 8006700:	00c00084 	movi	r3,2
 8006704:	10c0221e 	bne	r2,r3,8006790 <pow+0x338>
 8006708:	800b7280 	call	800b728 <__errno>
 800670c:	00c00844 	movi	r3,33
 8006710:	10c00015 	stw	r3,0(r2)
 8006714:	003fde06 	br	8006690 <__alt_data_end+0xfc006690>
 8006718:	800b7280 	call	800b728 <__errno>
 800671c:	00c00844 	movi	r3,33
 8006720:	10c00015 	stw	r3,0(r2)
 8006724:	003f9106 	br	800656c <__alt_data_end+0xfc00656c>
 8006728:	b809883a 	mov	r4,r23
 800672c:	b00b883a 	mov	r5,r22
 8006730:	8007c5c0 	call	8007c5c <finite>
 8006734:	103fb626 	beq	r2,zero,8006610 <__alt_data_end+0xfc006610>
 8006738:	a809883a 	mov	r4,r21
 800673c:	a00b883a 	mov	r5,r20
 8006740:	8007c5c0 	call	8007c5c <finite>
 8006744:	103fb226 	beq	r2,zero,8006610 <__alt_data_end+0xfc006610>
 8006748:	8809883a 	mov	r4,r17
 800674c:	800b883a 	mov	r5,r16
 8006750:	8007c780 	call	8007c78 <__fpclassifyd>
 8006754:	1000161e 	bne	r2,zero,80067b0 <pow+0x358>
 8006758:	00800044 	movi	r2,1
 800675c:	d8800015 	stw	r2,0(sp)
 8006760:	94000017 	ldw	r16,0(r18)
 8006764:	008200b4 	movhi	r2,2050
 8006768:	10aae504 	addi	r2,r2,-21612
 800676c:	d8800115 	stw	r2,4(sp)
 8006770:	d8000815 	stw	zero,32(sp)
 8006774:	ddc00215 	stw	r23,8(sp)
 8006778:	dd800315 	stw	r22,12(sp)
 800677c:	dd400415 	stw	r21,16(sp)
 8006780:	dd000515 	stw	r20,20(sp)
 8006784:	8000281e 	bne	r16,zero,8006828 <pow+0x3d0>
 8006788:	d8000615 	stw	zero,24(sp)
 800678c:	d8000715 	stw	zero,28(sp)
 8006790:	d809883a 	mov	r4,sp
 8006794:	8007cec0 	call	8007cec <matherr>
 8006798:	103fbd1e 	bne	r2,zero,8006690 <__alt_data_end+0xfc006690>
 800679c:	003fda06 	br	8006708 <__alt_data_end+0xfc006708>
 80067a0:	800b7280 	call	800b728 <__errno>
 80067a4:	00c00884 	movi	r3,34
 80067a8:	10c00015 	stw	r3,0(r2)
 80067ac:	003fb806 	br	8006690 <__alt_data_end+0xfc006690>
 80067b0:	00c000c4 	movi	r3,3
 80067b4:	d8c00015 	stw	r3,0(sp)
 80067b8:	90800017 	ldw	r2,0(r18)
 80067bc:	00c200b4 	movhi	r3,2050
 80067c0:	18eae504 	addi	r3,r3,-21612
 80067c4:	d8c00115 	stw	r3,4(sp)
 80067c8:	d8000815 	stw	zero,32(sp)
 80067cc:	ddc00215 	stw	r23,8(sp)
 80067d0:	dd800315 	stw	r22,12(sp)
 80067d4:	dd400415 	stw	r21,16(sp)
 80067d8:	dd000515 	stw	r20,20(sp)
 80067dc:	000d883a 	mov	r6,zero
 80067e0:	000f883a 	mov	r7,zero
 80067e4:	b809883a 	mov	r4,r23
 80067e8:	b00b883a 	mov	r5,r22
 80067ec:	1000181e 	bne	r2,zero,8006850 <pow+0x3f8>
 80067f0:	00b80034 	movhi	r2,57344
 80067f4:	d8800615 	stw	r2,24(sp)
 80067f8:	0091fc34 	movhi	r2,18416
 80067fc:	10bfffc4 	addi	r2,r2,-1
 8006800:	d8800715 	stw	r2,28(sp)
 8006804:	800a2640 	call	800a264 <__ledf2>
 8006808:	10001a16 	blt	r2,zero,8006874 <pow+0x41c>
 800680c:	d809883a 	mov	r4,sp
 8006810:	8007cec0 	call	8007cec <matherr>
 8006814:	103f551e 	bne	r2,zero,800656c <__alt_data_end+0xfc00656c>
 8006818:	800b7280 	call	800b728 <__errno>
 800681c:	00c00884 	movi	r3,34
 8006820:	10c00015 	stw	r3,0(r2)
 8006824:	003f5106 	br	800656c <__alt_data_end+0xfc00656c>
 8006828:	000d883a 	mov	r6,zero
 800682c:	000f883a 	mov	r7,zero
 8006830:	0009883a 	mov	r4,zero
 8006834:	000b883a 	mov	r5,zero
 8006838:	80097300 	call	8009730 <__divdf3>
 800683c:	d8800615 	stw	r2,24(sp)
 8006840:	d8c00715 	stw	r3,28(sp)
 8006844:	00800084 	movi	r2,2
 8006848:	80bfaf26 	beq	r16,r2,8006708 <__alt_data_end+0xfc006708>
 800684c:	003fd006 	br	8006790 <__alt_data_end+0xfc006790>
 8006850:	009ffc34 	movhi	r2,32752
 8006854:	d8000615 	stw	zero,24(sp)
 8006858:	d8800715 	stw	r2,28(sp)
 800685c:	800a2640 	call	800a264 <__ledf2>
 8006860:	10001a16 	blt	r2,zero,80068cc <pow+0x474>
 8006864:	90c00017 	ldw	r3,0(r18)
 8006868:	00800084 	movi	r2,2
 800686c:	18bfe71e 	bne	r3,r2,800680c <__alt_data_end+0xfc00680c>
 8006870:	003fe906 	br	8006818 <__alt_data_end+0xfc006818>
 8006874:	000d883a 	mov	r6,zero
 8006878:	01cff834 	movhi	r7,16352
 800687c:	a809883a 	mov	r4,r21
 8006880:	a00b883a 	mov	r5,r20
 8006884:	800a3580 	call	800a358 <__muldf3>
 8006888:	1009883a 	mov	r4,r2
 800688c:	180b883a 	mov	r5,r3
 8006890:	1023883a 	mov	r17,r2
 8006894:	1821883a 	mov	r16,r3
 8006898:	8007d000 	call	8007d00 <rint>
 800689c:	100d883a 	mov	r6,r2
 80068a0:	180f883a 	mov	r7,r3
 80068a4:	8809883a 	mov	r4,r17
 80068a8:	800b883a 	mov	r5,r16
 80068ac:	800a1000 	call	800a100 <__eqdf2>
 80068b0:	103fec26 	beq	r2,zero,8006864 <__alt_data_end+0xfc006864>
 80068b4:	00b80034 	movhi	r2,57344
 80068b8:	d8800615 	stw	r2,24(sp)
 80068bc:	00b1fc34 	movhi	r2,51184
 80068c0:	10bfffc4 	addi	r2,r2,-1
 80068c4:	d8800715 	stw	r2,28(sp)
 80068c8:	003fe606 	br	8006864 <__alt_data_end+0xfc006864>
 80068cc:	000d883a 	mov	r6,zero
 80068d0:	01cff834 	movhi	r7,16352
 80068d4:	a809883a 	mov	r4,r21
 80068d8:	a00b883a 	mov	r5,r20
 80068dc:	800a3580 	call	800a358 <__muldf3>
 80068e0:	1009883a 	mov	r4,r2
 80068e4:	180b883a 	mov	r5,r3
 80068e8:	1023883a 	mov	r17,r2
 80068ec:	1821883a 	mov	r16,r3
 80068f0:	8007d000 	call	8007d00 <rint>
 80068f4:	100d883a 	mov	r6,r2
 80068f8:	180f883a 	mov	r7,r3
 80068fc:	8809883a 	mov	r4,r17
 8006900:	800b883a 	mov	r5,r16
 8006904:	800a1000 	call	800a100 <__eqdf2>
 8006908:	103fd626 	beq	r2,zero,8006864 <__alt_data_end+0xfc006864>
 800690c:	00bffc34 	movhi	r2,65520
 8006910:	d8000615 	stw	zero,24(sp)
 8006914:	d8800715 	stw	r2,28(sp)
 8006918:	003fd206 	br	8006864 <__alt_data_end+0xfc006864>

0800691c <__ieee754_pow>:
 800691c:	00a00034 	movhi	r2,32768
 8006920:	deffea04 	addi	sp,sp,-88
 8006924:	10bfffc4 	addi	r2,r2,-1
 8006928:	dc800e15 	stw	r18,56(sp)
 800692c:	38a4703a 	and	r18,r7,r2
 8006930:	dfc01515 	stw	ra,84(sp)
 8006934:	df001415 	stw	fp,80(sp)
 8006938:	ddc01315 	stw	r23,76(sp)
 800693c:	dd801215 	stw	r22,72(sp)
 8006940:	dd401115 	stw	r21,68(sp)
 8006944:	dd001015 	stw	r20,64(sp)
 8006948:	dcc00f15 	stw	r19,60(sp)
 800694c:	dc400d15 	stw	r17,52(sp)
 8006950:	dc000c15 	stw	r16,48(sp)
 8006954:	9186b03a 	or	r3,r18,r6
 8006958:	18002a26 	beq	r3,zero,8006a04 <__ieee754_pow+0xe8>
 800695c:	28a2703a 	and	r17,r5,r2
 8006960:	009ffc34 	movhi	r2,32752
 8006964:	14402316 	blt	r2,r17,80069f4 <__ieee754_pow+0xd8>
 8006968:	88802126 	beq	r17,r2,80069f0 <__ieee754_pow+0xd4>
 800696c:	14802116 	blt	r2,r18,80069f4 <__ieee754_pow+0xd8>
 8006970:	009ffc34 	movhi	r2,32752
 8006974:	90807326 	beq	r18,r2,8006b44 <__ieee754_pow+0x228>
 8006978:	2827883a 	mov	r19,r5
 800697c:	2021883a 	mov	r16,r4
 8006980:	302d883a 	mov	r22,r6
 8006984:	3839883a 	mov	fp,r7
 8006988:	28007016 	blt	r5,zero,8006b4c <__ieee754_pow+0x230>
 800698c:	002b883a 	mov	r21,zero
 8006990:	b0003a1e 	bne	r22,zero,8006a7c <__ieee754_pow+0x160>
 8006994:	009ffc34 	movhi	r2,32752
 8006998:	90807f26 	beq	r18,r2,8006b98 <__ieee754_pow+0x27c>
 800699c:	008ffc34 	movhi	r2,16368
 80069a0:	90805426 	beq	r18,r2,8006af4 <__ieee754_pow+0x1d8>
 80069a4:	00900034 	movhi	r2,16384
 80069a8:	e0833b26 	beq	fp,r2,8007698 <__ieee754_pow+0xd7c>
 80069ac:	008ff834 	movhi	r2,16352
 80069b0:	e080321e 	bne	fp,r2,8006a7c <__ieee754_pow+0x160>
 80069b4:	98003116 	blt	r19,zero,8006a7c <__ieee754_pow+0x160>
 80069b8:	8009883a 	mov	r4,r16
 80069bc:	980b883a 	mov	r5,r19
 80069c0:	dfc01517 	ldw	ra,84(sp)
 80069c4:	df001417 	ldw	fp,80(sp)
 80069c8:	ddc01317 	ldw	r23,76(sp)
 80069cc:	dd801217 	ldw	r22,72(sp)
 80069d0:	dd401117 	ldw	r21,68(sp)
 80069d4:	dd001017 	ldw	r20,64(sp)
 80069d8:	dcc00f17 	ldw	r19,60(sp)
 80069dc:	dc800e17 	ldw	r18,56(sp)
 80069e0:	dc400d17 	ldw	r17,52(sp)
 80069e4:	dc000c17 	ldw	r16,48(sp)
 80069e8:	dec01604 	addi	sp,sp,88
 80069ec:	80079c01 	jmpi	80079c0 <__ieee754_sqrt>
 80069f0:	20001226 	beq	r4,zero,8006a3c <__ieee754_pow+0x120>
 80069f4:	00b00434 	movhi	r2,49168
 80069f8:	8885883a 	add	r2,r17,r2
 80069fc:	1108b03a 	or	r4,r2,r4
 8006a00:	20000f1e 	bne	r4,zero,8006a40 <__ieee754_pow+0x124>
 8006a04:	0005883a 	mov	r2,zero
 8006a08:	00cffc34 	movhi	r3,16368
 8006a0c:	dfc01517 	ldw	ra,84(sp)
 8006a10:	df001417 	ldw	fp,80(sp)
 8006a14:	ddc01317 	ldw	r23,76(sp)
 8006a18:	dd801217 	ldw	r22,72(sp)
 8006a1c:	dd401117 	ldw	r21,68(sp)
 8006a20:	dd001017 	ldw	r20,64(sp)
 8006a24:	dcc00f17 	ldw	r19,60(sp)
 8006a28:	dc800e17 	ldw	r18,56(sp)
 8006a2c:	dc400d17 	ldw	r17,52(sp)
 8006a30:	dc000c17 	ldw	r16,48(sp)
 8006a34:	dec01604 	addi	sp,sp,88
 8006a38:	f800283a 	ret
 8006a3c:	8cbfcc0e 	bge	r17,r18,8006970 <__alt_data_end+0xfc006970>
 8006a40:	010200b4 	movhi	r4,2050
 8006a44:	212b3404 	addi	r4,r4,-21296
 8006a48:	dfc01517 	ldw	ra,84(sp)
 8006a4c:	df001417 	ldw	fp,80(sp)
 8006a50:	ddc01317 	ldw	r23,76(sp)
 8006a54:	dd801217 	ldw	r22,72(sp)
 8006a58:	dd401117 	ldw	r21,68(sp)
 8006a5c:	dd001017 	ldw	r20,64(sp)
 8006a60:	dcc00f17 	ldw	r19,60(sp)
 8006a64:	dc800e17 	ldw	r18,56(sp)
 8006a68:	dc400d17 	ldw	r17,52(sp)
 8006a6c:	dc000c17 	ldw	r16,48(sp)
 8006a70:	dec01604 	addi	sp,sp,88
 8006a74:	8007cf41 	jmpi	8007cf4 <nan>
 8006a78:	002b883a 	mov	r21,zero
 8006a7c:	8009883a 	mov	r4,r16
 8006a80:	980b883a 	mov	r5,r19
 8006a84:	8007c480 	call	8007c48 <fabs>
 8006a88:	102f883a 	mov	r23,r2
 8006a8c:	80000f26 	beq	r16,zero,8006acc <__ieee754_pow+0x1b0>
 8006a90:	9816d7fa 	srli	r11,r19,31
 8006a94:	5affffc4 	addi	r11,r11,-1
 8006a98:	aac4b03a 	or	r2,r21,r11
 8006a9c:	10004b26 	beq	r2,zero,8006bcc <__ieee754_pow+0x2b0>
 8006aa0:	00907834 	movhi	r2,16864
 8006aa4:	1480540e 	bge	r2,r18,8006bf8 <__ieee754_pow+0x2dc>
 8006aa8:	0090fc34 	movhi	r2,17392
 8006aac:	14832d0e 	bge	r2,r18,8007764 <__ieee754_pow+0xe48>
 8006ab0:	008ffc34 	movhi	r2,16368
 8006ab4:	10bfffc4 	addi	r2,r2,-1
 8006ab8:	14401916 	blt	r2,r17,8006b20 <__ieee754_pow+0x204>
 8006abc:	e0001916 	blt	fp,zero,8006b24 <__ieee754_pow+0x208>
 8006ac0:	0005883a 	mov	r2,zero
 8006ac4:	0007883a 	mov	r3,zero
 8006ac8:	003fd006 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006acc:	88000526 	beq	r17,zero,8006ae4 <__ieee754_pow+0x1c8>
 8006ad0:	00900034 	movhi	r2,16384
 8006ad4:	10bfffc4 	addi	r2,r2,-1
 8006ad8:	9884703a 	and	r2,r19,r2
 8006adc:	010ffc34 	movhi	r4,16368
 8006ae0:	113feb1e 	bne	r2,r4,8006a90 <__alt_data_end+0xfc006a90>
 8006ae4:	e0000716 	blt	fp,zero,8006b04 <__ieee754_pow+0x1e8>
 8006ae8:	9802e216 	blt	r19,zero,8007674 <__ieee754_pow+0xd58>
 8006aec:	b805883a 	mov	r2,r23
 8006af0:	003fc606 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006af4:	e0037516 	blt	fp,zero,80078cc <__ieee754_pow+0xfb0>
 8006af8:	8005883a 	mov	r2,r16
 8006afc:	9807883a 	mov	r3,r19
 8006b00:	003fc206 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006b04:	b80d883a 	mov	r6,r23
 8006b08:	180f883a 	mov	r7,r3
 8006b0c:	0009883a 	mov	r4,zero
 8006b10:	014ffc34 	movhi	r5,16368
 8006b14:	80097300 	call	8009730 <__divdf3>
 8006b18:	102f883a 	mov	r23,r2
 8006b1c:	003ff206 	br	8006ae8 <__alt_data_end+0xfc006ae8>
 8006b20:	073fe70e 	bge	zero,fp,8006ac0 <__alt_data_end+0xfc006ac0>
 8006b24:	01a20034 	movhi	r6,34816
 8006b28:	01df8e34 	movhi	r7,32312
 8006b2c:	319d6704 	addi	r6,r6,30108
 8006b30:	39f90f04 	addi	r7,r7,-7108
 8006b34:	3009883a 	mov	r4,r6
 8006b38:	380b883a 	mov	r5,r7
 8006b3c:	800a3580 	call	800a358 <__muldf3>
 8006b40:	003fb206 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006b44:	303f8c26 	beq	r6,zero,8006978 <__alt_data_end+0xfc006978>
 8006b48:	003faa06 	br	80069f4 <__alt_data_end+0xfc0069f4>
 8006b4c:	0090d034 	movhi	r2,17216
 8006b50:	10bfffc4 	addi	r2,r2,-1
 8006b54:	14801b16 	blt	r2,r18,8006bc4 <__ieee754_pow+0x2a8>
 8006b58:	008ffc34 	movhi	r2,16368
 8006b5c:	10bfffc4 	addi	r2,r2,-1
 8006b60:	14bf8a0e 	bge	r2,r18,800698c <__alt_data_end+0xfc00698c>
 8006b64:	9005d53a 	srai	r2,r18,20
 8006b68:	00c00504 	movi	r3,20
 8006b6c:	10bf0044 	addi	r2,r2,-1023
 8006b70:	18836b0e 	bge	r3,r2,8007920 <__ieee754_pow+0x1004>
 8006b74:	00c00d04 	movi	r3,52
 8006b78:	1885c83a 	sub	r2,r3,r2
 8006b7c:	3086d83a 	srl	r3,r6,r2
 8006b80:	1884983a 	sll	r2,r3,r2
 8006b84:	30bf811e 	bne	r6,r2,800698c <__alt_data_end+0xfc00698c>
 8006b88:	18c0004c 	andi	r3,r3,1
 8006b8c:	02800084 	movi	r10,2
 8006b90:	50ebc83a 	sub	r21,r10,r3
 8006b94:	003f7e06 	br	8006990 <__alt_data_end+0xfc006990>
 8006b98:	01300434 	movhi	r4,49168
 8006b9c:	8909883a 	add	r4,r17,r4
 8006ba0:	2408b03a 	or	r4,r4,r16
 8006ba4:	203f9726 	beq	r4,zero,8006a04 <__alt_data_end+0xfc006a04>
 8006ba8:	008ffc34 	movhi	r2,16368
 8006bac:	10bfffc4 	addi	r2,r2,-1
 8006bb0:	1442e60e 	bge	r2,r17,800774c <__ieee754_pow+0xe30>
 8006bb4:	e03fc216 	blt	fp,zero,8006ac0 <__alt_data_end+0xfc006ac0>
 8006bb8:	0005883a 	mov	r2,zero
 8006bbc:	e007883a 	mov	r3,fp
 8006bc0:	003f9206 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006bc4:	05400084 	movi	r21,2
 8006bc8:	003f7106 	br	8006990 <__alt_data_end+0xfc006990>
 8006bcc:	800d883a 	mov	r6,r16
 8006bd0:	980f883a 	mov	r7,r19
 8006bd4:	3009883a 	mov	r4,r6
 8006bd8:	380b883a 	mov	r5,r7
 8006bdc:	800abc40 	call	800abc4 <__subdf3>
 8006be0:	100d883a 	mov	r6,r2
 8006be4:	180f883a 	mov	r7,r3
 8006be8:	1009883a 	mov	r4,r2
 8006bec:	180b883a 	mov	r5,r3
 8006bf0:	80097300 	call	8009730 <__divdf3>
 8006bf4:	003f8506 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006bf8:	00800434 	movhi	r2,16
 8006bfc:	10bfffc4 	addi	r2,r2,-1
 8006c00:	1442d616 	blt	r2,r17,800775c <__ieee754_pow+0xe40>
 8006c04:	b809883a 	mov	r4,r23
 8006c08:	000d883a 	mov	r6,zero
 8006c0c:	01d0d034 	movhi	r7,17216
 8006c10:	180b883a 	mov	r5,r3
 8006c14:	dac00b15 	stw	r11,44(sp)
 8006c18:	800a3580 	call	800a358 <__muldf3>
 8006c1c:	dac00b17 	ldw	r11,44(sp)
 8006c20:	102f883a 	mov	r23,r2
 8006c24:	1823883a 	mov	r17,r3
 8006c28:	033ff2c4 	movi	r12,-53
 8006c2c:	8807d53a 	srai	r3,r17,20
 8006c30:	00800434 	movhi	r2,16
 8006c34:	10bfffc4 	addi	r2,r2,-1
 8006c38:	18ff0044 	addi	r3,r3,-1023
 8006c3c:	1b19883a 	add	r12,r3,r12
 8006c40:	00c00134 	movhi	r3,4
 8006c44:	8884703a 	and	r2,r17,r2
 8006c48:	18e62384 	addi	r3,r3,-26482
 8006c4c:	150ffc34 	orhi	r20,r2,16368
 8006c50:	1880060e 	bge	r3,r2,8006c6c <__ieee754_pow+0x350>
 8006c54:	00c00334 	movhi	r3,12
 8006c58:	18ed9e44 	addi	r3,r3,-18823
 8006c5c:	18833f0e 	bge	r3,r2,800795c <__ieee754_pow+0x1040>
 8006c60:	00bffc34 	movhi	r2,65520
 8006c64:	63000044 	addi	r12,r12,1
 8006c68:	a0a9883a 	add	r20,r20,r2
 8006c6c:	0027883a 	mov	r19,zero
 8006c70:	d8000215 	stw	zero,8(sp)
 8006c74:	0013883a 	mov	r9,zero
 8006c78:	0011883a 	mov	r8,zero
 8006c7c:	0015883a 	mov	r10,zero
 8006c80:	048ffc34 	movhi	r18,16368
 8006c84:	900f883a 	mov	r7,r18
 8006c88:	b809883a 	mov	r4,r23
 8006c8c:	a00b883a 	mov	r5,r20
 8006c90:	000d883a 	mov	r6,zero
 8006c94:	da000a15 	stw	r8,40(sp)
 8006c98:	da400815 	stw	r9,32(sp)
 8006c9c:	dac00b15 	stw	r11,44(sp)
 8006ca0:	db000915 	stw	r12,36(sp)
 8006ca4:	da800515 	stw	r10,20(sp)
 8006ca8:	800abc40 	call	800abc4 <__subdf3>
 8006cac:	b809883a 	mov	r4,r23
 8006cb0:	a00b883a 	mov	r5,r20
 8006cb4:	900f883a 	mov	r7,r18
 8006cb8:	000d883a 	mov	r6,zero
 8006cbc:	d8800015 	stw	r2,0(sp)
 8006cc0:	d8c00115 	stw	r3,4(sp)
 8006cc4:	8008e840 	call	8008e84 <__adddf3>
 8006cc8:	100d883a 	mov	r6,r2
 8006ccc:	180f883a 	mov	r7,r3
 8006cd0:	0009883a 	mov	r4,zero
 8006cd4:	014ffc34 	movhi	r5,16368
 8006cd8:	80097300 	call	8009730 <__divdf3>
 8006cdc:	d9000017 	ldw	r4,0(sp)
 8006ce0:	d9400117 	ldw	r5,4(sp)
 8006ce4:	100d883a 	mov	r6,r2
 8006ce8:	180f883a 	mov	r7,r3
 8006cec:	d8c00715 	stw	r3,28(sp)
 8006cf0:	d8800615 	stw	r2,24(sp)
 8006cf4:	800a3580 	call	800a358 <__muldf3>
 8006cf8:	1023883a 	mov	r17,r2
 8006cfc:	a005d07a 	srai	r2,r20,1
 8006d00:	da800517 	ldw	r10,20(sp)
 8006d04:	1821883a 	mov	r16,r3
 8006d08:	10c80034 	orhi	r3,r2,8192
 8006d0c:	00800234 	movhi	r2,8
 8006d10:	1885883a 	add	r2,r3,r2
 8006d14:	1295883a 	add	r10,r2,r10
 8006d18:	500f883a 	mov	r7,r10
 8006d1c:	800b883a 	mov	r5,r16
 8006d20:	000d883a 	mov	r6,zero
 8006d24:	0009883a 	mov	r4,zero
 8006d28:	da800515 	stw	r10,20(sp)
 8006d2c:	800a3580 	call	800a358 <__muldf3>
 8006d30:	d9000017 	ldw	r4,0(sp)
 8006d34:	d9400117 	ldw	r5,4(sp)
 8006d38:	100d883a 	mov	r6,r2
 8006d3c:	180f883a 	mov	r7,r3
 8006d40:	800abc40 	call	800abc4 <__subdf3>
 8006d44:	da800517 	ldw	r10,20(sp)
 8006d48:	900f883a 	mov	r7,r18
 8006d4c:	000d883a 	mov	r6,zero
 8006d50:	500b883a 	mov	r5,r10
 8006d54:	0009883a 	mov	r4,zero
 8006d58:	d8800015 	stw	r2,0(sp)
 8006d5c:	d8c00515 	stw	r3,20(sp)
 8006d60:	800abc40 	call	800abc4 <__subdf3>
 8006d64:	b809883a 	mov	r4,r23
 8006d68:	a00b883a 	mov	r5,r20
 8006d6c:	100d883a 	mov	r6,r2
 8006d70:	180f883a 	mov	r7,r3
 8006d74:	800abc40 	call	800abc4 <__subdf3>
 8006d78:	800f883a 	mov	r7,r16
 8006d7c:	000d883a 	mov	r6,zero
 8006d80:	1009883a 	mov	r4,r2
 8006d84:	180b883a 	mov	r5,r3
 8006d88:	800a3580 	call	800a358 <__muldf3>
 8006d8c:	db400517 	ldw	r13,20(sp)
 8006d90:	d9000017 	ldw	r4,0(sp)
 8006d94:	100d883a 	mov	r6,r2
 8006d98:	680b883a 	mov	r5,r13
 8006d9c:	180f883a 	mov	r7,r3
 8006da0:	800abc40 	call	800abc4 <__subdf3>
 8006da4:	dbc00617 	ldw	r15,24(sp)
 8006da8:	db800717 	ldw	r14,28(sp)
 8006dac:	1009883a 	mov	r4,r2
 8006db0:	780d883a 	mov	r6,r15
 8006db4:	700f883a 	mov	r7,r14
 8006db8:	180b883a 	mov	r5,r3
 8006dbc:	800a3580 	call	800a358 <__muldf3>
 8006dc0:	880d883a 	mov	r6,r17
 8006dc4:	800f883a 	mov	r7,r16
 8006dc8:	8809883a 	mov	r4,r17
 8006dcc:	800b883a 	mov	r5,r16
 8006dd0:	d8800015 	stw	r2,0(sp)
 8006dd4:	d8c00115 	stw	r3,4(sp)
 8006dd8:	800a3580 	call	800a358 <__muldf3>
 8006ddc:	01929174 	movhi	r6,19013
 8006de0:	01cff2b4 	movhi	r7,16330
 8006de4:	3193bbc4 	addi	r6,r6,20207
 8006de8:	39df8a04 	addi	r7,r7,32296
 8006dec:	1009883a 	mov	r4,r2
 8006df0:	180b883a 	mov	r5,r3
 8006df4:	102f883a 	mov	r23,r2
 8006df8:	1829883a 	mov	r20,r3
 8006dfc:	800a3580 	call	800a358 <__muldf3>
 8006e00:	01a4f2b4 	movhi	r6,37834
 8006e04:	01cff3b4 	movhi	r7,16334
 8006e08:	31b6d944 	addi	r6,r6,-9371
 8006e0c:	39e19284 	addi	r7,r7,-31158
 8006e10:	1009883a 	mov	r4,r2
 8006e14:	180b883a 	mov	r5,r3
 8006e18:	8008e840 	call	8008e84 <__adddf3>
 8006e1c:	b80d883a 	mov	r6,r23
 8006e20:	a00f883a 	mov	r7,r20
 8006e24:	1009883a 	mov	r4,r2
 8006e28:	180b883a 	mov	r5,r3
 8006e2c:	800a3580 	call	800a358 <__muldf3>
 8006e30:	01aa4774 	movhi	r6,43293
 8006e34:	01cff474 	movhi	r7,16337
 8006e38:	31904044 	addi	r6,r6,16641
 8006e3c:	39dd1804 	addi	r7,r7,29792
 8006e40:	1009883a 	mov	r4,r2
 8006e44:	180b883a 	mov	r5,r3
 8006e48:	8008e840 	call	8008e84 <__adddf3>
 8006e4c:	b80d883a 	mov	r6,r23
 8006e50:	a00f883a 	mov	r7,r20
 8006e54:	1009883a 	mov	r4,r2
 8006e58:	180b883a 	mov	r5,r3
 8006e5c:	800a3580 	call	800a358 <__muldf3>
 8006e60:	019463f4 	movhi	r6,20879
 8006e64:	01cff574 	movhi	r7,16341
 8006e68:	31899344 	addi	r6,r6,9805
 8006e6c:	39d55544 	addi	r7,r7,21845
 8006e70:	1009883a 	mov	r4,r2
 8006e74:	180b883a 	mov	r5,r3
 8006e78:	8008e840 	call	8008e84 <__adddf3>
 8006e7c:	b80d883a 	mov	r6,r23
 8006e80:	a00f883a 	mov	r7,r20
 8006e84:	1009883a 	mov	r4,r2
 8006e88:	180b883a 	mov	r5,r3
 8006e8c:	800a3580 	call	800a358 <__muldf3>
 8006e90:	01b6dc34 	movhi	r6,56176
 8006e94:	01cff6f4 	movhi	r7,16347
 8006e98:	31aaffc4 	addi	r6,r6,-21505
 8006e9c:	39db6d84 	addi	r7,r7,28086
 8006ea0:	1009883a 	mov	r4,r2
 8006ea4:	180b883a 	mov	r5,r3
 8006ea8:	8008e840 	call	8008e84 <__adddf3>
 8006eac:	b80d883a 	mov	r6,r23
 8006eb0:	a00f883a 	mov	r7,r20
 8006eb4:	1009883a 	mov	r4,r2
 8006eb8:	180b883a 	mov	r5,r3
 8006ebc:	800a3580 	call	800a358 <__muldf3>
 8006ec0:	018cccf4 	movhi	r6,13107
 8006ec4:	01cff8f4 	movhi	r7,16355
 8006ec8:	318cc0c4 	addi	r6,r6,13059
 8006ecc:	39ccccc4 	addi	r7,r7,13107
 8006ed0:	1009883a 	mov	r4,r2
 8006ed4:	180b883a 	mov	r5,r3
 8006ed8:	8008e840 	call	8008e84 <__adddf3>
 8006edc:	b80d883a 	mov	r6,r23
 8006ee0:	a00f883a 	mov	r7,r20
 8006ee4:	b809883a 	mov	r4,r23
 8006ee8:	a00b883a 	mov	r5,r20
 8006eec:	1825883a 	mov	r18,r3
 8006ef0:	d8800515 	stw	r2,20(sp)
 8006ef4:	800a3580 	call	800a358 <__muldf3>
 8006ef8:	db400517 	ldw	r13,20(sp)
 8006efc:	900b883a 	mov	r5,r18
 8006f00:	100d883a 	mov	r6,r2
 8006f04:	6809883a 	mov	r4,r13
 8006f08:	180f883a 	mov	r7,r3
 8006f0c:	800a3580 	call	800a358 <__muldf3>
 8006f10:	800f883a 	mov	r7,r16
 8006f14:	8809883a 	mov	r4,r17
 8006f18:	800b883a 	mov	r5,r16
 8006f1c:	000d883a 	mov	r6,zero
 8006f20:	102f883a 	mov	r23,r2
 8006f24:	1829883a 	mov	r20,r3
 8006f28:	8008e840 	call	8008e84 <__adddf3>
 8006f2c:	d9800017 	ldw	r6,0(sp)
 8006f30:	d9c00117 	ldw	r7,4(sp)
 8006f34:	1009883a 	mov	r4,r2
 8006f38:	180b883a 	mov	r5,r3
 8006f3c:	800a3580 	call	800a358 <__muldf3>
 8006f40:	b80d883a 	mov	r6,r23
 8006f44:	a00f883a 	mov	r7,r20
 8006f48:	1009883a 	mov	r4,r2
 8006f4c:	180b883a 	mov	r5,r3
 8006f50:	8008e840 	call	8008e84 <__adddf3>
 8006f54:	800f883a 	mov	r7,r16
 8006f58:	800b883a 	mov	r5,r16
 8006f5c:	000d883a 	mov	r6,zero
 8006f60:	0009883a 	mov	r4,zero
 8006f64:	1025883a 	mov	r18,r2
 8006f68:	182f883a 	mov	r23,r3
 8006f6c:	800a3580 	call	800a358 <__muldf3>
 8006f70:	000d883a 	mov	r6,zero
 8006f74:	01d00234 	movhi	r7,16392
 8006f78:	1009883a 	mov	r4,r2
 8006f7c:	180b883a 	mov	r5,r3
 8006f80:	d8c00715 	stw	r3,28(sp)
 8006f84:	d8800615 	stw	r2,24(sp)
 8006f88:	8008e840 	call	8008e84 <__adddf3>
 8006f8c:	900d883a 	mov	r6,r18
 8006f90:	b80f883a 	mov	r7,r23
 8006f94:	1009883a 	mov	r4,r2
 8006f98:	180b883a 	mov	r5,r3
 8006f9c:	8008e840 	call	8008e84 <__adddf3>
 8006fa0:	800b883a 	mov	r5,r16
 8006fa4:	000d883a 	mov	r6,zero
 8006fa8:	180f883a 	mov	r7,r3
 8006fac:	0009883a 	mov	r4,zero
 8006fb0:	1829883a 	mov	r20,r3
 8006fb4:	800a3580 	call	800a358 <__muldf3>
 8006fb8:	a00b883a 	mov	r5,r20
 8006fbc:	000d883a 	mov	r6,zero
 8006fc0:	01d00234 	movhi	r7,16392
 8006fc4:	0009883a 	mov	r4,zero
 8006fc8:	d8800315 	stw	r2,12(sp)
 8006fcc:	d8c00415 	stw	r3,16(sp)
 8006fd0:	800abc40 	call	800abc4 <__subdf3>
 8006fd4:	dbc00617 	ldw	r15,24(sp)
 8006fd8:	db800717 	ldw	r14,28(sp)
 8006fdc:	1009883a 	mov	r4,r2
 8006fe0:	780d883a 	mov	r6,r15
 8006fe4:	700f883a 	mov	r7,r14
 8006fe8:	180b883a 	mov	r5,r3
 8006fec:	800abc40 	call	800abc4 <__subdf3>
 8006ff0:	9009883a 	mov	r4,r18
 8006ff4:	b80b883a 	mov	r5,r23
 8006ff8:	100d883a 	mov	r6,r2
 8006ffc:	180f883a 	mov	r7,r3
 8007000:	800abc40 	call	800abc4 <__subdf3>
 8007004:	880d883a 	mov	r6,r17
 8007008:	800f883a 	mov	r7,r16
 800700c:	1009883a 	mov	r4,r2
 8007010:	180b883a 	mov	r5,r3
 8007014:	800a3580 	call	800a358 <__muldf3>
 8007018:	d9000017 	ldw	r4,0(sp)
 800701c:	d9400117 	ldw	r5,4(sp)
 8007020:	a00f883a 	mov	r7,r20
 8007024:	000d883a 	mov	r6,zero
 8007028:	1023883a 	mov	r17,r2
 800702c:	1821883a 	mov	r16,r3
 8007030:	800a3580 	call	800a358 <__muldf3>
 8007034:	8809883a 	mov	r4,r17
 8007038:	800b883a 	mov	r5,r16
 800703c:	100d883a 	mov	r6,r2
 8007040:	180f883a 	mov	r7,r3
 8007044:	8008e840 	call	8008e84 <__adddf3>
 8007048:	d9000317 	ldw	r4,12(sp)
 800704c:	d9400417 	ldw	r5,16(sp)
 8007050:	100d883a 	mov	r6,r2
 8007054:	180f883a 	mov	r7,r3
 8007058:	102f883a 	mov	r23,r2
 800705c:	1823883a 	mov	r17,r3
 8007060:	8008e840 	call	8008e84 <__adddf3>
 8007064:	01cffbf4 	movhi	r7,16367
 8007068:	39f1c244 	addi	r7,r7,-14583
 800706c:	0009883a 	mov	r4,zero
 8007070:	180b883a 	mov	r5,r3
 8007074:	01b80034 	movhi	r6,57344
 8007078:	1821883a 	mov	r16,r3
 800707c:	800a3580 	call	800a358 <__muldf3>
 8007080:	d9800317 	ldw	r6,12(sp)
 8007084:	d9c00417 	ldw	r7,16(sp)
 8007088:	800b883a 	mov	r5,r16
 800708c:	0009883a 	mov	r4,zero
 8007090:	1825883a 	mov	r18,r3
 8007094:	d8800015 	stw	r2,0(sp)
 8007098:	800abc40 	call	800abc4 <__subdf3>
 800709c:	b809883a 	mov	r4,r23
 80070a0:	880b883a 	mov	r5,r17
 80070a4:	100d883a 	mov	r6,r2
 80070a8:	180f883a 	mov	r7,r3
 80070ac:	800abc40 	call	800abc4 <__subdf3>
 80070b0:	01b70eb4 	movhi	r6,56378
 80070b4:	01cffbf4 	movhi	r7,16367
 80070b8:	3180ff44 	addi	r6,r6,1021
 80070bc:	39f1c244 	addi	r7,r7,-14583
 80070c0:	1009883a 	mov	r4,r2
 80070c4:	180b883a 	mov	r5,r3
 80070c8:	800a3580 	call	800a358 <__muldf3>
 80070cc:	018516f4 	movhi	r6,5211
 80070d0:	01ef8fb4 	movhi	r7,48702
 80070d4:	800b883a 	mov	r5,r16
 80070d8:	31807d44 	addi	r6,r6,501
 80070dc:	39cbf804 	addi	r7,r7,12256
 80070e0:	0009883a 	mov	r4,zero
 80070e4:	1029883a 	mov	r20,r2
 80070e8:	1823883a 	mov	r17,r3
 80070ec:	800a3580 	call	800a358 <__muldf3>
 80070f0:	a009883a 	mov	r4,r20
 80070f4:	880b883a 	mov	r5,r17
 80070f8:	100d883a 	mov	r6,r2
 80070fc:	180f883a 	mov	r7,r3
 8007100:	8008e840 	call	8008e84 <__adddf3>
 8007104:	da400817 	ldw	r9,32(sp)
 8007108:	da000a17 	ldw	r8,40(sp)
 800710c:	180b883a 	mov	r5,r3
 8007110:	480d883a 	mov	r6,r9
 8007114:	400f883a 	mov	r7,r8
 8007118:	1009883a 	mov	r4,r2
 800711c:	8008e840 	call	8008e84 <__adddf3>
 8007120:	db000917 	ldw	r12,36(sp)
 8007124:	1029883a 	mov	r20,r2
 8007128:	1823883a 	mov	r17,r3
 800712c:	6009883a 	mov	r4,r12
 8007130:	800b5400 	call	800b540 <__floatsidf>
 8007134:	d9000017 	ldw	r4,0(sp)
 8007138:	a00d883a 	mov	r6,r20
 800713c:	880f883a 	mov	r7,r17
 8007140:	900b883a 	mov	r5,r18
 8007144:	182f883a 	mov	r23,r3
 8007148:	d8800115 	stw	r2,4(sp)
 800714c:	8008e840 	call	8008e84 <__adddf3>
 8007150:	d9c00217 	ldw	r7,8(sp)
 8007154:	980d883a 	mov	r6,r19
 8007158:	1009883a 	mov	r4,r2
 800715c:	180b883a 	mov	r5,r3
 8007160:	8008e840 	call	8008e84 <__adddf3>
 8007164:	d9800117 	ldw	r6,4(sp)
 8007168:	b80f883a 	mov	r7,r23
 800716c:	1009883a 	mov	r4,r2
 8007170:	180b883a 	mov	r5,r3
 8007174:	8008e840 	call	8008e84 <__adddf3>
 8007178:	d9800117 	ldw	r6,4(sp)
 800717c:	b80f883a 	mov	r7,r23
 8007180:	0009883a 	mov	r4,zero
 8007184:	180b883a 	mov	r5,r3
 8007188:	1821883a 	mov	r16,r3
 800718c:	800abc40 	call	800abc4 <__subdf3>
 8007190:	d9c00217 	ldw	r7,8(sp)
 8007194:	980d883a 	mov	r6,r19
 8007198:	1009883a 	mov	r4,r2
 800719c:	180b883a 	mov	r5,r3
 80071a0:	800abc40 	call	800abc4 <__subdf3>
 80071a4:	d9800017 	ldw	r6,0(sp)
 80071a8:	900f883a 	mov	r7,r18
 80071ac:	1009883a 	mov	r4,r2
 80071b0:	180b883a 	mov	r5,r3
 80071b4:	800abc40 	call	800abc4 <__subdf3>
 80071b8:	880b883a 	mov	r5,r17
 80071bc:	100d883a 	mov	r6,r2
 80071c0:	180f883a 	mov	r7,r3
 80071c4:	a009883a 	mov	r4,r20
 80071c8:	800abc40 	call	800abc4 <__subdf3>
 80071cc:	dac00b17 	ldw	r11,44(sp)
 80071d0:	aabfffc4 	addi	r10,r21,-1
 80071d4:	1025883a 	mov	r18,r2
 80071d8:	52d6b03a 	or	r11,r10,r11
 80071dc:	1823883a 	mov	r17,r3
 80071e0:	58015826 	beq	r11,zero,8007744 <__ieee754_pow+0xe28>
 80071e4:	04cffc34 	movhi	r19,16368
 80071e8:	b009883a 	mov	r4,r22
 80071ec:	000d883a 	mov	r6,zero
 80071f0:	e00f883a 	mov	r7,fp
 80071f4:	e00b883a 	mov	r5,fp
 80071f8:	800abc40 	call	800abc4 <__subdf3>
 80071fc:	800f883a 	mov	r7,r16
 8007200:	000d883a 	mov	r6,zero
 8007204:	1009883a 	mov	r4,r2
 8007208:	180b883a 	mov	r5,r3
 800720c:	800a3580 	call	800a358 <__muldf3>
 8007210:	b00d883a 	mov	r6,r22
 8007214:	9009883a 	mov	r4,r18
 8007218:	880b883a 	mov	r5,r17
 800721c:	e00f883a 	mov	r7,fp
 8007220:	1829883a 	mov	r20,r3
 8007224:	102b883a 	mov	r21,r2
 8007228:	800a3580 	call	800a358 <__muldf3>
 800722c:	a00b883a 	mov	r5,r20
 8007230:	100d883a 	mov	r6,r2
 8007234:	180f883a 	mov	r7,r3
 8007238:	a809883a 	mov	r4,r21
 800723c:	8008e840 	call	8008e84 <__adddf3>
 8007240:	800b883a 	mov	r5,r16
 8007244:	000d883a 	mov	r6,zero
 8007248:	e00f883a 	mov	r7,fp
 800724c:	0009883a 	mov	r4,zero
 8007250:	102d883a 	mov	r22,r2
 8007254:	1829883a 	mov	r20,r3
 8007258:	800a3580 	call	800a358 <__muldf3>
 800725c:	100d883a 	mov	r6,r2
 8007260:	180f883a 	mov	r7,r3
 8007264:	b009883a 	mov	r4,r22
 8007268:	a00b883a 	mov	r5,r20
 800726c:	1025883a 	mov	r18,r2
 8007270:	1823883a 	mov	r17,r3
 8007274:	8008e840 	call	8008e84 <__adddf3>
 8007278:	102f883a 	mov	r23,r2
 800727c:	00902434 	movhi	r2,16528
 8007280:	10bfffc4 	addi	r2,r2,-1
 8007284:	1821883a 	mov	r16,r3
 8007288:	9013883a 	mov	r9,r18
 800728c:	8811883a 	mov	r8,r17
 8007290:	10c1070e 	bge	r2,r3,80076b0 <__ieee754_pow+0xd94>
 8007294:	00afdc34 	movhi	r2,49008
 8007298:	1885883a 	add	r2,r3,r2
 800729c:	15c4b03a 	or	r2,r2,r23
 80072a0:	1001901e 	bne	r2,zero,80078e4 <__ieee754_pow+0xfc8>
 80072a4:	01994b34 	movhi	r6,25900
 80072a8:	01cf25f4 	movhi	r7,15511
 80072ac:	31a0bf84 	addi	r6,r6,-32002
 80072b0:	39c551c4 	addi	r7,r7,5447
 80072b4:	b009883a 	mov	r4,r22
 80072b8:	a00b883a 	mov	r5,r20
 80072bc:	8008e840 	call	8008e84 <__adddf3>
 80072c0:	900d883a 	mov	r6,r18
 80072c4:	880f883a 	mov	r7,r17
 80072c8:	b809883a 	mov	r4,r23
 80072cc:	800b883a 	mov	r5,r16
 80072d0:	1039883a 	mov	fp,r2
 80072d4:	182b883a 	mov	r21,r3
 80072d8:	800abc40 	call	800abc4 <__subdf3>
 80072dc:	100d883a 	mov	r6,r2
 80072e0:	180f883a 	mov	r7,r3
 80072e4:	e009883a 	mov	r4,fp
 80072e8:	a80b883a 	mov	r5,r21
 80072ec:	800a1880 	call	800a188 <__gedf2>
 80072f0:	00817c16 	blt	zero,r2,80078e4 <__ieee754_pow+0xfc8>
 80072f4:	802b883a 	mov	r21,r16
 80072f8:	a805d53a 	srai	r2,r21,20
 80072fc:	00c00434 	movhi	r3,16
 8007300:	01000434 	movhi	r4,16
 8007304:	10bf0084 	addi	r2,r2,-1022
 8007308:	1885d83a 	sra	r2,r3,r2
 800730c:	213fffc4 	addi	r4,r4,-1
 8007310:	1405883a 	add	r2,r2,r16
 8007314:	1006907a 	slli	r3,r2,1
 8007318:	112a703a 	and	r21,r2,r4
 800731c:	ad400434 	orhi	r21,r21,16
 8007320:	1806d57a 	srli	r3,r3,21
 8007324:	18ff0044 	addi	r3,r3,-1023
 8007328:	20cfd83a 	sra	r7,r4,r3
 800732c:	01000504 	movi	r4,20
 8007330:	20c7c83a 	sub	r3,r4,r3
 8007334:	a8c7d83a 	sra	r3,r21,r3
 8007338:	01ce303a 	nor	r7,zero,r7
 800733c:	388e703a 	and	r7,r7,r2
 8007340:	d8c00015 	stw	r3,0(sp)
 8007344:	80019016 	blt	r16,zero,8007988 <__ieee754_pow+0x106c>
 8007348:	000d883a 	mov	r6,zero
 800734c:	9009883a 	mov	r4,r18
 8007350:	880b883a 	mov	r5,r17
 8007354:	800abc40 	call	800abc4 <__subdf3>
 8007358:	100d883a 	mov	r6,r2
 800735c:	180f883a 	mov	r7,r3
 8007360:	b009883a 	mov	r4,r22
 8007364:	a00b883a 	mov	r5,r20
 8007368:	d8c00a15 	stw	r3,40(sp)
 800736c:	d8800815 	stw	r2,32(sp)
 8007370:	8008e840 	call	8008e84 <__adddf3>
 8007374:	d8800017 	ldw	r2,0(sp)
 8007378:	da000a17 	ldw	r8,40(sp)
 800737c:	da400817 	ldw	r9,32(sp)
 8007380:	1004953a 	slli	r2,r2,20
 8007384:	1821883a 	mov	r16,r3
 8007388:	d8800215 	stw	r2,8(sp)
 800738c:	01cff9b4 	movhi	r7,16358
 8007390:	800b883a 	mov	r5,r16
 8007394:	39cb90c4 	addi	r7,r7,11843
 8007398:	0009883a 	mov	r4,zero
 800739c:	000d883a 	mov	r6,zero
 80073a0:	da000a15 	stw	r8,40(sp)
 80073a4:	da400815 	stw	r9,32(sp)
 80073a8:	800a3580 	call	800a358 <__muldf3>
 80073ac:	da400817 	ldw	r9,32(sp)
 80073b0:	da000a17 	ldw	r8,40(sp)
 80073b4:	800b883a 	mov	r5,r16
 80073b8:	480d883a 	mov	r6,r9
 80073bc:	400f883a 	mov	r7,r8
 80073c0:	0009883a 	mov	r4,zero
 80073c4:	1039883a 	mov	fp,r2
 80073c8:	182f883a 	mov	r23,r3
 80073cc:	800abc40 	call	800abc4 <__subdf3>
 80073d0:	b009883a 	mov	r4,r22
 80073d4:	a00b883a 	mov	r5,r20
 80073d8:	100d883a 	mov	r6,r2
 80073dc:	180f883a 	mov	r7,r3
 80073e0:	800abc40 	call	800abc4 <__subdf3>
 80073e4:	01bfbeb4 	movhi	r6,65274
 80073e8:	01cff9b4 	movhi	r7,16358
 80073ec:	318e7bc4 	addi	r6,r6,14831
 80073f0:	39cb9084 	addi	r7,r7,11842
 80073f4:	1009883a 	mov	r4,r2
 80073f8:	180b883a 	mov	r5,r3
 80073fc:	800a3580 	call	800a358 <__muldf3>
 8007400:	01832a34 	movhi	r6,3240
 8007404:	01ef8834 	movhi	r7,48672
 8007408:	800b883a 	mov	r5,r16
 800740c:	319b0e44 	addi	r6,r6,27705
 8007410:	39d71844 	addi	r7,r7,23649
 8007414:	0009883a 	mov	r4,zero
 8007418:	1029883a 	mov	r20,r2
 800741c:	1823883a 	mov	r17,r3
 8007420:	800a3580 	call	800a358 <__muldf3>
 8007424:	a009883a 	mov	r4,r20
 8007428:	880b883a 	mov	r5,r17
 800742c:	100d883a 	mov	r6,r2
 8007430:	180f883a 	mov	r7,r3
 8007434:	8008e840 	call	8008e84 <__adddf3>
 8007438:	e009883a 	mov	r4,fp
 800743c:	b80b883a 	mov	r5,r23
 8007440:	100d883a 	mov	r6,r2
 8007444:	180f883a 	mov	r7,r3
 8007448:	102d883a 	mov	r22,r2
 800744c:	1829883a 	mov	r20,r3
 8007450:	8008e840 	call	8008e84 <__adddf3>
 8007454:	e00d883a 	mov	r6,fp
 8007458:	b80f883a 	mov	r7,r23
 800745c:	1009883a 	mov	r4,r2
 8007460:	180b883a 	mov	r5,r3
 8007464:	1023883a 	mov	r17,r2
 8007468:	1821883a 	mov	r16,r3
 800746c:	800abc40 	call	800abc4 <__subdf3>
 8007470:	b009883a 	mov	r4,r22
 8007474:	a00b883a 	mov	r5,r20
 8007478:	100d883a 	mov	r6,r2
 800747c:	180f883a 	mov	r7,r3
 8007480:	800abc40 	call	800abc4 <__subdf3>
 8007484:	880d883a 	mov	r6,r17
 8007488:	800f883a 	mov	r7,r16
 800748c:	8809883a 	mov	r4,r17
 8007490:	800b883a 	mov	r5,r16
 8007494:	1039883a 	mov	fp,r2
 8007498:	182f883a 	mov	r23,r3
 800749c:	800a3580 	call	800a358 <__muldf3>
 80074a0:	019caff4 	movhi	r6,29375
 80074a4:	01cf99b4 	movhi	r7,15974
 80074a8:	31a93404 	addi	r6,r6,-23344
 80074ac:	39cdda44 	addi	r7,r7,14185
 80074b0:	1009883a 	mov	r4,r2
 80074b4:	180b883a 	mov	r5,r3
 80074b8:	102d883a 	mov	r22,r2
 80074bc:	1829883a 	mov	r20,r3
 80074c0:	800a3580 	call	800a358 <__muldf3>
 80074c4:	01b174b4 	movhi	r6,50642
 80074c8:	01cfaf34 	movhi	r7,16060
 80074cc:	319afc44 	addi	r6,r6,27633
 80074d0:	39ef5044 	addi	r7,r7,-17087
 80074d4:	1009883a 	mov	r4,r2
 80074d8:	180b883a 	mov	r5,r3
 80074dc:	800abc40 	call	800abc4 <__subdf3>
 80074e0:	b00d883a 	mov	r6,r22
 80074e4:	a00f883a 	mov	r7,r20
 80074e8:	1009883a 	mov	r4,r2
 80074ec:	180b883a 	mov	r5,r3
 80074f0:	800a3580 	call	800a358 <__muldf3>
 80074f4:	01abc9b4 	movhi	r6,44838
 80074f8:	01cfc474 	movhi	r7,16145
 80074fc:	31b78b04 	addi	r6,r6,-8660
 8007500:	39d59a84 	addi	r7,r7,22122
 8007504:	1009883a 	mov	r4,r2
 8007508:	180b883a 	mov	r5,r3
 800750c:	8008e840 	call	8008e84 <__adddf3>
 8007510:	b00d883a 	mov	r6,r22
 8007514:	a00f883a 	mov	r7,r20
 8007518:	1009883a 	mov	r4,r2
 800751c:	180b883a 	mov	r5,r3
 8007520:	800a3580 	call	800a358 <__muldf3>
 8007524:	0185aff4 	movhi	r6,5823
 8007528:	01cfd9f4 	movhi	r7,16231
 800752c:	31af64c4 	addi	r6,r6,-17005
 8007530:	39f05b04 	addi	r7,r7,-16020
 8007534:	1009883a 	mov	r4,r2
 8007538:	180b883a 	mov	r5,r3
 800753c:	800abc40 	call	800abc4 <__subdf3>
 8007540:	b00d883a 	mov	r6,r22
 8007544:	a00f883a 	mov	r7,r20
 8007548:	1009883a 	mov	r4,r2
 800754c:	180b883a 	mov	r5,r3
 8007550:	800a3580 	call	800a358 <__muldf3>
 8007554:	01955574 	movhi	r6,21845
 8007558:	01cff174 	movhi	r7,16325
 800755c:	31954f84 	addi	r6,r6,21822
 8007560:	39d55544 	addi	r7,r7,21845
 8007564:	1009883a 	mov	r4,r2
 8007568:	180b883a 	mov	r5,r3
 800756c:	8008e840 	call	8008e84 <__adddf3>
 8007570:	b00d883a 	mov	r6,r22
 8007574:	a00f883a 	mov	r7,r20
 8007578:	1009883a 	mov	r4,r2
 800757c:	180b883a 	mov	r5,r3
 8007580:	800a3580 	call	800a358 <__muldf3>
 8007584:	100d883a 	mov	r6,r2
 8007588:	180f883a 	mov	r7,r3
 800758c:	8809883a 	mov	r4,r17
 8007590:	800b883a 	mov	r5,r16
 8007594:	800abc40 	call	800abc4 <__subdf3>
 8007598:	100d883a 	mov	r6,r2
 800759c:	180f883a 	mov	r7,r3
 80075a0:	8809883a 	mov	r4,r17
 80075a4:	800b883a 	mov	r5,r16
 80075a8:	102d883a 	mov	r22,r2
 80075ac:	1829883a 	mov	r20,r3
 80075b0:	800a3580 	call	800a358 <__muldf3>
 80075b4:	b009883a 	mov	r4,r22
 80075b8:	a00b883a 	mov	r5,r20
 80075bc:	000d883a 	mov	r6,zero
 80075c0:	01d00034 	movhi	r7,16384
 80075c4:	1025883a 	mov	r18,r2
 80075c8:	182b883a 	mov	r21,r3
 80075cc:	800abc40 	call	800abc4 <__subdf3>
 80075d0:	100d883a 	mov	r6,r2
 80075d4:	180f883a 	mov	r7,r3
 80075d8:	9009883a 	mov	r4,r18
 80075dc:	a80b883a 	mov	r5,r21
 80075e0:	80097300 	call	8009730 <__divdf3>
 80075e4:	e00d883a 	mov	r6,fp
 80075e8:	b80f883a 	mov	r7,r23
 80075ec:	8809883a 	mov	r4,r17
 80075f0:	800b883a 	mov	r5,r16
 80075f4:	102d883a 	mov	r22,r2
 80075f8:	1829883a 	mov	r20,r3
 80075fc:	800a3580 	call	800a358 <__muldf3>
 8007600:	e00d883a 	mov	r6,fp
 8007604:	b80f883a 	mov	r7,r23
 8007608:	1009883a 	mov	r4,r2
 800760c:	180b883a 	mov	r5,r3
 8007610:	8008e840 	call	8008e84 <__adddf3>
 8007614:	100d883a 	mov	r6,r2
 8007618:	180f883a 	mov	r7,r3
 800761c:	b009883a 	mov	r4,r22
 8007620:	a00b883a 	mov	r5,r20
 8007624:	800abc40 	call	800abc4 <__subdf3>
 8007628:	880d883a 	mov	r6,r17
 800762c:	800f883a 	mov	r7,r16
 8007630:	1009883a 	mov	r4,r2
 8007634:	180b883a 	mov	r5,r3
 8007638:	800abc40 	call	800abc4 <__subdf3>
 800763c:	0009883a 	mov	r4,zero
 8007640:	014ffc34 	movhi	r5,16368
 8007644:	100d883a 	mov	r6,r2
 8007648:	180f883a 	mov	r7,r3
 800764c:	800abc40 	call	800abc4 <__subdf3>
 8007650:	d9000217 	ldw	r4,8(sp)
 8007654:	190b883a 	add	r5,r3,r4
 8007658:	2809d53a 	srai	r4,r5,20
 800765c:	0100cd0e 	bge	zero,r4,8007994 <__ieee754_pow+0x1078>
 8007660:	1009883a 	mov	r4,r2
 8007664:	000d883a 	mov	r6,zero
 8007668:	980f883a 	mov	r7,r19
 800766c:	800a3580 	call	800a358 <__muldf3>
 8007670:	003ce606 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8007674:	00b00434 	movhi	r2,49168
 8007678:	8885883a 	add	r2,r17,r2
 800767c:	1544b03a 	or	r2,r2,r21
 8007680:	1000b326 	beq	r2,zero,8007950 <__ieee754_pow+0x1034>
 8007684:	00800044 	movi	r2,1
 8007688:	a8bd181e 	bne	r21,r2,8006aec <__alt_data_end+0xfc006aec>
 800768c:	18e0003c 	xorhi	r3,r3,32768
 8007690:	b805883a 	mov	r2,r23
 8007694:	003cdd06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8007698:	800d883a 	mov	r6,r16
 800769c:	980f883a 	mov	r7,r19
 80076a0:	8009883a 	mov	r4,r16
 80076a4:	980b883a 	mov	r5,r19
 80076a8:	800a3580 	call	800a358 <__muldf3>
 80076ac:	003cd706 	br	8006a0c <__alt_data_end+0xfc006a0c>
 80076b0:	05600034 	movhi	r21,32768
 80076b4:	ad7fffc4 	addi	r21,r21,-1
 80076b8:	00902474 	movhi	r2,16529
 80076bc:	1d6a703a 	and	r21,r3,r21
 80076c0:	10b2ffc4 	addi	r2,r2,-13313
 80076c4:	15409d0e 	bge	r2,r21,800793c <__ieee754_pow+0x1020>
 80076c8:	008fdbf4 	movhi	r2,16239
 80076cc:	108d0004 	addi	r2,r2,13312
 80076d0:	1885883a 	add	r2,r3,r2
 80076d4:	15c4b03a 	or	r2,r2,r23
 80076d8:	10000b1e 	bne	r2,zero,8007708 <__ieee754_pow+0xdec>
 80076dc:	900d883a 	mov	r6,r18
 80076e0:	880f883a 	mov	r7,r17
 80076e4:	b809883a 	mov	r4,r23
 80076e8:	180b883a 	mov	r5,r3
 80076ec:	800abc40 	call	800abc4 <__subdf3>
 80076f0:	100d883a 	mov	r6,r2
 80076f4:	180f883a 	mov	r7,r3
 80076f8:	b009883a 	mov	r4,r22
 80076fc:	a00b883a 	mov	r5,r20
 8007700:	800a2640 	call	800a264 <__ledf2>
 8007704:	00befc16 	blt	zero,r2,80072f8 <__alt_data_end+0xfc0072f8>
 8007708:	01b0be74 	movhi	r6,49913
 800770c:	01c06974 	movhi	r7,421
 8007710:	980b883a 	mov	r5,r19
 8007714:	31bcd644 	addi	r6,r6,-3239
 8007718:	39db87c4 	addi	r7,r7,28191
 800771c:	0009883a 	mov	r4,zero
 8007720:	800a3580 	call	800a358 <__muldf3>
 8007724:	01b0be74 	movhi	r6,49913
 8007728:	01c06974 	movhi	r7,421
 800772c:	31bcd644 	addi	r6,r6,-3239
 8007730:	39db87c4 	addi	r7,r7,28191
 8007734:	1009883a 	mov	r4,r2
 8007738:	180b883a 	mov	r5,r3
 800773c:	800a3580 	call	800a358 <__muldf3>
 8007740:	003cb206 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8007744:	04effc34 	movhi	r19,49136
 8007748:	003ea706 	br	80071e8 <__alt_data_end+0xfc0071e8>
 800774c:	e03cdc0e 	bge	fp,zero,8006ac0 <__alt_data_end+0xfc006ac0>
 8007750:	0005883a 	mov	r2,zero
 8007754:	e0e0003c 	xorhi	r3,fp,32768
 8007758:	003cac06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 800775c:	0019883a 	mov	r12,zero
 8007760:	003d3206 	br	8006c2c <__alt_data_end+0xfc006c2c>
 8007764:	008ffc34 	movhi	r2,16368
 8007768:	10bfff84 	addi	r2,r2,-2
 800776c:	147cd30e 	bge	r2,r17,8006abc <__alt_data_end+0xfc006abc>
 8007770:	01cffc34 	movhi	r7,16368
 8007774:	3c7cea16 	blt	r7,r17,8006b20 <__alt_data_end+0xfc006b20>
 8007778:	b809883a 	mov	r4,r23
 800777c:	000d883a 	mov	r6,zero
 8007780:	180b883a 	mov	r5,r3
 8007784:	dac00b15 	stw	r11,44(sp)
 8007788:	800abc40 	call	800abc4 <__subdf3>
 800778c:	01cffdf4 	movhi	r7,16375
 8007790:	39c551c4 	addi	r7,r7,5447
 8007794:	01980034 	movhi	r6,24576
 8007798:	1009883a 	mov	r4,r2
 800779c:	180b883a 	mov	r5,r3
 80077a0:	1023883a 	mov	r17,r2
 80077a4:	1821883a 	mov	r16,r3
 80077a8:	800a3580 	call	800a358 <__muldf3>
 80077ac:	01be17b4 	movhi	r6,63582
 80077b0:	01cf9574 	movhi	r7,15957
 80077b4:	8809883a 	mov	r4,r17
 80077b8:	800b883a 	mov	r5,r16
 80077bc:	31b7d104 	addi	r6,r6,-8380
 80077c0:	39eb82c4 	addi	r7,r7,-20981
 80077c4:	1027883a 	mov	r19,r2
 80077c8:	1825883a 	mov	r18,r3
 80077cc:	800a3580 	call	800a358 <__muldf3>
 80077d0:	8809883a 	mov	r4,r17
 80077d4:	800b883a 	mov	r5,r16
 80077d8:	000d883a 	mov	r6,zero
 80077dc:	01cff434 	movhi	r7,16336
 80077e0:	1829883a 	mov	r20,r3
 80077e4:	d8800a15 	stw	r2,40(sp)
 80077e8:	800a3580 	call	800a358 <__muldf3>
 80077ec:	01155574 	movhi	r4,21845
 80077f0:	014ff574 	movhi	r5,16341
 80077f4:	100d883a 	mov	r6,r2
 80077f8:	180f883a 	mov	r7,r3
 80077fc:	21155544 	addi	r4,r4,21845
 8007800:	29555544 	addi	r5,r5,21845
 8007804:	800abc40 	call	800abc4 <__subdf3>
 8007808:	880d883a 	mov	r6,r17
 800780c:	800f883a 	mov	r7,r16
 8007810:	1009883a 	mov	r4,r2
 8007814:	180b883a 	mov	r5,r3
 8007818:	800a3580 	call	800a358 <__muldf3>
 800781c:	100d883a 	mov	r6,r2
 8007820:	180f883a 	mov	r7,r3
 8007824:	0009883a 	mov	r4,zero
 8007828:	014ff834 	movhi	r5,16352
 800782c:	800abc40 	call	800abc4 <__subdf3>
 8007830:	880d883a 	mov	r6,r17
 8007834:	800f883a 	mov	r7,r16
 8007838:	8809883a 	mov	r4,r17
 800783c:	800b883a 	mov	r5,r16
 8007840:	102f883a 	mov	r23,r2
 8007844:	d8c00815 	stw	r3,32(sp)
 8007848:	800a3580 	call	800a358 <__muldf3>
 800784c:	da400817 	ldw	r9,32(sp)
 8007850:	100d883a 	mov	r6,r2
 8007854:	180f883a 	mov	r7,r3
 8007858:	480b883a 	mov	r5,r9
 800785c:	b809883a 	mov	r4,r23
 8007860:	800a3580 	call	800a358 <__muldf3>
 8007864:	01994b34 	movhi	r6,25900
 8007868:	01cffdf4 	movhi	r7,16375
 800786c:	31a0bf84 	addi	r6,r6,-32002
 8007870:	39c551c4 	addi	r7,r7,5447
 8007874:	1009883a 	mov	r4,r2
 8007878:	180b883a 	mov	r5,r3
 800787c:	800a3580 	call	800a358 <__muldf3>
 8007880:	da000a17 	ldw	r8,40(sp)
 8007884:	a00b883a 	mov	r5,r20
 8007888:	100d883a 	mov	r6,r2
 800788c:	4009883a 	mov	r4,r8
 8007890:	180f883a 	mov	r7,r3
 8007894:	800abc40 	call	800abc4 <__subdf3>
 8007898:	100d883a 	mov	r6,r2
 800789c:	180f883a 	mov	r7,r3
 80078a0:	9809883a 	mov	r4,r19
 80078a4:	900b883a 	mov	r5,r18
 80078a8:	1029883a 	mov	r20,r2
 80078ac:	1823883a 	mov	r17,r3
 80078b0:	8008e840 	call	8008e84 <__adddf3>
 80078b4:	1821883a 	mov	r16,r3
 80078b8:	980d883a 	mov	r6,r19
 80078bc:	900f883a 	mov	r7,r18
 80078c0:	0009883a 	mov	r4,zero
 80078c4:	180b883a 	mov	r5,r3
 80078c8:	003e3a06 	br	80071b4 <__alt_data_end+0xfc0071b4>
 80078cc:	800d883a 	mov	r6,r16
 80078d0:	980f883a 	mov	r7,r19
 80078d4:	0009883a 	mov	r4,zero
 80078d8:	900b883a 	mov	r5,r18
 80078dc:	80097300 	call	8009730 <__divdf3>
 80078e0:	003c4a06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 80078e4:	01a20034 	movhi	r6,34816
 80078e8:	01df8e34 	movhi	r7,32312
 80078ec:	980b883a 	mov	r5,r19
 80078f0:	319d6704 	addi	r6,r6,30108
 80078f4:	39f90f04 	addi	r7,r7,-7108
 80078f8:	0009883a 	mov	r4,zero
 80078fc:	800a3580 	call	800a358 <__muldf3>
 8007900:	01a20034 	movhi	r6,34816
 8007904:	01df8e34 	movhi	r7,32312
 8007908:	319d6704 	addi	r6,r6,30108
 800790c:	39f90f04 	addi	r7,r7,-7108
 8007910:	1009883a 	mov	r4,r2
 8007914:	180b883a 	mov	r5,r3
 8007918:	800a3580 	call	800a358 <__muldf3>
 800791c:	003c3b06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8007920:	303c551e 	bne	r6,zero,8006a78 <__alt_data_end+0xfc006a78>
 8007924:	1885c83a 	sub	r2,r3,r2
 8007928:	9087d83a 	sra	r3,r18,r2
 800792c:	1884983a 	sll	r2,r3,r2
 8007930:	90801f26 	beq	r18,r2,80079b0 <__ieee754_pow+0x1094>
 8007934:	002b883a 	mov	r21,zero
 8007938:	003c1806 	br	800699c <__alt_data_end+0xfc00699c>
 800793c:	008ff834 	movhi	r2,16352
 8007940:	157e6d16 	blt	r2,r21,80072f8 <__alt_data_end+0xfc0072f8>
 8007944:	d8000215 	stw	zero,8(sp)
 8007948:	d8000015 	stw	zero,0(sp)
 800794c:	003e8f06 	br	800738c <__alt_data_end+0xfc00738c>
 8007950:	b80d883a 	mov	r6,r23
 8007954:	180f883a 	mov	r7,r3
 8007958:	003c9e06 	br	8006bd4 <__alt_data_end+0xfc006bd4>
 800795c:	008ff8f4 	movhi	r2,16355
 8007960:	10ae00c4 	addi	r2,r2,-18429
 8007964:	0250f434 	movhi	r9,17360
 8007968:	020f9374 	movhi	r8,15949
 800796c:	d8800215 	stw	r2,8(sp)
 8007970:	4a740184 	addi	r9,r9,-12282
 8007974:	423f7ac4 	addi	r8,r8,-533
 8007978:	04d00034 	movhi	r19,16384
 800797c:	02800134 	movhi	r10,4
 8007980:	048ffe34 	movhi	r18,16376
 8007984:	003cbf06 	br	8006c84 <__alt_data_end+0xfc006c84>
 8007988:	00c9c83a 	sub	r4,zero,r3
 800798c:	d9000015 	stw	r4,0(sp)
 8007990:	003e6d06 	br	8007348 <__alt_data_end+0xfc007348>
 8007994:	d9800017 	ldw	r6,0(sp)
 8007998:	1009883a 	mov	r4,r2
 800799c:	180b883a 	mov	r5,r3
 80079a0:	8007eec0 	call	8007eec <scalbn>
 80079a4:	1009883a 	mov	r4,r2
 80079a8:	180b883a 	mov	r5,r3
 80079ac:	003f2d06 	br	8007664 <__alt_data_end+0xfc007664>
 80079b0:	18c0004c 	andi	r3,r3,1
 80079b4:	02800084 	movi	r10,2
 80079b8:	50ebc83a 	sub	r21,r10,r3
 80079bc:	003bf706 	br	800699c <__alt_data_end+0xfc00699c>

080079c0 <__ieee754_sqrt>:
 80079c0:	defffd04 	addi	sp,sp,-12
 80079c4:	dc400115 	stw	r17,4(sp)
 80079c8:	dc000015 	stw	r16,0(sp)
 80079cc:	dfc00215 	stw	ra,8(sp)
 80079d0:	28dffc2c 	andhi	r3,r5,32752
 80079d4:	009ffc34 	movhi	r2,32752
 80079d8:	2821883a 	mov	r16,r5
 80079dc:	2023883a 	mov	r17,r4
 80079e0:	200d883a 	mov	r6,r4
 80079e4:	18807b26 	beq	r3,r2,8007bd4 <__ieee754_sqrt+0x214>
 80079e8:	01405f0e 	bge	zero,r5,8007b68 <__ieee754_sqrt+0x1a8>
 80079ec:	2815d53a 	srai	r10,r5,20
 80079f0:	50006a26 	beq	r10,zero,8007b9c <__ieee754_sqrt+0x1dc>
 80079f4:	00c00434 	movhi	r3,16
 80079f8:	52bf0044 	addi	r10,r10,-1023
 80079fc:	18ffffc4 	addi	r3,r3,-1
 8007a00:	80c6703a 	and	r3,r16,r3
 8007a04:	5080004c 	andi	r2,r10,1
 8007a08:	18c00434 	orhi	r3,r3,16
 8007a0c:	1000511e 	bne	r2,zero,8007b54 <__ieee754_sqrt+0x194>
 8007a10:	3004d7fa 	srli	r2,r6,31
 8007a14:	5015d07a 	srai	r10,r10,1
 8007a18:	18c7883a 	add	r3,r3,r3
 8007a1c:	10c5883a 	add	r2,r2,r3
 8007a20:	01400584 	movi	r5,22
 8007a24:	3187883a 	add	r3,r6,r6
 8007a28:	0013883a 	mov	r9,zero
 8007a2c:	000f883a 	mov	r7,zero
 8007a30:	01000834 	movhi	r4,32
 8007a34:	390d883a 	add	r6,r7,r4
 8007a38:	1810d7fa 	srli	r8,r3,31
 8007a3c:	297fffc4 	addi	r5,r5,-1
 8007a40:	11800316 	blt	r2,r6,8007a50 <__ieee754_sqrt+0x90>
 8007a44:	1185c83a 	sub	r2,r2,r6
 8007a48:	310f883a 	add	r7,r6,r4
 8007a4c:	4913883a 	add	r9,r9,r4
 8007a50:	1085883a 	add	r2,r2,r2
 8007a54:	4085883a 	add	r2,r8,r2
 8007a58:	18c7883a 	add	r3,r3,r3
 8007a5c:	2008d07a 	srli	r4,r4,1
 8007a60:	283ff41e 	bne	r5,zero,8007a34 <__alt_data_end+0xfc007a34>
 8007a64:	01200034 	movhi	r4,32768
 8007a68:	01800804 	movi	r6,32
 8007a6c:	0011883a 	mov	r8,zero
 8007a70:	0019883a 	mov	r12,zero
 8007a74:	201b883a 	mov	r13,r4
 8007a78:	00000806 	br	8007a9c <__ieee754_sqrt+0xdc>
 8007a7c:	38801726 	beq	r7,r2,8007adc <__ieee754_sqrt+0x11c>
 8007a80:	180ad7fa 	srli	r5,r3,31
 8007a84:	1085883a 	add	r2,r2,r2
 8007a88:	31bfffc4 	addi	r6,r6,-1
 8007a8c:	2885883a 	add	r2,r5,r2
 8007a90:	18c7883a 	add	r3,r3,r3
 8007a94:	2008d07a 	srli	r4,r4,1
 8007a98:	30001726 	beq	r6,zero,8007af8 <__ieee754_sqrt+0x138>
 8007a9c:	230b883a 	add	r5,r4,r12
 8007aa0:	38bff60e 	bge	r7,r2,8007a7c <__alt_data_end+0xfc007a7c>
 8007aa4:	2ae0002c 	andhi	r11,r5,32768
 8007aa8:	2919883a 	add	r12,r5,r4
 8007aac:	5b400826 	beq	r11,r13,8007ad0 <__ieee754_sqrt+0x110>
 8007ab0:	3817883a 	mov	r11,r7
 8007ab4:	11c5c83a 	sub	r2,r2,r7
 8007ab8:	1940012e 	bgeu	r3,r5,8007ac0 <__ieee754_sqrt+0x100>
 8007abc:	10bfffc4 	addi	r2,r2,-1
 8007ac0:	1947c83a 	sub	r3,r3,r5
 8007ac4:	4111883a 	add	r8,r8,r4
 8007ac8:	580f883a 	mov	r7,r11
 8007acc:	003fec06 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007ad0:	603ff716 	blt	r12,zero,8007ab0 <__alt_data_end+0xfc007ab0>
 8007ad4:	3ac00044 	addi	r11,r7,1
 8007ad8:	003ff606 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007adc:	19401936 	bltu	r3,r5,8007b44 <__ieee754_sqrt+0x184>
 8007ae0:	2ae0002c 	andhi	r11,r5,32768
 8007ae4:	2919883a 	add	r12,r5,r4
 8007ae8:	5b404526 	beq	r11,r13,8007c00 <__ieee754_sqrt+0x240>
 8007aec:	1017883a 	mov	r11,r2
 8007af0:	0005883a 	mov	r2,zero
 8007af4:	003ff206 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8007af8:	10c4b03a 	or	r2,r2,r3
 8007afc:	10000426 	beq	r2,zero,8007b10 <__ieee754_sqrt+0x150>
 8007b00:	00bfffc4 	movi	r2,-1
 8007b04:	40804026 	beq	r8,r2,8007c08 <__ieee754_sqrt+0x248>
 8007b08:	4080004c 	andi	r2,r8,1
 8007b0c:	4091883a 	add	r8,r8,r2
 8007b10:	4004d07a 	srli	r2,r8,1
 8007b14:	4807d07a 	srai	r3,r9,1
 8007b18:	010ff834 	movhi	r4,16352
 8007b1c:	4a40004c 	andi	r9,r9,1
 8007b20:	1909883a 	add	r4,r3,r4
 8007b24:	4800091e 	bne	r9,zero,8007b4c <__ieee754_sqrt+0x18c>
 8007b28:	5006953a 	slli	r3,r10,20
 8007b2c:	1907883a 	add	r3,r3,r4
 8007b30:	dfc00217 	ldw	ra,8(sp)
 8007b34:	dc400117 	ldw	r17,4(sp)
 8007b38:	dc000017 	ldw	r16,0(sp)
 8007b3c:	dec00304 	addi	sp,sp,12
 8007b40:	f800283a 	ret
 8007b44:	3805883a 	mov	r2,r7
 8007b48:	003fcd06 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007b4c:	10a00034 	orhi	r2,r2,32768
 8007b50:	003ff506 	br	8007b28 <__alt_data_end+0xfc007b28>
 8007b54:	3004d7fa 	srli	r2,r6,31
 8007b58:	18c7883a 	add	r3,r3,r3
 8007b5c:	318d883a 	add	r6,r6,r6
 8007b60:	10c7883a 	add	r3,r2,r3
 8007b64:	003faa06 	br	8007a10 <__alt_data_end+0xfc007a10>
 8007b68:	00a00034 	movhi	r2,32768
 8007b6c:	10bfffc4 	addi	r2,r2,-1
 8007b70:	2884703a 	and	r2,r5,r2
 8007b74:	1104b03a 	or	r2,r2,r4
 8007b78:	10001e26 	beq	r2,zero,8007bf4 <__ieee754_sqrt+0x234>
 8007b7c:	2800291e 	bne	r5,zero,8007c24 <__ieee754_sqrt+0x264>
 8007b80:	0015883a 	mov	r10,zero
 8007b84:	3020d2fa 	srli	r16,r6,11
 8007b88:	52bffac4 	addi	r10,r10,-21
 8007b8c:	300c957a 	slli	r6,r6,21
 8007b90:	803ffc26 	beq	r16,zero,8007b84 <__alt_data_end+0xfc007b84>
 8007b94:	8080042c 	andhi	r2,r16,16
 8007b98:	10001e1e 	bne	r2,zero,8007c14 <__ieee754_sqrt+0x254>
 8007b9c:	0005883a 	mov	r2,zero
 8007ba0:	00000106 	br	8007ba8 <__ieee754_sqrt+0x1e8>
 8007ba4:	1805883a 	mov	r2,r3
 8007ba8:	8421883a 	add	r16,r16,r16
 8007bac:	8100042c 	andhi	r4,r16,16
 8007bb0:	10c00044 	addi	r3,r2,1
 8007bb4:	203ffb26 	beq	r4,zero,8007ba4 <__alt_data_end+0xfc007ba4>
 8007bb8:	01000804 	movi	r4,32
 8007bbc:	20c9c83a 	sub	r4,r4,r3
 8007bc0:	3108d83a 	srl	r4,r6,r4
 8007bc4:	5095c83a 	sub	r10,r10,r2
 8007bc8:	30cc983a 	sll	r6,r6,r3
 8007bcc:	2420b03a 	or	r16,r4,r16
 8007bd0:	003f8806 	br	80079f4 <__alt_data_end+0xfc0079f4>
 8007bd4:	280f883a 	mov	r7,r5
 8007bd8:	800a3580 	call	800a358 <__muldf3>
 8007bdc:	880d883a 	mov	r6,r17
 8007be0:	800f883a 	mov	r7,r16
 8007be4:	1009883a 	mov	r4,r2
 8007be8:	180b883a 	mov	r5,r3
 8007bec:	8008e840 	call	8008e84 <__adddf3>
 8007bf0:	003fcf06 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007bf4:	2005883a 	mov	r2,r4
 8007bf8:	2807883a 	mov	r3,r5
 8007bfc:	003fcc06 	br	8007b30 <__alt_data_end+0xfc007b30>
 8007c00:	603fba16 	blt	r12,zero,8007aec <__alt_data_end+0xfc007aec>
 8007c04:	003fb306 	br	8007ad4 <__alt_data_end+0xfc007ad4>
 8007c08:	4a400044 	addi	r9,r9,1
 8007c0c:	0005883a 	mov	r2,zero
 8007c10:	003fc006 	br	8007b14 <__alt_data_end+0xfc007b14>
 8007c14:	01000804 	movi	r4,32
 8007c18:	00bfffc4 	movi	r2,-1
 8007c1c:	0007883a 	mov	r3,zero
 8007c20:	003fe706 	br	8007bc0 <__alt_data_end+0xfc007bc0>
 8007c24:	200d883a 	mov	r6,r4
 8007c28:	280f883a 	mov	r7,r5
 8007c2c:	800abc40 	call	800abc4 <__subdf3>
 8007c30:	100d883a 	mov	r6,r2
 8007c34:	180f883a 	mov	r7,r3
 8007c38:	1009883a 	mov	r4,r2
 8007c3c:	180b883a 	mov	r5,r3
 8007c40:	80097300 	call	8009730 <__divdf3>
 8007c44:	003fba06 	br	8007b30 <__alt_data_end+0xfc007b30>

08007c48 <fabs>:
 8007c48:	00e00034 	movhi	r3,32768
 8007c4c:	18ffffc4 	addi	r3,r3,-1
 8007c50:	2005883a 	mov	r2,r4
 8007c54:	28c6703a 	and	r3,r5,r3
 8007c58:	f800283a 	ret

08007c5c <finite>:
 8007c5c:	00a00034 	movhi	r2,32768
 8007c60:	10bfffc4 	addi	r2,r2,-1
 8007c64:	288a703a 	and	r5,r5,r2
 8007c68:	00e00434 	movhi	r3,32784
 8007c6c:	28c5883a 	add	r2,r5,r3
 8007c70:	1004d7fa 	srli	r2,r2,31
 8007c74:	f800283a 	ret

08007c78 <__fpclassifyd>:
 8007c78:	00a00034 	movhi	r2,32768
 8007c7c:	10bfffc4 	addi	r2,r2,-1
 8007c80:	2884703a 	and	r2,r5,r2
 8007c84:	10000726 	beq	r2,zero,8007ca4 <__fpclassifyd+0x2c>
 8007c88:	00fffc34 	movhi	r3,65520
 8007c8c:	019ff834 	movhi	r6,32736
 8007c90:	28c7883a 	add	r3,r5,r3
 8007c94:	31bfffc4 	addi	r6,r6,-1
 8007c98:	30c00536 	bltu	r6,r3,8007cb0 <__fpclassifyd+0x38>
 8007c9c:	00800104 	movi	r2,4
 8007ca0:	f800283a 	ret
 8007ca4:	2000021e 	bne	r4,zero,8007cb0 <__fpclassifyd+0x38>
 8007ca8:	00800084 	movi	r2,2
 8007cac:	f800283a 	ret
 8007cb0:	00dffc34 	movhi	r3,32752
 8007cb4:	019ff834 	movhi	r6,32736
 8007cb8:	28cb883a 	add	r5,r5,r3
 8007cbc:	31bfffc4 	addi	r6,r6,-1
 8007cc0:	317ff62e 	bgeu	r6,r5,8007c9c <__alt_data_end+0xfc007c9c>
 8007cc4:	01400434 	movhi	r5,16
 8007cc8:	297fffc4 	addi	r5,r5,-1
 8007ccc:	28800236 	bltu	r5,r2,8007cd8 <__fpclassifyd+0x60>
 8007cd0:	008000c4 	movi	r2,3
 8007cd4:	f800283a 	ret
 8007cd8:	10c00226 	beq	r2,r3,8007ce4 <__fpclassifyd+0x6c>
 8007cdc:	0005883a 	mov	r2,zero
 8007ce0:	f800283a 	ret
 8007ce4:	2005003a 	cmpeq	r2,r4,zero
 8007ce8:	f800283a 	ret

08007cec <matherr>:
 8007cec:	0005883a 	mov	r2,zero
 8007cf0:	f800283a 	ret

08007cf4 <nan>:
 8007cf4:	0005883a 	mov	r2,zero
 8007cf8:	00dffe34 	movhi	r3,32760
 8007cfc:	f800283a 	ret

08007d00 <rint>:
 8007d00:	2813d53a 	srai	r9,r5,20
 8007d04:	defff904 	addi	sp,sp,-28
 8007d08:	dc000215 	stw	r16,8(sp)
 8007d0c:	4a41ffcc 	andi	r9,r9,2047
 8007d10:	dfc00615 	stw	ra,24(sp)
 8007d14:	dcc00515 	stw	r19,20(sp)
 8007d18:	dc800415 	stw	r18,16(sp)
 8007d1c:	dc400315 	stw	r17,12(sp)
 8007d20:	01c004c4 	movi	r7,19
 8007d24:	49bf0044 	addi	r6,r9,-1023
 8007d28:	2811883a 	mov	r8,r5
 8007d2c:	2005883a 	mov	r2,r4
 8007d30:	2807883a 	mov	r3,r5
 8007d34:	2015883a 	mov	r10,r4
 8007d38:	2820d7fa 	srli	r16,r5,31
 8007d3c:	39801316 	blt	r7,r6,8007d8c <rint+0x8c>
 8007d40:	30003d16 	blt	r6,zero,8007e38 <rint+0x138>
 8007d44:	01000434 	movhi	r4,16
 8007d48:	213fffc4 	addi	r4,r4,-1
 8007d4c:	2189d83a 	sra	r4,r4,r6
 8007d50:	290a703a 	and	r5,r5,r4
 8007d54:	288ab03a 	or	r5,r5,r2
 8007d58:	28001026 	beq	r5,zero,8007d9c <rint+0x9c>
 8007d5c:	2008d07a 	srli	r4,r4,1
 8007d60:	4104703a 	and	r2,r8,r4
 8007d64:	1294b03a 	or	r10,r2,r10
 8007d68:	50005626 	beq	r10,zero,8007ec4 <rint+0x1c4>
 8007d6c:	31c05d26 	beq	r6,r7,8007ee4 <rint+0x1e4>
 8007d70:	0015883a 	mov	r10,zero
 8007d74:	00c00134 	movhi	r3,4
 8007d78:	1987d83a 	sra	r3,r3,r6
 8007d7c:	0108303a 	nor	r4,zero,r4
 8007d80:	2210703a 	and	r8,r4,r8
 8007d84:	40c6b03a 	or	r3,r8,r3
 8007d88:	00001806 	br	8007dec <rint+0xec>
 8007d8c:	01c00cc4 	movi	r7,51
 8007d90:	3980090e 	bge	r7,r6,8007db8 <rint+0xb8>
 8007d94:	01c10004 	movi	r7,1024
 8007d98:	31c04e26 	beq	r6,r7,8007ed4 <rint+0x1d4>
 8007d9c:	dfc00617 	ldw	ra,24(sp)
 8007da0:	dcc00517 	ldw	r19,20(sp)
 8007da4:	dc800417 	ldw	r18,16(sp)
 8007da8:	dc400317 	ldw	r17,12(sp)
 8007dac:	dc000217 	ldw	r16,8(sp)
 8007db0:	dec00704 	addi	sp,sp,28
 8007db4:	f800283a 	ret
 8007db8:	4a7efb44 	addi	r9,r9,-1043
 8007dbc:	013fffc4 	movi	r4,-1
 8007dc0:	2248d83a 	srl	r4,r4,r9
 8007dc4:	110a703a 	and	r5,r2,r4
 8007dc8:	28004026 	beq	r5,zero,8007ecc <rint+0x1cc>
 8007dcc:	2008d07a 	srli	r4,r4,1
 8007dd0:	1104703a 	and	r2,r2,r4
 8007dd4:	10000526 	beq	r2,zero,8007dec <rint+0xec>
 8007dd8:	00900034 	movhi	r2,16384
 8007ddc:	1253d83a 	sra	r9,r2,r9
 8007de0:	0108303a 	nor	r4,zero,r4
 8007de4:	2294703a 	and	r10,r4,r10
 8007de8:	4a94b03a 	or	r10,r9,r10
 8007dec:	802090fa 	slli	r16,r16,3
 8007df0:	180b883a 	mov	r5,r3
 8007df4:	00c200b4 	movhi	r3,2050
 8007df8:	18eae604 	addi	r3,r3,-21608
 8007dfc:	1c21883a 	add	r16,r3,r16
 8007e00:	84400017 	ldw	r17,0(r16)
 8007e04:	84000117 	ldw	r16,4(r16)
 8007e08:	5009883a 	mov	r4,r10
 8007e0c:	880d883a 	mov	r6,r17
 8007e10:	800f883a 	mov	r7,r16
 8007e14:	8008e840 	call	8008e84 <__adddf3>
 8007e18:	d8800015 	stw	r2,0(sp)
 8007e1c:	d8c00115 	stw	r3,4(sp)
 8007e20:	d9000017 	ldw	r4,0(sp)
 8007e24:	d9400117 	ldw	r5,4(sp)
 8007e28:	880d883a 	mov	r6,r17
 8007e2c:	800f883a 	mov	r7,r16
 8007e30:	800abc40 	call	800abc4 <__subdf3>
 8007e34:	003fd906 	br	8007d9c <__alt_data_end+0xfc007d9c>
 8007e38:	04600034 	movhi	r17,32768
 8007e3c:	8c7fffc4 	addi	r17,r17,-1
 8007e40:	2c46703a 	and	r3,r5,r17
 8007e44:	1906b03a 	or	r3,r3,r4
 8007e48:	18002026 	beq	r3,zero,8007ecc <rint+0x1cc>
 8007e4c:	01800434 	movhi	r6,16
 8007e50:	31bfffc4 	addi	r6,r6,-1
 8007e54:	298c703a 	and	r6,r5,r6
 8007e58:	3104b03a 	or	r2,r6,r4
 8007e5c:	008bc83a 	sub	r5,zero,r2
 8007e60:	800690fa 	slli	r3,r16,3
 8007e64:	2884b03a 	or	r2,r5,r2
 8007e68:	014200b4 	movhi	r5,2050
 8007e6c:	296ae604 	addi	r5,r5,-21608
 8007e70:	28c7883a 	add	r3,r5,r3
 8007e74:	1004d33a 	srli	r2,r2,12
 8007e78:	1cc00017 	ldw	r19,0(r3)
 8007e7c:	1c800117 	ldw	r18,4(r3)
 8007e80:	417fffac 	andhi	r5,r8,65534
 8007e84:	1080022c 	andhi	r2,r2,8
 8007e88:	980d883a 	mov	r6,r19
 8007e8c:	900f883a 	mov	r7,r18
 8007e90:	114ab03a 	or	r5,r2,r5
 8007e94:	8008e840 	call	8008e84 <__adddf3>
 8007e98:	d8800015 	stw	r2,0(sp)
 8007e9c:	d8c00115 	stw	r3,4(sp)
 8007ea0:	d9000017 	ldw	r4,0(sp)
 8007ea4:	d9400117 	ldw	r5,4(sp)
 8007ea8:	980d883a 	mov	r6,r19
 8007eac:	900f883a 	mov	r7,r18
 8007eb0:	800abc40 	call	800abc4 <__subdf3>
 8007eb4:	800897fa 	slli	r4,r16,31
 8007eb8:	1c46703a 	and	r3,r3,r17
 8007ebc:	1906b03a 	or	r3,r3,r4
 8007ec0:	003fb606 	br	8007d9c <__alt_data_end+0xfc007d9c>
 8007ec4:	0015883a 	mov	r10,zero
 8007ec8:	003fc806 	br	8007dec <__alt_data_end+0xfc007dec>
 8007ecc:	4007883a 	mov	r3,r8
 8007ed0:	003fb206 	br	8007d9c <__alt_data_end+0xfc007d9c>
 8007ed4:	200d883a 	mov	r6,r4
 8007ed8:	280f883a 	mov	r7,r5
 8007edc:	8008e840 	call	8008e84 <__adddf3>
 8007ee0:	003fae06 	br	8007d9c <__alt_data_end+0xfc007d9c>
 8007ee4:	02a00034 	movhi	r10,32768
 8007ee8:	003fa206 	br	8007d74 <__alt_data_end+0xfc007d74>

08007eec <scalbn>:
 8007eec:	2a1ffc2c 	andhi	r8,r5,32752
 8007ef0:	4011d53a 	srai	r8,r8,20
 8007ef4:	defffe04 	addi	sp,sp,-8
 8007ef8:	dc000015 	stw	r16,0(sp)
 8007efc:	dfc00115 	stw	ra,4(sp)
 8007f00:	280f883a 	mov	r7,r5
 8007f04:	2015883a 	mov	r10,r4
 8007f08:	3021883a 	mov	r16,r6
 8007f0c:	40001e1e 	bne	r8,zero,8007f88 <scalbn+0x9c>
 8007f10:	00a00034 	movhi	r2,32768
 8007f14:	10bfffc4 	addi	r2,r2,-1
 8007f18:	2884703a 	and	r2,r5,r2
 8007f1c:	1104b03a 	or	r2,r2,r4
 8007f20:	10002226 	beq	r2,zero,8007fac <scalbn+0xc0>
 8007f24:	01d0d434 	movhi	r7,17232
 8007f28:	000d883a 	mov	r6,zero
 8007f2c:	800a3580 	call	800a358 <__muldf3>
 8007f30:	013ffff4 	movhi	r4,65535
 8007f34:	210f2c04 	addi	r4,r4,15536
 8007f38:	1015883a 	mov	r10,r2
 8007f3c:	180f883a 	mov	r7,r3
 8007f40:	81002a16 	blt	r16,r4,8007fec <scalbn+0x100>
 8007f44:	191ffc2c 	andhi	r4,r3,32752
 8007f48:	2009d53a 	srai	r4,r4,20
 8007f4c:	223ff284 	addi	r8,r4,-54
 8007f50:	8211883a 	add	r8,r16,r8
 8007f54:	0081ff84 	movi	r2,2046
 8007f58:	12002f16 	blt	r2,r8,8008018 <scalbn+0x12c>
 8007f5c:	0200190e 	bge	zero,r8,8007fc4 <scalbn+0xd8>
 8007f60:	4010953a 	slli	r8,r8,20
 8007f64:	01600434 	movhi	r5,32784
 8007f68:	297fffc4 	addi	r5,r5,-1
 8007f6c:	194e703a 	and	r7,r3,r5
 8007f70:	5005883a 	mov	r2,r10
 8007f74:	3a06b03a 	or	r3,r7,r8
 8007f78:	dfc00117 	ldw	ra,4(sp)
 8007f7c:	dc000017 	ldw	r16,0(sp)
 8007f80:	dec00204 	addi	sp,sp,8
 8007f84:	f800283a 	ret
 8007f88:	0081ffc4 	movi	r2,2047
 8007f8c:	2807883a 	mov	r3,r5
 8007f90:	40bfef1e 	bne	r8,r2,8007f50 <__alt_data_end+0xfc007f50>
 8007f94:	200d883a 	mov	r6,r4
 8007f98:	8008e840 	call	8008e84 <__adddf3>
 8007f9c:	dfc00117 	ldw	ra,4(sp)
 8007fa0:	dc000017 	ldw	r16,0(sp)
 8007fa4:	dec00204 	addi	sp,sp,8
 8007fa8:	f800283a 	ret
 8007fac:	2005883a 	mov	r2,r4
 8007fb0:	2807883a 	mov	r3,r5
 8007fb4:	dfc00117 	ldw	ra,4(sp)
 8007fb8:	dc000017 	ldw	r16,0(sp)
 8007fbc:	dec00204 	addi	sp,sp,8
 8007fc0:	f800283a 	ret
 8007fc4:	00bff2c4 	movi	r2,-53
 8007fc8:	4080240e 	bge	r8,r2,800805c <scalbn+0x170>
 8007fcc:	00b0d414 	movui	r2,50000
 8007fd0:	14001116 	blt	r2,r16,8008018 <scalbn+0x12c>
 8007fd4:	0130be74 	movhi	r4,49913
 8007fd8:	01406974 	movhi	r5,421
 8007fdc:	213cd644 	addi	r4,r4,-3239
 8007fe0:	295b87c4 	addi	r5,r5,28191
 8007fe4:	500d883a 	mov	r6,r10
 8007fe8:	80080880 	call	8008088 <copysign>
 8007fec:	01b0be74 	movhi	r6,49913
 8007ff0:	01c06974 	movhi	r7,421
 8007ff4:	31bcd644 	addi	r6,r6,-3239
 8007ff8:	39db87c4 	addi	r7,r7,28191
 8007ffc:	1009883a 	mov	r4,r2
 8008000:	180b883a 	mov	r5,r3
 8008004:	800a3580 	call	800a358 <__muldf3>
 8008008:	dfc00117 	ldw	ra,4(sp)
 800800c:	dc000017 	ldw	r16,0(sp)
 8008010:	dec00204 	addi	sp,sp,8
 8008014:	f800283a 	ret
 8008018:	01220034 	movhi	r4,34816
 800801c:	015f8e34 	movhi	r5,32312
 8008020:	500d883a 	mov	r6,r10
 8008024:	211d6704 	addi	r4,r4,30108
 8008028:	29790f04 	addi	r5,r5,-7108
 800802c:	80080880 	call	8008088 <copysign>
 8008030:	01a20034 	movhi	r6,34816
 8008034:	01df8e34 	movhi	r7,32312
 8008038:	319d6704 	addi	r6,r6,30108
 800803c:	39f90f04 	addi	r7,r7,-7108
 8008040:	1009883a 	mov	r4,r2
 8008044:	180b883a 	mov	r5,r3
 8008048:	800a3580 	call	800a358 <__muldf3>
 800804c:	dfc00117 	ldw	ra,4(sp)
 8008050:	dc000017 	ldw	r16,0(sp)
 8008054:	dec00204 	addi	sp,sp,8
 8008058:	f800283a 	ret
 800805c:	42000d84 	addi	r8,r8,54
 8008060:	4012953a 	slli	r9,r8,20
 8008064:	01e00434 	movhi	r7,32784
 8008068:	39ffffc4 	addi	r7,r7,-1
 800806c:	19ca703a 	and	r5,r3,r7
 8008070:	000d883a 	mov	r6,zero
 8008074:	01cf2434 	movhi	r7,15504
 8008078:	5009883a 	mov	r4,r10
 800807c:	494ab03a 	or	r5,r9,r5
 8008080:	800a3580 	call	800a358 <__muldf3>
 8008084:	003fbc06 	br	8007f78 <__alt_data_end+0xfc007f78>

08008088 <copysign>:
 8008088:	2005883a 	mov	r2,r4
 800808c:	01200034 	movhi	r4,32768
 8008090:	213fffc4 	addi	r4,r4,-1
 8008094:	38e0002c 	andhi	r3,r7,32768
 8008098:	290a703a 	and	r5,r5,r4
 800809c:	28c6b03a 	or	r3,r5,r3
 80080a0:	f800283a 	ret

080080a4 <__fixunssfsi>:
 80080a4:	defffd04 	addi	sp,sp,-12
 80080a8:	dc000015 	stw	r16,0(sp)
 80080ac:	0413c034 	movhi	r16,20224
 80080b0:	800b883a 	mov	r5,r16
 80080b4:	dc400115 	stw	r17,4(sp)
 80080b8:	dfc00215 	stw	ra,8(sp)
 80080bc:	2023883a 	mov	r17,r4
 80080c0:	80083540 	call	8008354 <__gesf2>
 80080c4:	1000070e 	bge	r2,zero,80080e4 <__fixunssfsi+0x40>
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	8008d240 	call	8008d24 <__fixsfsi>
 80080d0:	dfc00217 	ldw	ra,8(sp)
 80080d4:	dc400117 	ldw	r17,4(sp)
 80080d8:	dc000017 	ldw	r16,0(sp)
 80080dc:	dec00304 	addi	sp,sp,12
 80080e0:	f800283a 	ret
 80080e4:	800b883a 	mov	r5,r16
 80080e8:	8809883a 	mov	r4,r17
 80080ec:	80088400 	call	8008840 <__subsf3>
 80080f0:	1009883a 	mov	r4,r2
 80080f4:	8008d240 	call	8008d24 <__fixsfsi>
 80080f8:	00e00034 	movhi	r3,32768
 80080fc:	10c5883a 	add	r2,r2,r3
 8008100:	003ff306 	br	80080d0 <__alt_data_end+0xfc0080d0>

08008104 <__fixunsdfsi>:
 8008104:	defffd04 	addi	sp,sp,-12
 8008108:	000d883a 	mov	r6,zero
 800810c:	01d07834 	movhi	r7,16864
 8008110:	dc400115 	stw	r17,4(sp)
 8008114:	dc000015 	stw	r16,0(sp)
 8008118:	dfc00215 	stw	ra,8(sp)
 800811c:	2023883a 	mov	r17,r4
 8008120:	2821883a 	mov	r16,r5
 8008124:	800a1880 	call	800a188 <__gedf2>
 8008128:	1000080e 	bge	r2,zero,800814c <__fixunsdfsi+0x48>
 800812c:	8809883a 	mov	r4,r17
 8008130:	800b883a 	mov	r5,r16
 8008134:	800b4c00 	call	800b4c0 <__fixdfsi>
 8008138:	dfc00217 	ldw	ra,8(sp)
 800813c:	dc400117 	ldw	r17,4(sp)
 8008140:	dc000017 	ldw	r16,0(sp)
 8008144:	dec00304 	addi	sp,sp,12
 8008148:	f800283a 	ret
 800814c:	000d883a 	mov	r6,zero
 8008150:	01d07834 	movhi	r7,16864
 8008154:	8809883a 	mov	r4,r17
 8008158:	800b883a 	mov	r5,r16
 800815c:	800abc40 	call	800abc4 <__subdf3>
 8008160:	180b883a 	mov	r5,r3
 8008164:	1009883a 	mov	r4,r2
 8008168:	800b4c00 	call	800b4c0 <__fixdfsi>
 800816c:	00e00034 	movhi	r3,32768
 8008170:	10c5883a 	add	r2,r2,r3
 8008174:	003ff006 	br	8008138 <__alt_data_end+0xfc008138>

08008178 <__divsi3>:
 8008178:	20001b16 	blt	r4,zero,80081e8 <__divsi3+0x70>
 800817c:	000f883a 	mov	r7,zero
 8008180:	28001616 	blt	r5,zero,80081dc <__divsi3+0x64>
 8008184:	200d883a 	mov	r6,r4
 8008188:	29001a2e 	bgeu	r5,r4,80081f4 <__divsi3+0x7c>
 800818c:	00800804 	movi	r2,32
 8008190:	00c00044 	movi	r3,1
 8008194:	00000106 	br	800819c <__divsi3+0x24>
 8008198:	10000d26 	beq	r2,zero,80081d0 <__divsi3+0x58>
 800819c:	294b883a 	add	r5,r5,r5
 80081a0:	10bfffc4 	addi	r2,r2,-1
 80081a4:	18c7883a 	add	r3,r3,r3
 80081a8:	293ffb36 	bltu	r5,r4,8008198 <__alt_data_end+0xfc008198>
 80081ac:	0005883a 	mov	r2,zero
 80081b0:	18000726 	beq	r3,zero,80081d0 <__divsi3+0x58>
 80081b4:	0005883a 	mov	r2,zero
 80081b8:	31400236 	bltu	r6,r5,80081c4 <__divsi3+0x4c>
 80081bc:	314dc83a 	sub	r6,r6,r5
 80081c0:	10c4b03a 	or	r2,r2,r3
 80081c4:	1806d07a 	srli	r3,r3,1
 80081c8:	280ad07a 	srli	r5,r5,1
 80081cc:	183ffa1e 	bne	r3,zero,80081b8 <__alt_data_end+0xfc0081b8>
 80081d0:	38000126 	beq	r7,zero,80081d8 <__divsi3+0x60>
 80081d4:	0085c83a 	sub	r2,zero,r2
 80081d8:	f800283a 	ret
 80081dc:	014bc83a 	sub	r5,zero,r5
 80081e0:	39c0005c 	xori	r7,r7,1
 80081e4:	003fe706 	br	8008184 <__alt_data_end+0xfc008184>
 80081e8:	0109c83a 	sub	r4,zero,r4
 80081ec:	01c00044 	movi	r7,1
 80081f0:	003fe306 	br	8008180 <__alt_data_end+0xfc008180>
 80081f4:	00c00044 	movi	r3,1
 80081f8:	003fee06 	br	80081b4 <__alt_data_end+0xfc0081b4>

080081fc <__modsi3>:
 80081fc:	20001716 	blt	r4,zero,800825c <__modsi3+0x60>
 8008200:	000f883a 	mov	r7,zero
 8008204:	2005883a 	mov	r2,r4
 8008208:	28001216 	blt	r5,zero,8008254 <__modsi3+0x58>
 800820c:	2900162e 	bgeu	r5,r4,8008268 <__modsi3+0x6c>
 8008210:	01800804 	movi	r6,32
 8008214:	00c00044 	movi	r3,1
 8008218:	00000106 	br	8008220 <__modsi3+0x24>
 800821c:	30000a26 	beq	r6,zero,8008248 <__modsi3+0x4c>
 8008220:	294b883a 	add	r5,r5,r5
 8008224:	31bfffc4 	addi	r6,r6,-1
 8008228:	18c7883a 	add	r3,r3,r3
 800822c:	293ffb36 	bltu	r5,r4,800821c <__alt_data_end+0xfc00821c>
 8008230:	18000526 	beq	r3,zero,8008248 <__modsi3+0x4c>
 8008234:	1806d07a 	srli	r3,r3,1
 8008238:	11400136 	bltu	r2,r5,8008240 <__modsi3+0x44>
 800823c:	1145c83a 	sub	r2,r2,r5
 8008240:	280ad07a 	srli	r5,r5,1
 8008244:	183ffb1e 	bne	r3,zero,8008234 <__alt_data_end+0xfc008234>
 8008248:	38000126 	beq	r7,zero,8008250 <__modsi3+0x54>
 800824c:	0085c83a 	sub	r2,zero,r2
 8008250:	f800283a 	ret
 8008254:	014bc83a 	sub	r5,zero,r5
 8008258:	003fec06 	br	800820c <__alt_data_end+0xfc00820c>
 800825c:	0109c83a 	sub	r4,zero,r4
 8008260:	01c00044 	movi	r7,1
 8008264:	003fe706 	br	8008204 <__alt_data_end+0xfc008204>
 8008268:	00c00044 	movi	r3,1
 800826c:	003ff106 	br	8008234 <__alt_data_end+0xfc008234>

08008270 <__udivsi3>:
 8008270:	200d883a 	mov	r6,r4
 8008274:	2900152e 	bgeu	r5,r4,80082cc <__udivsi3+0x5c>
 8008278:	28001416 	blt	r5,zero,80082cc <__udivsi3+0x5c>
 800827c:	00800804 	movi	r2,32
 8008280:	00c00044 	movi	r3,1
 8008284:	00000206 	br	8008290 <__udivsi3+0x20>
 8008288:	10000e26 	beq	r2,zero,80082c4 <__udivsi3+0x54>
 800828c:	28000516 	blt	r5,zero,80082a4 <__udivsi3+0x34>
 8008290:	294b883a 	add	r5,r5,r5
 8008294:	10bfffc4 	addi	r2,r2,-1
 8008298:	18c7883a 	add	r3,r3,r3
 800829c:	293ffa36 	bltu	r5,r4,8008288 <__alt_data_end+0xfc008288>
 80082a0:	18000826 	beq	r3,zero,80082c4 <__udivsi3+0x54>
 80082a4:	0005883a 	mov	r2,zero
 80082a8:	31400236 	bltu	r6,r5,80082b4 <__udivsi3+0x44>
 80082ac:	314dc83a 	sub	r6,r6,r5
 80082b0:	10c4b03a 	or	r2,r2,r3
 80082b4:	1806d07a 	srli	r3,r3,1
 80082b8:	280ad07a 	srli	r5,r5,1
 80082bc:	183ffa1e 	bne	r3,zero,80082a8 <__alt_data_end+0xfc0082a8>
 80082c0:	f800283a 	ret
 80082c4:	0005883a 	mov	r2,zero
 80082c8:	f800283a 	ret
 80082cc:	00c00044 	movi	r3,1
 80082d0:	003ff406 	br	80082a4 <__alt_data_end+0xfc0082a4>

080082d4 <__umodsi3>:
 80082d4:	2005883a 	mov	r2,r4
 80082d8:	2900122e 	bgeu	r5,r4,8008324 <__umodsi3+0x50>
 80082dc:	28001116 	blt	r5,zero,8008324 <__umodsi3+0x50>
 80082e0:	01800804 	movi	r6,32
 80082e4:	00c00044 	movi	r3,1
 80082e8:	00000206 	br	80082f4 <__umodsi3+0x20>
 80082ec:	30000c26 	beq	r6,zero,8008320 <__umodsi3+0x4c>
 80082f0:	28000516 	blt	r5,zero,8008308 <__umodsi3+0x34>
 80082f4:	294b883a 	add	r5,r5,r5
 80082f8:	31bfffc4 	addi	r6,r6,-1
 80082fc:	18c7883a 	add	r3,r3,r3
 8008300:	293ffa36 	bltu	r5,r4,80082ec <__alt_data_end+0xfc0082ec>
 8008304:	18000626 	beq	r3,zero,8008320 <__umodsi3+0x4c>
 8008308:	1806d07a 	srli	r3,r3,1
 800830c:	11400136 	bltu	r2,r5,8008314 <__umodsi3+0x40>
 8008310:	1145c83a 	sub	r2,r2,r5
 8008314:	280ad07a 	srli	r5,r5,1
 8008318:	183ffb1e 	bne	r3,zero,8008308 <__alt_data_end+0xfc008308>
 800831c:	f800283a 	ret
 8008320:	f800283a 	ret
 8008324:	00c00044 	movi	r3,1
 8008328:	003ff706 	br	8008308 <__alt_data_end+0xfc008308>

0800832c <__mulsi3>:
 800832c:	0005883a 	mov	r2,zero
 8008330:	20000726 	beq	r4,zero,8008350 <__mulsi3+0x24>
 8008334:	20c0004c 	andi	r3,r4,1
 8008338:	2008d07a 	srli	r4,r4,1
 800833c:	18000126 	beq	r3,zero,8008344 <__mulsi3+0x18>
 8008340:	1145883a 	add	r2,r2,r5
 8008344:	294b883a 	add	r5,r5,r5
 8008348:	203ffa1e 	bne	r4,zero,8008334 <__alt_data_end+0xfc008334>
 800834c:	f800283a 	ret
 8008350:	f800283a 	ret

08008354 <__gesf2>:
 8008354:	2004d5fa 	srli	r2,r4,23
 8008358:	2806d5fa 	srli	r3,r5,23
 800835c:	01802034 	movhi	r6,128
 8008360:	31bfffc4 	addi	r6,r6,-1
 8008364:	10803fcc 	andi	r2,r2,255
 8008368:	01c03fc4 	movi	r7,255
 800836c:	3110703a 	and	r8,r6,r4
 8008370:	18c03fcc 	andi	r3,r3,255
 8008374:	314c703a 	and	r6,r6,r5
 8008378:	2008d7fa 	srli	r4,r4,31
 800837c:	280ad7fa 	srli	r5,r5,31
 8008380:	11c01926 	beq	r2,r7,80083e8 <__gesf2+0x94>
 8008384:	01c03fc4 	movi	r7,255
 8008388:	19c00f26 	beq	r3,r7,80083c8 <__gesf2+0x74>
 800838c:	1000061e 	bne	r2,zero,80083a8 <__gesf2+0x54>
 8008390:	400f003a 	cmpeq	r7,r8,zero
 8008394:	1800071e 	bne	r3,zero,80083b4 <__gesf2+0x60>
 8008398:	3000061e 	bne	r6,zero,80083b4 <__gesf2+0x60>
 800839c:	0005883a 	mov	r2,zero
 80083a0:	40000e1e 	bne	r8,zero,80083dc <__gesf2+0x88>
 80083a4:	f800283a 	ret
 80083a8:	18000a1e 	bne	r3,zero,80083d4 <__gesf2+0x80>
 80083ac:	30000b26 	beq	r6,zero,80083dc <__gesf2+0x88>
 80083b0:	000f883a 	mov	r7,zero
 80083b4:	29403fcc 	andi	r5,r5,255
 80083b8:	38000726 	beq	r7,zero,80083d8 <__gesf2+0x84>
 80083bc:	28000826 	beq	r5,zero,80083e0 <__gesf2+0x8c>
 80083c0:	00800044 	movi	r2,1
 80083c4:	f800283a 	ret
 80083c8:	303ff026 	beq	r6,zero,800838c <__alt_data_end+0xfc00838c>
 80083cc:	00bfff84 	movi	r2,-2
 80083d0:	f800283a 	ret
 80083d4:	29403fcc 	andi	r5,r5,255
 80083d8:	21400526 	beq	r4,r5,80083f0 <__gesf2+0x9c>
 80083dc:	203ff826 	beq	r4,zero,80083c0 <__alt_data_end+0xfc0083c0>
 80083e0:	00bfffc4 	movi	r2,-1
 80083e4:	f800283a 	ret
 80083e8:	403fe626 	beq	r8,zero,8008384 <__alt_data_end+0xfc008384>
 80083ec:	003ff706 	br	80083cc <__alt_data_end+0xfc0083cc>
 80083f0:	18bffa16 	blt	r3,r2,80083dc <__alt_data_end+0xfc0083dc>
 80083f4:	10c00216 	blt	r2,r3,8008400 <__gesf2+0xac>
 80083f8:	323ff836 	bltu	r6,r8,80083dc <__alt_data_end+0xfc0083dc>
 80083fc:	4180022e 	bgeu	r8,r6,8008408 <__gesf2+0xb4>
 8008400:	203fef1e 	bne	r4,zero,80083c0 <__alt_data_end+0xfc0083c0>
 8008404:	003ff606 	br	80083e0 <__alt_data_end+0xfc0083e0>
 8008408:	0005883a 	mov	r2,zero
 800840c:	f800283a 	ret

08008410 <__mulsf3>:
 8008410:	defff504 	addi	sp,sp,-44
 8008414:	dc000115 	stw	r16,4(sp)
 8008418:	2020d5fa 	srli	r16,r4,23
 800841c:	dd400615 	stw	r21,24(sp)
 8008420:	202ad7fa 	srli	r21,r4,31
 8008424:	dc800315 	stw	r18,12(sp)
 8008428:	04802034 	movhi	r18,128
 800842c:	df000915 	stw	fp,36(sp)
 8008430:	dd000515 	stw	r20,20(sp)
 8008434:	94bfffc4 	addi	r18,r18,-1
 8008438:	dfc00a15 	stw	ra,40(sp)
 800843c:	ddc00815 	stw	r23,32(sp)
 8008440:	dd800715 	stw	r22,28(sp)
 8008444:	dcc00415 	stw	r19,16(sp)
 8008448:	dc400215 	stw	r17,8(sp)
 800844c:	84003fcc 	andi	r16,r16,255
 8008450:	9124703a 	and	r18,r18,r4
 8008454:	a829883a 	mov	r20,r21
 8008458:	af003fcc 	andi	fp,r21,255
 800845c:	80005426 	beq	r16,zero,80085b0 <__mulsf3+0x1a0>
 8008460:	00803fc4 	movi	r2,255
 8008464:	80802f26 	beq	r16,r2,8008524 <__mulsf3+0x114>
 8008468:	91002034 	orhi	r4,r18,128
 800846c:	202490fa 	slli	r18,r4,3
 8008470:	843fe044 	addi	r16,r16,-127
 8008474:	0023883a 	mov	r17,zero
 8008478:	002f883a 	mov	r23,zero
 800847c:	2804d5fa 	srli	r2,r5,23
 8008480:	282cd7fa 	srli	r22,r5,31
 8008484:	01002034 	movhi	r4,128
 8008488:	213fffc4 	addi	r4,r4,-1
 800848c:	10803fcc 	andi	r2,r2,255
 8008490:	2166703a 	and	r19,r4,r5
 8008494:	b1803fcc 	andi	r6,r22,255
 8008498:	10004c26 	beq	r2,zero,80085cc <__mulsf3+0x1bc>
 800849c:	00c03fc4 	movi	r3,255
 80084a0:	10c04726 	beq	r2,r3,80085c0 <__mulsf3+0x1b0>
 80084a4:	99002034 	orhi	r4,r19,128
 80084a8:	202690fa 	slli	r19,r4,3
 80084ac:	10bfe044 	addi	r2,r2,-127
 80084b0:	0007883a 	mov	r3,zero
 80084b4:	80a1883a 	add	r16,r16,r2
 80084b8:	010003c4 	movi	r4,15
 80084bc:	1c44b03a 	or	r2,r3,r17
 80084c0:	b56af03a 	xor	r21,r22,r21
 80084c4:	81c00044 	addi	r7,r16,1
 80084c8:	20806b36 	bltu	r4,r2,8008678 <__mulsf3+0x268>
 80084cc:	100490ba 	slli	r2,r2,2
 80084d0:	01020074 	movhi	r4,2049
 80084d4:	21213904 	addi	r4,r4,-31516
 80084d8:	1105883a 	add	r2,r2,r4
 80084dc:	10800017 	ldw	r2,0(r2)
 80084e0:	1000683a 	jmp	r2
 80084e4:	08008678 	rdprs	zero,at,537
 80084e8:	08008538 	rdprs	zero,at,532
 80084ec:	08008538 	rdprs	zero,at,532
 80084f0:	08008534 	orhi	zero,at,532
 80084f4:	0800865c 	xori	zero,at,537
 80084f8:	0800865c 	xori	zero,at,537
 80084fc:	08008648 	cmpgei	zero,at,537
 8008500:	08008534 	orhi	zero,at,532
 8008504:	0800865c 	xori	zero,at,537
 8008508:	08008648 	cmpgei	zero,at,537
 800850c:	0800865c 	xori	zero,at,537
 8008510:	08008534 	orhi	zero,at,532
 8008514:	08008668 	cmpgeui	zero,at,537
 8008518:	08008668 	cmpgeui	zero,at,537
 800851c:	08008668 	cmpgeui	zero,at,537
 8008520:	08008778 	rdprs	zero,at,541
 8008524:	90003b1e 	bne	r18,zero,8008614 <__mulsf3+0x204>
 8008528:	04400204 	movi	r17,8
 800852c:	05c00084 	movi	r23,2
 8008530:	003fd206 	br	800847c <__alt_data_end+0xfc00847c>
 8008534:	302b883a 	mov	r21,r6
 8008538:	00800084 	movi	r2,2
 800853c:	18802626 	beq	r3,r2,80085d8 <__mulsf3+0x1c8>
 8008540:	008000c4 	movi	r2,3
 8008544:	1880b826 	beq	r3,r2,8008828 <__mulsf3+0x418>
 8008548:	00800044 	movi	r2,1
 800854c:	1880af1e 	bne	r3,r2,800880c <__mulsf3+0x3fc>
 8008550:	a829883a 	mov	r20,r21
 8008554:	0007883a 	mov	r3,zero
 8008558:	0009883a 	mov	r4,zero
 800855c:	18803fcc 	andi	r2,r3,255
 8008560:	100695fa 	slli	r3,r2,23
 8008564:	a0803fcc 	andi	r2,r20,255
 8008568:	100a97fa 	slli	r5,r2,31
 800856c:	00802034 	movhi	r2,128
 8008570:	10bfffc4 	addi	r2,r2,-1
 8008574:	2084703a 	and	r2,r4,r2
 8008578:	10c4b03a 	or	r2,r2,r3
 800857c:	1144b03a 	or	r2,r2,r5
 8008580:	dfc00a17 	ldw	ra,40(sp)
 8008584:	df000917 	ldw	fp,36(sp)
 8008588:	ddc00817 	ldw	r23,32(sp)
 800858c:	dd800717 	ldw	r22,28(sp)
 8008590:	dd400617 	ldw	r21,24(sp)
 8008594:	dd000517 	ldw	r20,20(sp)
 8008598:	dcc00417 	ldw	r19,16(sp)
 800859c:	dc800317 	ldw	r18,12(sp)
 80085a0:	dc400217 	ldw	r17,8(sp)
 80085a4:	dc000117 	ldw	r16,4(sp)
 80085a8:	dec00b04 	addi	sp,sp,44
 80085ac:	f800283a 	ret
 80085b0:	90000d1e 	bne	r18,zero,80085e8 <__mulsf3+0x1d8>
 80085b4:	04400104 	movi	r17,4
 80085b8:	05c00044 	movi	r23,1
 80085bc:	003faf06 	br	800847c <__alt_data_end+0xfc00847c>
 80085c0:	9806c03a 	cmpne	r3,r19,zero
 80085c4:	18c00084 	addi	r3,r3,2
 80085c8:	003fba06 	br	80084b4 <__alt_data_end+0xfc0084b4>
 80085cc:	9800141e 	bne	r19,zero,8008620 <__mulsf3+0x210>
 80085d0:	00c00044 	movi	r3,1
 80085d4:	003fb706 	br	80084b4 <__alt_data_end+0xfc0084b4>
 80085d8:	a829883a 	mov	r20,r21
 80085dc:	00ffffc4 	movi	r3,-1
 80085e0:	0009883a 	mov	r4,zero
 80085e4:	003fdd06 	br	800855c <__alt_data_end+0xfc00855c>
 80085e8:	9009883a 	mov	r4,r18
 80085ec:	d9400015 	stw	r5,0(sp)
 80085f0:	800b6c40 	call	800b6c4 <__clzsi2>
 80085f4:	10fffec4 	addi	r3,r2,-5
 80085f8:	10801d84 	addi	r2,r2,118
 80085fc:	90e4983a 	sll	r18,r18,r3
 8008600:	00a1c83a 	sub	r16,zero,r2
 8008604:	0023883a 	mov	r17,zero
 8008608:	002f883a 	mov	r23,zero
 800860c:	d9400017 	ldw	r5,0(sp)
 8008610:	003f9a06 	br	800847c <__alt_data_end+0xfc00847c>
 8008614:	04400304 	movi	r17,12
 8008618:	05c000c4 	movi	r23,3
 800861c:	003f9706 	br	800847c <__alt_data_end+0xfc00847c>
 8008620:	9809883a 	mov	r4,r19
 8008624:	d9800015 	stw	r6,0(sp)
 8008628:	800b6c40 	call	800b6c4 <__clzsi2>
 800862c:	10fffec4 	addi	r3,r2,-5
 8008630:	10801d84 	addi	r2,r2,118
 8008634:	98e6983a 	sll	r19,r19,r3
 8008638:	0085c83a 	sub	r2,zero,r2
 800863c:	0007883a 	mov	r3,zero
 8008640:	d9800017 	ldw	r6,0(sp)
 8008644:	003f9b06 	br	80084b4 <__alt_data_end+0xfc0084b4>
 8008648:	01002034 	movhi	r4,128
 800864c:	0029883a 	mov	r20,zero
 8008650:	213fffc4 	addi	r4,r4,-1
 8008654:	00ffffc4 	movi	r3,-1
 8008658:	003fc006 	br	800855c <__alt_data_end+0xfc00855c>
 800865c:	9027883a 	mov	r19,r18
 8008660:	b807883a 	mov	r3,r23
 8008664:	003fb406 	br	8008538 <__alt_data_end+0xfc008538>
 8008668:	9027883a 	mov	r19,r18
 800866c:	e02b883a 	mov	r21,fp
 8008670:	b807883a 	mov	r3,r23
 8008674:	003fb006 	br	8008538 <__alt_data_end+0xfc008538>
 8008678:	9028d43a 	srli	r20,r18,16
 800867c:	982cd43a 	srli	r22,r19,16
 8008680:	94bfffcc 	andi	r18,r18,65535
 8008684:	9cffffcc 	andi	r19,r19,65535
 8008688:	980b883a 	mov	r5,r19
 800868c:	9009883a 	mov	r4,r18
 8008690:	d9c00015 	stw	r7,0(sp)
 8008694:	800832c0 	call	800832c <__mulsi3>
 8008698:	a00b883a 	mov	r5,r20
 800869c:	9809883a 	mov	r4,r19
 80086a0:	1023883a 	mov	r17,r2
 80086a4:	800832c0 	call	800832c <__mulsi3>
 80086a8:	a009883a 	mov	r4,r20
 80086ac:	b00b883a 	mov	r5,r22
 80086b0:	1027883a 	mov	r19,r2
 80086b4:	800832c0 	call	800832c <__mulsi3>
 80086b8:	b00b883a 	mov	r5,r22
 80086bc:	9009883a 	mov	r4,r18
 80086c0:	1029883a 	mov	r20,r2
 80086c4:	800832c0 	call	800832c <__mulsi3>
 80086c8:	8806d43a 	srli	r3,r17,16
 80086cc:	14c5883a 	add	r2,r2,r19
 80086d0:	d9c00017 	ldw	r7,0(sp)
 80086d4:	1885883a 	add	r2,r3,r2
 80086d8:	14c0022e 	bgeu	r2,r19,80086e4 <__mulsf3+0x2d4>
 80086dc:	00c00074 	movhi	r3,1
 80086e0:	a0e9883a 	add	r20,r20,r3
 80086e4:	1026943a 	slli	r19,r2,16
 80086e8:	8c7fffcc 	andi	r17,r17,65535
 80086ec:	1004d43a 	srli	r2,r2,16
 80086f0:	9c63883a 	add	r17,r19,r17
 80086f4:	882691ba 	slli	r19,r17,6
 80086f8:	1505883a 	add	r2,r2,r20
 80086fc:	8822d6ba 	srli	r17,r17,26
 8008700:	100891ba 	slli	r4,r2,6
 8008704:	9826c03a 	cmpne	r19,r19,zero
 8008708:	9c62b03a 	or	r17,r19,r17
 800870c:	8926b03a 	or	r19,r17,r4
 8008710:	9882002c 	andhi	r2,r19,2048
 8008714:	10000426 	beq	r2,zero,8008728 <__mulsf3+0x318>
 8008718:	9804d07a 	srli	r2,r19,1
 800871c:	9900004c 	andi	r4,r19,1
 8008720:	3821883a 	mov	r16,r7
 8008724:	1126b03a 	or	r19,r2,r4
 8008728:	80c01fc4 	addi	r3,r16,127
 800872c:	00c0210e 	bge	zero,r3,80087b4 <__mulsf3+0x3a4>
 8008730:	988001cc 	andi	r2,r19,7
 8008734:	10000426 	beq	r2,zero,8008748 <__mulsf3+0x338>
 8008738:	988003cc 	andi	r2,r19,15
 800873c:	01000104 	movi	r4,4
 8008740:	11000126 	beq	r2,r4,8008748 <__mulsf3+0x338>
 8008744:	9927883a 	add	r19,r19,r4
 8008748:	9882002c 	andhi	r2,r19,2048
 800874c:	10000426 	beq	r2,zero,8008760 <__mulsf3+0x350>
 8008750:	00be0034 	movhi	r2,63488
 8008754:	10bfffc4 	addi	r2,r2,-1
 8008758:	80c02004 	addi	r3,r16,128
 800875c:	98a6703a 	and	r19,r19,r2
 8008760:	00803f84 	movi	r2,254
 8008764:	10ff9c16 	blt	r2,r3,80085d8 <__alt_data_end+0xfc0085d8>
 8008768:	980891ba 	slli	r4,r19,6
 800876c:	a829883a 	mov	r20,r21
 8008770:	2008d27a 	srli	r4,r4,9
 8008774:	003f7906 	br	800855c <__alt_data_end+0xfc00855c>
 8008778:	9080102c 	andhi	r2,r18,64
 800877c:	10000826 	beq	r2,zero,80087a0 <__mulsf3+0x390>
 8008780:	9880102c 	andhi	r2,r19,64
 8008784:	1000061e 	bne	r2,zero,80087a0 <__mulsf3+0x390>
 8008788:	00802034 	movhi	r2,128
 800878c:	99001034 	orhi	r4,r19,64
 8008790:	10bfffc4 	addi	r2,r2,-1
 8008794:	b029883a 	mov	r20,r22
 8008798:	2088703a 	and	r4,r4,r2
 800879c:	003fad06 	br	8008654 <__alt_data_end+0xfc008654>
 80087a0:	00802034 	movhi	r2,128
 80087a4:	91001034 	orhi	r4,r18,64
 80087a8:	10bfffc4 	addi	r2,r2,-1
 80087ac:	2088703a 	and	r4,r4,r2
 80087b0:	003fa806 	br	8008654 <__alt_data_end+0xfc008654>
 80087b4:	00800044 	movi	r2,1
 80087b8:	10c7c83a 	sub	r3,r2,r3
 80087bc:	008006c4 	movi	r2,27
 80087c0:	10ff6316 	blt	r2,r3,8008550 <__alt_data_end+0xfc008550>
 80087c4:	00800804 	movi	r2,32
 80087c8:	10c5c83a 	sub	r2,r2,r3
 80087cc:	9884983a 	sll	r2,r19,r2
 80087d0:	98c6d83a 	srl	r3,r19,r3
 80087d4:	1004c03a 	cmpne	r2,r2,zero
 80087d8:	1884b03a 	or	r2,r3,r2
 80087dc:	10c001cc 	andi	r3,r2,7
 80087e0:	18000426 	beq	r3,zero,80087f4 <__mulsf3+0x3e4>
 80087e4:	10c003cc 	andi	r3,r2,15
 80087e8:	01000104 	movi	r4,4
 80087ec:	19000126 	beq	r3,r4,80087f4 <__mulsf3+0x3e4>
 80087f0:	1105883a 	add	r2,r2,r4
 80087f4:	10c1002c 	andhi	r3,r2,1024
 80087f8:	18000626 	beq	r3,zero,8008814 <__mulsf3+0x404>
 80087fc:	a829883a 	mov	r20,r21
 8008800:	00c00044 	movi	r3,1
 8008804:	0009883a 	mov	r4,zero
 8008808:	003f5406 	br	800855c <__alt_data_end+0xfc00855c>
 800880c:	3821883a 	mov	r16,r7
 8008810:	003fc506 	br	8008728 <__alt_data_end+0xfc008728>
 8008814:	100491ba 	slli	r2,r2,6
 8008818:	a829883a 	mov	r20,r21
 800881c:	0007883a 	mov	r3,zero
 8008820:	1008d27a 	srli	r4,r2,9
 8008824:	003f4d06 	br	800855c <__alt_data_end+0xfc00855c>
 8008828:	00802034 	movhi	r2,128
 800882c:	99001034 	orhi	r4,r19,64
 8008830:	10bfffc4 	addi	r2,r2,-1
 8008834:	a829883a 	mov	r20,r21
 8008838:	2088703a 	and	r4,r4,r2
 800883c:	003f8506 	br	8008654 <__alt_data_end+0xfc008654>

08008840 <__subsf3>:
 8008840:	defffc04 	addi	sp,sp,-16
 8008844:	280cd5fa 	srli	r6,r5,23
 8008848:	dc000015 	stw	r16,0(sp)
 800884c:	01c02034 	movhi	r7,128
 8008850:	2020d5fa 	srli	r16,r4,23
 8008854:	39ffffc4 	addi	r7,r7,-1
 8008858:	3906703a 	and	r3,r7,r4
 800885c:	dc400115 	stw	r17,4(sp)
 8008860:	394e703a 	and	r7,r7,r5
 8008864:	2022d7fa 	srli	r17,r4,31
 8008868:	dfc00315 	stw	ra,12(sp)
 800886c:	dc800215 	stw	r18,8(sp)
 8008870:	31803fcc 	andi	r6,r6,255
 8008874:	01003fc4 	movi	r4,255
 8008878:	84003fcc 	andi	r16,r16,255
 800887c:	180690fa 	slli	r3,r3,3
 8008880:	2804d7fa 	srli	r2,r5,31
 8008884:	380e90fa 	slli	r7,r7,3
 8008888:	31006d26 	beq	r6,r4,8008a40 <__subsf3+0x200>
 800888c:	1080005c 	xori	r2,r2,1
 8008890:	8189c83a 	sub	r4,r16,r6
 8008894:	14404f26 	beq	r2,r17,80089d4 <__subsf3+0x194>
 8008898:	0100770e 	bge	zero,r4,8008a78 <__subsf3+0x238>
 800889c:	30001e1e 	bne	r6,zero,8008918 <__subsf3+0xd8>
 80088a0:	38006a1e 	bne	r7,zero,8008a4c <__subsf3+0x20c>
 80088a4:	188001cc 	andi	r2,r3,7
 80088a8:	10000426 	beq	r2,zero,80088bc <__subsf3+0x7c>
 80088ac:	188003cc 	andi	r2,r3,15
 80088b0:	01000104 	movi	r4,4
 80088b4:	11000126 	beq	r2,r4,80088bc <__subsf3+0x7c>
 80088b8:	1907883a 	add	r3,r3,r4
 80088bc:	1881002c 	andhi	r2,r3,1024
 80088c0:	10003926 	beq	r2,zero,80089a8 <__subsf3+0x168>
 80088c4:	84000044 	addi	r16,r16,1
 80088c8:	00803fc4 	movi	r2,255
 80088cc:	80807526 	beq	r16,r2,8008aa4 <__subsf3+0x264>
 80088d0:	180691ba 	slli	r3,r3,6
 80088d4:	8880004c 	andi	r2,r17,1
 80088d8:	180ad27a 	srli	r5,r3,9
 80088dc:	84003fcc 	andi	r16,r16,255
 80088e0:	800695fa 	slli	r3,r16,23
 80088e4:	10803fcc 	andi	r2,r2,255
 80088e8:	01002034 	movhi	r4,128
 80088ec:	213fffc4 	addi	r4,r4,-1
 80088f0:	100497fa 	slli	r2,r2,31
 80088f4:	2920703a 	and	r16,r5,r4
 80088f8:	80e0b03a 	or	r16,r16,r3
 80088fc:	8084b03a 	or	r2,r16,r2
 8008900:	dfc00317 	ldw	ra,12(sp)
 8008904:	dc800217 	ldw	r18,8(sp)
 8008908:	dc400117 	ldw	r17,4(sp)
 800890c:	dc000017 	ldw	r16,0(sp)
 8008910:	dec00404 	addi	sp,sp,16
 8008914:	f800283a 	ret
 8008918:	00803fc4 	movi	r2,255
 800891c:	80bfe126 	beq	r16,r2,80088a4 <__alt_data_end+0xfc0088a4>
 8008920:	39c10034 	orhi	r7,r7,1024
 8008924:	008006c4 	movi	r2,27
 8008928:	11007416 	blt	r2,r4,8008afc <__subsf3+0x2bc>
 800892c:	00800804 	movi	r2,32
 8008930:	1105c83a 	sub	r2,r2,r4
 8008934:	3884983a 	sll	r2,r7,r2
 8008938:	390ed83a 	srl	r7,r7,r4
 800893c:	1008c03a 	cmpne	r4,r2,zero
 8008940:	390eb03a 	or	r7,r7,r4
 8008944:	19c7c83a 	sub	r3,r3,r7
 8008948:	1881002c 	andhi	r2,r3,1024
 800894c:	10001426 	beq	r2,zero,80089a0 <__subsf3+0x160>
 8008950:	04810034 	movhi	r18,1024
 8008954:	94bfffc4 	addi	r18,r18,-1
 8008958:	1ca4703a 	and	r18,r3,r18
 800895c:	9009883a 	mov	r4,r18
 8008960:	800b6c40 	call	800b6c4 <__clzsi2>
 8008964:	10bffec4 	addi	r2,r2,-5
 8008968:	90a4983a 	sll	r18,r18,r2
 800896c:	14005116 	blt	r2,r16,8008ab4 <__subsf3+0x274>
 8008970:	1405c83a 	sub	r2,r2,r16
 8008974:	10c00044 	addi	r3,r2,1
 8008978:	00800804 	movi	r2,32
 800897c:	10c5c83a 	sub	r2,r2,r3
 8008980:	9084983a 	sll	r2,r18,r2
 8008984:	90e4d83a 	srl	r18,r18,r3
 8008988:	0021883a 	mov	r16,zero
 800898c:	1006c03a 	cmpne	r3,r2,zero
 8008990:	90c6b03a 	or	r3,r18,r3
 8008994:	003fc306 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008998:	2000e026 	beq	r4,zero,8008d1c <__subsf3+0x4dc>
 800899c:	2007883a 	mov	r3,r4
 80089a0:	188001cc 	andi	r2,r3,7
 80089a4:	103fc11e 	bne	r2,zero,80088ac <__alt_data_end+0xfc0088ac>
 80089a8:	180ad0fa 	srli	r5,r3,3
 80089ac:	00c03fc4 	movi	r3,255
 80089b0:	8880004c 	andi	r2,r17,1
 80089b4:	80c0031e 	bne	r16,r3,80089c4 <__subsf3+0x184>
 80089b8:	28006d26 	beq	r5,zero,8008b70 <__subsf3+0x330>
 80089bc:	29401034 	orhi	r5,r5,64
 80089c0:	043fffc4 	movi	r16,-1
 80089c4:	00c02034 	movhi	r3,128
 80089c8:	18ffffc4 	addi	r3,r3,-1
 80089cc:	28ca703a 	and	r5,r5,r3
 80089d0:	003fc206 	br	80088dc <__alt_data_end+0xfc0088dc>
 80089d4:	01003c0e 	bge	zero,r4,8008ac8 <__subsf3+0x288>
 80089d8:	30002126 	beq	r6,zero,8008a60 <__subsf3+0x220>
 80089dc:	01403fc4 	movi	r5,255
 80089e0:	817fb026 	beq	r16,r5,80088a4 <__alt_data_end+0xfc0088a4>
 80089e4:	39c10034 	orhi	r7,r7,1024
 80089e8:	014006c4 	movi	r5,27
 80089ec:	29007416 	blt	r5,r4,8008bc0 <__subsf3+0x380>
 80089f0:	01400804 	movi	r5,32
 80089f4:	290bc83a 	sub	r5,r5,r4
 80089f8:	394a983a 	sll	r5,r7,r5
 80089fc:	390ed83a 	srl	r7,r7,r4
 8008a00:	2808c03a 	cmpne	r4,r5,zero
 8008a04:	390eb03a 	or	r7,r7,r4
 8008a08:	19c7883a 	add	r3,r3,r7
 8008a0c:	1901002c 	andhi	r4,r3,1024
 8008a10:	20003826 	beq	r4,zero,8008af4 <__subsf3+0x2b4>
 8008a14:	84000044 	addi	r16,r16,1
 8008a18:	01003fc4 	movi	r4,255
 8008a1c:	81005426 	beq	r16,r4,8008b70 <__subsf3+0x330>
 8008a20:	1023883a 	mov	r17,r2
 8008a24:	00bf0034 	movhi	r2,64512
 8008a28:	10bfffc4 	addi	r2,r2,-1
 8008a2c:	1900004c 	andi	r4,r3,1
 8008a30:	1886703a 	and	r3,r3,r2
 8008a34:	1806d07a 	srli	r3,r3,1
 8008a38:	1906b03a 	or	r3,r3,r4
 8008a3c:	003f9906 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008a40:	383f9226 	beq	r7,zero,800888c <__alt_data_end+0xfc00888c>
 8008a44:	10803fcc 	andi	r2,r2,255
 8008a48:	003f9106 	br	8008890 <__alt_data_end+0xfc008890>
 8008a4c:	213fffc4 	addi	r4,r4,-1
 8008a50:	203fbc26 	beq	r4,zero,8008944 <__alt_data_end+0xfc008944>
 8008a54:	00803fc4 	movi	r2,255
 8008a58:	80bfb21e 	bne	r16,r2,8008924 <__alt_data_end+0xfc008924>
 8008a5c:	003f9106 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008a60:	383f9026 	beq	r7,zero,80088a4 <__alt_data_end+0xfc0088a4>
 8008a64:	213fffc4 	addi	r4,r4,-1
 8008a68:	203fe726 	beq	r4,zero,8008a08 <__alt_data_end+0xfc008a08>
 8008a6c:	01403fc4 	movi	r5,255
 8008a70:	817fdd1e 	bne	r16,r5,80089e8 <__alt_data_end+0xfc0089e8>
 8008a74:	003f8b06 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008a78:	2000221e 	bne	r4,zero,8008b04 <__subsf3+0x2c4>
 8008a7c:	81000044 	addi	r4,r16,1
 8008a80:	21003fcc 	andi	r4,r4,255
 8008a84:	01400044 	movi	r5,1
 8008a88:	2900470e 	bge	r5,r4,8008ba8 <__subsf3+0x368>
 8008a8c:	19e5c83a 	sub	r18,r3,r7
 8008a90:	9141002c 	andhi	r5,r18,1024
 8008a94:	28002d26 	beq	r5,zero,8008b4c <__subsf3+0x30c>
 8008a98:	38e5c83a 	sub	r18,r7,r3
 8008a9c:	1023883a 	mov	r17,r2
 8008aa0:	003fae06 	br	800895c <__alt_data_end+0xfc00895c>
 8008aa4:	8880004c 	andi	r2,r17,1
 8008aa8:	043fffc4 	movi	r16,-1
 8008aac:	000b883a 	mov	r5,zero
 8008ab0:	003f8a06 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008ab4:	00ff0034 	movhi	r3,64512
 8008ab8:	18ffffc4 	addi	r3,r3,-1
 8008abc:	80a1c83a 	sub	r16,r16,r2
 8008ac0:	90c6703a 	and	r3,r18,r3
 8008ac4:	003f7706 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008ac8:	2000431e 	bne	r4,zero,8008bd8 <__subsf3+0x398>
 8008acc:	81000044 	addi	r4,r16,1
 8008ad0:	21803fcc 	andi	r6,r4,255
 8008ad4:	01400044 	movi	r5,1
 8008ad8:	2980280e 	bge	r5,r6,8008b7c <__subsf3+0x33c>
 8008adc:	01403fc4 	movi	r5,255
 8008ae0:	21402326 	beq	r4,r5,8008b70 <__subsf3+0x330>
 8008ae4:	19c7883a 	add	r3,r3,r7
 8008ae8:	1806d07a 	srli	r3,r3,1
 8008aec:	2021883a 	mov	r16,r4
 8008af0:	003f6c06 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008af4:	1023883a 	mov	r17,r2
 8008af8:	003fa906 	br	80089a0 <__alt_data_end+0xfc0089a0>
 8008afc:	01c00044 	movi	r7,1
 8008b00:	003f9006 	br	8008944 <__alt_data_end+0xfc008944>
 8008b04:	8000151e 	bne	r16,zero,8008b5c <__subsf3+0x31c>
 8008b08:	18002f26 	beq	r3,zero,8008bc8 <__subsf3+0x388>
 8008b0c:	0108303a 	nor	r4,zero,r4
 8008b10:	20000a26 	beq	r4,zero,8008b3c <__subsf3+0x2fc>
 8008b14:	01403fc4 	movi	r5,255
 8008b18:	31402b26 	beq	r6,r5,8008bc8 <__subsf3+0x388>
 8008b1c:	014006c4 	movi	r5,27
 8008b20:	29006e16 	blt	r5,r4,8008cdc <__subsf3+0x49c>
 8008b24:	01400804 	movi	r5,32
 8008b28:	290bc83a 	sub	r5,r5,r4
 8008b2c:	194a983a 	sll	r5,r3,r5
 8008b30:	1908d83a 	srl	r4,r3,r4
 8008b34:	2806c03a 	cmpne	r3,r5,zero
 8008b38:	20c6b03a 	or	r3,r4,r3
 8008b3c:	38c7c83a 	sub	r3,r7,r3
 8008b40:	3021883a 	mov	r16,r6
 8008b44:	1023883a 	mov	r17,r2
 8008b48:	003f7f06 	br	8008948 <__alt_data_end+0xfc008948>
 8008b4c:	903f831e 	bne	r18,zero,800895c <__alt_data_end+0xfc00895c>
 8008b50:	0005883a 	mov	r2,zero
 8008b54:	0021883a 	mov	r16,zero
 8008b58:	003f9a06 	br	80089c4 <__alt_data_end+0xfc0089c4>
 8008b5c:	01403fc4 	movi	r5,255
 8008b60:	31401926 	beq	r6,r5,8008bc8 <__subsf3+0x388>
 8008b64:	0109c83a 	sub	r4,zero,r4
 8008b68:	18c10034 	orhi	r3,r3,1024
 8008b6c:	003feb06 	br	8008b1c <__alt_data_end+0xfc008b1c>
 8008b70:	043fffc4 	movi	r16,-1
 8008b74:	000b883a 	mov	r5,zero
 8008b78:	003f5806 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008b7c:	8000481e 	bne	r16,zero,8008ca0 <__subsf3+0x460>
 8008b80:	18006226 	beq	r3,zero,8008d0c <__subsf3+0x4cc>
 8008b84:	383f4726 	beq	r7,zero,80088a4 <__alt_data_end+0xfc0088a4>
 8008b88:	19c7883a 	add	r3,r3,r7
 8008b8c:	1881002c 	andhi	r2,r3,1024
 8008b90:	103f8326 	beq	r2,zero,80089a0 <__alt_data_end+0xfc0089a0>
 8008b94:	00bf0034 	movhi	r2,64512
 8008b98:	10bfffc4 	addi	r2,r2,-1
 8008b9c:	2821883a 	mov	r16,r5
 8008ba0:	1886703a 	and	r3,r3,r2
 8008ba4:	003f3f06 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008ba8:	80001c1e 	bne	r16,zero,8008c1c <__subsf3+0x3dc>
 8008bac:	1800261e 	bne	r3,zero,8008c48 <__subsf3+0x408>
 8008bb0:	38004c26 	beq	r7,zero,8008ce4 <__subsf3+0x4a4>
 8008bb4:	3807883a 	mov	r3,r7
 8008bb8:	1023883a 	mov	r17,r2
 8008bbc:	003f3906 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008bc0:	01c00044 	movi	r7,1
 8008bc4:	003f9006 	br	8008a08 <__alt_data_end+0xfc008a08>
 8008bc8:	3807883a 	mov	r3,r7
 8008bcc:	3021883a 	mov	r16,r6
 8008bd0:	1023883a 	mov	r17,r2
 8008bd4:	003f3306 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008bd8:	8000161e 	bne	r16,zero,8008c34 <__subsf3+0x3f4>
 8008bdc:	18002d26 	beq	r3,zero,8008c94 <__subsf3+0x454>
 8008be0:	0108303a 	nor	r4,zero,r4
 8008be4:	20000a26 	beq	r4,zero,8008c10 <__subsf3+0x3d0>
 8008be8:	01403fc4 	movi	r5,255
 8008bec:	31402926 	beq	r6,r5,8008c94 <__subsf3+0x454>
 8008bf0:	014006c4 	movi	r5,27
 8008bf4:	29004716 	blt	r5,r4,8008d14 <__subsf3+0x4d4>
 8008bf8:	01400804 	movi	r5,32
 8008bfc:	290bc83a 	sub	r5,r5,r4
 8008c00:	194a983a 	sll	r5,r3,r5
 8008c04:	1908d83a 	srl	r4,r3,r4
 8008c08:	2806c03a 	cmpne	r3,r5,zero
 8008c0c:	20c6b03a 	or	r3,r4,r3
 8008c10:	19c7883a 	add	r3,r3,r7
 8008c14:	3021883a 	mov	r16,r6
 8008c18:	003f7c06 	br	8008a0c <__alt_data_end+0xfc008a0c>
 8008c1c:	1800111e 	bne	r3,zero,8008c64 <__subsf3+0x424>
 8008c20:	38003326 	beq	r7,zero,8008cf0 <__subsf3+0x4b0>
 8008c24:	3807883a 	mov	r3,r7
 8008c28:	1023883a 	mov	r17,r2
 8008c2c:	04003fc4 	movi	r16,255
 8008c30:	003f1c06 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008c34:	01403fc4 	movi	r5,255
 8008c38:	31401626 	beq	r6,r5,8008c94 <__subsf3+0x454>
 8008c3c:	0109c83a 	sub	r4,zero,r4
 8008c40:	18c10034 	orhi	r3,r3,1024
 8008c44:	003fea06 	br	8008bf0 <__alt_data_end+0xfc008bf0>
 8008c48:	383f1626 	beq	r7,zero,80088a4 <__alt_data_end+0xfc0088a4>
 8008c4c:	19c9c83a 	sub	r4,r3,r7
 8008c50:	2141002c 	andhi	r5,r4,1024
 8008c54:	283f5026 	beq	r5,zero,8008998 <__alt_data_end+0xfc008998>
 8008c58:	38c7c83a 	sub	r3,r7,r3
 8008c5c:	1023883a 	mov	r17,r2
 8008c60:	003f1006 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008c64:	38001b26 	beq	r7,zero,8008cd4 <__subsf3+0x494>
 8008c68:	1806d0fa 	srli	r3,r3,3
 8008c6c:	1900102c 	andhi	r4,r3,64
 8008c70:	20000526 	beq	r4,zero,8008c88 <__subsf3+0x448>
 8008c74:	380ed0fa 	srli	r7,r7,3
 8008c78:	3900102c 	andhi	r4,r7,64
 8008c7c:	2000021e 	bne	r4,zero,8008c88 <__subsf3+0x448>
 8008c80:	3807883a 	mov	r3,r7
 8008c84:	1023883a 	mov	r17,r2
 8008c88:	180690fa 	slli	r3,r3,3
 8008c8c:	04003fc4 	movi	r16,255
 8008c90:	003f0406 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008c94:	3807883a 	mov	r3,r7
 8008c98:	3021883a 	mov	r16,r6
 8008c9c:	003f0106 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008ca0:	18001726 	beq	r3,zero,8008d00 <__subsf3+0x4c0>
 8008ca4:	38000b26 	beq	r7,zero,8008cd4 <__subsf3+0x494>
 8008ca8:	1806d0fa 	srli	r3,r3,3
 8008cac:	1900102c 	andhi	r4,r3,64
 8008cb0:	20000426 	beq	r4,zero,8008cc4 <__subsf3+0x484>
 8008cb4:	380ed0fa 	srli	r7,r7,3
 8008cb8:	3900102c 	andhi	r4,r7,64
 8008cbc:	2000011e 	bne	r4,zero,8008cc4 <__subsf3+0x484>
 8008cc0:	3807883a 	mov	r3,r7
 8008cc4:	180690fa 	slli	r3,r3,3
 8008cc8:	1023883a 	mov	r17,r2
 8008ccc:	04003fc4 	movi	r16,255
 8008cd0:	003ef406 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008cd4:	04003fc4 	movi	r16,255
 8008cd8:	003ef206 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008cdc:	00c00044 	movi	r3,1
 8008ce0:	003f9606 	br	8008b3c <__alt_data_end+0xfc008b3c>
 8008ce4:	000b883a 	mov	r5,zero
 8008ce8:	0005883a 	mov	r2,zero
 8008cec:	003f3506 	br	80089c4 <__alt_data_end+0xfc0089c4>
 8008cf0:	01402034 	movhi	r5,128
 8008cf4:	297fffc4 	addi	r5,r5,-1
 8008cf8:	0005883a 	mov	r2,zero
 8008cfc:	003f2f06 	br	80089bc <__alt_data_end+0xfc0089bc>
 8008d00:	3807883a 	mov	r3,r7
 8008d04:	04003fc4 	movi	r16,255
 8008d08:	003ee606 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008d0c:	3807883a 	mov	r3,r7
 8008d10:	003ee406 	br	80088a4 <__alt_data_end+0xfc0088a4>
 8008d14:	00c00044 	movi	r3,1
 8008d18:	003fbd06 	br	8008c10 <__alt_data_end+0xfc008c10>
 8008d1c:	0005883a 	mov	r2,zero
 8008d20:	003f2806 	br	80089c4 <__alt_data_end+0xfc0089c4>

08008d24 <__fixsfsi>:
 8008d24:	200ad5fa 	srli	r5,r4,23
 8008d28:	00c02034 	movhi	r3,128
 8008d2c:	18ffffc4 	addi	r3,r3,-1
 8008d30:	29403fcc 	andi	r5,r5,255
 8008d34:	00801f84 	movi	r2,126
 8008d38:	1906703a 	and	r3,r3,r4
 8008d3c:	2008d7fa 	srli	r4,r4,31
 8008d40:	11400e0e 	bge	r2,r5,8008d7c <__fixsfsi+0x58>
 8008d44:	00802744 	movi	r2,157
 8008d48:	11400816 	blt	r2,r5,8008d6c <__fixsfsi+0x48>
 8008d4c:	00802544 	movi	r2,149
 8008d50:	18c02034 	orhi	r3,r3,128
 8008d54:	11400b0e 	bge	r2,r5,8008d84 <__fixsfsi+0x60>
 8008d58:	28bfda84 	addi	r2,r5,-150
 8008d5c:	1884983a 	sll	r2,r3,r2
 8008d60:	20000726 	beq	r4,zero,8008d80 <__fixsfsi+0x5c>
 8008d64:	0085c83a 	sub	r2,zero,r2
 8008d68:	f800283a 	ret
 8008d6c:	00a00034 	movhi	r2,32768
 8008d70:	10bfffc4 	addi	r2,r2,-1
 8008d74:	2085883a 	add	r2,r4,r2
 8008d78:	f800283a 	ret
 8008d7c:	0005883a 	mov	r2,zero
 8008d80:	f800283a 	ret
 8008d84:	00802584 	movi	r2,150
 8008d88:	1145c83a 	sub	r2,r2,r5
 8008d8c:	1884d83a 	srl	r2,r3,r2
 8008d90:	003ff306 	br	8008d60 <__alt_data_end+0xfc008d60>

08008d94 <__floatunsisf>:
 8008d94:	defffe04 	addi	sp,sp,-8
 8008d98:	dfc00115 	stw	ra,4(sp)
 8008d9c:	dc000015 	stw	r16,0(sp)
 8008da0:	20002c26 	beq	r4,zero,8008e54 <__floatunsisf+0xc0>
 8008da4:	2021883a 	mov	r16,r4
 8008da8:	800b6c40 	call	800b6c4 <__clzsi2>
 8008dac:	00c02784 	movi	r3,158
 8008db0:	1887c83a 	sub	r3,r3,r2
 8008db4:	01002584 	movi	r4,150
 8008db8:	20c00f16 	blt	r4,r3,8008df8 <__floatunsisf+0x64>
 8008dbc:	20c9c83a 	sub	r4,r4,r3
 8008dc0:	8108983a 	sll	r4,r16,r4
 8008dc4:	00802034 	movhi	r2,128
 8008dc8:	10bfffc4 	addi	r2,r2,-1
 8008dcc:	2088703a 	and	r4,r4,r2
 8008dd0:	18803fcc 	andi	r2,r3,255
 8008dd4:	100695fa 	slli	r3,r2,23
 8008dd8:	00802034 	movhi	r2,128
 8008ddc:	10bfffc4 	addi	r2,r2,-1
 8008de0:	2084703a 	and	r2,r4,r2
 8008de4:	10c4b03a 	or	r2,r2,r3
 8008de8:	dfc00117 	ldw	ra,4(sp)
 8008dec:	dc000017 	ldw	r16,0(sp)
 8008df0:	dec00204 	addi	sp,sp,8
 8008df4:	f800283a 	ret
 8008df8:	01002644 	movi	r4,153
 8008dfc:	20c01816 	blt	r4,r3,8008e60 <__floatunsisf+0xcc>
 8008e00:	20c9c83a 	sub	r4,r4,r3
 8008e04:	8108983a 	sll	r4,r16,r4
 8008e08:	017f0034 	movhi	r5,64512
 8008e0c:	297fffc4 	addi	r5,r5,-1
 8008e10:	218001cc 	andi	r6,r4,7
 8008e14:	214a703a 	and	r5,r4,r5
 8008e18:	30000426 	beq	r6,zero,8008e2c <__floatunsisf+0x98>
 8008e1c:	210003cc 	andi	r4,r4,15
 8008e20:	01800104 	movi	r6,4
 8008e24:	21800126 	beq	r4,r6,8008e2c <__floatunsisf+0x98>
 8008e28:	298b883a 	add	r5,r5,r6
 8008e2c:	2901002c 	andhi	r4,r5,1024
 8008e30:	20000526 	beq	r4,zero,8008e48 <__floatunsisf+0xb4>
 8008e34:	00c027c4 	movi	r3,159
 8008e38:	1887c83a 	sub	r3,r3,r2
 8008e3c:	00bf0034 	movhi	r2,64512
 8008e40:	10bfffc4 	addi	r2,r2,-1
 8008e44:	288a703a 	and	r5,r5,r2
 8008e48:	280891ba 	slli	r4,r5,6
 8008e4c:	2008d27a 	srli	r4,r4,9
 8008e50:	003fdf06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8008e54:	0007883a 	mov	r3,zero
 8008e58:	0009883a 	mov	r4,zero
 8008e5c:	003fdc06 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8008e60:	01402e44 	movi	r5,185
 8008e64:	28cbc83a 	sub	r5,r5,r3
 8008e68:	01000144 	movi	r4,5
 8008e6c:	2089c83a 	sub	r4,r4,r2
 8008e70:	814a983a 	sll	r5,r16,r5
 8008e74:	8108d83a 	srl	r4,r16,r4
 8008e78:	2820c03a 	cmpne	r16,r5,zero
 8008e7c:	2408b03a 	or	r4,r4,r16
 8008e80:	003fe106 	br	8008e08 <__alt_data_end+0xfc008e08>

08008e84 <__adddf3>:
 8008e84:	02c00434 	movhi	r11,16
 8008e88:	5affffc4 	addi	r11,r11,-1
 8008e8c:	2806d7fa 	srli	r3,r5,31
 8008e90:	2ad4703a 	and	r10,r5,r11
 8008e94:	3ad2703a 	and	r9,r7,r11
 8008e98:	3804d53a 	srli	r2,r7,20
 8008e9c:	3018d77a 	srli	r12,r6,29
 8008ea0:	280ad53a 	srli	r5,r5,20
 8008ea4:	501490fa 	slli	r10,r10,3
 8008ea8:	2010d77a 	srli	r8,r4,29
 8008eac:	481290fa 	slli	r9,r9,3
 8008eb0:	380ed7fa 	srli	r7,r7,31
 8008eb4:	defffb04 	addi	sp,sp,-20
 8008eb8:	dc800215 	stw	r18,8(sp)
 8008ebc:	dc400115 	stw	r17,4(sp)
 8008ec0:	dc000015 	stw	r16,0(sp)
 8008ec4:	dfc00415 	stw	ra,16(sp)
 8008ec8:	dcc00315 	stw	r19,12(sp)
 8008ecc:	1c803fcc 	andi	r18,r3,255
 8008ed0:	2c01ffcc 	andi	r16,r5,2047
 8008ed4:	5210b03a 	or	r8,r10,r8
 8008ed8:	202290fa 	slli	r17,r4,3
 8008edc:	1081ffcc 	andi	r2,r2,2047
 8008ee0:	4b12b03a 	or	r9,r9,r12
 8008ee4:	300c90fa 	slli	r6,r6,3
 8008ee8:	91c07526 	beq	r18,r7,80090c0 <__adddf3+0x23c>
 8008eec:	8087c83a 	sub	r3,r16,r2
 8008ef0:	00c0ab0e 	bge	zero,r3,80091a0 <__adddf3+0x31c>
 8008ef4:	10002a1e 	bne	r2,zero,8008fa0 <__adddf3+0x11c>
 8008ef8:	4984b03a 	or	r2,r9,r6
 8008efc:	1000961e 	bne	r2,zero,8009158 <__adddf3+0x2d4>
 8008f00:	888001cc 	andi	r2,r17,7
 8008f04:	10000726 	beq	r2,zero,8008f24 <__adddf3+0xa0>
 8008f08:	888003cc 	andi	r2,r17,15
 8008f0c:	00c00104 	movi	r3,4
 8008f10:	10c00426 	beq	r2,r3,8008f24 <__adddf3+0xa0>
 8008f14:	88c7883a 	add	r3,r17,r3
 8008f18:	1c63803a 	cmpltu	r17,r3,r17
 8008f1c:	4451883a 	add	r8,r8,r17
 8008f20:	1823883a 	mov	r17,r3
 8008f24:	4080202c 	andhi	r2,r8,128
 8008f28:	10005926 	beq	r2,zero,8009090 <__adddf3+0x20c>
 8008f2c:	84000044 	addi	r16,r16,1
 8008f30:	0081ffc4 	movi	r2,2047
 8008f34:	8080ba26 	beq	r16,r2,8009220 <__adddf3+0x39c>
 8008f38:	00bfe034 	movhi	r2,65408
 8008f3c:	10bfffc4 	addi	r2,r2,-1
 8008f40:	4090703a 	and	r8,r8,r2
 8008f44:	4004977a 	slli	r2,r8,29
 8008f48:	4010927a 	slli	r8,r8,9
 8008f4c:	8822d0fa 	srli	r17,r17,3
 8008f50:	8401ffcc 	andi	r16,r16,2047
 8008f54:	4010d33a 	srli	r8,r8,12
 8008f58:	9007883a 	mov	r3,r18
 8008f5c:	1444b03a 	or	r2,r2,r17
 8008f60:	8401ffcc 	andi	r16,r16,2047
 8008f64:	8020953a 	slli	r16,r16,20
 8008f68:	18c03fcc 	andi	r3,r3,255
 8008f6c:	01000434 	movhi	r4,16
 8008f70:	213fffc4 	addi	r4,r4,-1
 8008f74:	180697fa 	slli	r3,r3,31
 8008f78:	4110703a 	and	r8,r8,r4
 8008f7c:	4410b03a 	or	r8,r8,r16
 8008f80:	40c6b03a 	or	r3,r8,r3
 8008f84:	dfc00417 	ldw	ra,16(sp)
 8008f88:	dcc00317 	ldw	r19,12(sp)
 8008f8c:	dc800217 	ldw	r18,8(sp)
 8008f90:	dc400117 	ldw	r17,4(sp)
 8008f94:	dc000017 	ldw	r16,0(sp)
 8008f98:	dec00504 	addi	sp,sp,20
 8008f9c:	f800283a 	ret
 8008fa0:	0081ffc4 	movi	r2,2047
 8008fa4:	80bfd626 	beq	r16,r2,8008f00 <__alt_data_end+0xfc008f00>
 8008fa8:	4a402034 	orhi	r9,r9,128
 8008fac:	00800e04 	movi	r2,56
 8008fb0:	10c09f16 	blt	r2,r3,8009230 <__adddf3+0x3ac>
 8008fb4:	008007c4 	movi	r2,31
 8008fb8:	10c0c216 	blt	r2,r3,80092c4 <__adddf3+0x440>
 8008fbc:	00800804 	movi	r2,32
 8008fc0:	10c5c83a 	sub	r2,r2,r3
 8008fc4:	488a983a 	sll	r5,r9,r2
 8008fc8:	30c8d83a 	srl	r4,r6,r3
 8008fcc:	3084983a 	sll	r2,r6,r2
 8008fd0:	48c6d83a 	srl	r3,r9,r3
 8008fd4:	290cb03a 	or	r6,r5,r4
 8008fd8:	1004c03a 	cmpne	r2,r2,zero
 8008fdc:	308cb03a 	or	r6,r6,r2
 8008fe0:	898dc83a 	sub	r6,r17,r6
 8008fe4:	89a3803a 	cmpltu	r17,r17,r6
 8008fe8:	40d1c83a 	sub	r8,r8,r3
 8008fec:	4451c83a 	sub	r8,r8,r17
 8008ff0:	3023883a 	mov	r17,r6
 8008ff4:	4080202c 	andhi	r2,r8,128
 8008ff8:	10002326 	beq	r2,zero,8009088 <__adddf3+0x204>
 8008ffc:	04c02034 	movhi	r19,128
 8009000:	9cffffc4 	addi	r19,r19,-1
 8009004:	44e6703a 	and	r19,r8,r19
 8009008:	98007626 	beq	r19,zero,80091e4 <__adddf3+0x360>
 800900c:	9809883a 	mov	r4,r19
 8009010:	800b6c40 	call	800b6c4 <__clzsi2>
 8009014:	10fffe04 	addi	r3,r2,-8
 8009018:	010007c4 	movi	r4,31
 800901c:	20c07716 	blt	r4,r3,80091fc <__adddf3+0x378>
 8009020:	00800804 	movi	r2,32
 8009024:	10c5c83a 	sub	r2,r2,r3
 8009028:	8884d83a 	srl	r2,r17,r2
 800902c:	98d0983a 	sll	r8,r19,r3
 8009030:	88e2983a 	sll	r17,r17,r3
 8009034:	1204b03a 	or	r2,r2,r8
 8009038:	1c007416 	blt	r3,r16,800920c <__adddf3+0x388>
 800903c:	1c21c83a 	sub	r16,r3,r16
 8009040:	82000044 	addi	r8,r16,1
 8009044:	00c007c4 	movi	r3,31
 8009048:	1a009116 	blt	r3,r8,8009290 <__adddf3+0x40c>
 800904c:	00c00804 	movi	r3,32
 8009050:	1a07c83a 	sub	r3,r3,r8
 8009054:	8a08d83a 	srl	r4,r17,r8
 8009058:	88e2983a 	sll	r17,r17,r3
 800905c:	10c6983a 	sll	r3,r2,r3
 8009060:	1210d83a 	srl	r8,r2,r8
 8009064:	8804c03a 	cmpne	r2,r17,zero
 8009068:	1906b03a 	or	r3,r3,r4
 800906c:	18a2b03a 	or	r17,r3,r2
 8009070:	0021883a 	mov	r16,zero
 8009074:	003fa206 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009078:	1890b03a 	or	r8,r3,r2
 800907c:	40017d26 	beq	r8,zero,8009674 <__adddf3+0x7f0>
 8009080:	1011883a 	mov	r8,r2
 8009084:	1823883a 	mov	r17,r3
 8009088:	888001cc 	andi	r2,r17,7
 800908c:	103f9e1e 	bne	r2,zero,8008f08 <__alt_data_end+0xfc008f08>
 8009090:	4004977a 	slli	r2,r8,29
 8009094:	8822d0fa 	srli	r17,r17,3
 8009098:	4010d0fa 	srli	r8,r8,3
 800909c:	9007883a 	mov	r3,r18
 80090a0:	1444b03a 	or	r2,r2,r17
 80090a4:	0101ffc4 	movi	r4,2047
 80090a8:	81002426 	beq	r16,r4,800913c <__adddf3+0x2b8>
 80090ac:	8120703a 	and	r16,r16,r4
 80090b0:	01000434 	movhi	r4,16
 80090b4:	213fffc4 	addi	r4,r4,-1
 80090b8:	4110703a 	and	r8,r8,r4
 80090bc:	003fa806 	br	8008f60 <__alt_data_end+0xfc008f60>
 80090c0:	8089c83a 	sub	r4,r16,r2
 80090c4:	01005e0e 	bge	zero,r4,8009240 <__adddf3+0x3bc>
 80090c8:	10002b26 	beq	r2,zero,8009178 <__adddf3+0x2f4>
 80090cc:	0081ffc4 	movi	r2,2047
 80090d0:	80bf8b26 	beq	r16,r2,8008f00 <__alt_data_end+0xfc008f00>
 80090d4:	4a402034 	orhi	r9,r9,128
 80090d8:	00800e04 	movi	r2,56
 80090dc:	1100a40e 	bge	r2,r4,8009370 <__adddf3+0x4ec>
 80090e0:	498cb03a 	or	r6,r9,r6
 80090e4:	300ac03a 	cmpne	r5,r6,zero
 80090e8:	0013883a 	mov	r9,zero
 80090ec:	2c4b883a 	add	r5,r5,r17
 80090f0:	2c63803a 	cmpltu	r17,r5,r17
 80090f4:	4a11883a 	add	r8,r9,r8
 80090f8:	8a11883a 	add	r8,r17,r8
 80090fc:	2823883a 	mov	r17,r5
 8009100:	4080202c 	andhi	r2,r8,128
 8009104:	103fe026 	beq	r2,zero,8009088 <__alt_data_end+0xfc009088>
 8009108:	84000044 	addi	r16,r16,1
 800910c:	0081ffc4 	movi	r2,2047
 8009110:	8080d226 	beq	r16,r2,800945c <__adddf3+0x5d8>
 8009114:	00bfe034 	movhi	r2,65408
 8009118:	10bfffc4 	addi	r2,r2,-1
 800911c:	4090703a 	and	r8,r8,r2
 8009120:	880ad07a 	srli	r5,r17,1
 8009124:	400897fa 	slli	r4,r8,31
 8009128:	88c0004c 	andi	r3,r17,1
 800912c:	28e2b03a 	or	r17,r5,r3
 8009130:	4010d07a 	srli	r8,r8,1
 8009134:	2462b03a 	or	r17,r4,r17
 8009138:	003f7106 	br	8008f00 <__alt_data_end+0xfc008f00>
 800913c:	4088b03a 	or	r4,r8,r2
 8009140:	20014526 	beq	r4,zero,8009658 <__adddf3+0x7d4>
 8009144:	01000434 	movhi	r4,16
 8009148:	42000234 	orhi	r8,r8,8
 800914c:	213fffc4 	addi	r4,r4,-1
 8009150:	4110703a 	and	r8,r8,r4
 8009154:	003f8206 	br	8008f60 <__alt_data_end+0xfc008f60>
 8009158:	18ffffc4 	addi	r3,r3,-1
 800915c:	1800491e 	bne	r3,zero,8009284 <__adddf3+0x400>
 8009160:	898bc83a 	sub	r5,r17,r6
 8009164:	8963803a 	cmpltu	r17,r17,r5
 8009168:	4251c83a 	sub	r8,r8,r9
 800916c:	4451c83a 	sub	r8,r8,r17
 8009170:	2823883a 	mov	r17,r5
 8009174:	003f9f06 	br	8008ff4 <__alt_data_end+0xfc008ff4>
 8009178:	4984b03a 	or	r2,r9,r6
 800917c:	103f6026 	beq	r2,zero,8008f00 <__alt_data_end+0xfc008f00>
 8009180:	213fffc4 	addi	r4,r4,-1
 8009184:	2000931e 	bne	r4,zero,80093d4 <__adddf3+0x550>
 8009188:	898d883a 	add	r6,r17,r6
 800918c:	3463803a 	cmpltu	r17,r6,r17
 8009190:	4251883a 	add	r8,r8,r9
 8009194:	8a11883a 	add	r8,r17,r8
 8009198:	3023883a 	mov	r17,r6
 800919c:	003fd806 	br	8009100 <__alt_data_end+0xfc009100>
 80091a0:	1800541e 	bne	r3,zero,80092f4 <__adddf3+0x470>
 80091a4:	80800044 	addi	r2,r16,1
 80091a8:	1081ffcc 	andi	r2,r2,2047
 80091ac:	00c00044 	movi	r3,1
 80091b0:	1880a00e 	bge	r3,r2,8009434 <__adddf3+0x5b0>
 80091b4:	8989c83a 	sub	r4,r17,r6
 80091b8:	8905803a 	cmpltu	r2,r17,r4
 80091bc:	4267c83a 	sub	r19,r8,r9
 80091c0:	98a7c83a 	sub	r19,r19,r2
 80091c4:	9880202c 	andhi	r2,r19,128
 80091c8:	10006326 	beq	r2,zero,8009358 <__adddf3+0x4d4>
 80091cc:	3463c83a 	sub	r17,r6,r17
 80091d0:	4a07c83a 	sub	r3,r9,r8
 80091d4:	344d803a 	cmpltu	r6,r6,r17
 80091d8:	19a7c83a 	sub	r19,r3,r6
 80091dc:	3825883a 	mov	r18,r7
 80091e0:	983f8a1e 	bne	r19,zero,800900c <__alt_data_end+0xfc00900c>
 80091e4:	8809883a 	mov	r4,r17
 80091e8:	800b6c40 	call	800b6c4 <__clzsi2>
 80091ec:	10800804 	addi	r2,r2,32
 80091f0:	10fffe04 	addi	r3,r2,-8
 80091f4:	010007c4 	movi	r4,31
 80091f8:	20ff890e 	bge	r4,r3,8009020 <__alt_data_end+0xfc009020>
 80091fc:	10bff604 	addi	r2,r2,-40
 8009200:	8884983a 	sll	r2,r17,r2
 8009204:	0023883a 	mov	r17,zero
 8009208:	1c3f8c0e 	bge	r3,r16,800903c <__alt_data_end+0xfc00903c>
 800920c:	023fe034 	movhi	r8,65408
 8009210:	423fffc4 	addi	r8,r8,-1
 8009214:	80e1c83a 	sub	r16,r16,r3
 8009218:	1210703a 	and	r8,r2,r8
 800921c:	003f3806 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009220:	9007883a 	mov	r3,r18
 8009224:	0011883a 	mov	r8,zero
 8009228:	0005883a 	mov	r2,zero
 800922c:	003f4c06 	br	8008f60 <__alt_data_end+0xfc008f60>
 8009230:	498cb03a 	or	r6,r9,r6
 8009234:	300cc03a 	cmpne	r6,r6,zero
 8009238:	0007883a 	mov	r3,zero
 800923c:	003f6806 	br	8008fe0 <__alt_data_end+0xfc008fe0>
 8009240:	20009c1e 	bne	r4,zero,80094b4 <__adddf3+0x630>
 8009244:	80800044 	addi	r2,r16,1
 8009248:	1141ffcc 	andi	r5,r2,2047
 800924c:	01000044 	movi	r4,1
 8009250:	2140670e 	bge	r4,r5,80093f0 <__adddf3+0x56c>
 8009254:	0101ffc4 	movi	r4,2047
 8009258:	11007f26 	beq	r2,r4,8009458 <__adddf3+0x5d4>
 800925c:	898d883a 	add	r6,r17,r6
 8009260:	4247883a 	add	r3,r8,r9
 8009264:	3451803a 	cmpltu	r8,r6,r17
 8009268:	40d1883a 	add	r8,r8,r3
 800926c:	402297fa 	slli	r17,r8,31
 8009270:	300cd07a 	srli	r6,r6,1
 8009274:	4010d07a 	srli	r8,r8,1
 8009278:	1021883a 	mov	r16,r2
 800927c:	89a2b03a 	or	r17,r17,r6
 8009280:	003f1f06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009284:	0081ffc4 	movi	r2,2047
 8009288:	80bf481e 	bne	r16,r2,8008fac <__alt_data_end+0xfc008fac>
 800928c:	003f1c06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009290:	843ff844 	addi	r16,r16,-31
 8009294:	01000804 	movi	r4,32
 8009298:	1406d83a 	srl	r3,r2,r16
 800929c:	41005026 	beq	r8,r4,80093e0 <__adddf3+0x55c>
 80092a0:	01001004 	movi	r4,64
 80092a4:	2211c83a 	sub	r8,r4,r8
 80092a8:	1204983a 	sll	r2,r2,r8
 80092ac:	88a2b03a 	or	r17,r17,r2
 80092b0:	8822c03a 	cmpne	r17,r17,zero
 80092b4:	1c62b03a 	or	r17,r3,r17
 80092b8:	0011883a 	mov	r8,zero
 80092bc:	0021883a 	mov	r16,zero
 80092c0:	003f7106 	br	8009088 <__alt_data_end+0xfc009088>
 80092c4:	193ff804 	addi	r4,r3,-32
 80092c8:	00800804 	movi	r2,32
 80092cc:	4908d83a 	srl	r4,r9,r4
 80092d0:	18804526 	beq	r3,r2,80093e8 <__adddf3+0x564>
 80092d4:	00801004 	movi	r2,64
 80092d8:	10c5c83a 	sub	r2,r2,r3
 80092dc:	4886983a 	sll	r3,r9,r2
 80092e0:	198cb03a 	or	r6,r3,r6
 80092e4:	300cc03a 	cmpne	r6,r6,zero
 80092e8:	218cb03a 	or	r6,r4,r6
 80092ec:	0007883a 	mov	r3,zero
 80092f0:	003f3b06 	br	8008fe0 <__alt_data_end+0xfc008fe0>
 80092f4:	80002a26 	beq	r16,zero,80093a0 <__adddf3+0x51c>
 80092f8:	0101ffc4 	movi	r4,2047
 80092fc:	11006826 	beq	r2,r4,80094a0 <__adddf3+0x61c>
 8009300:	00c7c83a 	sub	r3,zero,r3
 8009304:	42002034 	orhi	r8,r8,128
 8009308:	01000e04 	movi	r4,56
 800930c:	20c07c16 	blt	r4,r3,8009500 <__adddf3+0x67c>
 8009310:	010007c4 	movi	r4,31
 8009314:	20c0da16 	blt	r4,r3,8009680 <__adddf3+0x7fc>
 8009318:	01000804 	movi	r4,32
 800931c:	20c9c83a 	sub	r4,r4,r3
 8009320:	4114983a 	sll	r10,r8,r4
 8009324:	88cad83a 	srl	r5,r17,r3
 8009328:	8908983a 	sll	r4,r17,r4
 800932c:	40c6d83a 	srl	r3,r8,r3
 8009330:	5162b03a 	or	r17,r10,r5
 8009334:	2008c03a 	cmpne	r4,r4,zero
 8009338:	8922b03a 	or	r17,r17,r4
 800933c:	3463c83a 	sub	r17,r6,r17
 8009340:	48c7c83a 	sub	r3,r9,r3
 8009344:	344d803a 	cmpltu	r6,r6,r17
 8009348:	1991c83a 	sub	r8,r3,r6
 800934c:	1021883a 	mov	r16,r2
 8009350:	3825883a 	mov	r18,r7
 8009354:	003f2706 	br	8008ff4 <__alt_data_end+0xfc008ff4>
 8009358:	24d0b03a 	or	r8,r4,r19
 800935c:	40001b1e 	bne	r8,zero,80093cc <__adddf3+0x548>
 8009360:	0005883a 	mov	r2,zero
 8009364:	0007883a 	mov	r3,zero
 8009368:	0021883a 	mov	r16,zero
 800936c:	003f4d06 	br	80090a4 <__alt_data_end+0xfc0090a4>
 8009370:	008007c4 	movi	r2,31
 8009374:	11003c16 	blt	r2,r4,8009468 <__adddf3+0x5e4>
 8009378:	00800804 	movi	r2,32
 800937c:	1105c83a 	sub	r2,r2,r4
 8009380:	488e983a 	sll	r7,r9,r2
 8009384:	310ad83a 	srl	r5,r6,r4
 8009388:	3084983a 	sll	r2,r6,r2
 800938c:	4912d83a 	srl	r9,r9,r4
 8009390:	394ab03a 	or	r5,r7,r5
 8009394:	1004c03a 	cmpne	r2,r2,zero
 8009398:	288ab03a 	or	r5,r5,r2
 800939c:	003f5306 	br	80090ec <__alt_data_end+0xfc0090ec>
 80093a0:	4448b03a 	or	r4,r8,r17
 80093a4:	20003e26 	beq	r4,zero,80094a0 <__adddf3+0x61c>
 80093a8:	00c6303a 	nor	r3,zero,r3
 80093ac:	18003a1e 	bne	r3,zero,8009498 <__adddf3+0x614>
 80093b0:	3463c83a 	sub	r17,r6,r17
 80093b4:	4a07c83a 	sub	r3,r9,r8
 80093b8:	344d803a 	cmpltu	r6,r6,r17
 80093bc:	1991c83a 	sub	r8,r3,r6
 80093c0:	1021883a 	mov	r16,r2
 80093c4:	3825883a 	mov	r18,r7
 80093c8:	003f0a06 	br	8008ff4 <__alt_data_end+0xfc008ff4>
 80093cc:	2023883a 	mov	r17,r4
 80093d0:	003f0d06 	br	8009008 <__alt_data_end+0xfc009008>
 80093d4:	0081ffc4 	movi	r2,2047
 80093d8:	80bf3f1e 	bne	r16,r2,80090d8 <__alt_data_end+0xfc0090d8>
 80093dc:	003ec806 	br	8008f00 <__alt_data_end+0xfc008f00>
 80093e0:	0005883a 	mov	r2,zero
 80093e4:	003fb106 	br	80092ac <__alt_data_end+0xfc0092ac>
 80093e8:	0007883a 	mov	r3,zero
 80093ec:	003fbc06 	br	80092e0 <__alt_data_end+0xfc0092e0>
 80093f0:	4444b03a 	or	r2,r8,r17
 80093f4:	8000871e 	bne	r16,zero,8009614 <__adddf3+0x790>
 80093f8:	1000ba26 	beq	r2,zero,80096e4 <__adddf3+0x860>
 80093fc:	4984b03a 	or	r2,r9,r6
 8009400:	103ebf26 	beq	r2,zero,8008f00 <__alt_data_end+0xfc008f00>
 8009404:	8985883a 	add	r2,r17,r6
 8009408:	4247883a 	add	r3,r8,r9
 800940c:	1451803a 	cmpltu	r8,r2,r17
 8009410:	40d1883a 	add	r8,r8,r3
 8009414:	40c0202c 	andhi	r3,r8,128
 8009418:	1023883a 	mov	r17,r2
 800941c:	183f1a26 	beq	r3,zero,8009088 <__alt_data_end+0xfc009088>
 8009420:	00bfe034 	movhi	r2,65408
 8009424:	10bfffc4 	addi	r2,r2,-1
 8009428:	2021883a 	mov	r16,r4
 800942c:	4090703a 	and	r8,r8,r2
 8009430:	003eb306 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009434:	4444b03a 	or	r2,r8,r17
 8009438:	8000291e 	bne	r16,zero,80094e0 <__adddf3+0x65c>
 800943c:	10004b1e 	bne	r2,zero,800956c <__adddf3+0x6e8>
 8009440:	4990b03a 	or	r8,r9,r6
 8009444:	40008b26 	beq	r8,zero,8009674 <__adddf3+0x7f0>
 8009448:	4811883a 	mov	r8,r9
 800944c:	3023883a 	mov	r17,r6
 8009450:	3825883a 	mov	r18,r7
 8009454:	003eaa06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009458:	1021883a 	mov	r16,r2
 800945c:	0011883a 	mov	r8,zero
 8009460:	0005883a 	mov	r2,zero
 8009464:	003f0f06 	br	80090a4 <__alt_data_end+0xfc0090a4>
 8009468:	217ff804 	addi	r5,r4,-32
 800946c:	00800804 	movi	r2,32
 8009470:	494ad83a 	srl	r5,r9,r5
 8009474:	20807d26 	beq	r4,r2,800966c <__adddf3+0x7e8>
 8009478:	00801004 	movi	r2,64
 800947c:	1109c83a 	sub	r4,r2,r4
 8009480:	4912983a 	sll	r9,r9,r4
 8009484:	498cb03a 	or	r6,r9,r6
 8009488:	300cc03a 	cmpne	r6,r6,zero
 800948c:	298ab03a 	or	r5,r5,r6
 8009490:	0013883a 	mov	r9,zero
 8009494:	003f1506 	br	80090ec <__alt_data_end+0xfc0090ec>
 8009498:	0101ffc4 	movi	r4,2047
 800949c:	113f9a1e 	bne	r2,r4,8009308 <__alt_data_end+0xfc009308>
 80094a0:	4811883a 	mov	r8,r9
 80094a4:	3023883a 	mov	r17,r6
 80094a8:	1021883a 	mov	r16,r2
 80094ac:	3825883a 	mov	r18,r7
 80094b0:	003e9306 	br	8008f00 <__alt_data_end+0xfc008f00>
 80094b4:	8000161e 	bne	r16,zero,8009510 <__adddf3+0x68c>
 80094b8:	444ab03a 	or	r5,r8,r17
 80094bc:	28005126 	beq	r5,zero,8009604 <__adddf3+0x780>
 80094c0:	0108303a 	nor	r4,zero,r4
 80094c4:	20004d1e 	bne	r4,zero,80095fc <__adddf3+0x778>
 80094c8:	89a3883a 	add	r17,r17,r6
 80094cc:	4253883a 	add	r9,r8,r9
 80094d0:	898d803a 	cmpltu	r6,r17,r6
 80094d4:	3251883a 	add	r8,r6,r9
 80094d8:	1021883a 	mov	r16,r2
 80094dc:	003f0806 	br	8009100 <__alt_data_end+0xfc009100>
 80094e0:	1000301e 	bne	r2,zero,80095a4 <__adddf3+0x720>
 80094e4:	4984b03a 	or	r2,r9,r6
 80094e8:	10007126 	beq	r2,zero,80096b0 <__adddf3+0x82c>
 80094ec:	4811883a 	mov	r8,r9
 80094f0:	3023883a 	mov	r17,r6
 80094f4:	3825883a 	mov	r18,r7
 80094f8:	0401ffc4 	movi	r16,2047
 80094fc:	003e8006 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009500:	4462b03a 	or	r17,r8,r17
 8009504:	8822c03a 	cmpne	r17,r17,zero
 8009508:	0007883a 	mov	r3,zero
 800950c:	003f8b06 	br	800933c <__alt_data_end+0xfc00933c>
 8009510:	0141ffc4 	movi	r5,2047
 8009514:	11403b26 	beq	r2,r5,8009604 <__adddf3+0x780>
 8009518:	0109c83a 	sub	r4,zero,r4
 800951c:	42002034 	orhi	r8,r8,128
 8009520:	01400e04 	movi	r5,56
 8009524:	29006716 	blt	r5,r4,80096c4 <__adddf3+0x840>
 8009528:	014007c4 	movi	r5,31
 800952c:	29007016 	blt	r5,r4,80096f0 <__adddf3+0x86c>
 8009530:	01400804 	movi	r5,32
 8009534:	290bc83a 	sub	r5,r5,r4
 8009538:	4154983a 	sll	r10,r8,r5
 800953c:	890ed83a 	srl	r7,r17,r4
 8009540:	894a983a 	sll	r5,r17,r5
 8009544:	4108d83a 	srl	r4,r8,r4
 8009548:	51e2b03a 	or	r17,r10,r7
 800954c:	280ac03a 	cmpne	r5,r5,zero
 8009550:	8962b03a 	or	r17,r17,r5
 8009554:	89a3883a 	add	r17,r17,r6
 8009558:	2253883a 	add	r9,r4,r9
 800955c:	898d803a 	cmpltu	r6,r17,r6
 8009560:	3251883a 	add	r8,r6,r9
 8009564:	1021883a 	mov	r16,r2
 8009568:	003ee506 	br	8009100 <__alt_data_end+0xfc009100>
 800956c:	4984b03a 	or	r2,r9,r6
 8009570:	103e6326 	beq	r2,zero,8008f00 <__alt_data_end+0xfc008f00>
 8009574:	8987c83a 	sub	r3,r17,r6
 8009578:	88c9803a 	cmpltu	r4,r17,r3
 800957c:	4245c83a 	sub	r2,r8,r9
 8009580:	1105c83a 	sub	r2,r2,r4
 8009584:	1100202c 	andhi	r4,r2,128
 8009588:	203ebb26 	beq	r4,zero,8009078 <__alt_data_end+0xfc009078>
 800958c:	3463c83a 	sub	r17,r6,r17
 8009590:	4a07c83a 	sub	r3,r9,r8
 8009594:	344d803a 	cmpltu	r6,r6,r17
 8009598:	1991c83a 	sub	r8,r3,r6
 800959c:	3825883a 	mov	r18,r7
 80095a0:	003e5706 	br	8008f00 <__alt_data_end+0xfc008f00>
 80095a4:	4984b03a 	or	r2,r9,r6
 80095a8:	10002e26 	beq	r2,zero,8009664 <__adddf3+0x7e0>
 80095ac:	4004d0fa 	srli	r2,r8,3
 80095b0:	8822d0fa 	srli	r17,r17,3
 80095b4:	4010977a 	slli	r8,r8,29
 80095b8:	10c0022c 	andhi	r3,r2,8
 80095bc:	4462b03a 	or	r17,r8,r17
 80095c0:	18000826 	beq	r3,zero,80095e4 <__adddf3+0x760>
 80095c4:	4808d0fa 	srli	r4,r9,3
 80095c8:	20c0022c 	andhi	r3,r4,8
 80095cc:	1800051e 	bne	r3,zero,80095e4 <__adddf3+0x760>
 80095d0:	300cd0fa 	srli	r6,r6,3
 80095d4:	4806977a 	slli	r3,r9,29
 80095d8:	2005883a 	mov	r2,r4
 80095dc:	3825883a 	mov	r18,r7
 80095e0:	19a2b03a 	or	r17,r3,r6
 80095e4:	8810d77a 	srli	r8,r17,29
 80095e8:	100490fa 	slli	r2,r2,3
 80095ec:	882290fa 	slli	r17,r17,3
 80095f0:	0401ffc4 	movi	r16,2047
 80095f4:	4090b03a 	or	r8,r8,r2
 80095f8:	003e4106 	br	8008f00 <__alt_data_end+0xfc008f00>
 80095fc:	0141ffc4 	movi	r5,2047
 8009600:	117fc71e 	bne	r2,r5,8009520 <__alt_data_end+0xfc009520>
 8009604:	4811883a 	mov	r8,r9
 8009608:	3023883a 	mov	r17,r6
 800960c:	1021883a 	mov	r16,r2
 8009610:	003e3b06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009614:	10002f26 	beq	r2,zero,80096d4 <__adddf3+0x850>
 8009618:	4984b03a 	or	r2,r9,r6
 800961c:	10001126 	beq	r2,zero,8009664 <__adddf3+0x7e0>
 8009620:	4004d0fa 	srli	r2,r8,3
 8009624:	8822d0fa 	srli	r17,r17,3
 8009628:	4010977a 	slli	r8,r8,29
 800962c:	10c0022c 	andhi	r3,r2,8
 8009630:	4462b03a 	or	r17,r8,r17
 8009634:	183feb26 	beq	r3,zero,80095e4 <__alt_data_end+0xfc0095e4>
 8009638:	4808d0fa 	srli	r4,r9,3
 800963c:	20c0022c 	andhi	r3,r4,8
 8009640:	183fe81e 	bne	r3,zero,80095e4 <__alt_data_end+0xfc0095e4>
 8009644:	300cd0fa 	srli	r6,r6,3
 8009648:	4806977a 	slli	r3,r9,29
 800964c:	2005883a 	mov	r2,r4
 8009650:	19a2b03a 	or	r17,r3,r6
 8009654:	003fe306 	br	80095e4 <__alt_data_end+0xfc0095e4>
 8009658:	0011883a 	mov	r8,zero
 800965c:	0005883a 	mov	r2,zero
 8009660:	003e3f06 	br	8008f60 <__alt_data_end+0xfc008f60>
 8009664:	0401ffc4 	movi	r16,2047
 8009668:	003e2506 	br	8008f00 <__alt_data_end+0xfc008f00>
 800966c:	0013883a 	mov	r9,zero
 8009670:	003f8406 	br	8009484 <__alt_data_end+0xfc009484>
 8009674:	0005883a 	mov	r2,zero
 8009678:	0007883a 	mov	r3,zero
 800967c:	003e8906 	br	80090a4 <__alt_data_end+0xfc0090a4>
 8009680:	197ff804 	addi	r5,r3,-32
 8009684:	01000804 	movi	r4,32
 8009688:	414ad83a 	srl	r5,r8,r5
 800968c:	19002426 	beq	r3,r4,8009720 <__adddf3+0x89c>
 8009690:	01001004 	movi	r4,64
 8009694:	20c7c83a 	sub	r3,r4,r3
 8009698:	40c6983a 	sll	r3,r8,r3
 800969c:	1c46b03a 	or	r3,r3,r17
 80096a0:	1806c03a 	cmpne	r3,r3,zero
 80096a4:	28e2b03a 	or	r17,r5,r3
 80096a8:	0007883a 	mov	r3,zero
 80096ac:	003f2306 	br	800933c <__alt_data_end+0xfc00933c>
 80096b0:	0007883a 	mov	r3,zero
 80096b4:	5811883a 	mov	r8,r11
 80096b8:	00bfffc4 	movi	r2,-1
 80096bc:	0401ffc4 	movi	r16,2047
 80096c0:	003e7806 	br	80090a4 <__alt_data_end+0xfc0090a4>
 80096c4:	4462b03a 	or	r17,r8,r17
 80096c8:	8822c03a 	cmpne	r17,r17,zero
 80096cc:	0009883a 	mov	r4,zero
 80096d0:	003fa006 	br	8009554 <__alt_data_end+0xfc009554>
 80096d4:	4811883a 	mov	r8,r9
 80096d8:	3023883a 	mov	r17,r6
 80096dc:	0401ffc4 	movi	r16,2047
 80096e0:	003e0706 	br	8008f00 <__alt_data_end+0xfc008f00>
 80096e4:	4811883a 	mov	r8,r9
 80096e8:	3023883a 	mov	r17,r6
 80096ec:	003e0406 	br	8008f00 <__alt_data_end+0xfc008f00>
 80096f0:	21fff804 	addi	r7,r4,-32
 80096f4:	01400804 	movi	r5,32
 80096f8:	41ced83a 	srl	r7,r8,r7
 80096fc:	21400a26 	beq	r4,r5,8009728 <__adddf3+0x8a4>
 8009700:	01401004 	movi	r5,64
 8009704:	2909c83a 	sub	r4,r5,r4
 8009708:	4108983a 	sll	r4,r8,r4
 800970c:	2448b03a 	or	r4,r4,r17
 8009710:	2008c03a 	cmpne	r4,r4,zero
 8009714:	3922b03a 	or	r17,r7,r4
 8009718:	0009883a 	mov	r4,zero
 800971c:	003f8d06 	br	8009554 <__alt_data_end+0xfc009554>
 8009720:	0007883a 	mov	r3,zero
 8009724:	003fdd06 	br	800969c <__alt_data_end+0xfc00969c>
 8009728:	0009883a 	mov	r4,zero
 800972c:	003ff706 	br	800970c <__alt_data_end+0xfc00970c>

08009730 <__divdf3>:
 8009730:	defff004 	addi	sp,sp,-64
 8009734:	dc800815 	stw	r18,32(sp)
 8009738:	2824d53a 	srli	r18,r5,20
 800973c:	dd800c15 	stw	r22,48(sp)
 8009740:	282cd7fa 	srli	r22,r5,31
 8009744:	dc000615 	stw	r16,24(sp)
 8009748:	04000434 	movhi	r16,16
 800974c:	843fffc4 	addi	r16,r16,-1
 8009750:	dfc00f15 	stw	ra,60(sp)
 8009754:	df000e15 	stw	fp,56(sp)
 8009758:	ddc00d15 	stw	r23,52(sp)
 800975c:	dd400b15 	stw	r21,44(sp)
 8009760:	dd000a15 	stw	r20,40(sp)
 8009764:	dcc00915 	stw	r19,36(sp)
 8009768:	dc400715 	stw	r17,28(sp)
 800976c:	9481ffcc 	andi	r18,r18,2047
 8009770:	2c20703a 	and	r16,r5,r16
 8009774:	b2003fcc 	andi	r8,r22,255
 8009778:	90006126 	beq	r18,zero,8009900 <__divdf3+0x1d0>
 800977c:	0081ffc4 	movi	r2,2047
 8009780:	202b883a 	mov	r21,r4
 8009784:	90803726 	beq	r18,r2,8009864 <__divdf3+0x134>
 8009788:	80800434 	orhi	r2,r16,16
 800978c:	100490fa 	slli	r2,r2,3
 8009790:	2020d77a 	srli	r16,r4,29
 8009794:	202a90fa 	slli	r21,r4,3
 8009798:	94bf0044 	addi	r18,r18,-1023
 800979c:	80a0b03a 	or	r16,r16,r2
 80097a0:	0013883a 	mov	r9,zero
 80097a4:	000b883a 	mov	r5,zero
 80097a8:	3806d53a 	srli	r3,r7,20
 80097ac:	382ed7fa 	srli	r23,r7,31
 80097b0:	04400434 	movhi	r17,16
 80097b4:	8c7fffc4 	addi	r17,r17,-1
 80097b8:	18c1ffcc 	andi	r3,r3,2047
 80097bc:	3029883a 	mov	r20,r6
 80097c0:	3c62703a 	and	r17,r7,r17
 80097c4:	bf003fcc 	andi	fp,r23,255
 80097c8:	18006e26 	beq	r3,zero,8009984 <__divdf3+0x254>
 80097cc:	0081ffc4 	movi	r2,2047
 80097d0:	18806626 	beq	r3,r2,800996c <__divdf3+0x23c>
 80097d4:	88800434 	orhi	r2,r17,16
 80097d8:	100490fa 	slli	r2,r2,3
 80097dc:	3022d77a 	srli	r17,r6,29
 80097e0:	302890fa 	slli	r20,r6,3
 80097e4:	18ff0044 	addi	r3,r3,-1023
 80097e8:	88a2b03a 	or	r17,r17,r2
 80097ec:	000f883a 	mov	r7,zero
 80097f0:	b5e6f03a 	xor	r19,r22,r23
 80097f4:	3a4cb03a 	or	r6,r7,r9
 80097f8:	008003c4 	movi	r2,15
 80097fc:	9809883a 	mov	r4,r19
 8009800:	90c7c83a 	sub	r3,r18,r3
 8009804:	9cc03fcc 	andi	r19,r19,255
 8009808:	11809636 	bltu	r2,r6,8009a64 <__divdf3+0x334>
 800980c:	300c90ba 	slli	r6,r6,2
 8009810:	00820074 	movhi	r2,2049
 8009814:	10a60904 	addi	r2,r2,-26588
 8009818:	308d883a 	add	r6,r6,r2
 800981c:	30800017 	ldw	r2,0(r6)
 8009820:	1000683a 	jmp	r2
 8009824:	08009a64 	muli	zero,at,617
 8009828:	0800989c 	xori	zero,at,610
 800982c:	08009a54 	ori	zero,at,617
 8009830:	08009890 	cmplti	zero,at,610
 8009834:	08009a54 	ori	zero,at,617
 8009838:	08009a28 	cmpgeui	zero,at,616
 800983c:	08009a54 	ori	zero,at,617
 8009840:	08009890 	cmplti	zero,at,610
 8009844:	0800989c 	xori	zero,at,610
 8009848:	0800989c 	xori	zero,at,610
 800984c:	08009a28 	cmpgeui	zero,at,616
 8009850:	08009890 	cmplti	zero,at,610
 8009854:	08009880 	call	800988 <__alt_mem_onchip_memory2_0+0x800988>
 8009858:	08009880 	call	800988 <__alt_mem_onchip_memory2_0+0x800988>
 800985c:	08009880 	call	800988 <__alt_mem_onchip_memory2_0+0x800988>
 8009860:	08009dec 	andhi	zero,at,631
 8009864:	2404b03a 	or	r2,r4,r16
 8009868:	10006c1e 	bne	r2,zero,8009a1c <__divdf3+0x2ec>
 800986c:	02400204 	movi	r9,8
 8009870:	0021883a 	mov	r16,zero
 8009874:	002b883a 	mov	r21,zero
 8009878:	01400084 	movi	r5,2
 800987c:	003fca06 	br	80097a8 <__alt_data_end+0xfc0097a8>
 8009880:	8023883a 	mov	r17,r16
 8009884:	a829883a 	mov	r20,r21
 8009888:	4039883a 	mov	fp,r8
 800988c:	280f883a 	mov	r7,r5
 8009890:	00800084 	movi	r2,2
 8009894:	3881601e 	bne	r7,r2,8009e18 <__divdf3+0x6e8>
 8009898:	e027883a 	mov	r19,fp
 800989c:	9900004c 	andi	r4,r19,1
 80098a0:	0081ffc4 	movi	r2,2047
 80098a4:	0021883a 	mov	r16,zero
 80098a8:	002b883a 	mov	r21,zero
 80098ac:	1004953a 	slli	r2,r2,20
 80098b0:	20c03fcc 	andi	r3,r4,255
 80098b4:	01400434 	movhi	r5,16
 80098b8:	297fffc4 	addi	r5,r5,-1
 80098bc:	180697fa 	slli	r3,r3,31
 80098c0:	8160703a 	and	r16,r16,r5
 80098c4:	80a0b03a 	or	r16,r16,r2
 80098c8:	80c6b03a 	or	r3,r16,r3
 80098cc:	a805883a 	mov	r2,r21
 80098d0:	dfc00f17 	ldw	ra,60(sp)
 80098d4:	df000e17 	ldw	fp,56(sp)
 80098d8:	ddc00d17 	ldw	r23,52(sp)
 80098dc:	dd800c17 	ldw	r22,48(sp)
 80098e0:	dd400b17 	ldw	r21,44(sp)
 80098e4:	dd000a17 	ldw	r20,40(sp)
 80098e8:	dcc00917 	ldw	r19,36(sp)
 80098ec:	dc800817 	ldw	r18,32(sp)
 80098f0:	dc400717 	ldw	r17,28(sp)
 80098f4:	dc000617 	ldw	r16,24(sp)
 80098f8:	dec01004 	addi	sp,sp,64
 80098fc:	f800283a 	ret
 8009900:	2404b03a 	or	r2,r4,r16
 8009904:	2023883a 	mov	r17,r4
 8009908:	10003f26 	beq	r2,zero,8009a08 <__divdf3+0x2d8>
 800990c:	80015e26 	beq	r16,zero,8009e88 <__divdf3+0x758>
 8009910:	8009883a 	mov	r4,r16
 8009914:	d9800215 	stw	r6,8(sp)
 8009918:	d9c00515 	stw	r7,20(sp)
 800991c:	da000415 	stw	r8,16(sp)
 8009920:	800b6c40 	call	800b6c4 <__clzsi2>
 8009924:	d9800217 	ldw	r6,8(sp)
 8009928:	d9c00517 	ldw	r7,20(sp)
 800992c:	da000417 	ldw	r8,16(sp)
 8009930:	113ffd44 	addi	r4,r2,-11
 8009934:	00c00704 	movi	r3,28
 8009938:	19014f16 	blt	r3,r4,8009e78 <__divdf3+0x748>
 800993c:	00c00744 	movi	r3,29
 8009940:	157ffe04 	addi	r21,r2,-8
 8009944:	1907c83a 	sub	r3,r3,r4
 8009948:	8560983a 	sll	r16,r16,r21
 800994c:	88c6d83a 	srl	r3,r17,r3
 8009950:	8d6a983a 	sll	r21,r17,r21
 8009954:	1c20b03a 	or	r16,r3,r16
 8009958:	1080fcc4 	addi	r2,r2,1011
 800995c:	00a5c83a 	sub	r18,zero,r2
 8009960:	0013883a 	mov	r9,zero
 8009964:	000b883a 	mov	r5,zero
 8009968:	003f8f06 	br	80097a8 <__alt_data_end+0xfc0097a8>
 800996c:	3444b03a 	or	r2,r6,r17
 8009970:	1000231e 	bne	r2,zero,8009a00 <__divdf3+0x2d0>
 8009974:	0023883a 	mov	r17,zero
 8009978:	0029883a 	mov	r20,zero
 800997c:	01c00084 	movi	r7,2
 8009980:	003f9b06 	br	80097f0 <__alt_data_end+0xfc0097f0>
 8009984:	3444b03a 	or	r2,r6,r17
 8009988:	10001926 	beq	r2,zero,80099f0 <__divdf3+0x2c0>
 800998c:	88014b26 	beq	r17,zero,8009ebc <__divdf3+0x78c>
 8009990:	8809883a 	mov	r4,r17
 8009994:	d9400115 	stw	r5,4(sp)
 8009998:	d9800215 	stw	r6,8(sp)
 800999c:	da000415 	stw	r8,16(sp)
 80099a0:	da400315 	stw	r9,12(sp)
 80099a4:	800b6c40 	call	800b6c4 <__clzsi2>
 80099a8:	d9400117 	ldw	r5,4(sp)
 80099ac:	d9800217 	ldw	r6,8(sp)
 80099b0:	da000417 	ldw	r8,16(sp)
 80099b4:	da400317 	ldw	r9,12(sp)
 80099b8:	113ffd44 	addi	r4,r2,-11
 80099bc:	00c00704 	movi	r3,28
 80099c0:	19013a16 	blt	r3,r4,8009eac <__divdf3+0x77c>
 80099c4:	00c00744 	movi	r3,29
 80099c8:	153ffe04 	addi	r20,r2,-8
 80099cc:	1907c83a 	sub	r3,r3,r4
 80099d0:	8d22983a 	sll	r17,r17,r20
 80099d4:	30c6d83a 	srl	r3,r6,r3
 80099d8:	3528983a 	sll	r20,r6,r20
 80099dc:	1c62b03a 	or	r17,r3,r17
 80099e0:	1080fcc4 	addi	r2,r2,1011
 80099e4:	0087c83a 	sub	r3,zero,r2
 80099e8:	000f883a 	mov	r7,zero
 80099ec:	003f8006 	br	80097f0 <__alt_data_end+0xfc0097f0>
 80099f0:	0023883a 	mov	r17,zero
 80099f4:	0029883a 	mov	r20,zero
 80099f8:	01c00044 	movi	r7,1
 80099fc:	003f7c06 	br	80097f0 <__alt_data_end+0xfc0097f0>
 8009a00:	01c000c4 	movi	r7,3
 8009a04:	003f7a06 	br	80097f0 <__alt_data_end+0xfc0097f0>
 8009a08:	02400104 	movi	r9,4
 8009a0c:	0021883a 	mov	r16,zero
 8009a10:	002b883a 	mov	r21,zero
 8009a14:	01400044 	movi	r5,1
 8009a18:	003f6306 	br	80097a8 <__alt_data_end+0xfc0097a8>
 8009a1c:	02400304 	movi	r9,12
 8009a20:	014000c4 	movi	r5,3
 8009a24:	003f6006 	br	80097a8 <__alt_data_end+0xfc0097a8>
 8009a28:	04000434 	movhi	r16,16
 8009a2c:	0009883a 	mov	r4,zero
 8009a30:	843fffc4 	addi	r16,r16,-1
 8009a34:	057fffc4 	movi	r21,-1
 8009a38:	0081ffc4 	movi	r2,2047
 8009a3c:	003f9b06 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009a40:	00c00044 	movi	r3,1
 8009a44:	1887c83a 	sub	r3,r3,r2
 8009a48:	01000e04 	movi	r4,56
 8009a4c:	20c1530e 	bge	r4,r3,8009f9c <__divdf3+0x86c>
 8009a50:	9900004c 	andi	r4,r19,1
 8009a54:	0005883a 	mov	r2,zero
 8009a58:	0021883a 	mov	r16,zero
 8009a5c:	002b883a 	mov	r21,zero
 8009a60:	003f9206 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009a64:	8c012e36 	bltu	r17,r16,8009f20 <__divdf3+0x7f0>
 8009a68:	84412c26 	beq	r16,r17,8009f1c <__divdf3+0x7ec>
 8009a6c:	a82f883a 	mov	r23,r21
 8009a70:	18ffffc4 	addi	r3,r3,-1
 8009a74:	002b883a 	mov	r21,zero
 8009a78:	a004d63a 	srli	r2,r20,24
 8009a7c:	8822923a 	slli	r17,r17,8
 8009a80:	a028923a 	slli	r20,r20,8
 8009a84:	8009883a 	mov	r4,r16
 8009a88:	88acb03a 	or	r22,r17,r2
 8009a8c:	dd000015 	stw	r20,0(sp)
 8009a90:	b028d43a 	srli	r20,r22,16
 8009a94:	d8c00215 	stw	r3,8(sp)
 8009a98:	b4bfffcc 	andi	r18,r22,65535
 8009a9c:	a00b883a 	mov	r5,r20
 8009aa0:	80082700 	call	8008270 <__udivsi3>
 8009aa4:	100b883a 	mov	r5,r2
 8009aa8:	9009883a 	mov	r4,r18
 8009aac:	1023883a 	mov	r17,r2
 8009ab0:	800832c0 	call	800832c <__mulsi3>
 8009ab4:	8009883a 	mov	r4,r16
 8009ab8:	a00b883a 	mov	r5,r20
 8009abc:	1039883a 	mov	fp,r2
 8009ac0:	80082d40 	call	80082d4 <__umodsi3>
 8009ac4:	1004943a 	slli	r2,r2,16
 8009ac8:	b808d43a 	srli	r4,r23,16
 8009acc:	d8c00217 	ldw	r3,8(sp)
 8009ad0:	2084b03a 	or	r2,r4,r2
 8009ad4:	1700062e 	bgeu	r2,fp,8009af0 <__divdf3+0x3c0>
 8009ad8:	1585883a 	add	r2,r2,r22
 8009adc:	893fffc4 	addi	r4,r17,-1
 8009ae0:	15811d36 	bltu	r2,r22,8009f58 <__divdf3+0x828>
 8009ae4:	17011c2e 	bgeu	r2,fp,8009f58 <__divdf3+0x828>
 8009ae8:	8c7fff84 	addi	r17,r17,-2
 8009aec:	1585883a 	add	r2,r2,r22
 8009af0:	1739c83a 	sub	fp,r2,fp
 8009af4:	a00b883a 	mov	r5,r20
 8009af8:	e009883a 	mov	r4,fp
 8009afc:	d8c00215 	stw	r3,8(sp)
 8009b00:	80082700 	call	8008270 <__udivsi3>
 8009b04:	100b883a 	mov	r5,r2
 8009b08:	9009883a 	mov	r4,r18
 8009b0c:	1021883a 	mov	r16,r2
 8009b10:	800832c0 	call	800832c <__mulsi3>
 8009b14:	a00b883a 	mov	r5,r20
 8009b18:	e009883a 	mov	r4,fp
 8009b1c:	d8800415 	stw	r2,16(sp)
 8009b20:	80082d40 	call	80082d4 <__umodsi3>
 8009b24:	1004943a 	slli	r2,r2,16
 8009b28:	da000417 	ldw	r8,16(sp)
 8009b2c:	bdffffcc 	andi	r23,r23,65535
 8009b30:	b884b03a 	or	r2,r23,r2
 8009b34:	d8c00217 	ldw	r3,8(sp)
 8009b38:	1200062e 	bgeu	r2,r8,8009b54 <__divdf3+0x424>
 8009b3c:	1585883a 	add	r2,r2,r22
 8009b40:	813fffc4 	addi	r4,r16,-1
 8009b44:	15810236 	bltu	r2,r22,8009f50 <__divdf3+0x820>
 8009b48:	1201012e 	bgeu	r2,r8,8009f50 <__divdf3+0x820>
 8009b4c:	843fff84 	addi	r16,r16,-2
 8009b50:	1585883a 	add	r2,r2,r22
 8009b54:	8822943a 	slli	r17,r17,16
 8009b58:	d9800017 	ldw	r6,0(sp)
 8009b5c:	1211c83a 	sub	r8,r2,r8
 8009b60:	8c22b03a 	or	r17,r17,r16
 8009b64:	373fffcc 	andi	fp,r6,65535
 8009b68:	8abfffcc 	andi	r10,r17,65535
 8009b6c:	8820d43a 	srli	r16,r17,16
 8009b70:	5009883a 	mov	r4,r10
 8009b74:	e00b883a 	mov	r5,fp
 8009b78:	302ed43a 	srli	r23,r6,16
 8009b7c:	d8c00215 	stw	r3,8(sp)
 8009b80:	da000415 	stw	r8,16(sp)
 8009b84:	da800115 	stw	r10,4(sp)
 8009b88:	800832c0 	call	800832c <__mulsi3>
 8009b8c:	800b883a 	mov	r5,r16
 8009b90:	e009883a 	mov	r4,fp
 8009b94:	d8800515 	stw	r2,20(sp)
 8009b98:	800832c0 	call	800832c <__mulsi3>
 8009b9c:	8009883a 	mov	r4,r16
 8009ba0:	b80b883a 	mov	r5,r23
 8009ba4:	d8800315 	stw	r2,12(sp)
 8009ba8:	800832c0 	call	800832c <__mulsi3>
 8009bac:	da800117 	ldw	r10,4(sp)
 8009bb0:	b80b883a 	mov	r5,r23
 8009bb4:	1021883a 	mov	r16,r2
 8009bb8:	5009883a 	mov	r4,r10
 8009bbc:	800832c0 	call	800832c <__mulsi3>
 8009bc0:	d9c00517 	ldw	r7,20(sp)
 8009bc4:	da400317 	ldw	r9,12(sp)
 8009bc8:	d8c00217 	ldw	r3,8(sp)
 8009bcc:	3808d43a 	srli	r4,r7,16
 8009bd0:	1245883a 	add	r2,r2,r9
 8009bd4:	da000417 	ldw	r8,16(sp)
 8009bd8:	2085883a 	add	r2,r4,r2
 8009bdc:	1240022e 	bgeu	r2,r9,8009be8 <__divdf3+0x4b8>
 8009be0:	01000074 	movhi	r4,1
 8009be4:	8121883a 	add	r16,r16,r4
 8009be8:	1008d43a 	srli	r4,r2,16
 8009bec:	1004943a 	slli	r2,r2,16
 8009bf0:	39ffffcc 	andi	r7,r7,65535
 8009bf4:	2409883a 	add	r4,r4,r16
 8009bf8:	11c5883a 	add	r2,r2,r7
 8009bfc:	4100bb36 	bltu	r8,r4,8009eec <__divdf3+0x7bc>
 8009c00:	4100d726 	beq	r8,r4,8009f60 <__divdf3+0x830>
 8009c04:	4109c83a 	sub	r4,r8,r4
 8009c08:	a8a1c83a 	sub	r16,r21,r2
 8009c0c:	ac2b803a 	cmpltu	r21,r21,r16
 8009c10:	256bc83a 	sub	r21,r4,r21
 8009c14:	b540d926 	beq	r22,r21,8009f7c <__divdf3+0x84c>
 8009c18:	a00b883a 	mov	r5,r20
 8009c1c:	a809883a 	mov	r4,r21
 8009c20:	d8c00215 	stw	r3,8(sp)
 8009c24:	80082700 	call	8008270 <__udivsi3>
 8009c28:	100b883a 	mov	r5,r2
 8009c2c:	9009883a 	mov	r4,r18
 8009c30:	d8800515 	stw	r2,20(sp)
 8009c34:	800832c0 	call	800832c <__mulsi3>
 8009c38:	a809883a 	mov	r4,r21
 8009c3c:	a00b883a 	mov	r5,r20
 8009c40:	d8800415 	stw	r2,16(sp)
 8009c44:	80082d40 	call	80082d4 <__umodsi3>
 8009c48:	1004943a 	slli	r2,r2,16
 8009c4c:	8008d43a 	srli	r4,r16,16
 8009c50:	da000417 	ldw	r8,16(sp)
 8009c54:	d8c00217 	ldw	r3,8(sp)
 8009c58:	2084b03a 	or	r2,r4,r2
 8009c5c:	d9c00517 	ldw	r7,20(sp)
 8009c60:	1200062e 	bgeu	r2,r8,8009c7c <__divdf3+0x54c>
 8009c64:	1585883a 	add	r2,r2,r22
 8009c68:	393fffc4 	addi	r4,r7,-1
 8009c6c:	1580c536 	bltu	r2,r22,8009f84 <__divdf3+0x854>
 8009c70:	1200c42e 	bgeu	r2,r8,8009f84 <__divdf3+0x854>
 8009c74:	39ffff84 	addi	r7,r7,-2
 8009c78:	1585883a 	add	r2,r2,r22
 8009c7c:	122bc83a 	sub	r21,r2,r8
 8009c80:	a00b883a 	mov	r5,r20
 8009c84:	a809883a 	mov	r4,r21
 8009c88:	d8c00215 	stw	r3,8(sp)
 8009c8c:	d9c00515 	stw	r7,20(sp)
 8009c90:	80082700 	call	8008270 <__udivsi3>
 8009c94:	9009883a 	mov	r4,r18
 8009c98:	100b883a 	mov	r5,r2
 8009c9c:	d8800415 	stw	r2,16(sp)
 8009ca0:	800832c0 	call	800832c <__mulsi3>
 8009ca4:	a809883a 	mov	r4,r21
 8009ca8:	a00b883a 	mov	r5,r20
 8009cac:	1025883a 	mov	r18,r2
 8009cb0:	80082d40 	call	80082d4 <__umodsi3>
 8009cb4:	1004943a 	slli	r2,r2,16
 8009cb8:	813fffcc 	andi	r4,r16,65535
 8009cbc:	d8c00217 	ldw	r3,8(sp)
 8009cc0:	20a0b03a 	or	r16,r4,r2
 8009cc4:	d9c00517 	ldw	r7,20(sp)
 8009cc8:	da000417 	ldw	r8,16(sp)
 8009ccc:	8480062e 	bgeu	r16,r18,8009ce8 <__divdf3+0x5b8>
 8009cd0:	85a1883a 	add	r16,r16,r22
 8009cd4:	40bfffc4 	addi	r2,r8,-1
 8009cd8:	8580ac36 	bltu	r16,r22,8009f8c <__divdf3+0x85c>
 8009cdc:	8480ab2e 	bgeu	r16,r18,8009f8c <__divdf3+0x85c>
 8009ce0:	423fff84 	addi	r8,r8,-2
 8009ce4:	85a1883a 	add	r16,r16,r22
 8009ce8:	3804943a 	slli	r2,r7,16
 8009cec:	84a1c83a 	sub	r16,r16,r18
 8009cf0:	e009883a 	mov	r4,fp
 8009cf4:	1228b03a 	or	r20,r2,r8
 8009cf8:	a1ffffcc 	andi	r7,r20,65535
 8009cfc:	a024d43a 	srli	r18,r20,16
 8009d00:	380b883a 	mov	r5,r7
 8009d04:	d8c00215 	stw	r3,8(sp)
 8009d08:	d9c00515 	stw	r7,20(sp)
 8009d0c:	800832c0 	call	800832c <__mulsi3>
 8009d10:	900b883a 	mov	r5,r18
 8009d14:	e009883a 	mov	r4,fp
 8009d18:	102b883a 	mov	r21,r2
 8009d1c:	800832c0 	call	800832c <__mulsi3>
 8009d20:	900b883a 	mov	r5,r18
 8009d24:	b809883a 	mov	r4,r23
 8009d28:	1039883a 	mov	fp,r2
 8009d2c:	800832c0 	call	800832c <__mulsi3>
 8009d30:	d9c00517 	ldw	r7,20(sp)
 8009d34:	b80b883a 	mov	r5,r23
 8009d38:	1025883a 	mov	r18,r2
 8009d3c:	3809883a 	mov	r4,r7
 8009d40:	800832c0 	call	800832c <__mulsi3>
 8009d44:	a808d43a 	srli	r4,r21,16
 8009d48:	1705883a 	add	r2,r2,fp
 8009d4c:	d8c00217 	ldw	r3,8(sp)
 8009d50:	2085883a 	add	r2,r4,r2
 8009d54:	1700022e 	bgeu	r2,fp,8009d60 <__divdf3+0x630>
 8009d58:	01000074 	movhi	r4,1
 8009d5c:	9125883a 	add	r18,r18,r4
 8009d60:	1008d43a 	srli	r4,r2,16
 8009d64:	1004943a 	slli	r2,r2,16
 8009d68:	ad7fffcc 	andi	r21,r21,65535
 8009d6c:	2489883a 	add	r4,r4,r18
 8009d70:	1545883a 	add	r2,r2,r21
 8009d74:	81003836 	bltu	r16,r4,8009e58 <__divdf3+0x728>
 8009d78:	81003626 	beq	r16,r4,8009e54 <__divdf3+0x724>
 8009d7c:	a5000054 	ori	r20,r20,1
 8009d80:	1880ffc4 	addi	r2,r3,1023
 8009d84:	00bf2e0e 	bge	zero,r2,8009a40 <__alt_data_end+0xfc009a40>
 8009d88:	a10001cc 	andi	r4,r20,7
 8009d8c:	20000726 	beq	r4,zero,8009dac <__divdf3+0x67c>
 8009d90:	a10003cc 	andi	r4,r20,15
 8009d94:	01400104 	movi	r5,4
 8009d98:	21400426 	beq	r4,r5,8009dac <__divdf3+0x67c>
 8009d9c:	a149883a 	add	r4,r20,r5
 8009da0:	2529803a 	cmpltu	r20,r4,r20
 8009da4:	8d23883a 	add	r17,r17,r20
 8009da8:	2029883a 	mov	r20,r4
 8009dac:	8900402c 	andhi	r4,r17,256
 8009db0:	20000426 	beq	r4,zero,8009dc4 <__divdf3+0x694>
 8009db4:	18810004 	addi	r2,r3,1024
 8009db8:	00ffc034 	movhi	r3,65280
 8009dbc:	18ffffc4 	addi	r3,r3,-1
 8009dc0:	88e2703a 	and	r17,r17,r3
 8009dc4:	00c1ff84 	movi	r3,2046
 8009dc8:	18beb416 	blt	r3,r2,800989c <__alt_data_end+0xfc00989c>
 8009dcc:	a028d0fa 	srli	r20,r20,3
 8009dd0:	882a977a 	slli	r21,r17,29
 8009dd4:	8820927a 	slli	r16,r17,9
 8009dd8:	1081ffcc 	andi	r2,r2,2047
 8009ddc:	ad2ab03a 	or	r21,r21,r20
 8009de0:	8020d33a 	srli	r16,r16,12
 8009de4:	9900004c 	andi	r4,r19,1
 8009de8:	003eb006 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009dec:	8080022c 	andhi	r2,r16,8
 8009df0:	10001226 	beq	r2,zero,8009e3c <__divdf3+0x70c>
 8009df4:	8880022c 	andhi	r2,r17,8
 8009df8:	1000101e 	bne	r2,zero,8009e3c <__divdf3+0x70c>
 8009dfc:	00800434 	movhi	r2,16
 8009e00:	8c000234 	orhi	r16,r17,8
 8009e04:	10bfffc4 	addi	r2,r2,-1
 8009e08:	b809883a 	mov	r4,r23
 8009e0c:	80a0703a 	and	r16,r16,r2
 8009e10:	a02b883a 	mov	r21,r20
 8009e14:	003f0806 	br	8009a38 <__alt_data_end+0xfc009a38>
 8009e18:	008000c4 	movi	r2,3
 8009e1c:	3880b126 	beq	r7,r2,800a0e4 <__divdf3+0x9b4>
 8009e20:	00800044 	movi	r2,1
 8009e24:	38805b1e 	bne	r7,r2,8009f94 <__divdf3+0x864>
 8009e28:	e009883a 	mov	r4,fp
 8009e2c:	0005883a 	mov	r2,zero
 8009e30:	0021883a 	mov	r16,zero
 8009e34:	002b883a 	mov	r21,zero
 8009e38:	003e9c06 	br	80098ac <__alt_data_end+0xfc0098ac>
 8009e3c:	00800434 	movhi	r2,16
 8009e40:	84000234 	orhi	r16,r16,8
 8009e44:	10bfffc4 	addi	r2,r2,-1
 8009e48:	b009883a 	mov	r4,r22
 8009e4c:	80a0703a 	and	r16,r16,r2
 8009e50:	003ef906 	br	8009a38 <__alt_data_end+0xfc009a38>
 8009e54:	103fca26 	beq	r2,zero,8009d80 <__alt_data_end+0xfc009d80>
 8009e58:	b421883a 	add	r16,r22,r16
 8009e5c:	a17fffc4 	addi	r5,r20,-1
 8009e60:	8580422e 	bgeu	r16,r22,8009f6c <__divdf3+0x83c>
 8009e64:	2829883a 	mov	r20,r5
 8009e68:	813fc41e 	bne	r16,r4,8009d7c <__alt_data_end+0xfc009d7c>
 8009e6c:	d9800017 	ldw	r6,0(sp)
 8009e70:	30bfc21e 	bne	r6,r2,8009d7c <__alt_data_end+0xfc009d7c>
 8009e74:	003fc206 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009e78:	143ff604 	addi	r16,r2,-40
 8009e7c:	8c20983a 	sll	r16,r17,r16
 8009e80:	002b883a 	mov	r21,zero
 8009e84:	003eb406 	br	8009958 <__alt_data_end+0xfc009958>
 8009e88:	d9800215 	stw	r6,8(sp)
 8009e8c:	d9c00515 	stw	r7,20(sp)
 8009e90:	da000415 	stw	r8,16(sp)
 8009e94:	800b6c40 	call	800b6c4 <__clzsi2>
 8009e98:	10800804 	addi	r2,r2,32
 8009e9c:	da000417 	ldw	r8,16(sp)
 8009ea0:	d9c00517 	ldw	r7,20(sp)
 8009ea4:	d9800217 	ldw	r6,8(sp)
 8009ea8:	003ea106 	br	8009930 <__alt_data_end+0xfc009930>
 8009eac:	147ff604 	addi	r17,r2,-40
 8009eb0:	3462983a 	sll	r17,r6,r17
 8009eb4:	0029883a 	mov	r20,zero
 8009eb8:	003ec906 	br	80099e0 <__alt_data_end+0xfc0099e0>
 8009ebc:	3009883a 	mov	r4,r6
 8009ec0:	d9400115 	stw	r5,4(sp)
 8009ec4:	d9800215 	stw	r6,8(sp)
 8009ec8:	da000415 	stw	r8,16(sp)
 8009ecc:	da400315 	stw	r9,12(sp)
 8009ed0:	800b6c40 	call	800b6c4 <__clzsi2>
 8009ed4:	10800804 	addi	r2,r2,32
 8009ed8:	da400317 	ldw	r9,12(sp)
 8009edc:	da000417 	ldw	r8,16(sp)
 8009ee0:	d9800217 	ldw	r6,8(sp)
 8009ee4:	d9400117 	ldw	r5,4(sp)
 8009ee8:	003eb306 	br	80099b8 <__alt_data_end+0xfc0099b8>
 8009eec:	d9800017 	ldw	r6,0(sp)
 8009ef0:	a9ab883a 	add	r21,r21,r6
 8009ef4:	a98b803a 	cmpltu	r5,r21,r6
 8009ef8:	2d8b883a 	add	r5,r5,r22
 8009efc:	2a11883a 	add	r8,r5,r8
 8009f00:	897fffc4 	addi	r5,r17,-1
 8009f04:	b2000c2e 	bgeu	r22,r8,8009f38 <__divdf3+0x808>
 8009f08:	41003f36 	bltu	r8,r4,800a008 <__divdf3+0x8d8>
 8009f0c:	22006c26 	beq	r4,r8,800a0c0 <__divdf3+0x990>
 8009f10:	4109c83a 	sub	r4,r8,r4
 8009f14:	2823883a 	mov	r17,r5
 8009f18:	003f3b06 	br	8009c08 <__alt_data_end+0xfc009c08>
 8009f1c:	ad3ed336 	bltu	r21,r20,8009a6c <__alt_data_end+0xfc009a6c>
 8009f20:	a804d07a 	srli	r2,r21,1
 8009f24:	802e97fa 	slli	r23,r16,31
 8009f28:	a82a97fa 	slli	r21,r21,31
 8009f2c:	8020d07a 	srli	r16,r16,1
 8009f30:	b8aeb03a 	or	r23,r23,r2
 8009f34:	003ed006 	br	8009a78 <__alt_data_end+0xfc009a78>
 8009f38:	b23ff51e 	bne	r22,r8,8009f10 <__alt_data_end+0xfc009f10>
 8009f3c:	d9800017 	ldw	r6,0(sp)
 8009f40:	a9bff12e 	bgeu	r21,r6,8009f08 <__alt_data_end+0xfc009f08>
 8009f44:	b109c83a 	sub	r4,r22,r4
 8009f48:	2823883a 	mov	r17,r5
 8009f4c:	003f2e06 	br	8009c08 <__alt_data_end+0xfc009c08>
 8009f50:	2021883a 	mov	r16,r4
 8009f54:	003eff06 	br	8009b54 <__alt_data_end+0xfc009b54>
 8009f58:	2023883a 	mov	r17,r4
 8009f5c:	003ee406 	br	8009af0 <__alt_data_end+0xfc009af0>
 8009f60:	a8bfe236 	bltu	r21,r2,8009eec <__alt_data_end+0xfc009eec>
 8009f64:	0009883a 	mov	r4,zero
 8009f68:	003f2706 	br	8009c08 <__alt_data_end+0xfc009c08>
 8009f6c:	81002d36 	bltu	r16,r4,800a024 <__divdf3+0x8f4>
 8009f70:	24005626 	beq	r4,r16,800a0cc <__divdf3+0x99c>
 8009f74:	2829883a 	mov	r20,r5
 8009f78:	003f8006 	br	8009d7c <__alt_data_end+0xfc009d7c>
 8009f7c:	053fffc4 	movi	r20,-1
 8009f80:	003f7f06 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009f84:	200f883a 	mov	r7,r4
 8009f88:	003f3c06 	br	8009c7c <__alt_data_end+0xfc009c7c>
 8009f8c:	1011883a 	mov	r8,r2
 8009f90:	003f5506 	br	8009ce8 <__alt_data_end+0xfc009ce8>
 8009f94:	e027883a 	mov	r19,fp
 8009f98:	003f7906 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009f9c:	010007c4 	movi	r4,31
 8009fa0:	20c02816 	blt	r4,r3,800a044 <__divdf3+0x914>
 8009fa4:	00800804 	movi	r2,32
 8009fa8:	10c5c83a 	sub	r2,r2,r3
 8009fac:	888a983a 	sll	r5,r17,r2
 8009fb0:	a0c8d83a 	srl	r4,r20,r3
 8009fb4:	a084983a 	sll	r2,r20,r2
 8009fb8:	88e2d83a 	srl	r17,r17,r3
 8009fbc:	2906b03a 	or	r3,r5,r4
 8009fc0:	1004c03a 	cmpne	r2,r2,zero
 8009fc4:	1886b03a 	or	r3,r3,r2
 8009fc8:	188001cc 	andi	r2,r3,7
 8009fcc:	10000726 	beq	r2,zero,8009fec <__divdf3+0x8bc>
 8009fd0:	188003cc 	andi	r2,r3,15
 8009fd4:	01000104 	movi	r4,4
 8009fd8:	11000426 	beq	r2,r4,8009fec <__divdf3+0x8bc>
 8009fdc:	1805883a 	mov	r2,r3
 8009fe0:	10c00104 	addi	r3,r2,4
 8009fe4:	1885803a 	cmpltu	r2,r3,r2
 8009fe8:	88a3883a 	add	r17,r17,r2
 8009fec:	8880202c 	andhi	r2,r17,128
 8009ff0:	10002926 	beq	r2,zero,800a098 <__divdf3+0x968>
 8009ff4:	9900004c 	andi	r4,r19,1
 8009ff8:	00800044 	movi	r2,1
 8009ffc:	0021883a 	mov	r16,zero
 800a000:	002b883a 	mov	r21,zero
 800a004:	003e2906 	br	80098ac <__alt_data_end+0xfc0098ac>
 800a008:	d9800017 	ldw	r6,0(sp)
 800a00c:	8c7fff84 	addi	r17,r17,-2
 800a010:	a9ab883a 	add	r21,r21,r6
 800a014:	a98b803a 	cmpltu	r5,r21,r6
 800a018:	2d8b883a 	add	r5,r5,r22
 800a01c:	2a11883a 	add	r8,r5,r8
 800a020:	003ef806 	br	8009c04 <__alt_data_end+0xfc009c04>
 800a024:	d9800017 	ldw	r6,0(sp)
 800a028:	318f883a 	add	r7,r6,r6
 800a02c:	398b803a 	cmpltu	r5,r7,r6
 800a030:	2d8d883a 	add	r6,r5,r22
 800a034:	81a1883a 	add	r16,r16,r6
 800a038:	a17fff84 	addi	r5,r20,-2
 800a03c:	d9c00015 	stw	r7,0(sp)
 800a040:	003f8806 	br	8009e64 <__alt_data_end+0xfc009e64>
 800a044:	013ff844 	movi	r4,-31
 800a048:	2085c83a 	sub	r2,r4,r2
 800a04c:	8888d83a 	srl	r4,r17,r2
 800a050:	00800804 	movi	r2,32
 800a054:	18802126 	beq	r3,r2,800a0dc <__divdf3+0x9ac>
 800a058:	04001004 	movi	r16,64
 800a05c:	80c7c83a 	sub	r3,r16,r3
 800a060:	88e0983a 	sll	r16,r17,r3
 800a064:	8504b03a 	or	r2,r16,r20
 800a068:	1004c03a 	cmpne	r2,r2,zero
 800a06c:	2084b03a 	or	r2,r4,r2
 800a070:	144001cc 	andi	r17,r2,7
 800a074:	88000d1e 	bne	r17,zero,800a0ac <__divdf3+0x97c>
 800a078:	0021883a 	mov	r16,zero
 800a07c:	102ad0fa 	srli	r21,r2,3
 800a080:	9900004c 	andi	r4,r19,1
 800a084:	0005883a 	mov	r2,zero
 800a088:	ac6ab03a 	or	r21,r21,r17
 800a08c:	003e0706 	br	80098ac <__alt_data_end+0xfc0098ac>
 800a090:	1007883a 	mov	r3,r2
 800a094:	0023883a 	mov	r17,zero
 800a098:	8820927a 	slli	r16,r17,9
 800a09c:	1805883a 	mov	r2,r3
 800a0a0:	8822977a 	slli	r17,r17,29
 800a0a4:	8020d33a 	srli	r16,r16,12
 800a0a8:	003ff406 	br	800a07c <__alt_data_end+0xfc00a07c>
 800a0ac:	10c003cc 	andi	r3,r2,15
 800a0b0:	01000104 	movi	r4,4
 800a0b4:	193ff626 	beq	r3,r4,800a090 <__alt_data_end+0xfc00a090>
 800a0b8:	0023883a 	mov	r17,zero
 800a0bc:	003fc806 	br	8009fe0 <__alt_data_end+0xfc009fe0>
 800a0c0:	a8bfd136 	bltu	r21,r2,800a008 <__alt_data_end+0xfc00a008>
 800a0c4:	2823883a 	mov	r17,r5
 800a0c8:	003fa606 	br	8009f64 <__alt_data_end+0xfc009f64>
 800a0cc:	d9800017 	ldw	r6,0(sp)
 800a0d0:	30bfd436 	bltu	r6,r2,800a024 <__alt_data_end+0xfc00a024>
 800a0d4:	2829883a 	mov	r20,r5
 800a0d8:	003f6406 	br	8009e6c <__alt_data_end+0xfc009e6c>
 800a0dc:	0021883a 	mov	r16,zero
 800a0e0:	003fe006 	br	800a064 <__alt_data_end+0xfc00a064>
 800a0e4:	00800434 	movhi	r2,16
 800a0e8:	8c000234 	orhi	r16,r17,8
 800a0ec:	10bfffc4 	addi	r2,r2,-1
 800a0f0:	e009883a 	mov	r4,fp
 800a0f4:	80a0703a 	and	r16,r16,r2
 800a0f8:	a02b883a 	mov	r21,r20
 800a0fc:	003e4e06 	br	8009a38 <__alt_data_end+0xfc009a38>

0800a100 <__eqdf2>:
 800a100:	2804d53a 	srli	r2,r5,20
 800a104:	3806d53a 	srli	r3,r7,20
 800a108:	02000434 	movhi	r8,16
 800a10c:	423fffc4 	addi	r8,r8,-1
 800a110:	1081ffcc 	andi	r2,r2,2047
 800a114:	0281ffc4 	movi	r10,2047
 800a118:	2a12703a 	and	r9,r5,r8
 800a11c:	18c1ffcc 	andi	r3,r3,2047
 800a120:	3a10703a 	and	r8,r7,r8
 800a124:	280ad7fa 	srli	r5,r5,31
 800a128:	380ed7fa 	srli	r7,r7,31
 800a12c:	12801026 	beq	r2,r10,800a170 <__eqdf2+0x70>
 800a130:	0281ffc4 	movi	r10,2047
 800a134:	1a800a26 	beq	r3,r10,800a160 <__eqdf2+0x60>
 800a138:	10c00226 	beq	r2,r3,800a144 <__eqdf2+0x44>
 800a13c:	00800044 	movi	r2,1
 800a140:	f800283a 	ret
 800a144:	4a3ffd1e 	bne	r9,r8,800a13c <__alt_data_end+0xfc00a13c>
 800a148:	21bffc1e 	bne	r4,r6,800a13c <__alt_data_end+0xfc00a13c>
 800a14c:	29c00c26 	beq	r5,r7,800a180 <__eqdf2+0x80>
 800a150:	103ffa1e 	bne	r2,zero,800a13c <__alt_data_end+0xfc00a13c>
 800a154:	2244b03a 	or	r2,r4,r9
 800a158:	1004c03a 	cmpne	r2,r2,zero
 800a15c:	f800283a 	ret
 800a160:	3214b03a 	or	r10,r6,r8
 800a164:	503ff426 	beq	r10,zero,800a138 <__alt_data_end+0xfc00a138>
 800a168:	00800044 	movi	r2,1
 800a16c:	f800283a 	ret
 800a170:	2254b03a 	or	r10,r4,r9
 800a174:	503fee26 	beq	r10,zero,800a130 <__alt_data_end+0xfc00a130>
 800a178:	00800044 	movi	r2,1
 800a17c:	f800283a 	ret
 800a180:	0005883a 	mov	r2,zero
 800a184:	f800283a 	ret

0800a188 <__gedf2>:
 800a188:	2804d53a 	srli	r2,r5,20
 800a18c:	3806d53a 	srli	r3,r7,20
 800a190:	02000434 	movhi	r8,16
 800a194:	423fffc4 	addi	r8,r8,-1
 800a198:	1081ffcc 	andi	r2,r2,2047
 800a19c:	0241ffc4 	movi	r9,2047
 800a1a0:	2a14703a 	and	r10,r5,r8
 800a1a4:	18c1ffcc 	andi	r3,r3,2047
 800a1a8:	3a10703a 	and	r8,r7,r8
 800a1ac:	280ad7fa 	srli	r5,r5,31
 800a1b0:	380ed7fa 	srli	r7,r7,31
 800a1b4:	12401d26 	beq	r2,r9,800a22c <__gedf2+0xa4>
 800a1b8:	0241ffc4 	movi	r9,2047
 800a1bc:	1a401226 	beq	r3,r9,800a208 <__gedf2+0x80>
 800a1c0:	1000081e 	bne	r2,zero,800a1e4 <__gedf2+0x5c>
 800a1c4:	2296b03a 	or	r11,r4,r10
 800a1c8:	5813003a 	cmpeq	r9,r11,zero
 800a1cc:	1800091e 	bne	r3,zero,800a1f4 <__gedf2+0x6c>
 800a1d0:	3218b03a 	or	r12,r6,r8
 800a1d4:	6000071e 	bne	r12,zero,800a1f4 <__gedf2+0x6c>
 800a1d8:	0005883a 	mov	r2,zero
 800a1dc:	5800101e 	bne	r11,zero,800a220 <__gedf2+0x98>
 800a1e0:	f800283a 	ret
 800a1e4:	18000c1e 	bne	r3,zero,800a218 <__gedf2+0x90>
 800a1e8:	3212b03a 	or	r9,r6,r8
 800a1ec:	48000c26 	beq	r9,zero,800a220 <__gedf2+0x98>
 800a1f0:	0013883a 	mov	r9,zero
 800a1f4:	39c03fcc 	andi	r7,r7,255
 800a1f8:	48000826 	beq	r9,zero,800a21c <__gedf2+0x94>
 800a1fc:	38000926 	beq	r7,zero,800a224 <__gedf2+0x9c>
 800a200:	00800044 	movi	r2,1
 800a204:	f800283a 	ret
 800a208:	3212b03a 	or	r9,r6,r8
 800a20c:	483fec26 	beq	r9,zero,800a1c0 <__alt_data_end+0xfc00a1c0>
 800a210:	00bfff84 	movi	r2,-2
 800a214:	f800283a 	ret
 800a218:	39c03fcc 	andi	r7,r7,255
 800a21c:	29c00626 	beq	r5,r7,800a238 <__gedf2+0xb0>
 800a220:	283ff726 	beq	r5,zero,800a200 <__alt_data_end+0xfc00a200>
 800a224:	00bfffc4 	movi	r2,-1
 800a228:	f800283a 	ret
 800a22c:	2292b03a 	or	r9,r4,r10
 800a230:	483fe126 	beq	r9,zero,800a1b8 <__alt_data_end+0xfc00a1b8>
 800a234:	003ff606 	br	800a210 <__alt_data_end+0xfc00a210>
 800a238:	18bff916 	blt	r3,r2,800a220 <__alt_data_end+0xfc00a220>
 800a23c:	10c00316 	blt	r2,r3,800a24c <__gedf2+0xc4>
 800a240:	42bff736 	bltu	r8,r10,800a220 <__alt_data_end+0xfc00a220>
 800a244:	52000326 	beq	r10,r8,800a254 <__gedf2+0xcc>
 800a248:	5200042e 	bgeu	r10,r8,800a25c <__gedf2+0xd4>
 800a24c:	283fec1e 	bne	r5,zero,800a200 <__alt_data_end+0xfc00a200>
 800a250:	003ff406 	br	800a224 <__alt_data_end+0xfc00a224>
 800a254:	313ff236 	bltu	r6,r4,800a220 <__alt_data_end+0xfc00a220>
 800a258:	21bffc36 	bltu	r4,r6,800a24c <__alt_data_end+0xfc00a24c>
 800a25c:	0005883a 	mov	r2,zero
 800a260:	f800283a 	ret

0800a264 <__ledf2>:
 800a264:	2804d53a 	srli	r2,r5,20
 800a268:	3810d53a 	srli	r8,r7,20
 800a26c:	00c00434 	movhi	r3,16
 800a270:	18ffffc4 	addi	r3,r3,-1
 800a274:	1081ffcc 	andi	r2,r2,2047
 800a278:	0241ffc4 	movi	r9,2047
 800a27c:	28d4703a 	and	r10,r5,r3
 800a280:	4201ffcc 	andi	r8,r8,2047
 800a284:	38c6703a 	and	r3,r7,r3
 800a288:	280ad7fa 	srli	r5,r5,31
 800a28c:	380ed7fa 	srli	r7,r7,31
 800a290:	12401f26 	beq	r2,r9,800a310 <__ledf2+0xac>
 800a294:	0241ffc4 	movi	r9,2047
 800a298:	42401426 	beq	r8,r9,800a2ec <__ledf2+0x88>
 800a29c:	1000091e 	bne	r2,zero,800a2c4 <__ledf2+0x60>
 800a2a0:	2296b03a 	or	r11,r4,r10
 800a2a4:	5813003a 	cmpeq	r9,r11,zero
 800a2a8:	29403fcc 	andi	r5,r5,255
 800a2ac:	40000a1e 	bne	r8,zero,800a2d8 <__ledf2+0x74>
 800a2b0:	30d8b03a 	or	r12,r6,r3
 800a2b4:	6000081e 	bne	r12,zero,800a2d8 <__ledf2+0x74>
 800a2b8:	0005883a 	mov	r2,zero
 800a2bc:	5800111e 	bne	r11,zero,800a304 <__ledf2+0xa0>
 800a2c0:	f800283a 	ret
 800a2c4:	29403fcc 	andi	r5,r5,255
 800a2c8:	40000c1e 	bne	r8,zero,800a2fc <__ledf2+0x98>
 800a2cc:	30d2b03a 	or	r9,r6,r3
 800a2d0:	48000c26 	beq	r9,zero,800a304 <__ledf2+0xa0>
 800a2d4:	0013883a 	mov	r9,zero
 800a2d8:	39c03fcc 	andi	r7,r7,255
 800a2dc:	48000826 	beq	r9,zero,800a300 <__ledf2+0x9c>
 800a2e0:	38001126 	beq	r7,zero,800a328 <__ledf2+0xc4>
 800a2e4:	00800044 	movi	r2,1
 800a2e8:	f800283a 	ret
 800a2ec:	30d2b03a 	or	r9,r6,r3
 800a2f0:	483fea26 	beq	r9,zero,800a29c <__alt_data_end+0xfc00a29c>
 800a2f4:	00800084 	movi	r2,2
 800a2f8:	f800283a 	ret
 800a2fc:	39c03fcc 	andi	r7,r7,255
 800a300:	39400726 	beq	r7,r5,800a320 <__ledf2+0xbc>
 800a304:	2800081e 	bne	r5,zero,800a328 <__ledf2+0xc4>
 800a308:	00800044 	movi	r2,1
 800a30c:	f800283a 	ret
 800a310:	2292b03a 	or	r9,r4,r10
 800a314:	483fdf26 	beq	r9,zero,800a294 <__alt_data_end+0xfc00a294>
 800a318:	00800084 	movi	r2,2
 800a31c:	f800283a 	ret
 800a320:	4080030e 	bge	r8,r2,800a330 <__ledf2+0xcc>
 800a324:	383fef26 	beq	r7,zero,800a2e4 <__alt_data_end+0xfc00a2e4>
 800a328:	00bfffc4 	movi	r2,-1
 800a32c:	f800283a 	ret
 800a330:	123feb16 	blt	r2,r8,800a2e0 <__alt_data_end+0xfc00a2e0>
 800a334:	1abff336 	bltu	r3,r10,800a304 <__alt_data_end+0xfc00a304>
 800a338:	50c00326 	beq	r10,r3,800a348 <__ledf2+0xe4>
 800a33c:	50c0042e 	bgeu	r10,r3,800a350 <__ledf2+0xec>
 800a340:	283fe81e 	bne	r5,zero,800a2e4 <__alt_data_end+0xfc00a2e4>
 800a344:	003ff806 	br	800a328 <__alt_data_end+0xfc00a328>
 800a348:	313fee36 	bltu	r6,r4,800a304 <__alt_data_end+0xfc00a304>
 800a34c:	21bffc36 	bltu	r4,r6,800a340 <__alt_data_end+0xfc00a340>
 800a350:	0005883a 	mov	r2,zero
 800a354:	f800283a 	ret

0800a358 <__muldf3>:
 800a358:	deffee04 	addi	sp,sp,-72
 800a35c:	dd000c15 	stw	r20,48(sp)
 800a360:	2828d53a 	srli	r20,r5,20
 800a364:	ddc00f15 	stw	r23,60(sp)
 800a368:	282ed7fa 	srli	r23,r5,31
 800a36c:	dc000815 	stw	r16,32(sp)
 800a370:	04000434 	movhi	r16,16
 800a374:	dcc00b15 	stw	r19,44(sp)
 800a378:	843fffc4 	addi	r16,r16,-1
 800a37c:	dfc01115 	stw	ra,68(sp)
 800a380:	df001015 	stw	fp,64(sp)
 800a384:	dd800e15 	stw	r22,56(sp)
 800a388:	dd400d15 	stw	r21,52(sp)
 800a38c:	dc800a15 	stw	r18,40(sp)
 800a390:	dc400915 	stw	r17,36(sp)
 800a394:	a501ffcc 	andi	r20,r20,2047
 800a398:	2c20703a 	and	r16,r5,r16
 800a39c:	b827883a 	mov	r19,r23
 800a3a0:	ba403fcc 	andi	r9,r23,255
 800a3a4:	a0006026 	beq	r20,zero,800a528 <__muldf3+0x1d0>
 800a3a8:	0081ffc4 	movi	r2,2047
 800a3ac:	202d883a 	mov	r22,r4
 800a3b0:	a0803626 	beq	r20,r2,800a48c <__muldf3+0x134>
 800a3b4:	84000434 	orhi	r16,r16,16
 800a3b8:	200ad77a 	srli	r5,r4,29
 800a3bc:	800490fa 	slli	r2,r16,3
 800a3c0:	202c90fa 	slli	r22,r4,3
 800a3c4:	a53f0044 	addi	r20,r20,-1023
 800a3c8:	28a0b03a 	or	r16,r5,r2
 800a3cc:	002b883a 	mov	r21,zero
 800a3d0:	000b883a 	mov	r5,zero
 800a3d4:	3804d53a 	srli	r2,r7,20
 800a3d8:	3838d7fa 	srli	fp,r7,31
 800a3dc:	04400434 	movhi	r17,16
 800a3e0:	8c7fffc4 	addi	r17,r17,-1
 800a3e4:	1081ffcc 	andi	r2,r2,2047
 800a3e8:	3025883a 	mov	r18,r6
 800a3ec:	3c62703a 	and	r17,r7,r17
 800a3f0:	e2803fcc 	andi	r10,fp,255
 800a3f4:	10006d26 	beq	r2,zero,800a5ac <__muldf3+0x254>
 800a3f8:	00c1ffc4 	movi	r3,2047
 800a3fc:	10c06526 	beq	r2,r3,800a594 <__muldf3+0x23c>
 800a400:	8c400434 	orhi	r17,r17,16
 800a404:	300ed77a 	srli	r7,r6,29
 800a408:	880690fa 	slli	r3,r17,3
 800a40c:	302490fa 	slli	r18,r6,3
 800a410:	10bf0044 	addi	r2,r2,-1023
 800a414:	38e2b03a 	or	r17,r7,r3
 800a418:	000f883a 	mov	r7,zero
 800a41c:	a087883a 	add	r3,r20,r2
 800a420:	010003c4 	movi	r4,15
 800a424:	3d44b03a 	or	r2,r7,r21
 800a428:	e5ccf03a 	xor	r6,fp,r23
 800a42c:	1a000044 	addi	r8,r3,1
 800a430:	20809b36 	bltu	r4,r2,800a6a0 <__muldf3+0x348>
 800a434:	100490ba 	slli	r2,r2,2
 800a438:	01020074 	movhi	r4,2049
 800a43c:	21291304 	addi	r4,r4,-23476
 800a440:	1105883a 	add	r2,r2,r4
 800a444:	10800017 	ldw	r2,0(r2)
 800a448:	1000683a 	jmp	r2
 800a44c:	0800a6a0 	cmpeqi	zero,at,666
 800a450:	0800a4ac 	andhi	zero,at,658
 800a454:	0800a4ac 	andhi	zero,at,658
 800a458:	0800a4a8 	cmpgeui	zero,at,658
 800a45c:	0800a67c 	xorhi	zero,at,665
 800a460:	0800a67c 	xorhi	zero,at,665
 800a464:	0800a664 	muli	zero,at,665
 800a468:	0800a4a8 	cmpgeui	zero,at,658
 800a46c:	0800a67c 	xorhi	zero,at,665
 800a470:	0800a664 	muli	zero,at,665
 800a474:	0800a67c 	xorhi	zero,at,665
 800a478:	0800a4a8 	cmpgeui	zero,at,658
 800a47c:	0800a68c 	andi	zero,at,666
 800a480:	0800a68c 	andi	zero,at,666
 800a484:	0800a68c 	andi	zero,at,666
 800a488:	0800a9ec 	andhi	zero,at,679
 800a48c:	2404b03a 	or	r2,r4,r16
 800a490:	1000711e 	bne	r2,zero,800a658 <__muldf3+0x300>
 800a494:	05400204 	movi	r21,8
 800a498:	0021883a 	mov	r16,zero
 800a49c:	002d883a 	mov	r22,zero
 800a4a0:	01400084 	movi	r5,2
 800a4a4:	003fcb06 	br	800a3d4 <__alt_data_end+0xfc00a3d4>
 800a4a8:	500d883a 	mov	r6,r10
 800a4ac:	00800084 	movi	r2,2
 800a4b0:	38805926 	beq	r7,r2,800a618 <__muldf3+0x2c0>
 800a4b4:	008000c4 	movi	r2,3
 800a4b8:	3881bb26 	beq	r7,r2,800aba8 <__muldf3+0x850>
 800a4bc:	00800044 	movi	r2,1
 800a4c0:	3881961e 	bne	r7,r2,800ab1c <__muldf3+0x7c4>
 800a4c4:	3027883a 	mov	r19,r6
 800a4c8:	0005883a 	mov	r2,zero
 800a4cc:	0021883a 	mov	r16,zero
 800a4d0:	002d883a 	mov	r22,zero
 800a4d4:	1004953a 	slli	r2,r2,20
 800a4d8:	98c03fcc 	andi	r3,r19,255
 800a4dc:	04400434 	movhi	r17,16
 800a4e0:	8c7fffc4 	addi	r17,r17,-1
 800a4e4:	180697fa 	slli	r3,r3,31
 800a4e8:	8460703a 	and	r16,r16,r17
 800a4ec:	80a0b03a 	or	r16,r16,r2
 800a4f0:	80c6b03a 	or	r3,r16,r3
 800a4f4:	b005883a 	mov	r2,r22
 800a4f8:	dfc01117 	ldw	ra,68(sp)
 800a4fc:	df001017 	ldw	fp,64(sp)
 800a500:	ddc00f17 	ldw	r23,60(sp)
 800a504:	dd800e17 	ldw	r22,56(sp)
 800a508:	dd400d17 	ldw	r21,52(sp)
 800a50c:	dd000c17 	ldw	r20,48(sp)
 800a510:	dcc00b17 	ldw	r19,44(sp)
 800a514:	dc800a17 	ldw	r18,40(sp)
 800a518:	dc400917 	ldw	r17,36(sp)
 800a51c:	dc000817 	ldw	r16,32(sp)
 800a520:	dec01204 	addi	sp,sp,72
 800a524:	f800283a 	ret
 800a528:	2404b03a 	or	r2,r4,r16
 800a52c:	202b883a 	mov	r21,r4
 800a530:	10004426 	beq	r2,zero,800a644 <__muldf3+0x2ec>
 800a534:	80015126 	beq	r16,zero,800aa7c <__muldf3+0x724>
 800a538:	8009883a 	mov	r4,r16
 800a53c:	d9800715 	stw	r6,28(sp)
 800a540:	d9c00215 	stw	r7,8(sp)
 800a544:	da400415 	stw	r9,16(sp)
 800a548:	800b6c40 	call	800b6c4 <__clzsi2>
 800a54c:	d9800717 	ldw	r6,28(sp)
 800a550:	d9c00217 	ldw	r7,8(sp)
 800a554:	da400417 	ldw	r9,16(sp)
 800a558:	113ffd44 	addi	r4,r2,-11
 800a55c:	00c00704 	movi	r3,28
 800a560:	19014216 	blt	r3,r4,800aa6c <__muldf3+0x714>
 800a564:	00c00744 	movi	r3,29
 800a568:	15bffe04 	addi	r22,r2,-8
 800a56c:	1907c83a 	sub	r3,r3,r4
 800a570:	85a0983a 	sll	r16,r16,r22
 800a574:	a8c6d83a 	srl	r3,r21,r3
 800a578:	adac983a 	sll	r22,r21,r22
 800a57c:	1c20b03a 	or	r16,r3,r16
 800a580:	1080fcc4 	addi	r2,r2,1011
 800a584:	00a9c83a 	sub	r20,zero,r2
 800a588:	002b883a 	mov	r21,zero
 800a58c:	000b883a 	mov	r5,zero
 800a590:	003f9006 	br	800a3d4 <__alt_data_end+0xfc00a3d4>
 800a594:	3446b03a 	or	r3,r6,r17
 800a598:	1800281e 	bne	r3,zero,800a63c <__muldf3+0x2e4>
 800a59c:	0023883a 	mov	r17,zero
 800a5a0:	0025883a 	mov	r18,zero
 800a5a4:	01c00084 	movi	r7,2
 800a5a8:	003f9c06 	br	800a41c <__alt_data_end+0xfc00a41c>
 800a5ac:	3446b03a 	or	r3,r6,r17
 800a5b0:	18001e26 	beq	r3,zero,800a62c <__muldf3+0x2d4>
 800a5b4:	88012126 	beq	r17,zero,800aa3c <__muldf3+0x6e4>
 800a5b8:	8809883a 	mov	r4,r17
 800a5bc:	d9400215 	stw	r5,8(sp)
 800a5c0:	d9800715 	stw	r6,28(sp)
 800a5c4:	da400415 	stw	r9,16(sp)
 800a5c8:	da800315 	stw	r10,12(sp)
 800a5cc:	800b6c40 	call	800b6c4 <__clzsi2>
 800a5d0:	d9400217 	ldw	r5,8(sp)
 800a5d4:	d9800717 	ldw	r6,28(sp)
 800a5d8:	da400417 	ldw	r9,16(sp)
 800a5dc:	da800317 	ldw	r10,12(sp)
 800a5e0:	113ffd44 	addi	r4,r2,-11
 800a5e4:	00c00704 	movi	r3,28
 800a5e8:	19011016 	blt	r3,r4,800aa2c <__muldf3+0x6d4>
 800a5ec:	00c00744 	movi	r3,29
 800a5f0:	14bffe04 	addi	r18,r2,-8
 800a5f4:	1907c83a 	sub	r3,r3,r4
 800a5f8:	8ca2983a 	sll	r17,r17,r18
 800a5fc:	30c6d83a 	srl	r3,r6,r3
 800a600:	34a4983a 	sll	r18,r6,r18
 800a604:	1c62b03a 	or	r17,r3,r17
 800a608:	1080fcc4 	addi	r2,r2,1011
 800a60c:	0085c83a 	sub	r2,zero,r2
 800a610:	000f883a 	mov	r7,zero
 800a614:	003f8106 	br	800a41c <__alt_data_end+0xfc00a41c>
 800a618:	3027883a 	mov	r19,r6
 800a61c:	0081ffc4 	movi	r2,2047
 800a620:	0021883a 	mov	r16,zero
 800a624:	002d883a 	mov	r22,zero
 800a628:	003faa06 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800a62c:	0023883a 	mov	r17,zero
 800a630:	0025883a 	mov	r18,zero
 800a634:	01c00044 	movi	r7,1
 800a638:	003f7806 	br	800a41c <__alt_data_end+0xfc00a41c>
 800a63c:	01c000c4 	movi	r7,3
 800a640:	003f7606 	br	800a41c <__alt_data_end+0xfc00a41c>
 800a644:	05400104 	movi	r21,4
 800a648:	0021883a 	mov	r16,zero
 800a64c:	002d883a 	mov	r22,zero
 800a650:	01400044 	movi	r5,1
 800a654:	003f5f06 	br	800a3d4 <__alt_data_end+0xfc00a3d4>
 800a658:	05400304 	movi	r21,12
 800a65c:	014000c4 	movi	r5,3
 800a660:	003f5c06 	br	800a3d4 <__alt_data_end+0xfc00a3d4>
 800a664:	04000434 	movhi	r16,16
 800a668:	0027883a 	mov	r19,zero
 800a66c:	843fffc4 	addi	r16,r16,-1
 800a670:	05bfffc4 	movi	r22,-1
 800a674:	0081ffc4 	movi	r2,2047
 800a678:	003f9606 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800a67c:	8023883a 	mov	r17,r16
 800a680:	b025883a 	mov	r18,r22
 800a684:	280f883a 	mov	r7,r5
 800a688:	003f8806 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a68c:	8023883a 	mov	r17,r16
 800a690:	b025883a 	mov	r18,r22
 800a694:	480d883a 	mov	r6,r9
 800a698:	280f883a 	mov	r7,r5
 800a69c:	003f8306 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a6a0:	b026d43a 	srli	r19,r22,16
 800a6a4:	902ed43a 	srli	r23,r18,16
 800a6a8:	b5bfffcc 	andi	r22,r22,65535
 800a6ac:	94bfffcc 	andi	r18,r18,65535
 800a6b0:	b00b883a 	mov	r5,r22
 800a6b4:	9009883a 	mov	r4,r18
 800a6b8:	d8c00515 	stw	r3,20(sp)
 800a6bc:	d9800715 	stw	r6,28(sp)
 800a6c0:	da000615 	stw	r8,24(sp)
 800a6c4:	800832c0 	call	800832c <__mulsi3>
 800a6c8:	980b883a 	mov	r5,r19
 800a6cc:	9009883a 	mov	r4,r18
 800a6d0:	1029883a 	mov	r20,r2
 800a6d4:	800832c0 	call	800832c <__mulsi3>
 800a6d8:	b80b883a 	mov	r5,r23
 800a6dc:	9809883a 	mov	r4,r19
 800a6e0:	102b883a 	mov	r21,r2
 800a6e4:	800832c0 	call	800832c <__mulsi3>
 800a6e8:	b809883a 	mov	r4,r23
 800a6ec:	b00b883a 	mov	r5,r22
 800a6f0:	1039883a 	mov	fp,r2
 800a6f4:	800832c0 	call	800832c <__mulsi3>
 800a6f8:	a008d43a 	srli	r4,r20,16
 800a6fc:	1545883a 	add	r2,r2,r21
 800a700:	d8c00517 	ldw	r3,20(sp)
 800a704:	2085883a 	add	r2,r4,r2
 800a708:	d9800717 	ldw	r6,28(sp)
 800a70c:	da000617 	ldw	r8,24(sp)
 800a710:	1540022e 	bgeu	r2,r21,800a71c <__muldf3+0x3c4>
 800a714:	01000074 	movhi	r4,1
 800a718:	e139883a 	add	fp,fp,r4
 800a71c:	100e943a 	slli	r7,r2,16
 800a720:	1004d43a 	srli	r2,r2,16
 800a724:	882ad43a 	srli	r21,r17,16
 800a728:	a53fffcc 	andi	r20,r20,65535
 800a72c:	8c7fffcc 	andi	r17,r17,65535
 800a730:	3d29883a 	add	r20,r7,r20
 800a734:	b00b883a 	mov	r5,r22
 800a738:	8809883a 	mov	r4,r17
 800a73c:	d8c00515 	stw	r3,20(sp)
 800a740:	d9800715 	stw	r6,28(sp)
 800a744:	da000615 	stw	r8,24(sp)
 800a748:	dd000115 	stw	r20,4(sp)
 800a74c:	d8800015 	stw	r2,0(sp)
 800a750:	800832c0 	call	800832c <__mulsi3>
 800a754:	980b883a 	mov	r5,r19
 800a758:	8809883a 	mov	r4,r17
 800a75c:	d8800215 	stw	r2,8(sp)
 800a760:	800832c0 	call	800832c <__mulsi3>
 800a764:	9809883a 	mov	r4,r19
 800a768:	a80b883a 	mov	r5,r21
 800a76c:	1029883a 	mov	r20,r2
 800a770:	800832c0 	call	800832c <__mulsi3>
 800a774:	b00b883a 	mov	r5,r22
 800a778:	a809883a 	mov	r4,r21
 800a77c:	d8800415 	stw	r2,16(sp)
 800a780:	800832c0 	call	800832c <__mulsi3>
 800a784:	d9c00217 	ldw	r7,8(sp)
 800a788:	1505883a 	add	r2,r2,r20
 800a78c:	d8c00517 	ldw	r3,20(sp)
 800a790:	3826d43a 	srli	r19,r7,16
 800a794:	d9800717 	ldw	r6,28(sp)
 800a798:	da000617 	ldw	r8,24(sp)
 800a79c:	9885883a 	add	r2,r19,r2
 800a7a0:	da400417 	ldw	r9,16(sp)
 800a7a4:	1500022e 	bgeu	r2,r20,800a7b0 <__muldf3+0x458>
 800a7a8:	01000074 	movhi	r4,1
 800a7ac:	4913883a 	add	r9,r9,r4
 800a7b0:	1028d43a 	srli	r20,r2,16
 800a7b4:	1004943a 	slli	r2,r2,16
 800a7b8:	802cd43a 	srli	r22,r16,16
 800a7bc:	843fffcc 	andi	r16,r16,65535
 800a7c0:	3cffffcc 	andi	r19,r7,65535
 800a7c4:	9009883a 	mov	r4,r18
 800a7c8:	800b883a 	mov	r5,r16
 800a7cc:	a269883a 	add	r20,r20,r9
 800a7d0:	d8c00515 	stw	r3,20(sp)
 800a7d4:	d9800715 	stw	r6,28(sp)
 800a7d8:	da000615 	stw	r8,24(sp)
 800a7dc:	14e7883a 	add	r19,r2,r19
 800a7e0:	800832c0 	call	800832c <__mulsi3>
 800a7e4:	9009883a 	mov	r4,r18
 800a7e8:	b00b883a 	mov	r5,r22
 800a7ec:	d8800315 	stw	r2,12(sp)
 800a7f0:	800832c0 	call	800832c <__mulsi3>
 800a7f4:	b809883a 	mov	r4,r23
 800a7f8:	b00b883a 	mov	r5,r22
 800a7fc:	d8800215 	stw	r2,8(sp)
 800a800:	800832c0 	call	800832c <__mulsi3>
 800a804:	b80b883a 	mov	r5,r23
 800a808:	8009883a 	mov	r4,r16
 800a80c:	d8800415 	stw	r2,16(sp)
 800a810:	800832c0 	call	800832c <__mulsi3>
 800a814:	da800317 	ldw	r10,12(sp)
 800a818:	d9c00217 	ldw	r7,8(sp)
 800a81c:	d9000017 	ldw	r4,0(sp)
 800a820:	502ed43a 	srli	r23,r10,16
 800a824:	11c5883a 	add	r2,r2,r7
 800a828:	24e5883a 	add	r18,r4,r19
 800a82c:	b885883a 	add	r2,r23,r2
 800a830:	d8c00517 	ldw	r3,20(sp)
 800a834:	d9800717 	ldw	r6,28(sp)
 800a838:	da000617 	ldw	r8,24(sp)
 800a83c:	da400417 	ldw	r9,16(sp)
 800a840:	11c0022e 	bgeu	r2,r7,800a84c <__muldf3+0x4f4>
 800a844:	01000074 	movhi	r4,1
 800a848:	4913883a 	add	r9,r9,r4
 800a84c:	100ed43a 	srli	r7,r2,16
 800a850:	1004943a 	slli	r2,r2,16
 800a854:	55ffffcc 	andi	r23,r10,65535
 800a858:	3a53883a 	add	r9,r7,r9
 800a85c:	8809883a 	mov	r4,r17
 800a860:	800b883a 	mov	r5,r16
 800a864:	d8c00515 	stw	r3,20(sp)
 800a868:	d9800715 	stw	r6,28(sp)
 800a86c:	da000615 	stw	r8,24(sp)
 800a870:	da400415 	stw	r9,16(sp)
 800a874:	15ef883a 	add	r23,r2,r23
 800a878:	800832c0 	call	800832c <__mulsi3>
 800a87c:	8809883a 	mov	r4,r17
 800a880:	b00b883a 	mov	r5,r22
 800a884:	d8800215 	stw	r2,8(sp)
 800a888:	800832c0 	call	800832c <__mulsi3>
 800a88c:	b00b883a 	mov	r5,r22
 800a890:	a809883a 	mov	r4,r21
 800a894:	d8800315 	stw	r2,12(sp)
 800a898:	800832c0 	call	800832c <__mulsi3>
 800a89c:	8009883a 	mov	r4,r16
 800a8a0:	a80b883a 	mov	r5,r21
 800a8a4:	1023883a 	mov	r17,r2
 800a8a8:	800832c0 	call	800832c <__mulsi3>
 800a8ac:	d9c00217 	ldw	r7,8(sp)
 800a8b0:	da800317 	ldw	r10,12(sp)
 800a8b4:	d8c00517 	ldw	r3,20(sp)
 800a8b8:	3808d43a 	srli	r4,r7,16
 800a8bc:	1285883a 	add	r2,r2,r10
 800a8c0:	d9800717 	ldw	r6,28(sp)
 800a8c4:	2085883a 	add	r2,r4,r2
 800a8c8:	da000617 	ldw	r8,24(sp)
 800a8cc:	da400417 	ldw	r9,16(sp)
 800a8d0:	1280022e 	bgeu	r2,r10,800a8dc <__muldf3+0x584>
 800a8d4:	01000074 	movhi	r4,1
 800a8d8:	8923883a 	add	r17,r17,r4
 800a8dc:	1008943a 	slli	r4,r2,16
 800a8e0:	39ffffcc 	andi	r7,r7,65535
 800a8e4:	e4b9883a 	add	fp,fp,r18
 800a8e8:	21cf883a 	add	r7,r4,r7
 800a8ec:	e4e7803a 	cmpltu	r19,fp,r19
 800a8f0:	3d0f883a 	add	r7,r7,r20
 800a8f4:	bf39883a 	add	fp,r23,fp
 800a8f8:	99c9883a 	add	r4,r19,r7
 800a8fc:	e5ef803a 	cmpltu	r23,fp,r23
 800a900:	490b883a 	add	r5,r9,r4
 800a904:	1004d43a 	srli	r2,r2,16
 800a908:	b965883a 	add	r18,r23,r5
 800a90c:	24c9803a 	cmpltu	r4,r4,r19
 800a910:	3d29803a 	cmpltu	r20,r7,r20
 800a914:	a128b03a 	or	r20,r20,r4
 800a918:	95ef803a 	cmpltu	r23,r18,r23
 800a91c:	2a53803a 	cmpltu	r9,r5,r9
 800a920:	a0a9883a 	add	r20,r20,r2
 800a924:	4deeb03a 	or	r23,r9,r23
 800a928:	a5ef883a 	add	r23,r20,r23
 800a92c:	bc63883a 	add	r17,r23,r17
 800a930:	e004927a 	slli	r2,fp,9
 800a934:	d9000117 	ldw	r4,4(sp)
 800a938:	882e927a 	slli	r23,r17,9
 800a93c:	9022d5fa 	srli	r17,r18,23
 800a940:	e038d5fa 	srli	fp,fp,23
 800a944:	1104b03a 	or	r2,r2,r4
 800a948:	9024927a 	slli	r18,r18,9
 800a94c:	1004c03a 	cmpne	r2,r2,zero
 800a950:	bc62b03a 	or	r17,r23,r17
 800a954:	1738b03a 	or	fp,r2,fp
 800a958:	8880402c 	andhi	r2,r17,256
 800a95c:	e4a4b03a 	or	r18,fp,r18
 800a960:	10000726 	beq	r2,zero,800a980 <__muldf3+0x628>
 800a964:	9006d07a 	srli	r3,r18,1
 800a968:	880497fa 	slli	r2,r17,31
 800a96c:	9480004c 	andi	r18,r18,1
 800a970:	8822d07a 	srli	r17,r17,1
 800a974:	1ca4b03a 	or	r18,r3,r18
 800a978:	14a4b03a 	or	r18,r2,r18
 800a97c:	4007883a 	mov	r3,r8
 800a980:	1880ffc4 	addi	r2,r3,1023
 800a984:	0080460e 	bge	zero,r2,800aaa0 <__muldf3+0x748>
 800a988:	910001cc 	andi	r4,r18,7
 800a98c:	20000726 	beq	r4,zero,800a9ac <__muldf3+0x654>
 800a990:	910003cc 	andi	r4,r18,15
 800a994:	01400104 	movi	r5,4
 800a998:	21400426 	beq	r4,r5,800a9ac <__muldf3+0x654>
 800a99c:	9149883a 	add	r4,r18,r5
 800a9a0:	24a5803a 	cmpltu	r18,r4,r18
 800a9a4:	8ca3883a 	add	r17,r17,r18
 800a9a8:	2025883a 	mov	r18,r4
 800a9ac:	8900402c 	andhi	r4,r17,256
 800a9b0:	20000426 	beq	r4,zero,800a9c4 <__muldf3+0x66c>
 800a9b4:	18810004 	addi	r2,r3,1024
 800a9b8:	00ffc034 	movhi	r3,65280
 800a9bc:	18ffffc4 	addi	r3,r3,-1
 800a9c0:	88e2703a 	and	r17,r17,r3
 800a9c4:	00c1ff84 	movi	r3,2046
 800a9c8:	18bf1316 	blt	r3,r2,800a618 <__alt_data_end+0xfc00a618>
 800a9cc:	882c977a 	slli	r22,r17,29
 800a9d0:	9024d0fa 	srli	r18,r18,3
 800a9d4:	8822927a 	slli	r17,r17,9
 800a9d8:	1081ffcc 	andi	r2,r2,2047
 800a9dc:	b4acb03a 	or	r22,r22,r18
 800a9e0:	8820d33a 	srli	r16,r17,12
 800a9e4:	3027883a 	mov	r19,r6
 800a9e8:	003eba06 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800a9ec:	8080022c 	andhi	r2,r16,8
 800a9f0:	10000926 	beq	r2,zero,800aa18 <__muldf3+0x6c0>
 800a9f4:	8880022c 	andhi	r2,r17,8
 800a9f8:	1000071e 	bne	r2,zero,800aa18 <__muldf3+0x6c0>
 800a9fc:	00800434 	movhi	r2,16
 800aa00:	8c000234 	orhi	r16,r17,8
 800aa04:	10bfffc4 	addi	r2,r2,-1
 800aa08:	e027883a 	mov	r19,fp
 800aa0c:	80a0703a 	and	r16,r16,r2
 800aa10:	902d883a 	mov	r22,r18
 800aa14:	003f1706 	br	800a674 <__alt_data_end+0xfc00a674>
 800aa18:	00800434 	movhi	r2,16
 800aa1c:	84000234 	orhi	r16,r16,8
 800aa20:	10bfffc4 	addi	r2,r2,-1
 800aa24:	80a0703a 	and	r16,r16,r2
 800aa28:	003f1206 	br	800a674 <__alt_data_end+0xfc00a674>
 800aa2c:	147ff604 	addi	r17,r2,-40
 800aa30:	3462983a 	sll	r17,r6,r17
 800aa34:	0025883a 	mov	r18,zero
 800aa38:	003ef306 	br	800a608 <__alt_data_end+0xfc00a608>
 800aa3c:	3009883a 	mov	r4,r6
 800aa40:	d9400215 	stw	r5,8(sp)
 800aa44:	d9800715 	stw	r6,28(sp)
 800aa48:	da400415 	stw	r9,16(sp)
 800aa4c:	da800315 	stw	r10,12(sp)
 800aa50:	800b6c40 	call	800b6c4 <__clzsi2>
 800aa54:	10800804 	addi	r2,r2,32
 800aa58:	da800317 	ldw	r10,12(sp)
 800aa5c:	da400417 	ldw	r9,16(sp)
 800aa60:	d9800717 	ldw	r6,28(sp)
 800aa64:	d9400217 	ldw	r5,8(sp)
 800aa68:	003edd06 	br	800a5e0 <__alt_data_end+0xfc00a5e0>
 800aa6c:	143ff604 	addi	r16,r2,-40
 800aa70:	ac20983a 	sll	r16,r21,r16
 800aa74:	002d883a 	mov	r22,zero
 800aa78:	003ec106 	br	800a580 <__alt_data_end+0xfc00a580>
 800aa7c:	d9800715 	stw	r6,28(sp)
 800aa80:	d9c00215 	stw	r7,8(sp)
 800aa84:	da400415 	stw	r9,16(sp)
 800aa88:	800b6c40 	call	800b6c4 <__clzsi2>
 800aa8c:	10800804 	addi	r2,r2,32
 800aa90:	da400417 	ldw	r9,16(sp)
 800aa94:	d9c00217 	ldw	r7,8(sp)
 800aa98:	d9800717 	ldw	r6,28(sp)
 800aa9c:	003eae06 	br	800a558 <__alt_data_end+0xfc00a558>
 800aaa0:	00c00044 	movi	r3,1
 800aaa4:	1887c83a 	sub	r3,r3,r2
 800aaa8:	01000e04 	movi	r4,56
 800aaac:	20fe8516 	blt	r4,r3,800a4c4 <__alt_data_end+0xfc00a4c4>
 800aab0:	010007c4 	movi	r4,31
 800aab4:	20c01b16 	blt	r4,r3,800ab24 <__muldf3+0x7cc>
 800aab8:	00800804 	movi	r2,32
 800aabc:	10c5c83a 	sub	r2,r2,r3
 800aac0:	888a983a 	sll	r5,r17,r2
 800aac4:	90c8d83a 	srl	r4,r18,r3
 800aac8:	9084983a 	sll	r2,r18,r2
 800aacc:	88e2d83a 	srl	r17,r17,r3
 800aad0:	2906b03a 	or	r3,r5,r4
 800aad4:	1004c03a 	cmpne	r2,r2,zero
 800aad8:	1886b03a 	or	r3,r3,r2
 800aadc:	188001cc 	andi	r2,r3,7
 800aae0:	10000726 	beq	r2,zero,800ab00 <__muldf3+0x7a8>
 800aae4:	188003cc 	andi	r2,r3,15
 800aae8:	01000104 	movi	r4,4
 800aaec:	11000426 	beq	r2,r4,800ab00 <__muldf3+0x7a8>
 800aaf0:	1805883a 	mov	r2,r3
 800aaf4:	10c00104 	addi	r3,r2,4
 800aaf8:	1885803a 	cmpltu	r2,r3,r2
 800aafc:	88a3883a 	add	r17,r17,r2
 800ab00:	8880202c 	andhi	r2,r17,128
 800ab04:	10001c26 	beq	r2,zero,800ab78 <__muldf3+0x820>
 800ab08:	3027883a 	mov	r19,r6
 800ab0c:	00800044 	movi	r2,1
 800ab10:	0021883a 	mov	r16,zero
 800ab14:	002d883a 	mov	r22,zero
 800ab18:	003e6e06 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800ab1c:	4007883a 	mov	r3,r8
 800ab20:	003f9706 	br	800a980 <__alt_data_end+0xfc00a980>
 800ab24:	017ff844 	movi	r5,-31
 800ab28:	2885c83a 	sub	r2,r5,r2
 800ab2c:	888ad83a 	srl	r5,r17,r2
 800ab30:	00800804 	movi	r2,32
 800ab34:	18801a26 	beq	r3,r2,800aba0 <__muldf3+0x848>
 800ab38:	01001004 	movi	r4,64
 800ab3c:	20c7c83a 	sub	r3,r4,r3
 800ab40:	88e2983a 	sll	r17,r17,r3
 800ab44:	8ca4b03a 	or	r18,r17,r18
 800ab48:	9004c03a 	cmpne	r2,r18,zero
 800ab4c:	2884b03a 	or	r2,r5,r2
 800ab50:	144001cc 	andi	r17,r2,7
 800ab54:	88000d1e 	bne	r17,zero,800ab8c <__muldf3+0x834>
 800ab58:	0021883a 	mov	r16,zero
 800ab5c:	102cd0fa 	srli	r22,r2,3
 800ab60:	3027883a 	mov	r19,r6
 800ab64:	0005883a 	mov	r2,zero
 800ab68:	b46cb03a 	or	r22,r22,r17
 800ab6c:	003e5906 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800ab70:	1007883a 	mov	r3,r2
 800ab74:	0023883a 	mov	r17,zero
 800ab78:	8820927a 	slli	r16,r17,9
 800ab7c:	1805883a 	mov	r2,r3
 800ab80:	8822977a 	slli	r17,r17,29
 800ab84:	8020d33a 	srli	r16,r16,12
 800ab88:	003ff406 	br	800ab5c <__alt_data_end+0xfc00ab5c>
 800ab8c:	10c003cc 	andi	r3,r2,15
 800ab90:	01000104 	movi	r4,4
 800ab94:	193ff626 	beq	r3,r4,800ab70 <__alt_data_end+0xfc00ab70>
 800ab98:	0023883a 	mov	r17,zero
 800ab9c:	003fd506 	br	800aaf4 <__alt_data_end+0xfc00aaf4>
 800aba0:	0023883a 	mov	r17,zero
 800aba4:	003fe706 	br	800ab44 <__alt_data_end+0xfc00ab44>
 800aba8:	00800434 	movhi	r2,16
 800abac:	8c000234 	orhi	r16,r17,8
 800abb0:	10bfffc4 	addi	r2,r2,-1
 800abb4:	3027883a 	mov	r19,r6
 800abb8:	80a0703a 	and	r16,r16,r2
 800abbc:	902d883a 	mov	r22,r18
 800abc0:	003eac06 	br	800a674 <__alt_data_end+0xfc00a674>

0800abc4 <__subdf3>:
 800abc4:	02000434 	movhi	r8,16
 800abc8:	423fffc4 	addi	r8,r8,-1
 800abcc:	defffb04 	addi	sp,sp,-20
 800abd0:	2a14703a 	and	r10,r5,r8
 800abd4:	3812d53a 	srli	r9,r7,20
 800abd8:	3a10703a 	and	r8,r7,r8
 800abdc:	2006d77a 	srli	r3,r4,29
 800abe0:	3004d77a 	srli	r2,r6,29
 800abe4:	dc000015 	stw	r16,0(sp)
 800abe8:	501490fa 	slli	r10,r10,3
 800abec:	2820d53a 	srli	r16,r5,20
 800abf0:	401090fa 	slli	r8,r8,3
 800abf4:	dc800215 	stw	r18,8(sp)
 800abf8:	dc400115 	stw	r17,4(sp)
 800abfc:	dfc00415 	stw	ra,16(sp)
 800ac00:	202290fa 	slli	r17,r4,3
 800ac04:	dcc00315 	stw	r19,12(sp)
 800ac08:	4a41ffcc 	andi	r9,r9,2047
 800ac0c:	0101ffc4 	movi	r4,2047
 800ac10:	2824d7fa 	srli	r18,r5,31
 800ac14:	8401ffcc 	andi	r16,r16,2047
 800ac18:	50c6b03a 	or	r3,r10,r3
 800ac1c:	380ed7fa 	srli	r7,r7,31
 800ac20:	408ab03a 	or	r5,r8,r2
 800ac24:	300c90fa 	slli	r6,r6,3
 800ac28:	49009626 	beq	r9,r4,800ae84 <__subdf3+0x2c0>
 800ac2c:	39c0005c 	xori	r7,r7,1
 800ac30:	8245c83a 	sub	r2,r16,r9
 800ac34:	3c807426 	beq	r7,r18,800ae08 <__subdf3+0x244>
 800ac38:	0080af0e 	bge	zero,r2,800aef8 <__subdf3+0x334>
 800ac3c:	48002a1e 	bne	r9,zero,800ace8 <__subdf3+0x124>
 800ac40:	2988b03a 	or	r4,r5,r6
 800ac44:	20009a1e 	bne	r4,zero,800aeb0 <__subdf3+0x2ec>
 800ac48:	888001cc 	andi	r2,r17,7
 800ac4c:	10000726 	beq	r2,zero,800ac6c <__subdf3+0xa8>
 800ac50:	888003cc 	andi	r2,r17,15
 800ac54:	01000104 	movi	r4,4
 800ac58:	11000426 	beq	r2,r4,800ac6c <__subdf3+0xa8>
 800ac5c:	890b883a 	add	r5,r17,r4
 800ac60:	2c63803a 	cmpltu	r17,r5,r17
 800ac64:	1c47883a 	add	r3,r3,r17
 800ac68:	2823883a 	mov	r17,r5
 800ac6c:	1880202c 	andhi	r2,r3,128
 800ac70:	10005926 	beq	r2,zero,800add8 <__subdf3+0x214>
 800ac74:	84000044 	addi	r16,r16,1
 800ac78:	0081ffc4 	movi	r2,2047
 800ac7c:	8080be26 	beq	r16,r2,800af78 <__subdf3+0x3b4>
 800ac80:	017fe034 	movhi	r5,65408
 800ac84:	297fffc4 	addi	r5,r5,-1
 800ac88:	1946703a 	and	r3,r3,r5
 800ac8c:	1804977a 	slli	r2,r3,29
 800ac90:	1806927a 	slli	r3,r3,9
 800ac94:	8822d0fa 	srli	r17,r17,3
 800ac98:	8401ffcc 	andi	r16,r16,2047
 800ac9c:	180ad33a 	srli	r5,r3,12
 800aca0:	9100004c 	andi	r4,r18,1
 800aca4:	1444b03a 	or	r2,r2,r17
 800aca8:	80c1ffcc 	andi	r3,r16,2047
 800acac:	1820953a 	slli	r16,r3,20
 800acb0:	20c03fcc 	andi	r3,r4,255
 800acb4:	180897fa 	slli	r4,r3,31
 800acb8:	00c00434 	movhi	r3,16
 800acbc:	18ffffc4 	addi	r3,r3,-1
 800acc0:	28c6703a 	and	r3,r5,r3
 800acc4:	1c06b03a 	or	r3,r3,r16
 800acc8:	1906b03a 	or	r3,r3,r4
 800accc:	dfc00417 	ldw	ra,16(sp)
 800acd0:	dcc00317 	ldw	r19,12(sp)
 800acd4:	dc800217 	ldw	r18,8(sp)
 800acd8:	dc400117 	ldw	r17,4(sp)
 800acdc:	dc000017 	ldw	r16,0(sp)
 800ace0:	dec00504 	addi	sp,sp,20
 800ace4:	f800283a 	ret
 800ace8:	0101ffc4 	movi	r4,2047
 800acec:	813fd626 	beq	r16,r4,800ac48 <__alt_data_end+0xfc00ac48>
 800acf0:	29402034 	orhi	r5,r5,128
 800acf4:	01000e04 	movi	r4,56
 800acf8:	2080a316 	blt	r4,r2,800af88 <__subdf3+0x3c4>
 800acfc:	010007c4 	movi	r4,31
 800ad00:	2080c616 	blt	r4,r2,800b01c <__subdf3+0x458>
 800ad04:	01000804 	movi	r4,32
 800ad08:	2089c83a 	sub	r4,r4,r2
 800ad0c:	2910983a 	sll	r8,r5,r4
 800ad10:	308ed83a 	srl	r7,r6,r2
 800ad14:	3108983a 	sll	r4,r6,r4
 800ad18:	2884d83a 	srl	r2,r5,r2
 800ad1c:	41ccb03a 	or	r6,r8,r7
 800ad20:	2008c03a 	cmpne	r4,r4,zero
 800ad24:	310cb03a 	or	r6,r6,r4
 800ad28:	898dc83a 	sub	r6,r17,r6
 800ad2c:	89a3803a 	cmpltu	r17,r17,r6
 800ad30:	1887c83a 	sub	r3,r3,r2
 800ad34:	1c47c83a 	sub	r3,r3,r17
 800ad38:	3023883a 	mov	r17,r6
 800ad3c:	1880202c 	andhi	r2,r3,128
 800ad40:	10002326 	beq	r2,zero,800add0 <__subdf3+0x20c>
 800ad44:	04c02034 	movhi	r19,128
 800ad48:	9cffffc4 	addi	r19,r19,-1
 800ad4c:	1ce6703a 	and	r19,r3,r19
 800ad50:	98007a26 	beq	r19,zero,800af3c <__subdf3+0x378>
 800ad54:	9809883a 	mov	r4,r19
 800ad58:	800b6c40 	call	800b6c4 <__clzsi2>
 800ad5c:	113ffe04 	addi	r4,r2,-8
 800ad60:	00c007c4 	movi	r3,31
 800ad64:	19007b16 	blt	r3,r4,800af54 <__subdf3+0x390>
 800ad68:	00800804 	movi	r2,32
 800ad6c:	1105c83a 	sub	r2,r2,r4
 800ad70:	8884d83a 	srl	r2,r17,r2
 800ad74:	9906983a 	sll	r3,r19,r4
 800ad78:	8922983a 	sll	r17,r17,r4
 800ad7c:	10c4b03a 	or	r2,r2,r3
 800ad80:	24007816 	blt	r4,r16,800af64 <__subdf3+0x3a0>
 800ad84:	2421c83a 	sub	r16,r4,r16
 800ad88:	80c00044 	addi	r3,r16,1
 800ad8c:	010007c4 	movi	r4,31
 800ad90:	20c09516 	blt	r4,r3,800afe8 <__subdf3+0x424>
 800ad94:	01400804 	movi	r5,32
 800ad98:	28cbc83a 	sub	r5,r5,r3
 800ad9c:	88c8d83a 	srl	r4,r17,r3
 800ada0:	8962983a 	sll	r17,r17,r5
 800ada4:	114a983a 	sll	r5,r2,r5
 800ada8:	10c6d83a 	srl	r3,r2,r3
 800adac:	8804c03a 	cmpne	r2,r17,zero
 800adb0:	290ab03a 	or	r5,r5,r4
 800adb4:	28a2b03a 	or	r17,r5,r2
 800adb8:	0021883a 	mov	r16,zero
 800adbc:	003fa206 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800adc0:	2090b03a 	or	r8,r4,r2
 800adc4:	40018e26 	beq	r8,zero,800b400 <__subdf3+0x83c>
 800adc8:	1007883a 	mov	r3,r2
 800adcc:	2023883a 	mov	r17,r4
 800add0:	888001cc 	andi	r2,r17,7
 800add4:	103f9e1e 	bne	r2,zero,800ac50 <__alt_data_end+0xfc00ac50>
 800add8:	1804977a 	slli	r2,r3,29
 800addc:	8822d0fa 	srli	r17,r17,3
 800ade0:	1810d0fa 	srli	r8,r3,3
 800ade4:	9100004c 	andi	r4,r18,1
 800ade8:	1444b03a 	or	r2,r2,r17
 800adec:	00c1ffc4 	movi	r3,2047
 800adf0:	80c02826 	beq	r16,r3,800ae94 <__subdf3+0x2d0>
 800adf4:	01400434 	movhi	r5,16
 800adf8:	297fffc4 	addi	r5,r5,-1
 800adfc:	80e0703a 	and	r16,r16,r3
 800ae00:	414a703a 	and	r5,r8,r5
 800ae04:	003fa806 	br	800aca8 <__alt_data_end+0xfc00aca8>
 800ae08:	0080630e 	bge	zero,r2,800af98 <__subdf3+0x3d4>
 800ae0c:	48003026 	beq	r9,zero,800aed0 <__subdf3+0x30c>
 800ae10:	0101ffc4 	movi	r4,2047
 800ae14:	813f8c26 	beq	r16,r4,800ac48 <__alt_data_end+0xfc00ac48>
 800ae18:	29402034 	orhi	r5,r5,128
 800ae1c:	01000e04 	movi	r4,56
 800ae20:	2080a90e 	bge	r4,r2,800b0c8 <__subdf3+0x504>
 800ae24:	298cb03a 	or	r6,r5,r6
 800ae28:	3012c03a 	cmpne	r9,r6,zero
 800ae2c:	0005883a 	mov	r2,zero
 800ae30:	4c53883a 	add	r9,r9,r17
 800ae34:	4c63803a 	cmpltu	r17,r9,r17
 800ae38:	10c7883a 	add	r3,r2,r3
 800ae3c:	88c7883a 	add	r3,r17,r3
 800ae40:	4823883a 	mov	r17,r9
 800ae44:	1880202c 	andhi	r2,r3,128
 800ae48:	1000d026 	beq	r2,zero,800b18c <__subdf3+0x5c8>
 800ae4c:	84000044 	addi	r16,r16,1
 800ae50:	0081ffc4 	movi	r2,2047
 800ae54:	8080fe26 	beq	r16,r2,800b250 <__subdf3+0x68c>
 800ae58:	00bfe034 	movhi	r2,65408
 800ae5c:	10bfffc4 	addi	r2,r2,-1
 800ae60:	1886703a 	and	r3,r3,r2
 800ae64:	880ad07a 	srli	r5,r17,1
 800ae68:	180497fa 	slli	r2,r3,31
 800ae6c:	8900004c 	andi	r4,r17,1
 800ae70:	2922b03a 	or	r17,r5,r4
 800ae74:	1806d07a 	srli	r3,r3,1
 800ae78:	1462b03a 	or	r17,r2,r17
 800ae7c:	3825883a 	mov	r18,r7
 800ae80:	003f7106 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800ae84:	2984b03a 	or	r2,r5,r6
 800ae88:	103f6826 	beq	r2,zero,800ac2c <__alt_data_end+0xfc00ac2c>
 800ae8c:	39c03fcc 	andi	r7,r7,255
 800ae90:	003f6706 	br	800ac30 <__alt_data_end+0xfc00ac30>
 800ae94:	4086b03a 	or	r3,r8,r2
 800ae98:	18015226 	beq	r3,zero,800b3e4 <__subdf3+0x820>
 800ae9c:	00c00434 	movhi	r3,16
 800aea0:	41400234 	orhi	r5,r8,8
 800aea4:	18ffffc4 	addi	r3,r3,-1
 800aea8:	28ca703a 	and	r5,r5,r3
 800aeac:	003f7e06 	br	800aca8 <__alt_data_end+0xfc00aca8>
 800aeb0:	10bfffc4 	addi	r2,r2,-1
 800aeb4:	1000491e 	bne	r2,zero,800afdc <__subdf3+0x418>
 800aeb8:	898fc83a 	sub	r7,r17,r6
 800aebc:	89e3803a 	cmpltu	r17,r17,r7
 800aec0:	1947c83a 	sub	r3,r3,r5
 800aec4:	1c47c83a 	sub	r3,r3,r17
 800aec8:	3823883a 	mov	r17,r7
 800aecc:	003f9b06 	br	800ad3c <__alt_data_end+0xfc00ad3c>
 800aed0:	2988b03a 	or	r4,r5,r6
 800aed4:	203f5c26 	beq	r4,zero,800ac48 <__alt_data_end+0xfc00ac48>
 800aed8:	10bfffc4 	addi	r2,r2,-1
 800aedc:	1000931e 	bne	r2,zero,800b12c <__subdf3+0x568>
 800aee0:	898d883a 	add	r6,r17,r6
 800aee4:	3463803a 	cmpltu	r17,r6,r17
 800aee8:	1947883a 	add	r3,r3,r5
 800aeec:	88c7883a 	add	r3,r17,r3
 800aef0:	3023883a 	mov	r17,r6
 800aef4:	003fd306 	br	800ae44 <__alt_data_end+0xfc00ae44>
 800aef8:	1000541e 	bne	r2,zero,800b04c <__subdf3+0x488>
 800aefc:	80800044 	addi	r2,r16,1
 800af00:	1081ffcc 	andi	r2,r2,2047
 800af04:	01000044 	movi	r4,1
 800af08:	2080a20e 	bge	r4,r2,800b194 <__subdf3+0x5d0>
 800af0c:	8989c83a 	sub	r4,r17,r6
 800af10:	8905803a 	cmpltu	r2,r17,r4
 800af14:	1967c83a 	sub	r19,r3,r5
 800af18:	98a7c83a 	sub	r19,r19,r2
 800af1c:	9880202c 	andhi	r2,r19,128
 800af20:	10006326 	beq	r2,zero,800b0b0 <__subdf3+0x4ec>
 800af24:	3463c83a 	sub	r17,r6,r17
 800af28:	28c7c83a 	sub	r3,r5,r3
 800af2c:	344d803a 	cmpltu	r6,r6,r17
 800af30:	19a7c83a 	sub	r19,r3,r6
 800af34:	3825883a 	mov	r18,r7
 800af38:	983f861e 	bne	r19,zero,800ad54 <__alt_data_end+0xfc00ad54>
 800af3c:	8809883a 	mov	r4,r17
 800af40:	800b6c40 	call	800b6c4 <__clzsi2>
 800af44:	10800804 	addi	r2,r2,32
 800af48:	113ffe04 	addi	r4,r2,-8
 800af4c:	00c007c4 	movi	r3,31
 800af50:	193f850e 	bge	r3,r4,800ad68 <__alt_data_end+0xfc00ad68>
 800af54:	10bff604 	addi	r2,r2,-40
 800af58:	8884983a 	sll	r2,r17,r2
 800af5c:	0023883a 	mov	r17,zero
 800af60:	243f880e 	bge	r4,r16,800ad84 <__alt_data_end+0xfc00ad84>
 800af64:	00ffe034 	movhi	r3,65408
 800af68:	18ffffc4 	addi	r3,r3,-1
 800af6c:	8121c83a 	sub	r16,r16,r4
 800af70:	10c6703a 	and	r3,r2,r3
 800af74:	003f3406 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800af78:	9100004c 	andi	r4,r18,1
 800af7c:	000b883a 	mov	r5,zero
 800af80:	0005883a 	mov	r2,zero
 800af84:	003f4806 	br	800aca8 <__alt_data_end+0xfc00aca8>
 800af88:	298cb03a 	or	r6,r5,r6
 800af8c:	300cc03a 	cmpne	r6,r6,zero
 800af90:	0005883a 	mov	r2,zero
 800af94:	003f6406 	br	800ad28 <__alt_data_end+0xfc00ad28>
 800af98:	10009a1e 	bne	r2,zero,800b204 <__subdf3+0x640>
 800af9c:	82400044 	addi	r9,r16,1
 800afa0:	4881ffcc 	andi	r2,r9,2047
 800afa4:	02800044 	movi	r10,1
 800afa8:	5080670e 	bge	r10,r2,800b148 <__subdf3+0x584>
 800afac:	0081ffc4 	movi	r2,2047
 800afb0:	4880af26 	beq	r9,r2,800b270 <__subdf3+0x6ac>
 800afb4:	898d883a 	add	r6,r17,r6
 800afb8:	1945883a 	add	r2,r3,r5
 800afbc:	3447803a 	cmpltu	r3,r6,r17
 800afc0:	1887883a 	add	r3,r3,r2
 800afc4:	182297fa 	slli	r17,r3,31
 800afc8:	300cd07a 	srli	r6,r6,1
 800afcc:	1806d07a 	srli	r3,r3,1
 800afd0:	4821883a 	mov	r16,r9
 800afd4:	89a2b03a 	or	r17,r17,r6
 800afd8:	003f1b06 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800afdc:	0101ffc4 	movi	r4,2047
 800afe0:	813f441e 	bne	r16,r4,800acf4 <__alt_data_end+0xfc00acf4>
 800afe4:	003f1806 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800afe8:	843ff844 	addi	r16,r16,-31
 800afec:	01400804 	movi	r5,32
 800aff0:	1408d83a 	srl	r4,r2,r16
 800aff4:	19405026 	beq	r3,r5,800b138 <__subdf3+0x574>
 800aff8:	01401004 	movi	r5,64
 800affc:	28c7c83a 	sub	r3,r5,r3
 800b000:	10c4983a 	sll	r2,r2,r3
 800b004:	88a2b03a 	or	r17,r17,r2
 800b008:	8822c03a 	cmpne	r17,r17,zero
 800b00c:	2462b03a 	or	r17,r4,r17
 800b010:	0007883a 	mov	r3,zero
 800b014:	0021883a 	mov	r16,zero
 800b018:	003f6d06 	br	800add0 <__alt_data_end+0xfc00add0>
 800b01c:	11fff804 	addi	r7,r2,-32
 800b020:	01000804 	movi	r4,32
 800b024:	29ced83a 	srl	r7,r5,r7
 800b028:	11004526 	beq	r2,r4,800b140 <__subdf3+0x57c>
 800b02c:	01001004 	movi	r4,64
 800b030:	2089c83a 	sub	r4,r4,r2
 800b034:	2904983a 	sll	r2,r5,r4
 800b038:	118cb03a 	or	r6,r2,r6
 800b03c:	300cc03a 	cmpne	r6,r6,zero
 800b040:	398cb03a 	or	r6,r7,r6
 800b044:	0005883a 	mov	r2,zero
 800b048:	003f3706 	br	800ad28 <__alt_data_end+0xfc00ad28>
 800b04c:	80002a26 	beq	r16,zero,800b0f8 <__subdf3+0x534>
 800b050:	0101ffc4 	movi	r4,2047
 800b054:	49006626 	beq	r9,r4,800b1f0 <__subdf3+0x62c>
 800b058:	0085c83a 	sub	r2,zero,r2
 800b05c:	18c02034 	orhi	r3,r3,128
 800b060:	01000e04 	movi	r4,56
 800b064:	20807e16 	blt	r4,r2,800b260 <__subdf3+0x69c>
 800b068:	010007c4 	movi	r4,31
 800b06c:	2080e716 	blt	r4,r2,800b40c <__subdf3+0x848>
 800b070:	01000804 	movi	r4,32
 800b074:	2089c83a 	sub	r4,r4,r2
 800b078:	1914983a 	sll	r10,r3,r4
 800b07c:	8890d83a 	srl	r8,r17,r2
 800b080:	8908983a 	sll	r4,r17,r4
 800b084:	1884d83a 	srl	r2,r3,r2
 800b088:	5222b03a 	or	r17,r10,r8
 800b08c:	2006c03a 	cmpne	r3,r4,zero
 800b090:	88e2b03a 	or	r17,r17,r3
 800b094:	3463c83a 	sub	r17,r6,r17
 800b098:	2885c83a 	sub	r2,r5,r2
 800b09c:	344d803a 	cmpltu	r6,r6,r17
 800b0a0:	1187c83a 	sub	r3,r2,r6
 800b0a4:	4821883a 	mov	r16,r9
 800b0a8:	3825883a 	mov	r18,r7
 800b0ac:	003f2306 	br	800ad3c <__alt_data_end+0xfc00ad3c>
 800b0b0:	24d0b03a 	or	r8,r4,r19
 800b0b4:	40001b1e 	bne	r8,zero,800b124 <__subdf3+0x560>
 800b0b8:	0005883a 	mov	r2,zero
 800b0bc:	0009883a 	mov	r4,zero
 800b0c0:	0021883a 	mov	r16,zero
 800b0c4:	003f4906 	br	800adec <__alt_data_end+0xfc00adec>
 800b0c8:	010007c4 	movi	r4,31
 800b0cc:	20803a16 	blt	r4,r2,800b1b8 <__subdf3+0x5f4>
 800b0d0:	01000804 	movi	r4,32
 800b0d4:	2089c83a 	sub	r4,r4,r2
 800b0d8:	2912983a 	sll	r9,r5,r4
 800b0dc:	3090d83a 	srl	r8,r6,r2
 800b0e0:	3108983a 	sll	r4,r6,r4
 800b0e4:	2884d83a 	srl	r2,r5,r2
 800b0e8:	4a12b03a 	or	r9,r9,r8
 800b0ec:	2008c03a 	cmpne	r4,r4,zero
 800b0f0:	4912b03a 	or	r9,r9,r4
 800b0f4:	003f4e06 	br	800ae30 <__alt_data_end+0xfc00ae30>
 800b0f8:	1c48b03a 	or	r4,r3,r17
 800b0fc:	20003c26 	beq	r4,zero,800b1f0 <__subdf3+0x62c>
 800b100:	0084303a 	nor	r2,zero,r2
 800b104:	1000381e 	bne	r2,zero,800b1e8 <__subdf3+0x624>
 800b108:	3463c83a 	sub	r17,r6,r17
 800b10c:	28c5c83a 	sub	r2,r5,r3
 800b110:	344d803a 	cmpltu	r6,r6,r17
 800b114:	1187c83a 	sub	r3,r2,r6
 800b118:	4821883a 	mov	r16,r9
 800b11c:	3825883a 	mov	r18,r7
 800b120:	003f0606 	br	800ad3c <__alt_data_end+0xfc00ad3c>
 800b124:	2023883a 	mov	r17,r4
 800b128:	003f0906 	br	800ad50 <__alt_data_end+0xfc00ad50>
 800b12c:	0101ffc4 	movi	r4,2047
 800b130:	813f3a1e 	bne	r16,r4,800ae1c <__alt_data_end+0xfc00ae1c>
 800b134:	003ec406 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b138:	0005883a 	mov	r2,zero
 800b13c:	003fb106 	br	800b004 <__alt_data_end+0xfc00b004>
 800b140:	0005883a 	mov	r2,zero
 800b144:	003fbc06 	br	800b038 <__alt_data_end+0xfc00b038>
 800b148:	1c44b03a 	or	r2,r3,r17
 800b14c:	80008e1e 	bne	r16,zero,800b388 <__subdf3+0x7c4>
 800b150:	1000c826 	beq	r2,zero,800b474 <__subdf3+0x8b0>
 800b154:	2984b03a 	or	r2,r5,r6
 800b158:	103ebb26 	beq	r2,zero,800ac48 <__alt_data_end+0xfc00ac48>
 800b15c:	8989883a 	add	r4,r17,r6
 800b160:	1945883a 	add	r2,r3,r5
 800b164:	2447803a 	cmpltu	r3,r4,r17
 800b168:	1887883a 	add	r3,r3,r2
 800b16c:	1880202c 	andhi	r2,r3,128
 800b170:	2023883a 	mov	r17,r4
 800b174:	103f1626 	beq	r2,zero,800add0 <__alt_data_end+0xfc00add0>
 800b178:	00bfe034 	movhi	r2,65408
 800b17c:	10bfffc4 	addi	r2,r2,-1
 800b180:	5021883a 	mov	r16,r10
 800b184:	1886703a 	and	r3,r3,r2
 800b188:	003eaf06 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b18c:	3825883a 	mov	r18,r7
 800b190:	003f0f06 	br	800add0 <__alt_data_end+0xfc00add0>
 800b194:	1c44b03a 	or	r2,r3,r17
 800b198:	8000251e 	bne	r16,zero,800b230 <__subdf3+0x66c>
 800b19c:	1000661e 	bne	r2,zero,800b338 <__subdf3+0x774>
 800b1a0:	2990b03a 	or	r8,r5,r6
 800b1a4:	40009626 	beq	r8,zero,800b400 <__subdf3+0x83c>
 800b1a8:	2807883a 	mov	r3,r5
 800b1ac:	3023883a 	mov	r17,r6
 800b1b0:	3825883a 	mov	r18,r7
 800b1b4:	003ea406 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b1b8:	127ff804 	addi	r9,r2,-32
 800b1bc:	01000804 	movi	r4,32
 800b1c0:	2a52d83a 	srl	r9,r5,r9
 800b1c4:	11008c26 	beq	r2,r4,800b3f8 <__subdf3+0x834>
 800b1c8:	01001004 	movi	r4,64
 800b1cc:	2085c83a 	sub	r2,r4,r2
 800b1d0:	2884983a 	sll	r2,r5,r2
 800b1d4:	118cb03a 	or	r6,r2,r6
 800b1d8:	300cc03a 	cmpne	r6,r6,zero
 800b1dc:	4992b03a 	or	r9,r9,r6
 800b1e0:	0005883a 	mov	r2,zero
 800b1e4:	003f1206 	br	800ae30 <__alt_data_end+0xfc00ae30>
 800b1e8:	0101ffc4 	movi	r4,2047
 800b1ec:	493f9c1e 	bne	r9,r4,800b060 <__alt_data_end+0xfc00b060>
 800b1f0:	2807883a 	mov	r3,r5
 800b1f4:	3023883a 	mov	r17,r6
 800b1f8:	4821883a 	mov	r16,r9
 800b1fc:	3825883a 	mov	r18,r7
 800b200:	003e9106 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b204:	80001f1e 	bne	r16,zero,800b284 <__subdf3+0x6c0>
 800b208:	1c48b03a 	or	r4,r3,r17
 800b20c:	20005a26 	beq	r4,zero,800b378 <__subdf3+0x7b4>
 800b210:	0084303a 	nor	r2,zero,r2
 800b214:	1000561e 	bne	r2,zero,800b370 <__subdf3+0x7ac>
 800b218:	89a3883a 	add	r17,r17,r6
 800b21c:	1945883a 	add	r2,r3,r5
 800b220:	898d803a 	cmpltu	r6,r17,r6
 800b224:	3087883a 	add	r3,r6,r2
 800b228:	4821883a 	mov	r16,r9
 800b22c:	003f0506 	br	800ae44 <__alt_data_end+0xfc00ae44>
 800b230:	10002b1e 	bne	r2,zero,800b2e0 <__subdf3+0x71c>
 800b234:	2984b03a 	or	r2,r5,r6
 800b238:	10008026 	beq	r2,zero,800b43c <__subdf3+0x878>
 800b23c:	2807883a 	mov	r3,r5
 800b240:	3023883a 	mov	r17,r6
 800b244:	3825883a 	mov	r18,r7
 800b248:	0401ffc4 	movi	r16,2047
 800b24c:	003e7e06 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b250:	3809883a 	mov	r4,r7
 800b254:	0011883a 	mov	r8,zero
 800b258:	0005883a 	mov	r2,zero
 800b25c:	003ee306 	br	800adec <__alt_data_end+0xfc00adec>
 800b260:	1c62b03a 	or	r17,r3,r17
 800b264:	8822c03a 	cmpne	r17,r17,zero
 800b268:	0005883a 	mov	r2,zero
 800b26c:	003f8906 	br	800b094 <__alt_data_end+0xfc00b094>
 800b270:	3809883a 	mov	r4,r7
 800b274:	4821883a 	mov	r16,r9
 800b278:	0011883a 	mov	r8,zero
 800b27c:	0005883a 	mov	r2,zero
 800b280:	003eda06 	br	800adec <__alt_data_end+0xfc00adec>
 800b284:	0101ffc4 	movi	r4,2047
 800b288:	49003b26 	beq	r9,r4,800b378 <__subdf3+0x7b4>
 800b28c:	0085c83a 	sub	r2,zero,r2
 800b290:	18c02034 	orhi	r3,r3,128
 800b294:	01000e04 	movi	r4,56
 800b298:	20806e16 	blt	r4,r2,800b454 <__subdf3+0x890>
 800b29c:	010007c4 	movi	r4,31
 800b2a0:	20807716 	blt	r4,r2,800b480 <__subdf3+0x8bc>
 800b2a4:	01000804 	movi	r4,32
 800b2a8:	2089c83a 	sub	r4,r4,r2
 800b2ac:	1914983a 	sll	r10,r3,r4
 800b2b0:	8890d83a 	srl	r8,r17,r2
 800b2b4:	8908983a 	sll	r4,r17,r4
 800b2b8:	1884d83a 	srl	r2,r3,r2
 800b2bc:	5222b03a 	or	r17,r10,r8
 800b2c0:	2006c03a 	cmpne	r3,r4,zero
 800b2c4:	88e2b03a 	or	r17,r17,r3
 800b2c8:	89a3883a 	add	r17,r17,r6
 800b2cc:	1145883a 	add	r2,r2,r5
 800b2d0:	898d803a 	cmpltu	r6,r17,r6
 800b2d4:	3087883a 	add	r3,r6,r2
 800b2d8:	4821883a 	mov	r16,r9
 800b2dc:	003ed906 	br	800ae44 <__alt_data_end+0xfc00ae44>
 800b2e0:	2984b03a 	or	r2,r5,r6
 800b2e4:	10004226 	beq	r2,zero,800b3f0 <__subdf3+0x82c>
 800b2e8:	1808d0fa 	srli	r4,r3,3
 800b2ec:	8822d0fa 	srli	r17,r17,3
 800b2f0:	1806977a 	slli	r3,r3,29
 800b2f4:	2080022c 	andhi	r2,r4,8
 800b2f8:	1c62b03a 	or	r17,r3,r17
 800b2fc:	10000826 	beq	r2,zero,800b320 <__subdf3+0x75c>
 800b300:	2812d0fa 	srli	r9,r5,3
 800b304:	4880022c 	andhi	r2,r9,8
 800b308:	1000051e 	bne	r2,zero,800b320 <__subdf3+0x75c>
 800b30c:	300cd0fa 	srli	r6,r6,3
 800b310:	2804977a 	slli	r2,r5,29
 800b314:	4809883a 	mov	r4,r9
 800b318:	3825883a 	mov	r18,r7
 800b31c:	11a2b03a 	or	r17,r2,r6
 800b320:	8806d77a 	srli	r3,r17,29
 800b324:	200890fa 	slli	r4,r4,3
 800b328:	882290fa 	slli	r17,r17,3
 800b32c:	0401ffc4 	movi	r16,2047
 800b330:	1906b03a 	or	r3,r3,r4
 800b334:	003e4406 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b338:	2984b03a 	or	r2,r5,r6
 800b33c:	103e4226 	beq	r2,zero,800ac48 <__alt_data_end+0xfc00ac48>
 800b340:	8989c83a 	sub	r4,r17,r6
 800b344:	8911803a 	cmpltu	r8,r17,r4
 800b348:	1945c83a 	sub	r2,r3,r5
 800b34c:	1205c83a 	sub	r2,r2,r8
 800b350:	1200202c 	andhi	r8,r2,128
 800b354:	403e9a26 	beq	r8,zero,800adc0 <__alt_data_end+0xfc00adc0>
 800b358:	3463c83a 	sub	r17,r6,r17
 800b35c:	28c5c83a 	sub	r2,r5,r3
 800b360:	344d803a 	cmpltu	r6,r6,r17
 800b364:	1187c83a 	sub	r3,r2,r6
 800b368:	3825883a 	mov	r18,r7
 800b36c:	003e3606 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b370:	0101ffc4 	movi	r4,2047
 800b374:	493fc71e 	bne	r9,r4,800b294 <__alt_data_end+0xfc00b294>
 800b378:	2807883a 	mov	r3,r5
 800b37c:	3023883a 	mov	r17,r6
 800b380:	4821883a 	mov	r16,r9
 800b384:	003e3006 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b388:	10003626 	beq	r2,zero,800b464 <__subdf3+0x8a0>
 800b38c:	2984b03a 	or	r2,r5,r6
 800b390:	10001726 	beq	r2,zero,800b3f0 <__subdf3+0x82c>
 800b394:	1808d0fa 	srli	r4,r3,3
 800b398:	8822d0fa 	srli	r17,r17,3
 800b39c:	1806977a 	slli	r3,r3,29
 800b3a0:	2080022c 	andhi	r2,r4,8
 800b3a4:	1c62b03a 	or	r17,r3,r17
 800b3a8:	10000726 	beq	r2,zero,800b3c8 <__subdf3+0x804>
 800b3ac:	2812d0fa 	srli	r9,r5,3
 800b3b0:	4880022c 	andhi	r2,r9,8
 800b3b4:	1000041e 	bne	r2,zero,800b3c8 <__subdf3+0x804>
 800b3b8:	300cd0fa 	srli	r6,r6,3
 800b3bc:	2804977a 	slli	r2,r5,29
 800b3c0:	4809883a 	mov	r4,r9
 800b3c4:	11a2b03a 	or	r17,r2,r6
 800b3c8:	8806d77a 	srli	r3,r17,29
 800b3cc:	200890fa 	slli	r4,r4,3
 800b3d0:	882290fa 	slli	r17,r17,3
 800b3d4:	3825883a 	mov	r18,r7
 800b3d8:	1906b03a 	or	r3,r3,r4
 800b3dc:	0401ffc4 	movi	r16,2047
 800b3e0:	003e1906 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b3e4:	000b883a 	mov	r5,zero
 800b3e8:	0005883a 	mov	r2,zero
 800b3ec:	003e2e06 	br	800aca8 <__alt_data_end+0xfc00aca8>
 800b3f0:	0401ffc4 	movi	r16,2047
 800b3f4:	003e1406 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b3f8:	0005883a 	mov	r2,zero
 800b3fc:	003f7506 	br	800b1d4 <__alt_data_end+0xfc00b1d4>
 800b400:	0005883a 	mov	r2,zero
 800b404:	0009883a 	mov	r4,zero
 800b408:	003e7806 	br	800adec <__alt_data_end+0xfc00adec>
 800b40c:	123ff804 	addi	r8,r2,-32
 800b410:	01000804 	movi	r4,32
 800b414:	1a10d83a 	srl	r8,r3,r8
 800b418:	11002526 	beq	r2,r4,800b4b0 <__subdf3+0x8ec>
 800b41c:	01001004 	movi	r4,64
 800b420:	2085c83a 	sub	r2,r4,r2
 800b424:	1884983a 	sll	r2,r3,r2
 800b428:	1444b03a 	or	r2,r2,r17
 800b42c:	1004c03a 	cmpne	r2,r2,zero
 800b430:	40a2b03a 	or	r17,r8,r2
 800b434:	0005883a 	mov	r2,zero
 800b438:	003f1606 	br	800b094 <__alt_data_end+0xfc00b094>
 800b43c:	02000434 	movhi	r8,16
 800b440:	0009883a 	mov	r4,zero
 800b444:	423fffc4 	addi	r8,r8,-1
 800b448:	00bfffc4 	movi	r2,-1
 800b44c:	0401ffc4 	movi	r16,2047
 800b450:	003e6606 	br	800adec <__alt_data_end+0xfc00adec>
 800b454:	1c62b03a 	or	r17,r3,r17
 800b458:	8822c03a 	cmpne	r17,r17,zero
 800b45c:	0005883a 	mov	r2,zero
 800b460:	003f9906 	br	800b2c8 <__alt_data_end+0xfc00b2c8>
 800b464:	2807883a 	mov	r3,r5
 800b468:	3023883a 	mov	r17,r6
 800b46c:	0401ffc4 	movi	r16,2047
 800b470:	003df506 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b474:	2807883a 	mov	r3,r5
 800b478:	3023883a 	mov	r17,r6
 800b47c:	003df206 	br	800ac48 <__alt_data_end+0xfc00ac48>
 800b480:	123ff804 	addi	r8,r2,-32
 800b484:	01000804 	movi	r4,32
 800b488:	1a10d83a 	srl	r8,r3,r8
 800b48c:	11000a26 	beq	r2,r4,800b4b8 <__subdf3+0x8f4>
 800b490:	01001004 	movi	r4,64
 800b494:	2085c83a 	sub	r2,r4,r2
 800b498:	1884983a 	sll	r2,r3,r2
 800b49c:	1444b03a 	or	r2,r2,r17
 800b4a0:	1004c03a 	cmpne	r2,r2,zero
 800b4a4:	40a2b03a 	or	r17,r8,r2
 800b4a8:	0005883a 	mov	r2,zero
 800b4ac:	003f8606 	br	800b2c8 <__alt_data_end+0xfc00b2c8>
 800b4b0:	0005883a 	mov	r2,zero
 800b4b4:	003fdc06 	br	800b428 <__alt_data_end+0xfc00b428>
 800b4b8:	0005883a 	mov	r2,zero
 800b4bc:	003ff706 	br	800b49c <__alt_data_end+0xfc00b49c>

0800b4c0 <__fixdfsi>:
 800b4c0:	280cd53a 	srli	r6,r5,20
 800b4c4:	00c00434 	movhi	r3,16
 800b4c8:	18ffffc4 	addi	r3,r3,-1
 800b4cc:	3181ffcc 	andi	r6,r6,2047
 800b4d0:	01c0ff84 	movi	r7,1022
 800b4d4:	28c6703a 	and	r3,r5,r3
 800b4d8:	280ad7fa 	srli	r5,r5,31
 800b4dc:	3980120e 	bge	r7,r6,800b528 <__fixdfsi+0x68>
 800b4e0:	00810744 	movi	r2,1053
 800b4e4:	11800c16 	blt	r2,r6,800b518 <__fixdfsi+0x58>
 800b4e8:	00810cc4 	movi	r2,1075
 800b4ec:	1185c83a 	sub	r2,r2,r6
 800b4f0:	01c007c4 	movi	r7,31
 800b4f4:	18c00434 	orhi	r3,r3,16
 800b4f8:	38800d16 	blt	r7,r2,800b530 <__fixdfsi+0x70>
 800b4fc:	31befb44 	addi	r6,r6,-1043
 800b500:	2084d83a 	srl	r2,r4,r2
 800b504:	1986983a 	sll	r3,r3,r6
 800b508:	1884b03a 	or	r2,r3,r2
 800b50c:	28000726 	beq	r5,zero,800b52c <__fixdfsi+0x6c>
 800b510:	0085c83a 	sub	r2,zero,r2
 800b514:	f800283a 	ret
 800b518:	00a00034 	movhi	r2,32768
 800b51c:	10bfffc4 	addi	r2,r2,-1
 800b520:	2885883a 	add	r2,r5,r2
 800b524:	f800283a 	ret
 800b528:	0005883a 	mov	r2,zero
 800b52c:	f800283a 	ret
 800b530:	008104c4 	movi	r2,1043
 800b534:	1185c83a 	sub	r2,r2,r6
 800b538:	1884d83a 	srl	r2,r3,r2
 800b53c:	003ff306 	br	800b50c <__alt_data_end+0xfc00b50c>

0800b540 <__floatsidf>:
 800b540:	defffd04 	addi	sp,sp,-12
 800b544:	dfc00215 	stw	ra,8(sp)
 800b548:	dc400115 	stw	r17,4(sp)
 800b54c:	dc000015 	stw	r16,0(sp)
 800b550:	20002b26 	beq	r4,zero,800b600 <__floatsidf+0xc0>
 800b554:	2023883a 	mov	r17,r4
 800b558:	2020d7fa 	srli	r16,r4,31
 800b55c:	20002d16 	blt	r4,zero,800b614 <__floatsidf+0xd4>
 800b560:	8809883a 	mov	r4,r17
 800b564:	800b6c40 	call	800b6c4 <__clzsi2>
 800b568:	01410784 	movi	r5,1054
 800b56c:	288bc83a 	sub	r5,r5,r2
 800b570:	01010cc4 	movi	r4,1075
 800b574:	2149c83a 	sub	r4,r4,r5
 800b578:	00c007c4 	movi	r3,31
 800b57c:	1900160e 	bge	r3,r4,800b5d8 <__floatsidf+0x98>
 800b580:	00c104c4 	movi	r3,1043
 800b584:	1947c83a 	sub	r3,r3,r5
 800b588:	88c6983a 	sll	r3,r17,r3
 800b58c:	00800434 	movhi	r2,16
 800b590:	10bfffc4 	addi	r2,r2,-1
 800b594:	1886703a 	and	r3,r3,r2
 800b598:	2941ffcc 	andi	r5,r5,2047
 800b59c:	800d883a 	mov	r6,r16
 800b5a0:	0005883a 	mov	r2,zero
 800b5a4:	280a953a 	slli	r5,r5,20
 800b5a8:	31803fcc 	andi	r6,r6,255
 800b5ac:	01000434 	movhi	r4,16
 800b5b0:	300c97fa 	slli	r6,r6,31
 800b5b4:	213fffc4 	addi	r4,r4,-1
 800b5b8:	1906703a 	and	r3,r3,r4
 800b5bc:	1946b03a 	or	r3,r3,r5
 800b5c0:	1986b03a 	or	r3,r3,r6
 800b5c4:	dfc00217 	ldw	ra,8(sp)
 800b5c8:	dc400117 	ldw	r17,4(sp)
 800b5cc:	dc000017 	ldw	r16,0(sp)
 800b5d0:	dec00304 	addi	sp,sp,12
 800b5d4:	f800283a 	ret
 800b5d8:	00c002c4 	movi	r3,11
 800b5dc:	1887c83a 	sub	r3,r3,r2
 800b5e0:	88c6d83a 	srl	r3,r17,r3
 800b5e4:	8904983a 	sll	r2,r17,r4
 800b5e8:	01000434 	movhi	r4,16
 800b5ec:	213fffc4 	addi	r4,r4,-1
 800b5f0:	2941ffcc 	andi	r5,r5,2047
 800b5f4:	1906703a 	and	r3,r3,r4
 800b5f8:	800d883a 	mov	r6,r16
 800b5fc:	003fe906 	br	800b5a4 <__alt_data_end+0xfc00b5a4>
 800b600:	000d883a 	mov	r6,zero
 800b604:	000b883a 	mov	r5,zero
 800b608:	0007883a 	mov	r3,zero
 800b60c:	0005883a 	mov	r2,zero
 800b610:	003fe406 	br	800b5a4 <__alt_data_end+0xfc00b5a4>
 800b614:	0123c83a 	sub	r17,zero,r4
 800b618:	003fd106 	br	800b560 <__alt_data_end+0xfc00b560>

0800b61c <__floatunsidf>:
 800b61c:	defffe04 	addi	sp,sp,-8
 800b620:	dc000015 	stw	r16,0(sp)
 800b624:	dfc00115 	stw	ra,4(sp)
 800b628:	2021883a 	mov	r16,r4
 800b62c:	20002226 	beq	r4,zero,800b6b8 <__floatunsidf+0x9c>
 800b630:	800b6c40 	call	800b6c4 <__clzsi2>
 800b634:	01010784 	movi	r4,1054
 800b638:	2089c83a 	sub	r4,r4,r2
 800b63c:	01810cc4 	movi	r6,1075
 800b640:	310dc83a 	sub	r6,r6,r4
 800b644:	00c007c4 	movi	r3,31
 800b648:	1980120e 	bge	r3,r6,800b694 <__floatunsidf+0x78>
 800b64c:	00c104c4 	movi	r3,1043
 800b650:	1907c83a 	sub	r3,r3,r4
 800b654:	80ca983a 	sll	r5,r16,r3
 800b658:	00800434 	movhi	r2,16
 800b65c:	10bfffc4 	addi	r2,r2,-1
 800b660:	2101ffcc 	andi	r4,r4,2047
 800b664:	0021883a 	mov	r16,zero
 800b668:	288a703a 	and	r5,r5,r2
 800b66c:	2008953a 	slli	r4,r4,20
 800b670:	00c00434 	movhi	r3,16
 800b674:	18ffffc4 	addi	r3,r3,-1
 800b678:	28c6703a 	and	r3,r5,r3
 800b67c:	8005883a 	mov	r2,r16
 800b680:	1906b03a 	or	r3,r3,r4
 800b684:	dfc00117 	ldw	ra,4(sp)
 800b688:	dc000017 	ldw	r16,0(sp)
 800b68c:	dec00204 	addi	sp,sp,8
 800b690:	f800283a 	ret
 800b694:	00c002c4 	movi	r3,11
 800b698:	188bc83a 	sub	r5,r3,r2
 800b69c:	814ad83a 	srl	r5,r16,r5
 800b6a0:	00c00434 	movhi	r3,16
 800b6a4:	18ffffc4 	addi	r3,r3,-1
 800b6a8:	81a0983a 	sll	r16,r16,r6
 800b6ac:	2101ffcc 	andi	r4,r4,2047
 800b6b0:	28ca703a 	and	r5,r5,r3
 800b6b4:	003fed06 	br	800b66c <__alt_data_end+0xfc00b66c>
 800b6b8:	0009883a 	mov	r4,zero
 800b6bc:	000b883a 	mov	r5,zero
 800b6c0:	003fea06 	br	800b66c <__alt_data_end+0xfc00b66c>

0800b6c4 <__clzsi2>:
 800b6c4:	00bfffd4 	movui	r2,65535
 800b6c8:	11000536 	bltu	r2,r4,800b6e0 <__clzsi2+0x1c>
 800b6cc:	00803fc4 	movi	r2,255
 800b6d0:	11000f36 	bltu	r2,r4,800b710 <__clzsi2+0x4c>
 800b6d4:	00800804 	movi	r2,32
 800b6d8:	0007883a 	mov	r3,zero
 800b6dc:	00000506 	br	800b6f4 <__clzsi2+0x30>
 800b6e0:	00804034 	movhi	r2,256
 800b6e4:	10bfffc4 	addi	r2,r2,-1
 800b6e8:	11000c2e 	bgeu	r2,r4,800b71c <__clzsi2+0x58>
 800b6ec:	00800204 	movi	r2,8
 800b6f0:	00c00604 	movi	r3,24
 800b6f4:	20c8d83a 	srl	r4,r4,r3
 800b6f8:	00c200b4 	movhi	r3,2050
 800b6fc:	18eaea04 	addi	r3,r3,-21592
 800b700:	1909883a 	add	r4,r3,r4
 800b704:	20c00003 	ldbu	r3,0(r4)
 800b708:	10c5c83a 	sub	r2,r2,r3
 800b70c:	f800283a 	ret
 800b710:	00800604 	movi	r2,24
 800b714:	00c00204 	movi	r3,8
 800b718:	003ff606 	br	800b6f4 <__alt_data_end+0xfc00b6f4>
 800b71c:	00800404 	movi	r2,16
 800b720:	1007883a 	mov	r3,r2
 800b724:	003ff306 	br	800b6f4 <__alt_data_end+0xfc00b6f4>

0800b728 <__errno>:
 800b728:	008200b4 	movhi	r2,2050
 800b72c:	10b2dd04 	addi	r2,r2,-13452
 800b730:	10800017 	ldw	r2,0(r2)
 800b734:	f800283a 	ret

0800b738 <_printf_r>:
 800b738:	defffd04 	addi	sp,sp,-12
 800b73c:	2805883a 	mov	r2,r5
 800b740:	dfc00015 	stw	ra,0(sp)
 800b744:	d9800115 	stw	r6,4(sp)
 800b748:	d9c00215 	stw	r7,8(sp)
 800b74c:	21400217 	ldw	r5,8(r4)
 800b750:	d9c00104 	addi	r7,sp,4
 800b754:	100d883a 	mov	r6,r2
 800b758:	800b98c0 	call	800b98c <___vfprintf_internal_r>
 800b75c:	dfc00017 	ldw	ra,0(sp)
 800b760:	dec00304 	addi	sp,sp,12
 800b764:	f800283a 	ret

0800b768 <printf>:
 800b768:	defffc04 	addi	sp,sp,-16
 800b76c:	dfc00015 	stw	ra,0(sp)
 800b770:	d9400115 	stw	r5,4(sp)
 800b774:	d9800215 	stw	r6,8(sp)
 800b778:	d9c00315 	stw	r7,12(sp)
 800b77c:	008200b4 	movhi	r2,2050
 800b780:	10b2dd04 	addi	r2,r2,-13452
 800b784:	10800017 	ldw	r2,0(r2)
 800b788:	200b883a 	mov	r5,r4
 800b78c:	d9800104 	addi	r6,sp,4
 800b790:	11000217 	ldw	r4,8(r2)
 800b794:	800dc680 	call	800dc68 <__vfprintf_internal>
 800b798:	dfc00017 	ldw	ra,0(sp)
 800b79c:	dec00404 	addi	sp,sp,16
 800b7a0:	f800283a 	ret

0800b7a4 <_puts_r>:
 800b7a4:	defff604 	addi	sp,sp,-40
 800b7a8:	dc000715 	stw	r16,28(sp)
 800b7ac:	2021883a 	mov	r16,r4
 800b7b0:	2809883a 	mov	r4,r5
 800b7b4:	dc400815 	stw	r17,32(sp)
 800b7b8:	dfc00915 	stw	ra,36(sp)
 800b7bc:	2823883a 	mov	r17,r5
 800b7c0:	800b8f40 	call	800b8f4 <strlen>
 800b7c4:	10c00044 	addi	r3,r2,1
 800b7c8:	d8800115 	stw	r2,4(sp)
 800b7cc:	008200b4 	movhi	r2,2050
 800b7d0:	10ab2b04 	addi	r2,r2,-21332
 800b7d4:	d8800215 	stw	r2,8(sp)
 800b7d8:	00800044 	movi	r2,1
 800b7dc:	d8800315 	stw	r2,12(sp)
 800b7e0:	00800084 	movi	r2,2
 800b7e4:	dc400015 	stw	r17,0(sp)
 800b7e8:	d8c00615 	stw	r3,24(sp)
 800b7ec:	dec00415 	stw	sp,16(sp)
 800b7f0:	d8800515 	stw	r2,20(sp)
 800b7f4:	80000226 	beq	r16,zero,800b800 <_puts_r+0x5c>
 800b7f8:	80800e17 	ldw	r2,56(r16)
 800b7fc:	10001426 	beq	r2,zero,800b850 <_puts_r+0xac>
 800b800:	81400217 	ldw	r5,8(r16)
 800b804:	2880030b 	ldhu	r2,12(r5)
 800b808:	10c8000c 	andi	r3,r2,8192
 800b80c:	1800061e 	bne	r3,zero,800b828 <_puts_r+0x84>
 800b810:	29001917 	ldw	r4,100(r5)
 800b814:	00f7ffc4 	movi	r3,-8193
 800b818:	10880014 	ori	r2,r2,8192
 800b81c:	20c6703a 	and	r3,r4,r3
 800b820:	2880030d 	sth	r2,12(r5)
 800b824:	28c01915 	stw	r3,100(r5)
 800b828:	d9800404 	addi	r6,sp,16
 800b82c:	8009883a 	mov	r4,r16
 800b830:	80101d00 	call	80101d0 <__sfvwrite_r>
 800b834:	1000091e 	bne	r2,zero,800b85c <_puts_r+0xb8>
 800b838:	00800284 	movi	r2,10
 800b83c:	dfc00917 	ldw	ra,36(sp)
 800b840:	dc400817 	ldw	r17,32(sp)
 800b844:	dc000717 	ldw	r16,28(sp)
 800b848:	dec00a04 	addi	sp,sp,40
 800b84c:	f800283a 	ret
 800b850:	8009883a 	mov	r4,r16
 800b854:	800fd4c0 	call	800fd4c <__sinit>
 800b858:	003fe906 	br	800b800 <__alt_data_end+0xfc00b800>
 800b85c:	00bfffc4 	movi	r2,-1
 800b860:	003ff606 	br	800b83c <__alt_data_end+0xfc00b83c>

0800b864 <puts>:
 800b864:	008200b4 	movhi	r2,2050
 800b868:	10b2dd04 	addi	r2,r2,-13452
 800b86c:	200b883a 	mov	r5,r4
 800b870:	11000017 	ldw	r4,0(r2)
 800b874:	800b7a41 	jmpi	800b7a4 <_puts_r>

0800b878 <srand>:
 800b878:	008200b4 	movhi	r2,2050
 800b87c:	10b2dd04 	addi	r2,r2,-13452
 800b880:	10800017 	ldw	r2,0(r2)
 800b884:	11002915 	stw	r4,164(r2)
 800b888:	10002a15 	stw	zero,168(r2)
 800b88c:	f800283a 	ret

0800b890 <rand>:
 800b890:	008200b4 	movhi	r2,2050
 800b894:	defffe04 	addi	sp,sp,-8
 800b898:	10b2dd04 	addi	r2,r2,-13452
 800b89c:	dc000015 	stw	r16,0(sp)
 800b8a0:	14000017 	ldw	r16,0(r2)
 800b8a4:	dfc00115 	stw	ra,4(sp)
 800b8a8:	01932574 	movhi	r6,19605
 800b8ac:	81002917 	ldw	r4,164(r16)
 800b8b0:	81402a17 	ldw	r5,168(r16)
 800b8b4:	01d614b4 	movhi	r7,22610
 800b8b8:	319fcb44 	addi	r6,r6,32557
 800b8bc:	39fd0b44 	addi	r7,r7,-3027
 800b8c0:	80150400 	call	8015040 <__muldi3>
 800b8c4:	11000044 	addi	r4,r2,1
 800b8c8:	2085803a 	cmpltu	r2,r4,r2
 800b8cc:	10c7883a 	add	r3,r2,r3
 800b8d0:	00a00034 	movhi	r2,32768
 800b8d4:	10bfffc4 	addi	r2,r2,-1
 800b8d8:	1884703a 	and	r2,r3,r2
 800b8dc:	81002915 	stw	r4,164(r16)
 800b8e0:	80c02a15 	stw	r3,168(r16)
 800b8e4:	dfc00117 	ldw	ra,4(sp)
 800b8e8:	dc000017 	ldw	r16,0(sp)
 800b8ec:	dec00204 	addi	sp,sp,8
 800b8f0:	f800283a 	ret

0800b8f4 <strlen>:
 800b8f4:	208000cc 	andi	r2,r4,3
 800b8f8:	10002026 	beq	r2,zero,800b97c <strlen+0x88>
 800b8fc:	20800007 	ldb	r2,0(r4)
 800b900:	10002026 	beq	r2,zero,800b984 <strlen+0x90>
 800b904:	2005883a 	mov	r2,r4
 800b908:	00000206 	br	800b914 <strlen+0x20>
 800b90c:	10c00007 	ldb	r3,0(r2)
 800b910:	18001826 	beq	r3,zero,800b974 <strlen+0x80>
 800b914:	10800044 	addi	r2,r2,1
 800b918:	10c000cc 	andi	r3,r2,3
 800b91c:	183ffb1e 	bne	r3,zero,800b90c <__alt_data_end+0xfc00b90c>
 800b920:	10c00017 	ldw	r3,0(r2)
 800b924:	01ffbff4 	movhi	r7,65279
 800b928:	39ffbfc4 	addi	r7,r7,-257
 800b92c:	00ca303a 	nor	r5,zero,r3
 800b930:	01a02074 	movhi	r6,32897
 800b934:	19c7883a 	add	r3,r3,r7
 800b938:	31a02004 	addi	r6,r6,-32640
 800b93c:	1946703a 	and	r3,r3,r5
 800b940:	1986703a 	and	r3,r3,r6
 800b944:	1800091e 	bne	r3,zero,800b96c <strlen+0x78>
 800b948:	10800104 	addi	r2,r2,4
 800b94c:	10c00017 	ldw	r3,0(r2)
 800b950:	19cb883a 	add	r5,r3,r7
 800b954:	00c6303a 	nor	r3,zero,r3
 800b958:	28c6703a 	and	r3,r5,r3
 800b95c:	1986703a 	and	r3,r3,r6
 800b960:	183ff926 	beq	r3,zero,800b948 <__alt_data_end+0xfc00b948>
 800b964:	00000106 	br	800b96c <strlen+0x78>
 800b968:	10800044 	addi	r2,r2,1
 800b96c:	10c00007 	ldb	r3,0(r2)
 800b970:	183ffd1e 	bne	r3,zero,800b968 <__alt_data_end+0xfc00b968>
 800b974:	1105c83a 	sub	r2,r2,r4
 800b978:	f800283a 	ret
 800b97c:	2005883a 	mov	r2,r4
 800b980:	003fe706 	br	800b920 <__alt_data_end+0xfc00b920>
 800b984:	0005883a 	mov	r2,zero
 800b988:	f800283a 	ret

0800b98c <___vfprintf_internal_r>:
 800b98c:	deffb804 	addi	sp,sp,-288
 800b990:	dfc04715 	stw	ra,284(sp)
 800b994:	ddc04515 	stw	r23,276(sp)
 800b998:	dd404315 	stw	r21,268(sp)
 800b99c:	d9002d15 	stw	r4,180(sp)
 800b9a0:	282f883a 	mov	r23,r5
 800b9a4:	302b883a 	mov	r21,r6
 800b9a8:	d9c02e15 	stw	r7,184(sp)
 800b9ac:	df004615 	stw	fp,280(sp)
 800b9b0:	dd804415 	stw	r22,272(sp)
 800b9b4:	dd004215 	stw	r20,264(sp)
 800b9b8:	dcc04115 	stw	r19,260(sp)
 800b9bc:	dc804015 	stw	r18,256(sp)
 800b9c0:	dc403f15 	stw	r17,252(sp)
 800b9c4:	dc003e15 	stw	r16,248(sp)
 800b9c8:	80108cc0 	call	80108cc <_localeconv_r>
 800b9cc:	10800017 	ldw	r2,0(r2)
 800b9d0:	1009883a 	mov	r4,r2
 800b9d4:	d8803415 	stw	r2,208(sp)
 800b9d8:	800b8f40 	call	800b8f4 <strlen>
 800b9dc:	d8803715 	stw	r2,220(sp)
 800b9e0:	d8802d17 	ldw	r2,180(sp)
 800b9e4:	10000226 	beq	r2,zero,800b9f0 <___vfprintf_internal_r+0x64>
 800b9e8:	10800e17 	ldw	r2,56(r2)
 800b9ec:	1000fb26 	beq	r2,zero,800bddc <___vfprintf_internal_r+0x450>
 800b9f0:	b880030b 	ldhu	r2,12(r23)
 800b9f4:	10c8000c 	andi	r3,r2,8192
 800b9f8:	1800061e 	bne	r3,zero,800ba14 <___vfprintf_internal_r+0x88>
 800b9fc:	b9001917 	ldw	r4,100(r23)
 800ba00:	00f7ffc4 	movi	r3,-8193
 800ba04:	10880014 	ori	r2,r2,8192
 800ba08:	20c6703a 	and	r3,r4,r3
 800ba0c:	b880030d 	sth	r2,12(r23)
 800ba10:	b8c01915 	stw	r3,100(r23)
 800ba14:	10c0020c 	andi	r3,r2,8
 800ba18:	1800c326 	beq	r3,zero,800bd28 <___vfprintf_internal_r+0x39c>
 800ba1c:	b8c00417 	ldw	r3,16(r23)
 800ba20:	1800c126 	beq	r3,zero,800bd28 <___vfprintf_internal_r+0x39c>
 800ba24:	1080068c 	andi	r2,r2,26
 800ba28:	00c00284 	movi	r3,10
 800ba2c:	10c0c626 	beq	r2,r3,800bd48 <___vfprintf_internal_r+0x3bc>
 800ba30:	d8c00404 	addi	r3,sp,16
 800ba34:	050200b4 	movhi	r20,2050
 800ba38:	d9001e04 	addi	r4,sp,120
 800ba3c:	a52b3c84 	addi	r20,r20,-21262
 800ba40:	d8c01e15 	stw	r3,120(sp)
 800ba44:	d8002015 	stw	zero,128(sp)
 800ba48:	d8001f15 	stw	zero,124(sp)
 800ba4c:	d8003315 	stw	zero,204(sp)
 800ba50:	d8003615 	stw	zero,216(sp)
 800ba54:	d8003815 	stw	zero,224(sp)
 800ba58:	1811883a 	mov	r8,r3
 800ba5c:	d8003915 	stw	zero,228(sp)
 800ba60:	d8003a15 	stw	zero,232(sp)
 800ba64:	d8002f15 	stw	zero,188(sp)
 800ba68:	d9002815 	stw	r4,160(sp)
 800ba6c:	a8800007 	ldb	r2,0(r21)
 800ba70:	10028b26 	beq	r2,zero,800c4a0 <___vfprintf_internal_r+0xb14>
 800ba74:	00c00944 	movi	r3,37
 800ba78:	a823883a 	mov	r17,r21
 800ba7c:	10c0021e 	bne	r2,r3,800ba88 <___vfprintf_internal_r+0xfc>
 800ba80:	00001406 	br	800bad4 <___vfprintf_internal_r+0x148>
 800ba84:	10c00326 	beq	r2,r3,800ba94 <___vfprintf_internal_r+0x108>
 800ba88:	8c400044 	addi	r17,r17,1
 800ba8c:	88800007 	ldb	r2,0(r17)
 800ba90:	103ffc1e 	bne	r2,zero,800ba84 <__alt_data_end+0xfc00ba84>
 800ba94:	8d61c83a 	sub	r16,r17,r21
 800ba98:	80000e26 	beq	r16,zero,800bad4 <___vfprintf_internal_r+0x148>
 800ba9c:	d8c02017 	ldw	r3,128(sp)
 800baa0:	d8801f17 	ldw	r2,124(sp)
 800baa4:	45400015 	stw	r21,0(r8)
 800baa8:	1c07883a 	add	r3,r3,r16
 800baac:	10800044 	addi	r2,r2,1
 800bab0:	d8c02015 	stw	r3,128(sp)
 800bab4:	44000115 	stw	r16,4(r8)
 800bab8:	d8801f15 	stw	r2,124(sp)
 800babc:	00c001c4 	movi	r3,7
 800bac0:	1880a916 	blt	r3,r2,800bd68 <___vfprintf_internal_r+0x3dc>
 800bac4:	42000204 	addi	r8,r8,8
 800bac8:	d9402f17 	ldw	r5,188(sp)
 800bacc:	2c0b883a 	add	r5,r5,r16
 800bad0:	d9402f15 	stw	r5,188(sp)
 800bad4:	88800007 	ldb	r2,0(r17)
 800bad8:	1000aa26 	beq	r2,zero,800bd84 <___vfprintf_internal_r+0x3f8>
 800badc:	8d400044 	addi	r21,r17,1
 800bae0:	8c400047 	ldb	r17,1(r17)
 800bae4:	0021883a 	mov	r16,zero
 800bae8:	00bfffc4 	movi	r2,-1
 800baec:	0025883a 	mov	r18,zero
 800baf0:	dc002905 	stb	r16,164(sp)
 800baf4:	d8002785 	stb	zero,158(sp)
 800baf8:	d8002b05 	stb	zero,172(sp)
 800bafc:	d8802a15 	stw	r2,168(sp)
 800bb00:	d8003115 	stw	zero,196(sp)
 800bb04:	04c01604 	movi	r19,88
 800bb08:	05800244 	movi	r22,9
 800bb0c:	9021883a 	mov	r16,r18
 800bb10:	4039883a 	mov	fp,r8
 800bb14:	ad400044 	addi	r21,r21,1
 800bb18:	88bff804 	addi	r2,r17,-32
 800bb1c:	98833236 	bltu	r19,r2,800c7e8 <___vfprintf_internal_r+0xe5c>
 800bb20:	100490ba 	slli	r2,r2,2
 800bb24:	00c20074 	movhi	r3,2049
 800bb28:	18eece04 	addi	r3,r3,-17608
 800bb2c:	10c5883a 	add	r2,r2,r3
 800bb30:	10800017 	ldw	r2,0(r2)
 800bb34:	1000683a 	jmp	r2
 800bb38:	0800c6e0 	cmpeqi	zero,at,795
 800bb3c:	0800c7e8 	cmpgeui	zero,at,799
 800bb40:	0800c7e8 	cmpgeui	zero,at,799
 800bb44:	0800c700 	call	800c70 <__alt_mem_onchip_memory2_0+0x800c70>
 800bb48:	0800c7e8 	cmpgeui	zero,at,799
 800bb4c:	0800c7e8 	cmpgeui	zero,at,799
 800bb50:	0800c7e8 	cmpgeui	zero,at,799
 800bb54:	0800c7e8 	cmpgeui	zero,at,799
 800bb58:	0800c7e8 	cmpgeui	zero,at,799
 800bb5c:	0800c7e8 	cmpgeui	zero,at,799
 800bb60:	0800bde8 	cmpgeui	zero,at,759
 800bb64:	0800c5f0 	cmpltui	zero,at,791
 800bb68:	0800c7e8 	cmpgeui	zero,at,799
 800bb6c:	0800bcac 	andhi	zero,at,754
 800bb70:	0800be0c 	andi	zero,at,760
 800bb74:	0800c7e8 	cmpgeui	zero,at,799
 800bb78:	0800be5c 	xori	zero,at,761
 800bb7c:	0800be68 	cmpgeui	zero,at,761
 800bb80:	0800be68 	cmpgeui	zero,at,761
 800bb84:	0800be68 	cmpgeui	zero,at,761
 800bb88:	0800be68 	cmpgeui	zero,at,761
 800bb8c:	0800be68 	cmpgeui	zero,at,761
 800bb90:	0800be68 	cmpgeui	zero,at,761
 800bb94:	0800be68 	cmpgeui	zero,at,761
 800bb98:	0800be68 	cmpgeui	zero,at,761
 800bb9c:	0800be68 	cmpgeui	zero,at,761
 800bba0:	0800c7e8 	cmpgeui	zero,at,799
 800bba4:	0800c7e8 	cmpgeui	zero,at,799
 800bba8:	0800c7e8 	cmpgeui	zero,at,799
 800bbac:	0800c7e8 	cmpgeui	zero,at,799
 800bbb0:	0800c7e8 	cmpgeui	zero,at,799
 800bbb4:	0800c7e8 	cmpgeui	zero,at,799
 800bbb8:	0800c7e8 	cmpgeui	zero,at,799
 800bbbc:	0800c7e8 	cmpgeui	zero,at,799
 800bbc0:	0800c7e8 	cmpgeui	zero,at,799
 800bbc4:	0800c7e8 	cmpgeui	zero,at,799
 800bbc8:	0800bea4 	muli	zero,at,762
 800bbcc:	0800bf6c 	andhi	zero,at,765
 800bbd0:	0800c7e8 	cmpgeui	zero,at,799
 800bbd4:	0800bf6c 	andhi	zero,at,765
 800bbd8:	0800c7e8 	cmpgeui	zero,at,799
 800bbdc:	0800c7e8 	cmpgeui	zero,at,799
 800bbe0:	0800c7e8 	cmpgeui	zero,at,799
 800bbe4:	0800c7e8 	cmpgeui	zero,at,799
 800bbe8:	0800c018 	cmpnei	zero,at,768
 800bbec:	0800c7e8 	cmpgeui	zero,at,799
 800bbf0:	0800c7e8 	cmpgeui	zero,at,799
 800bbf4:	0800c024 	muli	zero,at,768
 800bbf8:	0800c7e8 	cmpgeui	zero,at,799
 800bbfc:	0800c7e8 	cmpgeui	zero,at,799
 800bc00:	0800c7e8 	cmpgeui	zero,at,799
 800bc04:	0800c7e8 	cmpgeui	zero,at,799
 800bc08:	0800c7e8 	cmpgeui	zero,at,799
 800bc0c:	0800c4a8 	cmpgeui	zero,at,786
 800bc10:	0800c7e8 	cmpgeui	zero,at,799
 800bc14:	0800c7e8 	cmpgeui	zero,at,799
 800bc18:	0800c514 	ori	zero,at,788
 800bc1c:	0800c7e8 	cmpgeui	zero,at,799
 800bc20:	0800c7e8 	cmpgeui	zero,at,799
 800bc24:	0800c7e8 	cmpgeui	zero,at,799
 800bc28:	0800c7e8 	cmpgeui	zero,at,799
 800bc2c:	0800c7e8 	cmpgeui	zero,at,799
 800bc30:	0800c7e8 	cmpgeui	zero,at,799
 800bc34:	0800c7e8 	cmpgeui	zero,at,799
 800bc38:	0800c7e8 	cmpgeui	zero,at,799
 800bc3c:	0800c7e8 	cmpgeui	zero,at,799
 800bc40:	0800c7e8 	cmpgeui	zero,at,799
 800bc44:	0800c78c 	andi	zero,at,798
 800bc48:	0800c70c 	andi	zero,at,796
 800bc4c:	0800bf6c 	andhi	zero,at,765
 800bc50:	0800bf6c 	andhi	zero,at,765
 800bc54:	0800bf6c 	andhi	zero,at,765
 800bc58:	0800c72c 	andhi	zero,at,796
 800bc5c:	0800c70c 	andi	zero,at,796
 800bc60:	0800c7e8 	cmpgeui	zero,at,799
 800bc64:	0800c7e8 	cmpgeui	zero,at,799
 800bc68:	0800c738 	rdprs	zero,at,796
 800bc6c:	0800c7e8 	cmpgeui	zero,at,799
 800bc70:	0800c74c 	andi	zero,at,797
 800bc74:	0800c5d0 	cmplti	zero,at,791
 800bc78:	0800bcb8 	rdprs	zero,at,754
 800bc7c:	0800c608 	cmpgei	zero,at,792
 800bc80:	0800c7e8 	cmpgeui	zero,at,799
 800bc84:	0800c614 	ori	zero,at,792
 800bc88:	0800c7e8 	cmpgeui	zero,at,799
 800bc8c:	0800c678 	rdprs	zero,at,793
 800bc90:	0800c7e8 	cmpgeui	zero,at,799
 800bc94:	0800c7e8 	cmpgeui	zero,at,799
 800bc98:	0800c698 	cmpnei	zero,at,794
 800bc9c:	d8c03117 	ldw	r3,196(sp)
 800bca0:	d8802e15 	stw	r2,184(sp)
 800bca4:	00c7c83a 	sub	r3,zero,r3
 800bca8:	d8c03115 	stw	r3,196(sp)
 800bcac:	84000114 	ori	r16,r16,4
 800bcb0:	ac400007 	ldb	r17,0(r21)
 800bcb4:	003f9706 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800bcb8:	00800c04 	movi	r2,48
 800bcbc:	d8802705 	stb	r2,156(sp)
 800bcc0:	00801e04 	movi	r2,120
 800bcc4:	d8802745 	stb	r2,157(sp)
 800bcc8:	d9002a17 	ldw	r4,168(sp)
 800bccc:	d8802e17 	ldw	r2,184(sp)
 800bcd0:	d8002785 	stb	zero,158(sp)
 800bcd4:	e011883a 	mov	r8,fp
 800bcd8:	10c00104 	addi	r3,r2,4
 800bcdc:	14c00017 	ldw	r19,0(r2)
 800bce0:	002d883a 	mov	r22,zero
 800bce4:	80800094 	ori	r2,r16,2
 800bce8:	2002ca16 	blt	r4,zero,800c814 <___vfprintf_internal_r+0xe88>
 800bcec:	00bfdfc4 	movi	r2,-129
 800bcf0:	80a4703a 	and	r18,r16,r2
 800bcf4:	d8c02e15 	stw	r3,184(sp)
 800bcf8:	94800094 	ori	r18,r18,2
 800bcfc:	9802b41e 	bne	r19,zero,800c7d0 <___vfprintf_internal_r+0xe44>
 800bd00:	014200b4 	movhi	r5,2050
 800bd04:	296b3504 	addi	r5,r5,-21292
 800bd08:	d9403915 	stw	r5,228(sp)
 800bd0c:	04401e04 	movi	r17,120
 800bd10:	d8802a17 	ldw	r2,168(sp)
 800bd14:	0039883a 	mov	fp,zero
 800bd18:	1001fa26 	beq	r2,zero,800c504 <___vfprintf_internal_r+0xb78>
 800bd1c:	0027883a 	mov	r19,zero
 800bd20:	002d883a 	mov	r22,zero
 800bd24:	00021906 	br	800c58c <___vfprintf_internal_r+0xc00>
 800bd28:	d9002d17 	ldw	r4,180(sp)
 800bd2c:	b80b883a 	mov	r5,r23
 800bd30:	800dd400 	call	800dd40 <__swsetup_r>
 800bd34:	1005dc1e 	bne	r2,zero,800d4a8 <___vfprintf_internal_r+0x1b1c>
 800bd38:	b880030b 	ldhu	r2,12(r23)
 800bd3c:	00c00284 	movi	r3,10
 800bd40:	1080068c 	andi	r2,r2,26
 800bd44:	10ff3a1e 	bne	r2,r3,800ba30 <__alt_data_end+0xfc00ba30>
 800bd48:	b880038f 	ldh	r2,14(r23)
 800bd4c:	103f3816 	blt	r2,zero,800ba30 <__alt_data_end+0xfc00ba30>
 800bd50:	d9c02e17 	ldw	r7,184(sp)
 800bd54:	d9002d17 	ldw	r4,180(sp)
 800bd58:	a80d883a 	mov	r6,r21
 800bd5c:	b80b883a 	mov	r5,r23
 800bd60:	800dc840 	call	800dc84 <__sbprintf>
 800bd64:	00001106 	br	800bdac <___vfprintf_internal_r+0x420>
 800bd68:	d9002d17 	ldw	r4,180(sp)
 800bd6c:	d9801e04 	addi	r6,sp,120
 800bd70:	b80b883a 	mov	r5,r23
 800bd74:	80130f80 	call	80130f8 <__sprint_r>
 800bd78:	1000081e 	bne	r2,zero,800bd9c <___vfprintf_internal_r+0x410>
 800bd7c:	da000404 	addi	r8,sp,16
 800bd80:	003f5106 	br	800bac8 <__alt_data_end+0xfc00bac8>
 800bd84:	d8802017 	ldw	r2,128(sp)
 800bd88:	10000426 	beq	r2,zero,800bd9c <___vfprintf_internal_r+0x410>
 800bd8c:	d9002d17 	ldw	r4,180(sp)
 800bd90:	d9801e04 	addi	r6,sp,120
 800bd94:	b80b883a 	mov	r5,r23
 800bd98:	80130f80 	call	80130f8 <__sprint_r>
 800bd9c:	b880030b 	ldhu	r2,12(r23)
 800bda0:	1080100c 	andi	r2,r2,64
 800bda4:	1005c01e 	bne	r2,zero,800d4a8 <___vfprintf_internal_r+0x1b1c>
 800bda8:	d8802f17 	ldw	r2,188(sp)
 800bdac:	dfc04717 	ldw	ra,284(sp)
 800bdb0:	df004617 	ldw	fp,280(sp)
 800bdb4:	ddc04517 	ldw	r23,276(sp)
 800bdb8:	dd804417 	ldw	r22,272(sp)
 800bdbc:	dd404317 	ldw	r21,268(sp)
 800bdc0:	dd004217 	ldw	r20,264(sp)
 800bdc4:	dcc04117 	ldw	r19,260(sp)
 800bdc8:	dc804017 	ldw	r18,256(sp)
 800bdcc:	dc403f17 	ldw	r17,252(sp)
 800bdd0:	dc003e17 	ldw	r16,248(sp)
 800bdd4:	dec04804 	addi	sp,sp,288
 800bdd8:	f800283a 	ret
 800bddc:	d9002d17 	ldw	r4,180(sp)
 800bde0:	800fd4c0 	call	800fd4c <__sinit>
 800bde4:	003f0206 	br	800b9f0 <__alt_data_end+0xfc00b9f0>
 800bde8:	d9002e17 	ldw	r4,184(sp)
 800bdec:	d9402e17 	ldw	r5,184(sp)
 800bdf0:	21000017 	ldw	r4,0(r4)
 800bdf4:	28800104 	addi	r2,r5,4
 800bdf8:	d9003115 	stw	r4,196(sp)
 800bdfc:	203fa716 	blt	r4,zero,800bc9c <__alt_data_end+0xfc00bc9c>
 800be00:	d8802e15 	stw	r2,184(sp)
 800be04:	ac400007 	ldb	r17,0(r21)
 800be08:	003f4206 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800be0c:	ac400007 	ldb	r17,0(r21)
 800be10:	01000a84 	movi	r4,42
 800be14:	a8c00044 	addi	r3,r21,1
 800be18:	89075826 	beq	r17,r4,800db7c <___vfprintf_internal_r+0x21f0>
 800be1c:	8cbff404 	addi	r18,r17,-48
 800be20:	b486ae36 	bltu	r22,r18,800d8dc <___vfprintf_internal_r+0x1f50>
 800be24:	0009883a 	mov	r4,zero
 800be28:	1823883a 	mov	r17,r3
 800be2c:	01400284 	movi	r5,10
 800be30:	800832c0 	call	800832c <__mulsi3>
 800be34:	88c00007 	ldb	r3,0(r17)
 800be38:	1489883a 	add	r4,r2,r18
 800be3c:	8d400044 	addi	r21,r17,1
 800be40:	1cbff404 	addi	r18,r3,-48
 800be44:	a823883a 	mov	r17,r21
 800be48:	b4bff82e 	bgeu	r22,r18,800be2c <__alt_data_end+0xfc00be2c>
 800be4c:	1823883a 	mov	r17,r3
 800be50:	2005f616 	blt	r4,zero,800d62c <___vfprintf_internal_r+0x1ca0>
 800be54:	d9002a15 	stw	r4,168(sp)
 800be58:	003f2f06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800be5c:	84002014 	ori	r16,r16,128
 800be60:	ac400007 	ldb	r17,0(r21)
 800be64:	003f2b06 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800be68:	8cbff404 	addi	r18,r17,-48
 800be6c:	d8003115 	stw	zero,196(sp)
 800be70:	0009883a 	mov	r4,zero
 800be74:	a823883a 	mov	r17,r21
 800be78:	01400284 	movi	r5,10
 800be7c:	800832c0 	call	800832c <__mulsi3>
 800be80:	88c00007 	ldb	r3,0(r17)
 800be84:	9089883a 	add	r4,r18,r2
 800be88:	ad400044 	addi	r21,r21,1
 800be8c:	1cbff404 	addi	r18,r3,-48
 800be90:	a823883a 	mov	r17,r21
 800be94:	b4bff82e 	bgeu	r22,r18,800be78 <__alt_data_end+0xfc00be78>
 800be98:	1823883a 	mov	r17,r3
 800be9c:	d9003115 	stw	r4,196(sp)
 800bea0:	003f1d06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bea4:	8025883a 	mov	r18,r16
 800bea8:	dc002903 	ldbu	r16,164(sp)
 800beac:	e011883a 	mov	r8,fp
 800beb0:	84003fcc 	andi	r16,r16,255
 800beb4:	8007531e 	bne	r16,zero,800dc04 <___vfprintf_internal_r+0x2278>
 800beb8:	94800414 	ori	r18,r18,16
 800bebc:	9080080c 	andi	r2,r18,32
 800bec0:	1003a326 	beq	r2,zero,800cd50 <___vfprintf_internal_r+0x13c4>
 800bec4:	d9002e17 	ldw	r4,184(sp)
 800bec8:	20800117 	ldw	r2,4(r4)
 800becc:	24c00017 	ldw	r19,0(r4)
 800bed0:	21000204 	addi	r4,r4,8
 800bed4:	d9002e15 	stw	r4,184(sp)
 800bed8:	102d883a 	mov	r22,r2
 800bedc:	10047316 	blt	r2,zero,800d0ac <___vfprintf_internal_r+0x1720>
 800bee0:	d9002a17 	ldw	r4,168(sp)
 800bee4:	df002783 	ldbu	fp,158(sp)
 800bee8:	2003e416 	blt	r4,zero,800ce7c <___vfprintf_internal_r+0x14f0>
 800beec:	00ffdfc4 	movi	r3,-129
 800bef0:	9d84b03a 	or	r2,r19,r22
 800bef4:	90e4703a 	and	r18,r18,r3
 800bef8:	10018026 	beq	r2,zero,800c4fc <___vfprintf_internal_r+0xb70>
 800befc:	b003ab26 	beq	r22,zero,800cdac <___vfprintf_internal_r+0x1420>
 800bf00:	dc402915 	stw	r17,164(sp)
 800bf04:	dc001e04 	addi	r16,sp,120
 800bf08:	b023883a 	mov	r17,r22
 800bf0c:	402d883a 	mov	r22,r8
 800bf10:	9809883a 	mov	r4,r19
 800bf14:	880b883a 	mov	r5,r17
 800bf18:	01800284 	movi	r6,10
 800bf1c:	000f883a 	mov	r7,zero
 800bf20:	80157480 	call	8015748 <__umoddi3>
 800bf24:	10800c04 	addi	r2,r2,48
 800bf28:	843fffc4 	addi	r16,r16,-1
 800bf2c:	9809883a 	mov	r4,r19
 800bf30:	880b883a 	mov	r5,r17
 800bf34:	80800005 	stb	r2,0(r16)
 800bf38:	01800284 	movi	r6,10
 800bf3c:	000f883a 	mov	r7,zero
 800bf40:	801514c0 	call	801514c <__udivdi3>
 800bf44:	1027883a 	mov	r19,r2
 800bf48:	10c4b03a 	or	r2,r2,r3
 800bf4c:	1823883a 	mov	r17,r3
 800bf50:	103fef1e 	bne	r2,zero,800bf10 <__alt_data_end+0xfc00bf10>
 800bf54:	d8c02817 	ldw	r3,160(sp)
 800bf58:	dc402917 	ldw	r17,164(sp)
 800bf5c:	b011883a 	mov	r8,r22
 800bf60:	1c07c83a 	sub	r3,r3,r16
 800bf64:	d8c02b15 	stw	r3,172(sp)
 800bf68:	00005f06 	br	800c0e8 <___vfprintf_internal_r+0x75c>
 800bf6c:	8025883a 	mov	r18,r16
 800bf70:	dc002903 	ldbu	r16,164(sp)
 800bf74:	e011883a 	mov	r8,fp
 800bf78:	84003fcc 	andi	r16,r16,255
 800bf7c:	80071e1e 	bne	r16,zero,800dbf8 <___vfprintf_internal_r+0x226c>
 800bf80:	9080020c 	andi	r2,r18,8
 800bf84:	1004af26 	beq	r2,zero,800d244 <___vfprintf_internal_r+0x18b8>
 800bf88:	d9002e17 	ldw	r4,184(sp)
 800bf8c:	d9402e17 	ldw	r5,184(sp)
 800bf90:	d8802e17 	ldw	r2,184(sp)
 800bf94:	21000017 	ldw	r4,0(r4)
 800bf98:	29400117 	ldw	r5,4(r5)
 800bf9c:	10800204 	addi	r2,r2,8
 800bfa0:	d9003615 	stw	r4,216(sp)
 800bfa4:	d9403815 	stw	r5,224(sp)
 800bfa8:	d8802e15 	stw	r2,184(sp)
 800bfac:	d9003617 	ldw	r4,216(sp)
 800bfb0:	d9403817 	ldw	r5,224(sp)
 800bfb4:	da003d15 	stw	r8,244(sp)
 800bfb8:	04000044 	movi	r16,1
 800bfbc:	8007c780 	call	8007c78 <__fpclassifyd>
 800bfc0:	da003d17 	ldw	r8,244(sp)
 800bfc4:	1404441e 	bne	r2,r16,800d0d8 <___vfprintf_internal_r+0x174c>
 800bfc8:	d9003617 	ldw	r4,216(sp)
 800bfcc:	d9403817 	ldw	r5,224(sp)
 800bfd0:	000d883a 	mov	r6,zero
 800bfd4:	000f883a 	mov	r7,zero
 800bfd8:	800a2640 	call	800a264 <__ledf2>
 800bfdc:	da003d17 	ldw	r8,244(sp)
 800bfe0:	1005e316 	blt	r2,zero,800d770 <___vfprintf_internal_r+0x1de4>
 800bfe4:	df002783 	ldbu	fp,158(sp)
 800bfe8:	008011c4 	movi	r2,71
 800bfec:	1445580e 	bge	r2,r17,800d550 <___vfprintf_internal_r+0x1bc4>
 800bff0:	040200b4 	movhi	r16,2050
 800bff4:	842b2d04 	addi	r16,r16,-21324
 800bff8:	00c000c4 	movi	r3,3
 800bffc:	00bfdfc4 	movi	r2,-129
 800c000:	d8c02915 	stw	r3,164(sp)
 800c004:	90a4703a 	and	r18,r18,r2
 800c008:	d8c02b15 	stw	r3,172(sp)
 800c00c:	d8002a15 	stw	zero,168(sp)
 800c010:	d8003215 	stw	zero,200(sp)
 800c014:	00003a06 	br	800c100 <___vfprintf_internal_r+0x774>
 800c018:	84000214 	ori	r16,r16,8
 800c01c:	ac400007 	ldb	r17,0(r21)
 800c020:	003ebc06 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c024:	8025883a 	mov	r18,r16
 800c028:	dc002903 	ldbu	r16,164(sp)
 800c02c:	e011883a 	mov	r8,fp
 800c030:	84003fcc 	andi	r16,r16,255
 800c034:	8007001e 	bne	r16,zero,800dc38 <___vfprintf_internal_r+0x22ac>
 800c038:	94800414 	ori	r18,r18,16
 800c03c:	9080080c 	andi	r2,r18,32
 800c040:	1002fa26 	beq	r2,zero,800cc2c <___vfprintf_internal_r+0x12a0>
 800c044:	d9002e17 	ldw	r4,184(sp)
 800c048:	d9402a17 	ldw	r5,168(sp)
 800c04c:	d8002785 	stb	zero,158(sp)
 800c050:	20800204 	addi	r2,r4,8
 800c054:	24c00017 	ldw	r19,0(r4)
 800c058:	25800117 	ldw	r22,4(r4)
 800c05c:	2804b116 	blt	r5,zero,800d324 <___vfprintf_internal_r+0x1998>
 800c060:	013fdfc4 	movi	r4,-129
 800c064:	9d86b03a 	or	r3,r19,r22
 800c068:	d8802e15 	stw	r2,184(sp)
 800c06c:	9124703a 	and	r18,r18,r4
 800c070:	1802fb1e 	bne	r3,zero,800cc60 <___vfprintf_internal_r+0x12d4>
 800c074:	d8c02a17 	ldw	r3,168(sp)
 800c078:	0039883a 	mov	fp,zero
 800c07c:	1805e526 	beq	r3,zero,800d814 <___vfprintf_internal_r+0x1e88>
 800c080:	0027883a 	mov	r19,zero
 800c084:	002d883a 	mov	r22,zero
 800c088:	dc001e04 	addi	r16,sp,120
 800c08c:	9806d0fa 	srli	r3,r19,3
 800c090:	b008977a 	slli	r4,r22,29
 800c094:	b02cd0fa 	srli	r22,r22,3
 800c098:	9cc001cc 	andi	r19,r19,7
 800c09c:	98800c04 	addi	r2,r19,48
 800c0a0:	843fffc4 	addi	r16,r16,-1
 800c0a4:	20e6b03a 	or	r19,r4,r3
 800c0a8:	80800005 	stb	r2,0(r16)
 800c0ac:	9d86b03a 	or	r3,r19,r22
 800c0b0:	183ff61e 	bne	r3,zero,800c08c <__alt_data_end+0xfc00c08c>
 800c0b4:	90c0004c 	andi	r3,r18,1
 800c0b8:	18014126 	beq	r3,zero,800c5c0 <___vfprintf_internal_r+0xc34>
 800c0bc:	10803fcc 	andi	r2,r2,255
 800c0c0:	1080201c 	xori	r2,r2,128
 800c0c4:	10bfe004 	addi	r2,r2,-128
 800c0c8:	00c00c04 	movi	r3,48
 800c0cc:	10c13c26 	beq	r2,r3,800c5c0 <___vfprintf_internal_r+0xc34>
 800c0d0:	80ffffc5 	stb	r3,-1(r16)
 800c0d4:	d8c02817 	ldw	r3,160(sp)
 800c0d8:	80bfffc4 	addi	r2,r16,-1
 800c0dc:	1021883a 	mov	r16,r2
 800c0e0:	1887c83a 	sub	r3,r3,r2
 800c0e4:	d8c02b15 	stw	r3,172(sp)
 800c0e8:	d8802b17 	ldw	r2,172(sp)
 800c0ec:	d9002a17 	ldw	r4,168(sp)
 800c0f0:	1100010e 	bge	r2,r4,800c0f8 <___vfprintf_internal_r+0x76c>
 800c0f4:	2005883a 	mov	r2,r4
 800c0f8:	d8802915 	stw	r2,164(sp)
 800c0fc:	d8003215 	stw	zero,200(sp)
 800c100:	e7003fcc 	andi	fp,fp,255
 800c104:	e700201c 	xori	fp,fp,128
 800c108:	e73fe004 	addi	fp,fp,-128
 800c10c:	e0000326 	beq	fp,zero,800c11c <___vfprintf_internal_r+0x790>
 800c110:	d8c02917 	ldw	r3,164(sp)
 800c114:	18c00044 	addi	r3,r3,1
 800c118:	d8c02915 	stw	r3,164(sp)
 800c11c:	90c0008c 	andi	r3,r18,2
 800c120:	d8c02c15 	stw	r3,176(sp)
 800c124:	18000326 	beq	r3,zero,800c134 <___vfprintf_internal_r+0x7a8>
 800c128:	d8c02917 	ldw	r3,164(sp)
 800c12c:	18c00084 	addi	r3,r3,2
 800c130:	d8c02915 	stw	r3,164(sp)
 800c134:	90c0210c 	andi	r3,r18,132
 800c138:	d8c03015 	stw	r3,192(sp)
 800c13c:	1801c51e 	bne	r3,zero,800c854 <___vfprintf_internal_r+0xec8>
 800c140:	d9003117 	ldw	r4,196(sp)
 800c144:	d8c02917 	ldw	r3,164(sp)
 800c148:	20e7c83a 	sub	r19,r4,r3
 800c14c:	04c1c10e 	bge	zero,r19,800c854 <___vfprintf_internal_r+0xec8>
 800c150:	02400404 	movi	r9,16
 800c154:	d8c02017 	ldw	r3,128(sp)
 800c158:	d8801f17 	ldw	r2,124(sp)
 800c15c:	4cc52f0e 	bge	r9,r19,800d61c <___vfprintf_internal_r+0x1c90>
 800c160:	014200b4 	movhi	r5,2050
 800c164:	296b4084 	addi	r5,r5,-21246
 800c168:	dc403b15 	stw	r17,236(sp)
 800c16c:	d9403515 	stw	r5,212(sp)
 800c170:	9823883a 	mov	r17,r19
 800c174:	482d883a 	mov	r22,r9
 800c178:	9027883a 	mov	r19,r18
 800c17c:	070001c4 	movi	fp,7
 800c180:	8025883a 	mov	r18,r16
 800c184:	dc002d17 	ldw	r16,180(sp)
 800c188:	00000306 	br	800c198 <___vfprintf_internal_r+0x80c>
 800c18c:	8c7ffc04 	addi	r17,r17,-16
 800c190:	42000204 	addi	r8,r8,8
 800c194:	b440130e 	bge	r22,r17,800c1e4 <___vfprintf_internal_r+0x858>
 800c198:	010200b4 	movhi	r4,2050
 800c19c:	18c00404 	addi	r3,r3,16
 800c1a0:	10800044 	addi	r2,r2,1
 800c1a4:	212b4084 	addi	r4,r4,-21246
 800c1a8:	41000015 	stw	r4,0(r8)
 800c1ac:	45800115 	stw	r22,4(r8)
 800c1b0:	d8c02015 	stw	r3,128(sp)
 800c1b4:	d8801f15 	stw	r2,124(sp)
 800c1b8:	e0bff40e 	bge	fp,r2,800c18c <__alt_data_end+0xfc00c18c>
 800c1bc:	d9801e04 	addi	r6,sp,120
 800c1c0:	b80b883a 	mov	r5,r23
 800c1c4:	8009883a 	mov	r4,r16
 800c1c8:	80130f80 	call	80130f8 <__sprint_r>
 800c1cc:	103ef31e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800c1d0:	8c7ffc04 	addi	r17,r17,-16
 800c1d4:	d8c02017 	ldw	r3,128(sp)
 800c1d8:	d8801f17 	ldw	r2,124(sp)
 800c1dc:	da000404 	addi	r8,sp,16
 800c1e0:	b47fed16 	blt	r22,r17,800c198 <__alt_data_end+0xfc00c198>
 800c1e4:	9021883a 	mov	r16,r18
 800c1e8:	9825883a 	mov	r18,r19
 800c1ec:	8827883a 	mov	r19,r17
 800c1f0:	dc403b17 	ldw	r17,236(sp)
 800c1f4:	d9403517 	ldw	r5,212(sp)
 800c1f8:	98c7883a 	add	r3,r19,r3
 800c1fc:	10800044 	addi	r2,r2,1
 800c200:	41400015 	stw	r5,0(r8)
 800c204:	44c00115 	stw	r19,4(r8)
 800c208:	d8c02015 	stw	r3,128(sp)
 800c20c:	d8801f15 	stw	r2,124(sp)
 800c210:	010001c4 	movi	r4,7
 800c214:	2082c516 	blt	r4,r2,800cd2c <___vfprintf_internal_r+0x13a0>
 800c218:	df002787 	ldb	fp,158(sp)
 800c21c:	42000204 	addi	r8,r8,8
 800c220:	e0000c26 	beq	fp,zero,800c254 <___vfprintf_internal_r+0x8c8>
 800c224:	d8801f17 	ldw	r2,124(sp)
 800c228:	d9002784 	addi	r4,sp,158
 800c22c:	18c00044 	addi	r3,r3,1
 800c230:	10800044 	addi	r2,r2,1
 800c234:	41000015 	stw	r4,0(r8)
 800c238:	01000044 	movi	r4,1
 800c23c:	41000115 	stw	r4,4(r8)
 800c240:	d8c02015 	stw	r3,128(sp)
 800c244:	d8801f15 	stw	r2,124(sp)
 800c248:	010001c4 	movi	r4,7
 800c24c:	20825e16 	blt	r4,r2,800cbc8 <___vfprintf_internal_r+0x123c>
 800c250:	42000204 	addi	r8,r8,8
 800c254:	d8802c17 	ldw	r2,176(sp)
 800c258:	10000c26 	beq	r2,zero,800c28c <___vfprintf_internal_r+0x900>
 800c25c:	d8801f17 	ldw	r2,124(sp)
 800c260:	d9002704 	addi	r4,sp,156
 800c264:	18c00084 	addi	r3,r3,2
 800c268:	10800044 	addi	r2,r2,1
 800c26c:	41000015 	stw	r4,0(r8)
 800c270:	01000084 	movi	r4,2
 800c274:	41000115 	stw	r4,4(r8)
 800c278:	d8c02015 	stw	r3,128(sp)
 800c27c:	d8801f15 	stw	r2,124(sp)
 800c280:	010001c4 	movi	r4,7
 800c284:	20825816 	blt	r4,r2,800cbe8 <___vfprintf_internal_r+0x125c>
 800c288:	42000204 	addi	r8,r8,8
 800c28c:	d9003017 	ldw	r4,192(sp)
 800c290:	00802004 	movi	r2,128
 800c294:	2081bb26 	beq	r4,r2,800c984 <___vfprintf_internal_r+0xff8>
 800c298:	d9402a17 	ldw	r5,168(sp)
 800c29c:	d8802b17 	ldw	r2,172(sp)
 800c2a0:	28adc83a 	sub	r22,r5,r2
 800c2a4:	0580310e 	bge	zero,r22,800c36c <___vfprintf_internal_r+0x9e0>
 800c2a8:	07000404 	movi	fp,16
 800c2ac:	d8801f17 	ldw	r2,124(sp)
 800c2b0:	e584360e 	bge	fp,r22,800d38c <___vfprintf_internal_r+0x1a00>
 800c2b4:	014200b4 	movhi	r5,2050
 800c2b8:	296b3c84 	addi	r5,r5,-21262
 800c2bc:	dc402a15 	stw	r17,168(sp)
 800c2c0:	d9402c15 	stw	r5,176(sp)
 800c2c4:	b023883a 	mov	r17,r22
 800c2c8:	04c001c4 	movi	r19,7
 800c2cc:	a82d883a 	mov	r22,r21
 800c2d0:	902b883a 	mov	r21,r18
 800c2d4:	8025883a 	mov	r18,r16
 800c2d8:	dc002d17 	ldw	r16,180(sp)
 800c2dc:	00000306 	br	800c2ec <___vfprintf_internal_r+0x960>
 800c2e0:	8c7ffc04 	addi	r17,r17,-16
 800c2e4:	42000204 	addi	r8,r8,8
 800c2e8:	e440110e 	bge	fp,r17,800c330 <___vfprintf_internal_r+0x9a4>
 800c2ec:	18c00404 	addi	r3,r3,16
 800c2f0:	10800044 	addi	r2,r2,1
 800c2f4:	45000015 	stw	r20,0(r8)
 800c2f8:	47000115 	stw	fp,4(r8)
 800c2fc:	d8c02015 	stw	r3,128(sp)
 800c300:	d8801f15 	stw	r2,124(sp)
 800c304:	98bff60e 	bge	r19,r2,800c2e0 <__alt_data_end+0xfc00c2e0>
 800c308:	d9801e04 	addi	r6,sp,120
 800c30c:	b80b883a 	mov	r5,r23
 800c310:	8009883a 	mov	r4,r16
 800c314:	80130f80 	call	80130f8 <__sprint_r>
 800c318:	103ea01e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800c31c:	8c7ffc04 	addi	r17,r17,-16
 800c320:	d8c02017 	ldw	r3,128(sp)
 800c324:	d8801f17 	ldw	r2,124(sp)
 800c328:	da000404 	addi	r8,sp,16
 800c32c:	e47fef16 	blt	fp,r17,800c2ec <__alt_data_end+0xfc00c2ec>
 800c330:	9021883a 	mov	r16,r18
 800c334:	a825883a 	mov	r18,r21
 800c338:	b02b883a 	mov	r21,r22
 800c33c:	882d883a 	mov	r22,r17
 800c340:	dc402a17 	ldw	r17,168(sp)
 800c344:	d9002c17 	ldw	r4,176(sp)
 800c348:	1d87883a 	add	r3,r3,r22
 800c34c:	10800044 	addi	r2,r2,1
 800c350:	41000015 	stw	r4,0(r8)
 800c354:	45800115 	stw	r22,4(r8)
 800c358:	d8c02015 	stw	r3,128(sp)
 800c35c:	d8801f15 	stw	r2,124(sp)
 800c360:	010001c4 	movi	r4,7
 800c364:	20821016 	blt	r4,r2,800cba8 <___vfprintf_internal_r+0x121c>
 800c368:	42000204 	addi	r8,r8,8
 800c36c:	9080400c 	andi	r2,r18,256
 800c370:	10013a1e 	bne	r2,zero,800c85c <___vfprintf_internal_r+0xed0>
 800c374:	d9402b17 	ldw	r5,172(sp)
 800c378:	d8801f17 	ldw	r2,124(sp)
 800c37c:	44000015 	stw	r16,0(r8)
 800c380:	1947883a 	add	r3,r3,r5
 800c384:	10800044 	addi	r2,r2,1
 800c388:	41400115 	stw	r5,4(r8)
 800c38c:	d8c02015 	stw	r3,128(sp)
 800c390:	d8801f15 	stw	r2,124(sp)
 800c394:	010001c4 	movi	r4,7
 800c398:	2081f516 	blt	r4,r2,800cb70 <___vfprintf_internal_r+0x11e4>
 800c39c:	42000204 	addi	r8,r8,8
 800c3a0:	9480010c 	andi	r18,r18,4
 800c3a4:	90003226 	beq	r18,zero,800c470 <___vfprintf_internal_r+0xae4>
 800c3a8:	d9403117 	ldw	r5,196(sp)
 800c3ac:	d8802917 	ldw	r2,164(sp)
 800c3b0:	28a1c83a 	sub	r16,r5,r2
 800c3b4:	04002e0e 	bge	zero,r16,800c470 <___vfprintf_internal_r+0xae4>
 800c3b8:	04400404 	movi	r17,16
 800c3bc:	d8801f17 	ldw	r2,124(sp)
 800c3c0:	8c04c40e 	bge	r17,r16,800d6d4 <___vfprintf_internal_r+0x1d48>
 800c3c4:	014200b4 	movhi	r5,2050
 800c3c8:	296b4084 	addi	r5,r5,-21246
 800c3cc:	d9403515 	stw	r5,212(sp)
 800c3d0:	048001c4 	movi	r18,7
 800c3d4:	dcc02d17 	ldw	r19,180(sp)
 800c3d8:	00000306 	br	800c3e8 <___vfprintf_internal_r+0xa5c>
 800c3dc:	843ffc04 	addi	r16,r16,-16
 800c3e0:	42000204 	addi	r8,r8,8
 800c3e4:	8c00130e 	bge	r17,r16,800c434 <___vfprintf_internal_r+0xaa8>
 800c3e8:	010200b4 	movhi	r4,2050
 800c3ec:	18c00404 	addi	r3,r3,16
 800c3f0:	10800044 	addi	r2,r2,1
 800c3f4:	212b4084 	addi	r4,r4,-21246
 800c3f8:	41000015 	stw	r4,0(r8)
 800c3fc:	44400115 	stw	r17,4(r8)
 800c400:	d8c02015 	stw	r3,128(sp)
 800c404:	d8801f15 	stw	r2,124(sp)
 800c408:	90bff40e 	bge	r18,r2,800c3dc <__alt_data_end+0xfc00c3dc>
 800c40c:	d9801e04 	addi	r6,sp,120
 800c410:	b80b883a 	mov	r5,r23
 800c414:	9809883a 	mov	r4,r19
 800c418:	80130f80 	call	80130f8 <__sprint_r>
 800c41c:	103e5f1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800c420:	843ffc04 	addi	r16,r16,-16
 800c424:	d8c02017 	ldw	r3,128(sp)
 800c428:	d8801f17 	ldw	r2,124(sp)
 800c42c:	da000404 	addi	r8,sp,16
 800c430:	8c3fed16 	blt	r17,r16,800c3e8 <__alt_data_end+0xfc00c3e8>
 800c434:	d9403517 	ldw	r5,212(sp)
 800c438:	1c07883a 	add	r3,r3,r16
 800c43c:	10800044 	addi	r2,r2,1
 800c440:	41400015 	stw	r5,0(r8)
 800c444:	44000115 	stw	r16,4(r8)
 800c448:	d8c02015 	stw	r3,128(sp)
 800c44c:	d8801f15 	stw	r2,124(sp)
 800c450:	010001c4 	movi	r4,7
 800c454:	2080060e 	bge	r4,r2,800c470 <___vfprintf_internal_r+0xae4>
 800c458:	d9002d17 	ldw	r4,180(sp)
 800c45c:	d9801e04 	addi	r6,sp,120
 800c460:	b80b883a 	mov	r5,r23
 800c464:	80130f80 	call	80130f8 <__sprint_r>
 800c468:	103e4c1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800c46c:	d8c02017 	ldw	r3,128(sp)
 800c470:	d8803117 	ldw	r2,196(sp)
 800c474:	d9002917 	ldw	r4,164(sp)
 800c478:	1100010e 	bge	r2,r4,800c480 <___vfprintf_internal_r+0xaf4>
 800c47c:	2005883a 	mov	r2,r4
 800c480:	d9402f17 	ldw	r5,188(sp)
 800c484:	288b883a 	add	r5,r5,r2
 800c488:	d9402f15 	stw	r5,188(sp)
 800c48c:	1801c01e 	bne	r3,zero,800cb90 <___vfprintf_internal_r+0x1204>
 800c490:	a8800007 	ldb	r2,0(r21)
 800c494:	d8001f15 	stw	zero,124(sp)
 800c498:	da000404 	addi	r8,sp,16
 800c49c:	103d751e 	bne	r2,zero,800ba74 <__alt_data_end+0xfc00ba74>
 800c4a0:	a823883a 	mov	r17,r21
 800c4a4:	003d8b06 	br	800bad4 <__alt_data_end+0xfc00bad4>
 800c4a8:	8025883a 	mov	r18,r16
 800c4ac:	dc002903 	ldbu	r16,164(sp)
 800c4b0:	e011883a 	mov	r8,fp
 800c4b4:	84003fcc 	andi	r16,r16,255
 800c4b8:	8005e51e 	bne	r16,zero,800dc50 <___vfprintf_internal_r+0x22c4>
 800c4bc:	94800414 	ori	r18,r18,16
 800c4c0:	9080080c 	andi	r2,r18,32
 800c4c4:	10022b26 	beq	r2,zero,800cd74 <___vfprintf_internal_r+0x13e8>
 800c4c8:	d9002e17 	ldw	r4,184(sp)
 800c4cc:	d9402a17 	ldw	r5,168(sp)
 800c4d0:	d8002785 	stb	zero,158(sp)
 800c4d4:	20c00204 	addi	r3,r4,8
 800c4d8:	24c00017 	ldw	r19,0(r4)
 800c4dc:	25800117 	ldw	r22,4(r4)
 800c4e0:	28042e16 	blt	r5,zero,800d59c <___vfprintf_internal_r+0x1c10>
 800c4e4:	013fdfc4 	movi	r4,-129
 800c4e8:	9d84b03a 	or	r2,r19,r22
 800c4ec:	d8c02e15 	stw	r3,184(sp)
 800c4f0:	9124703a 	and	r18,r18,r4
 800c4f4:	0039883a 	mov	fp,zero
 800c4f8:	103e801e 	bne	r2,zero,800befc <__alt_data_end+0xfc00befc>
 800c4fc:	d9002a17 	ldw	r4,168(sp)
 800c500:	2002e01e 	bne	r4,zero,800d084 <___vfprintf_internal_r+0x16f8>
 800c504:	d8002a15 	stw	zero,168(sp)
 800c508:	d8002b15 	stw	zero,172(sp)
 800c50c:	dc001e04 	addi	r16,sp,120
 800c510:	003ef506 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800c514:	8025883a 	mov	r18,r16
 800c518:	dc002903 	ldbu	r16,164(sp)
 800c51c:	e011883a 	mov	r8,fp
 800c520:	84003fcc 	andi	r16,r16,255
 800c524:	8005ba1e 	bne	r16,zero,800dc10 <___vfprintf_internal_r+0x2284>
 800c528:	010200b4 	movhi	r4,2050
 800c52c:	212b3004 	addi	r4,r4,-21312
 800c530:	d9003915 	stw	r4,228(sp)
 800c534:	9080080c 	andi	r2,r18,32
 800c538:	10006126 	beq	r2,zero,800c6c0 <___vfprintf_internal_r+0xd34>
 800c53c:	d9402e17 	ldw	r5,184(sp)
 800c540:	2cc00017 	ldw	r19,0(r5)
 800c544:	2d800117 	ldw	r22,4(r5)
 800c548:	29400204 	addi	r5,r5,8
 800c54c:	d9402e15 	stw	r5,184(sp)
 800c550:	9080004c 	andi	r2,r18,1
 800c554:	1001ac26 	beq	r2,zero,800cc08 <___vfprintf_internal_r+0x127c>
 800c558:	9d84b03a 	or	r2,r19,r22
 800c55c:	10038526 	beq	r2,zero,800d374 <___vfprintf_internal_r+0x19e8>
 800c560:	d8c02a17 	ldw	r3,168(sp)
 800c564:	00800c04 	movi	r2,48
 800c568:	d8802705 	stb	r2,156(sp)
 800c56c:	dc402745 	stb	r17,157(sp)
 800c570:	d8002785 	stb	zero,158(sp)
 800c574:	90800094 	ori	r2,r18,2
 800c578:	18047916 	blt	r3,zero,800d760 <___vfprintf_internal_r+0x1dd4>
 800c57c:	00bfdfc4 	movi	r2,-129
 800c580:	90a4703a 	and	r18,r18,r2
 800c584:	94800094 	ori	r18,r18,2
 800c588:	0039883a 	mov	fp,zero
 800c58c:	d9003917 	ldw	r4,228(sp)
 800c590:	dc001e04 	addi	r16,sp,120
 800c594:	988003cc 	andi	r2,r19,15
 800c598:	b006973a 	slli	r3,r22,28
 800c59c:	2085883a 	add	r2,r4,r2
 800c5a0:	9826d13a 	srli	r19,r19,4
 800c5a4:	10800003 	ldbu	r2,0(r2)
 800c5a8:	b02cd13a 	srli	r22,r22,4
 800c5ac:	843fffc4 	addi	r16,r16,-1
 800c5b0:	1ce6b03a 	or	r19,r3,r19
 800c5b4:	80800005 	stb	r2,0(r16)
 800c5b8:	9d84b03a 	or	r2,r19,r22
 800c5bc:	103ff51e 	bne	r2,zero,800c594 <__alt_data_end+0xfc00c594>
 800c5c0:	d8c02817 	ldw	r3,160(sp)
 800c5c4:	1c07c83a 	sub	r3,r3,r16
 800c5c8:	d8c02b15 	stw	r3,172(sp)
 800c5cc:	003ec606 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800c5d0:	8025883a 	mov	r18,r16
 800c5d4:	dc002903 	ldbu	r16,164(sp)
 800c5d8:	e011883a 	mov	r8,fp
 800c5dc:	84003fcc 	andi	r16,r16,255
 800c5e0:	803e9626 	beq	r16,zero,800c03c <__alt_data_end+0xfc00c03c>
 800c5e4:	d8c02b03 	ldbu	r3,172(sp)
 800c5e8:	d8c02785 	stb	r3,158(sp)
 800c5ec:	003e9306 	br	800c03c <__alt_data_end+0xfc00c03c>
 800c5f0:	00c00044 	movi	r3,1
 800c5f4:	d8c02905 	stb	r3,164(sp)
 800c5f8:	00c00ac4 	movi	r3,43
 800c5fc:	d8c02b05 	stb	r3,172(sp)
 800c600:	ac400007 	ldb	r17,0(r21)
 800c604:	003d4306 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c608:	84000814 	ori	r16,r16,32
 800c60c:	ac400007 	ldb	r17,0(r21)
 800c610:	003d4006 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c614:	d8802e17 	ldw	r2,184(sp)
 800c618:	8025883a 	mov	r18,r16
 800c61c:	d8002785 	stb	zero,158(sp)
 800c620:	14000017 	ldw	r16,0(r2)
 800c624:	e011883a 	mov	r8,fp
 800c628:	14c00104 	addi	r19,r2,4
 800c62c:	80042d26 	beq	r16,zero,800d6e4 <___vfprintf_internal_r+0x1d58>
 800c630:	d8c02a17 	ldw	r3,168(sp)
 800c634:	1803e416 	blt	r3,zero,800d5c8 <___vfprintf_internal_r+0x1c3c>
 800c638:	180d883a 	mov	r6,r3
 800c63c:	000b883a 	mov	r5,zero
 800c640:	8009883a 	mov	r4,r16
 800c644:	df003d15 	stw	fp,244(sp)
 800c648:	80112c40 	call	80112c4 <memchr>
 800c64c:	da003d17 	ldw	r8,244(sp)
 800c650:	10046826 	beq	r2,zero,800d7f4 <___vfprintf_internal_r+0x1e68>
 800c654:	1405c83a 	sub	r2,r2,r16
 800c658:	d8802b15 	stw	r2,172(sp)
 800c65c:	1003e016 	blt	r2,zero,800d5e0 <___vfprintf_internal_r+0x1c54>
 800c660:	df002783 	ldbu	fp,158(sp)
 800c664:	d8802915 	stw	r2,164(sp)
 800c668:	dcc02e15 	stw	r19,184(sp)
 800c66c:	d8002a15 	stw	zero,168(sp)
 800c670:	d8003215 	stw	zero,200(sp)
 800c674:	003ea206 	br	800c100 <__alt_data_end+0xfc00c100>
 800c678:	8025883a 	mov	r18,r16
 800c67c:	dc002903 	ldbu	r16,164(sp)
 800c680:	e011883a 	mov	r8,fp
 800c684:	84003fcc 	andi	r16,r16,255
 800c688:	803f8d26 	beq	r16,zero,800c4c0 <__alt_data_end+0xfc00c4c0>
 800c68c:	d8c02b03 	ldbu	r3,172(sp)
 800c690:	d8c02785 	stb	r3,158(sp)
 800c694:	003f8a06 	br	800c4c0 <__alt_data_end+0xfc00c4c0>
 800c698:	8025883a 	mov	r18,r16
 800c69c:	dc002903 	ldbu	r16,164(sp)
 800c6a0:	e011883a 	mov	r8,fp
 800c6a4:	84003fcc 	andi	r16,r16,255
 800c6a8:	8005661e 	bne	r16,zero,800dc44 <___vfprintf_internal_r+0x22b8>
 800c6ac:	010200b4 	movhi	r4,2050
 800c6b0:	212b3504 	addi	r4,r4,-21292
 800c6b4:	d9003915 	stw	r4,228(sp)
 800c6b8:	9080080c 	andi	r2,r18,32
 800c6bc:	103f9f1e 	bne	r2,zero,800c53c <__alt_data_end+0xfc00c53c>
 800c6c0:	9080040c 	andi	r2,r18,16
 800c6c4:	1002eb26 	beq	r2,zero,800d274 <___vfprintf_internal_r+0x18e8>
 800c6c8:	d8802e17 	ldw	r2,184(sp)
 800c6cc:	002d883a 	mov	r22,zero
 800c6d0:	14c00017 	ldw	r19,0(r2)
 800c6d4:	10800104 	addi	r2,r2,4
 800c6d8:	d8802e15 	stw	r2,184(sp)
 800c6dc:	003f9c06 	br	800c550 <__alt_data_end+0xfc00c550>
 800c6e0:	d8802b07 	ldb	r2,172(sp)
 800c6e4:	1002e11e 	bne	r2,zero,800d26c <___vfprintf_internal_r+0x18e0>
 800c6e8:	00c00044 	movi	r3,1
 800c6ec:	d8c02905 	stb	r3,164(sp)
 800c6f0:	00c00804 	movi	r3,32
 800c6f4:	d8c02b05 	stb	r3,172(sp)
 800c6f8:	ac400007 	ldb	r17,0(r21)
 800c6fc:	003d0506 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c700:	84000054 	ori	r16,r16,1
 800c704:	ac400007 	ldb	r17,0(r21)
 800c708:	003d0206 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c70c:	8025883a 	mov	r18,r16
 800c710:	dc002903 	ldbu	r16,164(sp)
 800c714:	e011883a 	mov	r8,fp
 800c718:	84003fcc 	andi	r16,r16,255
 800c71c:	803de726 	beq	r16,zero,800bebc <__alt_data_end+0xfc00bebc>
 800c720:	d8c02b03 	ldbu	r3,172(sp)
 800c724:	d8c02785 	stb	r3,158(sp)
 800c728:	003de406 	br	800bebc <__alt_data_end+0xfc00bebc>
 800c72c:	84001014 	ori	r16,r16,64
 800c730:	ac400007 	ldb	r17,0(r21)
 800c734:	003cf706 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c738:	ac400007 	ldb	r17,0(r21)
 800c73c:	00801b04 	movi	r2,108
 800c740:	88838f26 	beq	r17,r2,800d580 <___vfprintf_internal_r+0x1bf4>
 800c744:	84000414 	ori	r16,r16,16
 800c748:	003cf206 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800c74c:	8025883a 	mov	r18,r16
 800c750:	dc002903 	ldbu	r16,164(sp)
 800c754:	e011883a 	mov	r8,fp
 800c758:	84003fcc 	andi	r16,r16,255
 800c75c:	80053f1e 	bne	r16,zero,800dc5c <___vfprintf_internal_r+0x22d0>
 800c760:	9080080c 	andi	r2,r18,32
 800c764:	1002d226 	beq	r2,zero,800d2b0 <___vfprintf_internal_r+0x1924>
 800c768:	d9002e17 	ldw	r4,184(sp)
 800c76c:	d9402f17 	ldw	r5,188(sp)
 800c770:	20800017 	ldw	r2,0(r4)
 800c774:	2807d7fa 	srai	r3,r5,31
 800c778:	21000104 	addi	r4,r4,4
 800c77c:	d9002e15 	stw	r4,184(sp)
 800c780:	11400015 	stw	r5,0(r2)
 800c784:	10c00115 	stw	r3,4(r2)
 800c788:	003cb806 	br	800ba6c <__alt_data_end+0xfc00ba6c>
 800c78c:	d8c02e17 	ldw	r3,184(sp)
 800c790:	d9002e17 	ldw	r4,184(sp)
 800c794:	8025883a 	mov	r18,r16
 800c798:	18800017 	ldw	r2,0(r3)
 800c79c:	21000104 	addi	r4,r4,4
 800c7a0:	00c00044 	movi	r3,1
 800c7a4:	e011883a 	mov	r8,fp
 800c7a8:	d8c02915 	stw	r3,164(sp)
 800c7ac:	d8002785 	stb	zero,158(sp)
 800c7b0:	d8801405 	stb	r2,80(sp)
 800c7b4:	d9002e15 	stw	r4,184(sp)
 800c7b8:	d8c02b15 	stw	r3,172(sp)
 800c7bc:	d8002a15 	stw	zero,168(sp)
 800c7c0:	d8003215 	stw	zero,200(sp)
 800c7c4:	dc001404 	addi	r16,sp,80
 800c7c8:	0039883a 	mov	fp,zero
 800c7cc:	003e5306 	br	800c11c <__alt_data_end+0xfc00c11c>
 800c7d0:	010200b4 	movhi	r4,2050
 800c7d4:	212b3504 	addi	r4,r4,-21292
 800c7d8:	0039883a 	mov	fp,zero
 800c7dc:	d9003915 	stw	r4,228(sp)
 800c7e0:	04401e04 	movi	r17,120
 800c7e4:	003f6906 	br	800c58c <__alt_data_end+0xfc00c58c>
 800c7e8:	8025883a 	mov	r18,r16
 800c7ec:	dc002903 	ldbu	r16,164(sp)
 800c7f0:	e011883a 	mov	r8,fp
 800c7f4:	84003fcc 	andi	r16,r16,255
 800c7f8:	8005081e 	bne	r16,zero,800dc1c <___vfprintf_internal_r+0x2290>
 800c7fc:	883d6126 	beq	r17,zero,800bd84 <__alt_data_end+0xfc00bd84>
 800c800:	00c00044 	movi	r3,1
 800c804:	d8c02915 	stw	r3,164(sp)
 800c808:	dc401405 	stb	r17,80(sp)
 800c80c:	d8002785 	stb	zero,158(sp)
 800c810:	003fe906 	br	800c7b8 <__alt_data_end+0xfc00c7b8>
 800c814:	014200b4 	movhi	r5,2050
 800c818:	296b3504 	addi	r5,r5,-21292
 800c81c:	d9403915 	stw	r5,228(sp)
 800c820:	d8c02e15 	stw	r3,184(sp)
 800c824:	1025883a 	mov	r18,r2
 800c828:	04401e04 	movi	r17,120
 800c82c:	9d84b03a 	or	r2,r19,r22
 800c830:	1000fc1e 	bne	r2,zero,800cc24 <___vfprintf_internal_r+0x1298>
 800c834:	0039883a 	mov	fp,zero
 800c838:	00800084 	movi	r2,2
 800c83c:	10803fcc 	andi	r2,r2,255
 800c840:	00c00044 	movi	r3,1
 800c844:	10c20f26 	beq	r2,r3,800d084 <___vfprintf_internal_r+0x16f8>
 800c848:	00c00084 	movi	r3,2
 800c84c:	10fd3326 	beq	r2,r3,800bd1c <__alt_data_end+0xfc00bd1c>
 800c850:	003e0b06 	br	800c080 <__alt_data_end+0xfc00c080>
 800c854:	d8c02017 	ldw	r3,128(sp)
 800c858:	003e7106 	br	800c220 <__alt_data_end+0xfc00c220>
 800c85c:	00801944 	movi	r2,101
 800c860:	14407e0e 	bge	r2,r17,800ca5c <___vfprintf_internal_r+0x10d0>
 800c864:	d9003617 	ldw	r4,216(sp)
 800c868:	d9403817 	ldw	r5,224(sp)
 800c86c:	000d883a 	mov	r6,zero
 800c870:	000f883a 	mov	r7,zero
 800c874:	d8c03c15 	stw	r3,240(sp)
 800c878:	da003d15 	stw	r8,244(sp)
 800c87c:	800a1000 	call	800a100 <__eqdf2>
 800c880:	d8c03c17 	ldw	r3,240(sp)
 800c884:	da003d17 	ldw	r8,244(sp)
 800c888:	1000f71e 	bne	r2,zero,800cc68 <___vfprintf_internal_r+0x12dc>
 800c88c:	d8801f17 	ldw	r2,124(sp)
 800c890:	010200b4 	movhi	r4,2050
 800c894:	212b3c04 	addi	r4,r4,-21264
 800c898:	18c00044 	addi	r3,r3,1
 800c89c:	10800044 	addi	r2,r2,1
 800c8a0:	41000015 	stw	r4,0(r8)
 800c8a4:	01000044 	movi	r4,1
 800c8a8:	41000115 	stw	r4,4(r8)
 800c8ac:	d8c02015 	stw	r3,128(sp)
 800c8b0:	d8801f15 	stw	r2,124(sp)
 800c8b4:	010001c4 	movi	r4,7
 800c8b8:	2082b816 	blt	r4,r2,800d39c <___vfprintf_internal_r+0x1a10>
 800c8bc:	42000204 	addi	r8,r8,8
 800c8c0:	d8802617 	ldw	r2,152(sp)
 800c8c4:	d9403317 	ldw	r5,204(sp)
 800c8c8:	11400216 	blt	r2,r5,800c8d4 <___vfprintf_internal_r+0xf48>
 800c8cc:	9080004c 	andi	r2,r18,1
 800c8d0:	103eb326 	beq	r2,zero,800c3a0 <__alt_data_end+0xfc00c3a0>
 800c8d4:	d8803717 	ldw	r2,220(sp)
 800c8d8:	d9003417 	ldw	r4,208(sp)
 800c8dc:	d9403717 	ldw	r5,220(sp)
 800c8e0:	1887883a 	add	r3,r3,r2
 800c8e4:	d8801f17 	ldw	r2,124(sp)
 800c8e8:	41000015 	stw	r4,0(r8)
 800c8ec:	41400115 	stw	r5,4(r8)
 800c8f0:	10800044 	addi	r2,r2,1
 800c8f4:	d8c02015 	stw	r3,128(sp)
 800c8f8:	d8801f15 	stw	r2,124(sp)
 800c8fc:	010001c4 	movi	r4,7
 800c900:	20832916 	blt	r4,r2,800d5a8 <___vfprintf_internal_r+0x1c1c>
 800c904:	42000204 	addi	r8,r8,8
 800c908:	d8803317 	ldw	r2,204(sp)
 800c90c:	143fffc4 	addi	r16,r2,-1
 800c910:	043ea30e 	bge	zero,r16,800c3a0 <__alt_data_end+0xfc00c3a0>
 800c914:	04400404 	movi	r17,16
 800c918:	d8801f17 	ldw	r2,124(sp)
 800c91c:	8c00880e 	bge	r17,r16,800cb40 <___vfprintf_internal_r+0x11b4>
 800c920:	014200b4 	movhi	r5,2050
 800c924:	296b3c84 	addi	r5,r5,-21262
 800c928:	d9402c15 	stw	r5,176(sp)
 800c92c:	058001c4 	movi	r22,7
 800c930:	dcc02d17 	ldw	r19,180(sp)
 800c934:	00000306 	br	800c944 <___vfprintf_internal_r+0xfb8>
 800c938:	42000204 	addi	r8,r8,8
 800c93c:	843ffc04 	addi	r16,r16,-16
 800c940:	8c00820e 	bge	r17,r16,800cb4c <___vfprintf_internal_r+0x11c0>
 800c944:	18c00404 	addi	r3,r3,16
 800c948:	10800044 	addi	r2,r2,1
 800c94c:	45000015 	stw	r20,0(r8)
 800c950:	44400115 	stw	r17,4(r8)
 800c954:	d8c02015 	stw	r3,128(sp)
 800c958:	d8801f15 	stw	r2,124(sp)
 800c95c:	b0bff60e 	bge	r22,r2,800c938 <__alt_data_end+0xfc00c938>
 800c960:	d9801e04 	addi	r6,sp,120
 800c964:	b80b883a 	mov	r5,r23
 800c968:	9809883a 	mov	r4,r19
 800c96c:	80130f80 	call	80130f8 <__sprint_r>
 800c970:	103d0a1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800c974:	d8c02017 	ldw	r3,128(sp)
 800c978:	d8801f17 	ldw	r2,124(sp)
 800c97c:	da000404 	addi	r8,sp,16
 800c980:	003fee06 	br	800c93c <__alt_data_end+0xfc00c93c>
 800c984:	d9403117 	ldw	r5,196(sp)
 800c988:	d8802917 	ldw	r2,164(sp)
 800c98c:	28adc83a 	sub	r22,r5,r2
 800c990:	05be410e 	bge	zero,r22,800c298 <__alt_data_end+0xfc00c298>
 800c994:	07000404 	movi	fp,16
 800c998:	d8801f17 	ldw	r2,124(sp)
 800c99c:	e5838f0e 	bge	fp,r22,800d7dc <___vfprintf_internal_r+0x1e50>
 800c9a0:	014200b4 	movhi	r5,2050
 800c9a4:	296b3c84 	addi	r5,r5,-21262
 800c9a8:	dc403015 	stw	r17,192(sp)
 800c9ac:	d9402c15 	stw	r5,176(sp)
 800c9b0:	b023883a 	mov	r17,r22
 800c9b4:	04c001c4 	movi	r19,7
 800c9b8:	a82d883a 	mov	r22,r21
 800c9bc:	902b883a 	mov	r21,r18
 800c9c0:	8025883a 	mov	r18,r16
 800c9c4:	dc002d17 	ldw	r16,180(sp)
 800c9c8:	00000306 	br	800c9d8 <___vfprintf_internal_r+0x104c>
 800c9cc:	8c7ffc04 	addi	r17,r17,-16
 800c9d0:	42000204 	addi	r8,r8,8
 800c9d4:	e440110e 	bge	fp,r17,800ca1c <___vfprintf_internal_r+0x1090>
 800c9d8:	18c00404 	addi	r3,r3,16
 800c9dc:	10800044 	addi	r2,r2,1
 800c9e0:	45000015 	stw	r20,0(r8)
 800c9e4:	47000115 	stw	fp,4(r8)
 800c9e8:	d8c02015 	stw	r3,128(sp)
 800c9ec:	d8801f15 	stw	r2,124(sp)
 800c9f0:	98bff60e 	bge	r19,r2,800c9cc <__alt_data_end+0xfc00c9cc>
 800c9f4:	d9801e04 	addi	r6,sp,120
 800c9f8:	b80b883a 	mov	r5,r23
 800c9fc:	8009883a 	mov	r4,r16
 800ca00:	80130f80 	call	80130f8 <__sprint_r>
 800ca04:	103ce51e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800ca08:	8c7ffc04 	addi	r17,r17,-16
 800ca0c:	d8c02017 	ldw	r3,128(sp)
 800ca10:	d8801f17 	ldw	r2,124(sp)
 800ca14:	da000404 	addi	r8,sp,16
 800ca18:	e47fef16 	blt	fp,r17,800c9d8 <__alt_data_end+0xfc00c9d8>
 800ca1c:	9021883a 	mov	r16,r18
 800ca20:	a825883a 	mov	r18,r21
 800ca24:	b02b883a 	mov	r21,r22
 800ca28:	882d883a 	mov	r22,r17
 800ca2c:	dc403017 	ldw	r17,192(sp)
 800ca30:	d9002c17 	ldw	r4,176(sp)
 800ca34:	1d87883a 	add	r3,r3,r22
 800ca38:	10800044 	addi	r2,r2,1
 800ca3c:	41000015 	stw	r4,0(r8)
 800ca40:	45800115 	stw	r22,4(r8)
 800ca44:	d8c02015 	stw	r3,128(sp)
 800ca48:	d8801f15 	stw	r2,124(sp)
 800ca4c:	010001c4 	movi	r4,7
 800ca50:	20818e16 	blt	r4,r2,800d08c <___vfprintf_internal_r+0x1700>
 800ca54:	42000204 	addi	r8,r8,8
 800ca58:	003e0f06 	br	800c298 <__alt_data_end+0xfc00c298>
 800ca5c:	d9403317 	ldw	r5,204(sp)
 800ca60:	00800044 	movi	r2,1
 800ca64:	18c00044 	addi	r3,r3,1
 800ca68:	1141530e 	bge	r2,r5,800cfb8 <___vfprintf_internal_r+0x162c>
 800ca6c:	dc401f17 	ldw	r17,124(sp)
 800ca70:	00800044 	movi	r2,1
 800ca74:	40800115 	stw	r2,4(r8)
 800ca78:	8c400044 	addi	r17,r17,1
 800ca7c:	44000015 	stw	r16,0(r8)
 800ca80:	d8c02015 	stw	r3,128(sp)
 800ca84:	dc401f15 	stw	r17,124(sp)
 800ca88:	008001c4 	movi	r2,7
 800ca8c:	14416b16 	blt	r2,r17,800d03c <___vfprintf_internal_r+0x16b0>
 800ca90:	42000204 	addi	r8,r8,8
 800ca94:	d8803717 	ldw	r2,220(sp)
 800ca98:	d9003417 	ldw	r4,208(sp)
 800ca9c:	8c400044 	addi	r17,r17,1
 800caa0:	10c7883a 	add	r3,r2,r3
 800caa4:	40800115 	stw	r2,4(r8)
 800caa8:	41000015 	stw	r4,0(r8)
 800caac:	d8c02015 	stw	r3,128(sp)
 800cab0:	dc401f15 	stw	r17,124(sp)
 800cab4:	008001c4 	movi	r2,7
 800cab8:	14416916 	blt	r2,r17,800d060 <___vfprintf_internal_r+0x16d4>
 800cabc:	45800204 	addi	r22,r8,8
 800cac0:	d9003617 	ldw	r4,216(sp)
 800cac4:	d9403817 	ldw	r5,224(sp)
 800cac8:	000d883a 	mov	r6,zero
 800cacc:	000f883a 	mov	r7,zero
 800cad0:	d8c03c15 	stw	r3,240(sp)
 800cad4:	800a1000 	call	800a100 <__eqdf2>
 800cad8:	d8c03c17 	ldw	r3,240(sp)
 800cadc:	1000bc26 	beq	r2,zero,800cdd0 <___vfprintf_internal_r+0x1444>
 800cae0:	d9403317 	ldw	r5,204(sp)
 800cae4:	84000044 	addi	r16,r16,1
 800cae8:	8c400044 	addi	r17,r17,1
 800caec:	28bfffc4 	addi	r2,r5,-1
 800caf0:	1887883a 	add	r3,r3,r2
 800caf4:	b0800115 	stw	r2,4(r22)
 800caf8:	b4000015 	stw	r16,0(r22)
 800cafc:	d8c02015 	stw	r3,128(sp)
 800cb00:	dc401f15 	stw	r17,124(sp)
 800cb04:	008001c4 	movi	r2,7
 800cb08:	14414316 	blt	r2,r17,800d018 <___vfprintf_internal_r+0x168c>
 800cb0c:	b5800204 	addi	r22,r22,8
 800cb10:	d9003a17 	ldw	r4,232(sp)
 800cb14:	df0022c4 	addi	fp,sp,139
 800cb18:	8c400044 	addi	r17,r17,1
 800cb1c:	20c7883a 	add	r3,r4,r3
 800cb20:	b7000015 	stw	fp,0(r22)
 800cb24:	b1000115 	stw	r4,4(r22)
 800cb28:	d8c02015 	stw	r3,128(sp)
 800cb2c:	dc401f15 	stw	r17,124(sp)
 800cb30:	008001c4 	movi	r2,7
 800cb34:	14400e16 	blt	r2,r17,800cb70 <___vfprintf_internal_r+0x11e4>
 800cb38:	b2000204 	addi	r8,r22,8
 800cb3c:	003e1806 	br	800c3a0 <__alt_data_end+0xfc00c3a0>
 800cb40:	010200b4 	movhi	r4,2050
 800cb44:	212b3c84 	addi	r4,r4,-21262
 800cb48:	d9002c15 	stw	r4,176(sp)
 800cb4c:	d9002c17 	ldw	r4,176(sp)
 800cb50:	1c07883a 	add	r3,r3,r16
 800cb54:	44000115 	stw	r16,4(r8)
 800cb58:	41000015 	stw	r4,0(r8)
 800cb5c:	10800044 	addi	r2,r2,1
 800cb60:	d8c02015 	stw	r3,128(sp)
 800cb64:	d8801f15 	stw	r2,124(sp)
 800cb68:	010001c4 	movi	r4,7
 800cb6c:	20be0b0e 	bge	r4,r2,800c39c <__alt_data_end+0xfc00c39c>
 800cb70:	d9002d17 	ldw	r4,180(sp)
 800cb74:	d9801e04 	addi	r6,sp,120
 800cb78:	b80b883a 	mov	r5,r23
 800cb7c:	80130f80 	call	80130f8 <__sprint_r>
 800cb80:	103c861e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cb84:	d8c02017 	ldw	r3,128(sp)
 800cb88:	da000404 	addi	r8,sp,16
 800cb8c:	003e0406 	br	800c3a0 <__alt_data_end+0xfc00c3a0>
 800cb90:	d9002d17 	ldw	r4,180(sp)
 800cb94:	d9801e04 	addi	r6,sp,120
 800cb98:	b80b883a 	mov	r5,r23
 800cb9c:	80130f80 	call	80130f8 <__sprint_r>
 800cba0:	103e3b26 	beq	r2,zero,800c490 <__alt_data_end+0xfc00c490>
 800cba4:	003c7d06 	br	800bd9c <__alt_data_end+0xfc00bd9c>
 800cba8:	d9002d17 	ldw	r4,180(sp)
 800cbac:	d9801e04 	addi	r6,sp,120
 800cbb0:	b80b883a 	mov	r5,r23
 800cbb4:	80130f80 	call	80130f8 <__sprint_r>
 800cbb8:	103c781e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cbbc:	d8c02017 	ldw	r3,128(sp)
 800cbc0:	da000404 	addi	r8,sp,16
 800cbc4:	003de906 	br	800c36c <__alt_data_end+0xfc00c36c>
 800cbc8:	d9002d17 	ldw	r4,180(sp)
 800cbcc:	d9801e04 	addi	r6,sp,120
 800cbd0:	b80b883a 	mov	r5,r23
 800cbd4:	80130f80 	call	80130f8 <__sprint_r>
 800cbd8:	103c701e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cbdc:	d8c02017 	ldw	r3,128(sp)
 800cbe0:	da000404 	addi	r8,sp,16
 800cbe4:	003d9b06 	br	800c254 <__alt_data_end+0xfc00c254>
 800cbe8:	d9002d17 	ldw	r4,180(sp)
 800cbec:	d9801e04 	addi	r6,sp,120
 800cbf0:	b80b883a 	mov	r5,r23
 800cbf4:	80130f80 	call	80130f8 <__sprint_r>
 800cbf8:	103c681e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cbfc:	d8c02017 	ldw	r3,128(sp)
 800cc00:	da000404 	addi	r8,sp,16
 800cc04:	003da106 	br	800c28c <__alt_data_end+0xfc00c28c>
 800cc08:	d9402a17 	ldw	r5,168(sp)
 800cc0c:	d8002785 	stb	zero,158(sp)
 800cc10:	283f0616 	blt	r5,zero,800c82c <__alt_data_end+0xfc00c82c>
 800cc14:	00ffdfc4 	movi	r3,-129
 800cc18:	9d84b03a 	or	r2,r19,r22
 800cc1c:	90e4703a 	and	r18,r18,r3
 800cc20:	103c3b26 	beq	r2,zero,800bd10 <__alt_data_end+0xfc00bd10>
 800cc24:	0039883a 	mov	fp,zero
 800cc28:	003e5806 	br	800c58c <__alt_data_end+0xfc00c58c>
 800cc2c:	9080040c 	andi	r2,r18,16
 800cc30:	1001b326 	beq	r2,zero,800d300 <___vfprintf_internal_r+0x1974>
 800cc34:	d8c02e17 	ldw	r3,184(sp)
 800cc38:	d9002a17 	ldw	r4,168(sp)
 800cc3c:	d8002785 	stb	zero,158(sp)
 800cc40:	18800104 	addi	r2,r3,4
 800cc44:	1cc00017 	ldw	r19,0(r3)
 800cc48:	002d883a 	mov	r22,zero
 800cc4c:	2001b516 	blt	r4,zero,800d324 <___vfprintf_internal_r+0x1998>
 800cc50:	00ffdfc4 	movi	r3,-129
 800cc54:	d8802e15 	stw	r2,184(sp)
 800cc58:	90e4703a 	and	r18,r18,r3
 800cc5c:	983d0526 	beq	r19,zero,800c074 <__alt_data_end+0xfc00c074>
 800cc60:	0039883a 	mov	fp,zero
 800cc64:	003d0806 	br	800c088 <__alt_data_end+0xfc00c088>
 800cc68:	dc402617 	ldw	r17,152(sp)
 800cc6c:	0441d30e 	bge	zero,r17,800d3bc <___vfprintf_internal_r+0x1a30>
 800cc70:	dc403217 	ldw	r17,200(sp)
 800cc74:	d8803317 	ldw	r2,204(sp)
 800cc78:	1440010e 	bge	r2,r17,800cc80 <___vfprintf_internal_r+0x12f4>
 800cc7c:	1023883a 	mov	r17,r2
 800cc80:	04400a0e 	bge	zero,r17,800ccac <___vfprintf_internal_r+0x1320>
 800cc84:	d8801f17 	ldw	r2,124(sp)
 800cc88:	1c47883a 	add	r3,r3,r17
 800cc8c:	44000015 	stw	r16,0(r8)
 800cc90:	10800044 	addi	r2,r2,1
 800cc94:	44400115 	stw	r17,4(r8)
 800cc98:	d8c02015 	stw	r3,128(sp)
 800cc9c:	d8801f15 	stw	r2,124(sp)
 800cca0:	010001c4 	movi	r4,7
 800cca4:	20826516 	blt	r4,r2,800d63c <___vfprintf_internal_r+0x1cb0>
 800cca8:	42000204 	addi	r8,r8,8
 800ccac:	88026116 	blt	r17,zero,800d634 <___vfprintf_internal_r+0x1ca8>
 800ccb0:	d9003217 	ldw	r4,200(sp)
 800ccb4:	2463c83a 	sub	r17,r4,r17
 800ccb8:	04407b0e 	bge	zero,r17,800cea8 <___vfprintf_internal_r+0x151c>
 800ccbc:	05800404 	movi	r22,16
 800ccc0:	d8801f17 	ldw	r2,124(sp)
 800ccc4:	b4419d0e 	bge	r22,r17,800d33c <___vfprintf_internal_r+0x19b0>
 800ccc8:	010200b4 	movhi	r4,2050
 800cccc:	212b3c84 	addi	r4,r4,-21262
 800ccd0:	d9002c15 	stw	r4,176(sp)
 800ccd4:	070001c4 	movi	fp,7
 800ccd8:	dcc02d17 	ldw	r19,180(sp)
 800ccdc:	00000306 	br	800ccec <___vfprintf_internal_r+0x1360>
 800cce0:	42000204 	addi	r8,r8,8
 800cce4:	8c7ffc04 	addi	r17,r17,-16
 800cce8:	b441970e 	bge	r22,r17,800d348 <___vfprintf_internal_r+0x19bc>
 800ccec:	18c00404 	addi	r3,r3,16
 800ccf0:	10800044 	addi	r2,r2,1
 800ccf4:	45000015 	stw	r20,0(r8)
 800ccf8:	45800115 	stw	r22,4(r8)
 800ccfc:	d8c02015 	stw	r3,128(sp)
 800cd00:	d8801f15 	stw	r2,124(sp)
 800cd04:	e0bff60e 	bge	fp,r2,800cce0 <__alt_data_end+0xfc00cce0>
 800cd08:	d9801e04 	addi	r6,sp,120
 800cd0c:	b80b883a 	mov	r5,r23
 800cd10:	9809883a 	mov	r4,r19
 800cd14:	80130f80 	call	80130f8 <__sprint_r>
 800cd18:	103c201e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cd1c:	d8c02017 	ldw	r3,128(sp)
 800cd20:	d8801f17 	ldw	r2,124(sp)
 800cd24:	da000404 	addi	r8,sp,16
 800cd28:	003fee06 	br	800cce4 <__alt_data_end+0xfc00cce4>
 800cd2c:	d9002d17 	ldw	r4,180(sp)
 800cd30:	d9801e04 	addi	r6,sp,120
 800cd34:	b80b883a 	mov	r5,r23
 800cd38:	80130f80 	call	80130f8 <__sprint_r>
 800cd3c:	103c171e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cd40:	d8c02017 	ldw	r3,128(sp)
 800cd44:	df002787 	ldb	fp,158(sp)
 800cd48:	da000404 	addi	r8,sp,16
 800cd4c:	003d3406 	br	800c220 <__alt_data_end+0xfc00c220>
 800cd50:	9080040c 	andi	r2,r18,16
 800cd54:	10016126 	beq	r2,zero,800d2dc <___vfprintf_internal_r+0x1950>
 800cd58:	d9402e17 	ldw	r5,184(sp)
 800cd5c:	2cc00017 	ldw	r19,0(r5)
 800cd60:	29400104 	addi	r5,r5,4
 800cd64:	d9402e15 	stw	r5,184(sp)
 800cd68:	982dd7fa 	srai	r22,r19,31
 800cd6c:	b005883a 	mov	r2,r22
 800cd70:	003c5a06 	br	800bedc <__alt_data_end+0xfc00bedc>
 800cd74:	9080040c 	andi	r2,r18,16
 800cd78:	10003526 	beq	r2,zero,800ce50 <___vfprintf_internal_r+0x14c4>
 800cd7c:	d8c02e17 	ldw	r3,184(sp)
 800cd80:	d9002a17 	ldw	r4,168(sp)
 800cd84:	d8002785 	stb	zero,158(sp)
 800cd88:	18800104 	addi	r2,r3,4
 800cd8c:	1cc00017 	ldw	r19,0(r3)
 800cd90:	002d883a 	mov	r22,zero
 800cd94:	20003716 	blt	r4,zero,800ce74 <___vfprintf_internal_r+0x14e8>
 800cd98:	00ffdfc4 	movi	r3,-129
 800cd9c:	d8802e15 	stw	r2,184(sp)
 800cda0:	90e4703a 	and	r18,r18,r3
 800cda4:	0039883a 	mov	fp,zero
 800cda8:	983dd426 	beq	r19,zero,800c4fc <__alt_data_end+0xfc00c4fc>
 800cdac:	00800244 	movi	r2,9
 800cdb0:	14fc5336 	bltu	r2,r19,800bf00 <__alt_data_end+0xfc00bf00>
 800cdb4:	d8c02817 	ldw	r3,160(sp)
 800cdb8:	dc001dc4 	addi	r16,sp,119
 800cdbc:	9cc00c04 	addi	r19,r19,48
 800cdc0:	1c07c83a 	sub	r3,r3,r16
 800cdc4:	dcc01dc5 	stb	r19,119(sp)
 800cdc8:	d8c02b15 	stw	r3,172(sp)
 800cdcc:	003cc606 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800cdd0:	d8803317 	ldw	r2,204(sp)
 800cdd4:	143fffc4 	addi	r16,r2,-1
 800cdd8:	043f4d0e 	bge	zero,r16,800cb10 <__alt_data_end+0xfc00cb10>
 800cddc:	07000404 	movi	fp,16
 800cde0:	e400810e 	bge	fp,r16,800cfe8 <___vfprintf_internal_r+0x165c>
 800cde4:	014200b4 	movhi	r5,2050
 800cde8:	296b3c84 	addi	r5,r5,-21262
 800cdec:	d9402c15 	stw	r5,176(sp)
 800cdf0:	01c001c4 	movi	r7,7
 800cdf4:	dcc02d17 	ldw	r19,180(sp)
 800cdf8:	00000306 	br	800ce08 <___vfprintf_internal_r+0x147c>
 800cdfc:	b5800204 	addi	r22,r22,8
 800ce00:	843ffc04 	addi	r16,r16,-16
 800ce04:	e4007b0e 	bge	fp,r16,800cff4 <___vfprintf_internal_r+0x1668>
 800ce08:	18c00404 	addi	r3,r3,16
 800ce0c:	8c400044 	addi	r17,r17,1
 800ce10:	b5000015 	stw	r20,0(r22)
 800ce14:	b7000115 	stw	fp,4(r22)
 800ce18:	d8c02015 	stw	r3,128(sp)
 800ce1c:	dc401f15 	stw	r17,124(sp)
 800ce20:	3c7ff60e 	bge	r7,r17,800cdfc <__alt_data_end+0xfc00cdfc>
 800ce24:	d9801e04 	addi	r6,sp,120
 800ce28:	b80b883a 	mov	r5,r23
 800ce2c:	9809883a 	mov	r4,r19
 800ce30:	d9c03c15 	stw	r7,240(sp)
 800ce34:	80130f80 	call	80130f8 <__sprint_r>
 800ce38:	d9c03c17 	ldw	r7,240(sp)
 800ce3c:	103bd71e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800ce40:	d8c02017 	ldw	r3,128(sp)
 800ce44:	dc401f17 	ldw	r17,124(sp)
 800ce48:	dd800404 	addi	r22,sp,16
 800ce4c:	003fec06 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800ce50:	9080100c 	andi	r2,r18,64
 800ce54:	d8002785 	stb	zero,158(sp)
 800ce58:	10010e26 	beq	r2,zero,800d294 <___vfprintf_internal_r+0x1908>
 800ce5c:	d9402e17 	ldw	r5,184(sp)
 800ce60:	d8c02a17 	ldw	r3,168(sp)
 800ce64:	002d883a 	mov	r22,zero
 800ce68:	28800104 	addi	r2,r5,4
 800ce6c:	2cc0000b 	ldhu	r19,0(r5)
 800ce70:	183fc90e 	bge	r3,zero,800cd98 <__alt_data_end+0xfc00cd98>
 800ce74:	d8802e15 	stw	r2,184(sp)
 800ce78:	0039883a 	mov	fp,zero
 800ce7c:	9d84b03a 	or	r2,r19,r22
 800ce80:	103c1e1e 	bne	r2,zero,800befc <__alt_data_end+0xfc00befc>
 800ce84:	00800044 	movi	r2,1
 800ce88:	003e6c06 	br	800c83c <__alt_data_end+0xfc00c83c>
 800ce8c:	d9002d17 	ldw	r4,180(sp)
 800ce90:	d9801e04 	addi	r6,sp,120
 800ce94:	b80b883a 	mov	r5,r23
 800ce98:	80130f80 	call	80130f8 <__sprint_r>
 800ce9c:	103bbf1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cea0:	d8c02017 	ldw	r3,128(sp)
 800cea4:	da000404 	addi	r8,sp,16
 800cea8:	d9003217 	ldw	r4,200(sp)
 800ceac:	d8802617 	ldw	r2,152(sp)
 800ceb0:	d9403317 	ldw	r5,204(sp)
 800ceb4:	8123883a 	add	r17,r16,r4
 800ceb8:	11400216 	blt	r2,r5,800cec4 <___vfprintf_internal_r+0x1538>
 800cebc:	9100004c 	andi	r4,r18,1
 800cec0:	20000d26 	beq	r4,zero,800cef8 <___vfprintf_internal_r+0x156c>
 800cec4:	d9003717 	ldw	r4,220(sp)
 800cec8:	d9403417 	ldw	r5,208(sp)
 800cecc:	1907883a 	add	r3,r3,r4
 800ced0:	d9001f17 	ldw	r4,124(sp)
 800ced4:	41400015 	stw	r5,0(r8)
 800ced8:	d9403717 	ldw	r5,220(sp)
 800cedc:	21000044 	addi	r4,r4,1
 800cee0:	d8c02015 	stw	r3,128(sp)
 800cee4:	41400115 	stw	r5,4(r8)
 800cee8:	d9001f15 	stw	r4,124(sp)
 800ceec:	014001c4 	movi	r5,7
 800cef0:	2901e816 	blt	r5,r4,800d694 <___vfprintf_internal_r+0x1d08>
 800cef4:	42000204 	addi	r8,r8,8
 800cef8:	d9003317 	ldw	r4,204(sp)
 800cefc:	8121883a 	add	r16,r16,r4
 800cf00:	2085c83a 	sub	r2,r4,r2
 800cf04:	8461c83a 	sub	r16,r16,r17
 800cf08:	1400010e 	bge	r2,r16,800cf10 <___vfprintf_internal_r+0x1584>
 800cf0c:	1021883a 	mov	r16,r2
 800cf10:	04000a0e 	bge	zero,r16,800cf3c <___vfprintf_internal_r+0x15b0>
 800cf14:	d9001f17 	ldw	r4,124(sp)
 800cf18:	1c07883a 	add	r3,r3,r16
 800cf1c:	44400015 	stw	r17,0(r8)
 800cf20:	21000044 	addi	r4,r4,1
 800cf24:	44000115 	stw	r16,4(r8)
 800cf28:	d8c02015 	stw	r3,128(sp)
 800cf2c:	d9001f15 	stw	r4,124(sp)
 800cf30:	014001c4 	movi	r5,7
 800cf34:	2901fb16 	blt	r5,r4,800d724 <___vfprintf_internal_r+0x1d98>
 800cf38:	42000204 	addi	r8,r8,8
 800cf3c:	8001f716 	blt	r16,zero,800d71c <___vfprintf_internal_r+0x1d90>
 800cf40:	1421c83a 	sub	r16,r2,r16
 800cf44:	043d160e 	bge	zero,r16,800c3a0 <__alt_data_end+0xfc00c3a0>
 800cf48:	04400404 	movi	r17,16
 800cf4c:	d8801f17 	ldw	r2,124(sp)
 800cf50:	8c3efb0e 	bge	r17,r16,800cb40 <__alt_data_end+0xfc00cb40>
 800cf54:	014200b4 	movhi	r5,2050
 800cf58:	296b3c84 	addi	r5,r5,-21262
 800cf5c:	d9402c15 	stw	r5,176(sp)
 800cf60:	058001c4 	movi	r22,7
 800cf64:	dcc02d17 	ldw	r19,180(sp)
 800cf68:	00000306 	br	800cf78 <___vfprintf_internal_r+0x15ec>
 800cf6c:	42000204 	addi	r8,r8,8
 800cf70:	843ffc04 	addi	r16,r16,-16
 800cf74:	8c3ef50e 	bge	r17,r16,800cb4c <__alt_data_end+0xfc00cb4c>
 800cf78:	18c00404 	addi	r3,r3,16
 800cf7c:	10800044 	addi	r2,r2,1
 800cf80:	45000015 	stw	r20,0(r8)
 800cf84:	44400115 	stw	r17,4(r8)
 800cf88:	d8c02015 	stw	r3,128(sp)
 800cf8c:	d8801f15 	stw	r2,124(sp)
 800cf90:	b0bff60e 	bge	r22,r2,800cf6c <__alt_data_end+0xfc00cf6c>
 800cf94:	d9801e04 	addi	r6,sp,120
 800cf98:	b80b883a 	mov	r5,r23
 800cf9c:	9809883a 	mov	r4,r19
 800cfa0:	80130f80 	call	80130f8 <__sprint_r>
 800cfa4:	103b7d1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800cfa8:	d8c02017 	ldw	r3,128(sp)
 800cfac:	d8801f17 	ldw	r2,124(sp)
 800cfb0:	da000404 	addi	r8,sp,16
 800cfb4:	003fee06 	br	800cf70 <__alt_data_end+0xfc00cf70>
 800cfb8:	9088703a 	and	r4,r18,r2
 800cfbc:	203eab1e 	bne	r4,zero,800ca6c <__alt_data_end+0xfc00ca6c>
 800cfc0:	dc401f17 	ldw	r17,124(sp)
 800cfc4:	40800115 	stw	r2,4(r8)
 800cfc8:	44000015 	stw	r16,0(r8)
 800cfcc:	8c400044 	addi	r17,r17,1
 800cfd0:	d8c02015 	stw	r3,128(sp)
 800cfd4:	dc401f15 	stw	r17,124(sp)
 800cfd8:	008001c4 	movi	r2,7
 800cfdc:	14400e16 	blt	r2,r17,800d018 <___vfprintf_internal_r+0x168c>
 800cfe0:	45800204 	addi	r22,r8,8
 800cfe4:	003eca06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800cfe8:	010200b4 	movhi	r4,2050
 800cfec:	212b3c84 	addi	r4,r4,-21262
 800cff0:	d9002c15 	stw	r4,176(sp)
 800cff4:	d8802c17 	ldw	r2,176(sp)
 800cff8:	1c07883a 	add	r3,r3,r16
 800cffc:	8c400044 	addi	r17,r17,1
 800d000:	b0800015 	stw	r2,0(r22)
 800d004:	b4000115 	stw	r16,4(r22)
 800d008:	d8c02015 	stw	r3,128(sp)
 800d00c:	dc401f15 	stw	r17,124(sp)
 800d010:	008001c4 	movi	r2,7
 800d014:	147ebd0e 	bge	r2,r17,800cb0c <__alt_data_end+0xfc00cb0c>
 800d018:	d9002d17 	ldw	r4,180(sp)
 800d01c:	d9801e04 	addi	r6,sp,120
 800d020:	b80b883a 	mov	r5,r23
 800d024:	80130f80 	call	80130f8 <__sprint_r>
 800d028:	103b5c1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d02c:	d8c02017 	ldw	r3,128(sp)
 800d030:	dc401f17 	ldw	r17,124(sp)
 800d034:	dd800404 	addi	r22,sp,16
 800d038:	003eb506 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d03c:	d9002d17 	ldw	r4,180(sp)
 800d040:	d9801e04 	addi	r6,sp,120
 800d044:	b80b883a 	mov	r5,r23
 800d048:	80130f80 	call	80130f8 <__sprint_r>
 800d04c:	103b531e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d050:	d8c02017 	ldw	r3,128(sp)
 800d054:	dc401f17 	ldw	r17,124(sp)
 800d058:	da000404 	addi	r8,sp,16
 800d05c:	003e8d06 	br	800ca94 <__alt_data_end+0xfc00ca94>
 800d060:	d9002d17 	ldw	r4,180(sp)
 800d064:	d9801e04 	addi	r6,sp,120
 800d068:	b80b883a 	mov	r5,r23
 800d06c:	80130f80 	call	80130f8 <__sprint_r>
 800d070:	103b4a1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d074:	d8c02017 	ldw	r3,128(sp)
 800d078:	dc401f17 	ldw	r17,124(sp)
 800d07c:	dd800404 	addi	r22,sp,16
 800d080:	003e8f06 	br	800cac0 <__alt_data_end+0xfc00cac0>
 800d084:	0027883a 	mov	r19,zero
 800d088:	003f4a06 	br	800cdb4 <__alt_data_end+0xfc00cdb4>
 800d08c:	d9002d17 	ldw	r4,180(sp)
 800d090:	d9801e04 	addi	r6,sp,120
 800d094:	b80b883a 	mov	r5,r23
 800d098:	80130f80 	call	80130f8 <__sprint_r>
 800d09c:	103b3f1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d0a0:	d8c02017 	ldw	r3,128(sp)
 800d0a4:	da000404 	addi	r8,sp,16
 800d0a8:	003c7b06 	br	800c298 <__alt_data_end+0xfc00c298>
 800d0ac:	d9402a17 	ldw	r5,168(sp)
 800d0b0:	04e7c83a 	sub	r19,zero,r19
 800d0b4:	07000b44 	movi	fp,45
 800d0b8:	9804c03a 	cmpne	r2,r19,zero
 800d0bc:	05adc83a 	sub	r22,zero,r22
 800d0c0:	df002785 	stb	fp,158(sp)
 800d0c4:	b0adc83a 	sub	r22,r22,r2
 800d0c8:	28017b16 	blt	r5,zero,800d6b8 <___vfprintf_internal_r+0x1d2c>
 800d0cc:	00bfdfc4 	movi	r2,-129
 800d0d0:	90a4703a 	and	r18,r18,r2
 800d0d4:	003b8906 	br	800befc <__alt_data_end+0xfc00befc>
 800d0d8:	d9003617 	ldw	r4,216(sp)
 800d0dc:	d9403817 	ldw	r5,224(sp)
 800d0e0:	da003d15 	stw	r8,244(sp)
 800d0e4:	8007c780 	call	8007c78 <__fpclassifyd>
 800d0e8:	da003d17 	ldw	r8,244(sp)
 800d0ec:	1000f026 	beq	r2,zero,800d4b0 <___vfprintf_internal_r+0x1b24>
 800d0f0:	d9002a17 	ldw	r4,168(sp)
 800d0f4:	05bff7c4 	movi	r22,-33
 800d0f8:	00bfffc4 	movi	r2,-1
 800d0fc:	8dac703a 	and	r22,r17,r22
 800d100:	20820026 	beq	r4,r2,800d904 <___vfprintf_internal_r+0x1f78>
 800d104:	008011c4 	movi	r2,71
 800d108:	b081f726 	beq	r22,r2,800d8e8 <___vfprintf_internal_r+0x1f5c>
 800d10c:	d9003817 	ldw	r4,224(sp)
 800d110:	90c04014 	ori	r3,r18,256
 800d114:	d8c02c15 	stw	r3,176(sp)
 800d118:	20021516 	blt	r4,zero,800d970 <___vfprintf_internal_r+0x1fe4>
 800d11c:	dcc03817 	ldw	r19,224(sp)
 800d120:	d8002905 	stb	zero,164(sp)
 800d124:	00801984 	movi	r2,102
 800d128:	8881f926 	beq	r17,r2,800d910 <___vfprintf_internal_r+0x1f84>
 800d12c:	00801184 	movi	r2,70
 800d130:	88821c26 	beq	r17,r2,800d9a4 <___vfprintf_internal_r+0x2018>
 800d134:	00801144 	movi	r2,69
 800d138:	b081ef26 	beq	r22,r2,800d8f8 <___vfprintf_internal_r+0x1f6c>
 800d13c:	d8c02a17 	ldw	r3,168(sp)
 800d140:	d8802104 	addi	r2,sp,132
 800d144:	d8800315 	stw	r2,12(sp)
 800d148:	d9403617 	ldw	r5,216(sp)
 800d14c:	d8802504 	addi	r2,sp,148
 800d150:	d9002d17 	ldw	r4,180(sp)
 800d154:	d8800215 	stw	r2,8(sp)
 800d158:	d8802604 	addi	r2,sp,152
 800d15c:	d8c00015 	stw	r3,0(sp)
 800d160:	d8800115 	stw	r2,4(sp)
 800d164:	01c00084 	movi	r7,2
 800d168:	980d883a 	mov	r6,r19
 800d16c:	d8c03c15 	stw	r3,240(sp)
 800d170:	da003d15 	stw	r8,244(sp)
 800d174:	800e0bc0 	call	800e0bc <_dtoa_r>
 800d178:	1021883a 	mov	r16,r2
 800d17c:	008019c4 	movi	r2,103
 800d180:	d8c03c17 	ldw	r3,240(sp)
 800d184:	da003d17 	ldw	r8,244(sp)
 800d188:	88817126 	beq	r17,r2,800d750 <___vfprintf_internal_r+0x1dc4>
 800d18c:	008011c4 	movi	r2,71
 800d190:	88829126 	beq	r17,r2,800dbd8 <___vfprintf_internal_r+0x224c>
 800d194:	80f9883a 	add	fp,r16,r3
 800d198:	d9003617 	ldw	r4,216(sp)
 800d19c:	000d883a 	mov	r6,zero
 800d1a0:	000f883a 	mov	r7,zero
 800d1a4:	980b883a 	mov	r5,r19
 800d1a8:	da003d15 	stw	r8,244(sp)
 800d1ac:	800a1000 	call	800a100 <__eqdf2>
 800d1b0:	da003d17 	ldw	r8,244(sp)
 800d1b4:	10018d26 	beq	r2,zero,800d7ec <___vfprintf_internal_r+0x1e60>
 800d1b8:	d8802117 	ldw	r2,132(sp)
 800d1bc:	1700062e 	bgeu	r2,fp,800d1d8 <___vfprintf_internal_r+0x184c>
 800d1c0:	01000c04 	movi	r4,48
 800d1c4:	10c00044 	addi	r3,r2,1
 800d1c8:	d8c02115 	stw	r3,132(sp)
 800d1cc:	11000005 	stb	r4,0(r2)
 800d1d0:	d8802117 	ldw	r2,132(sp)
 800d1d4:	173ffb36 	bltu	r2,fp,800d1c4 <__alt_data_end+0xfc00d1c4>
 800d1d8:	1405c83a 	sub	r2,r2,r16
 800d1dc:	d8803315 	stw	r2,204(sp)
 800d1e0:	008011c4 	movi	r2,71
 800d1e4:	b0817626 	beq	r22,r2,800d7c0 <___vfprintf_internal_r+0x1e34>
 800d1e8:	00801944 	movi	r2,101
 800d1ec:	1442800e 	bge	r2,r17,800dbf0 <___vfprintf_internal_r+0x2264>
 800d1f0:	d8c02617 	ldw	r3,152(sp)
 800d1f4:	00801984 	movi	r2,102
 800d1f8:	d8c03215 	stw	r3,200(sp)
 800d1fc:	8881fe26 	beq	r17,r2,800d9f8 <___vfprintf_internal_r+0x206c>
 800d200:	d8c03217 	ldw	r3,200(sp)
 800d204:	d9003317 	ldw	r4,204(sp)
 800d208:	1901dd16 	blt	r3,r4,800d980 <___vfprintf_internal_r+0x1ff4>
 800d20c:	9480004c 	andi	r18,r18,1
 800d210:	90022b1e 	bne	r18,zero,800dac0 <___vfprintf_internal_r+0x2134>
 800d214:	1805883a 	mov	r2,r3
 800d218:	18028316 	blt	r3,zero,800dc28 <___vfprintf_internal_r+0x229c>
 800d21c:	d8c03217 	ldw	r3,200(sp)
 800d220:	044019c4 	movi	r17,103
 800d224:	d8c02b15 	stw	r3,172(sp)
 800d228:	df002907 	ldb	fp,164(sp)
 800d22c:	e001531e 	bne	fp,zero,800d77c <___vfprintf_internal_r+0x1df0>
 800d230:	df002783 	ldbu	fp,158(sp)
 800d234:	d8802915 	stw	r2,164(sp)
 800d238:	dc802c17 	ldw	r18,176(sp)
 800d23c:	d8002a15 	stw	zero,168(sp)
 800d240:	003baf06 	br	800c100 <__alt_data_end+0xfc00c100>
 800d244:	d8c02e17 	ldw	r3,184(sp)
 800d248:	d9002e17 	ldw	r4,184(sp)
 800d24c:	d9402e17 	ldw	r5,184(sp)
 800d250:	18c00017 	ldw	r3,0(r3)
 800d254:	21000117 	ldw	r4,4(r4)
 800d258:	29400204 	addi	r5,r5,8
 800d25c:	d8c03615 	stw	r3,216(sp)
 800d260:	d9003815 	stw	r4,224(sp)
 800d264:	d9402e15 	stw	r5,184(sp)
 800d268:	003b5006 	br	800bfac <__alt_data_end+0xfc00bfac>
 800d26c:	ac400007 	ldb	r17,0(r21)
 800d270:	003a2806 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800d274:	9080100c 	andi	r2,r18,64
 800d278:	1000a826 	beq	r2,zero,800d51c <___vfprintf_internal_r+0x1b90>
 800d27c:	d8c02e17 	ldw	r3,184(sp)
 800d280:	002d883a 	mov	r22,zero
 800d284:	1cc0000b 	ldhu	r19,0(r3)
 800d288:	18c00104 	addi	r3,r3,4
 800d28c:	d8c02e15 	stw	r3,184(sp)
 800d290:	003caf06 	br	800c550 <__alt_data_end+0xfc00c550>
 800d294:	d9002e17 	ldw	r4,184(sp)
 800d298:	d9402a17 	ldw	r5,168(sp)
 800d29c:	002d883a 	mov	r22,zero
 800d2a0:	20800104 	addi	r2,r4,4
 800d2a4:	24c00017 	ldw	r19,0(r4)
 800d2a8:	283ebb0e 	bge	r5,zero,800cd98 <__alt_data_end+0xfc00cd98>
 800d2ac:	003ef106 	br	800ce74 <__alt_data_end+0xfc00ce74>
 800d2b0:	9080040c 	andi	r2,r18,16
 800d2b4:	1000921e 	bne	r2,zero,800d500 <___vfprintf_internal_r+0x1b74>
 800d2b8:	9480100c 	andi	r18,r18,64
 800d2bc:	90013926 	beq	r18,zero,800d7a4 <___vfprintf_internal_r+0x1e18>
 800d2c0:	d9402e17 	ldw	r5,184(sp)
 800d2c4:	d8c02f17 	ldw	r3,188(sp)
 800d2c8:	28800017 	ldw	r2,0(r5)
 800d2cc:	29400104 	addi	r5,r5,4
 800d2d0:	d9402e15 	stw	r5,184(sp)
 800d2d4:	10c0000d 	sth	r3,0(r2)
 800d2d8:	0039e406 	br	800ba6c <__alt_data_end+0xfc00ba6c>
 800d2dc:	9080100c 	andi	r2,r18,64
 800d2e0:	10008026 	beq	r2,zero,800d4e4 <___vfprintf_internal_r+0x1b58>
 800d2e4:	d8802e17 	ldw	r2,184(sp)
 800d2e8:	14c0000f 	ldh	r19,0(r2)
 800d2ec:	10800104 	addi	r2,r2,4
 800d2f0:	d8802e15 	stw	r2,184(sp)
 800d2f4:	982dd7fa 	srai	r22,r19,31
 800d2f8:	b005883a 	mov	r2,r22
 800d2fc:	003af706 	br	800bedc <__alt_data_end+0xfc00bedc>
 800d300:	9080100c 	andi	r2,r18,64
 800d304:	d8002785 	stb	zero,158(sp)
 800d308:	10008a1e 	bne	r2,zero,800d534 <___vfprintf_internal_r+0x1ba8>
 800d30c:	d9002e17 	ldw	r4,184(sp)
 800d310:	d9402a17 	ldw	r5,168(sp)
 800d314:	002d883a 	mov	r22,zero
 800d318:	20800104 	addi	r2,r4,4
 800d31c:	24c00017 	ldw	r19,0(r4)
 800d320:	283e4b0e 	bge	r5,zero,800cc50 <__alt_data_end+0xfc00cc50>
 800d324:	9d86b03a 	or	r3,r19,r22
 800d328:	d8802e15 	stw	r2,184(sp)
 800d32c:	183e4c1e 	bne	r3,zero,800cc60 <__alt_data_end+0xfc00cc60>
 800d330:	0039883a 	mov	fp,zero
 800d334:	0005883a 	mov	r2,zero
 800d338:	003d4006 	br	800c83c <__alt_data_end+0xfc00c83c>
 800d33c:	014200b4 	movhi	r5,2050
 800d340:	296b3c84 	addi	r5,r5,-21262
 800d344:	d9402c15 	stw	r5,176(sp)
 800d348:	d9402c17 	ldw	r5,176(sp)
 800d34c:	1c47883a 	add	r3,r3,r17
 800d350:	10800044 	addi	r2,r2,1
 800d354:	41400015 	stw	r5,0(r8)
 800d358:	44400115 	stw	r17,4(r8)
 800d35c:	d8c02015 	stw	r3,128(sp)
 800d360:	d8801f15 	stw	r2,124(sp)
 800d364:	010001c4 	movi	r4,7
 800d368:	20bec816 	blt	r4,r2,800ce8c <__alt_data_end+0xfc00ce8c>
 800d36c:	42000204 	addi	r8,r8,8
 800d370:	003ecd06 	br	800cea8 <__alt_data_end+0xfc00cea8>
 800d374:	d9002a17 	ldw	r4,168(sp)
 800d378:	d8002785 	stb	zero,158(sp)
 800d37c:	203d2d16 	blt	r4,zero,800c834 <__alt_data_end+0xfc00c834>
 800d380:	00bfdfc4 	movi	r2,-129
 800d384:	90a4703a 	and	r18,r18,r2
 800d388:	003a6106 	br	800bd10 <__alt_data_end+0xfc00bd10>
 800d38c:	010200b4 	movhi	r4,2050
 800d390:	212b3c84 	addi	r4,r4,-21262
 800d394:	d9002c15 	stw	r4,176(sp)
 800d398:	003bea06 	br	800c344 <__alt_data_end+0xfc00c344>
 800d39c:	d9002d17 	ldw	r4,180(sp)
 800d3a0:	d9801e04 	addi	r6,sp,120
 800d3a4:	b80b883a 	mov	r5,r23
 800d3a8:	80130f80 	call	80130f8 <__sprint_r>
 800d3ac:	103a7b1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d3b0:	d8c02017 	ldw	r3,128(sp)
 800d3b4:	da000404 	addi	r8,sp,16
 800d3b8:	003d4106 	br	800c8c0 <__alt_data_end+0xfc00c8c0>
 800d3bc:	d8801f17 	ldw	r2,124(sp)
 800d3c0:	014200b4 	movhi	r5,2050
 800d3c4:	01000044 	movi	r4,1
 800d3c8:	18c00044 	addi	r3,r3,1
 800d3cc:	10800044 	addi	r2,r2,1
 800d3d0:	296b3c04 	addi	r5,r5,-21264
 800d3d4:	41000115 	stw	r4,4(r8)
 800d3d8:	41400015 	stw	r5,0(r8)
 800d3dc:	d8c02015 	stw	r3,128(sp)
 800d3e0:	d8801f15 	stw	r2,124(sp)
 800d3e4:	010001c4 	movi	r4,7
 800d3e8:	20805c16 	blt	r4,r2,800d55c <___vfprintf_internal_r+0x1bd0>
 800d3ec:	42000204 	addi	r8,r8,8
 800d3f0:	8800041e 	bne	r17,zero,800d404 <___vfprintf_internal_r+0x1a78>
 800d3f4:	d8803317 	ldw	r2,204(sp)
 800d3f8:	1000021e 	bne	r2,zero,800d404 <___vfprintf_internal_r+0x1a78>
 800d3fc:	9080004c 	andi	r2,r18,1
 800d400:	103be726 	beq	r2,zero,800c3a0 <__alt_data_end+0xfc00c3a0>
 800d404:	d9003717 	ldw	r4,220(sp)
 800d408:	d8801f17 	ldw	r2,124(sp)
 800d40c:	d9403417 	ldw	r5,208(sp)
 800d410:	20c7883a 	add	r3,r4,r3
 800d414:	10800044 	addi	r2,r2,1
 800d418:	41000115 	stw	r4,4(r8)
 800d41c:	41400015 	stw	r5,0(r8)
 800d420:	d8c02015 	stw	r3,128(sp)
 800d424:	d8801f15 	stw	r2,124(sp)
 800d428:	010001c4 	movi	r4,7
 800d42c:	20812116 	blt	r4,r2,800d8b4 <___vfprintf_internal_r+0x1f28>
 800d430:	42000204 	addi	r8,r8,8
 800d434:	0463c83a 	sub	r17,zero,r17
 800d438:	0440730e 	bge	zero,r17,800d608 <___vfprintf_internal_r+0x1c7c>
 800d43c:	05800404 	movi	r22,16
 800d440:	b440860e 	bge	r22,r17,800d65c <___vfprintf_internal_r+0x1cd0>
 800d444:	014200b4 	movhi	r5,2050
 800d448:	296b3c84 	addi	r5,r5,-21262
 800d44c:	d9402c15 	stw	r5,176(sp)
 800d450:	070001c4 	movi	fp,7
 800d454:	dcc02d17 	ldw	r19,180(sp)
 800d458:	00000306 	br	800d468 <___vfprintf_internal_r+0x1adc>
 800d45c:	42000204 	addi	r8,r8,8
 800d460:	8c7ffc04 	addi	r17,r17,-16
 800d464:	b440800e 	bge	r22,r17,800d668 <___vfprintf_internal_r+0x1cdc>
 800d468:	18c00404 	addi	r3,r3,16
 800d46c:	10800044 	addi	r2,r2,1
 800d470:	45000015 	stw	r20,0(r8)
 800d474:	45800115 	stw	r22,4(r8)
 800d478:	d8c02015 	stw	r3,128(sp)
 800d47c:	d8801f15 	stw	r2,124(sp)
 800d480:	e0bff60e 	bge	fp,r2,800d45c <__alt_data_end+0xfc00d45c>
 800d484:	d9801e04 	addi	r6,sp,120
 800d488:	b80b883a 	mov	r5,r23
 800d48c:	9809883a 	mov	r4,r19
 800d490:	80130f80 	call	80130f8 <__sprint_r>
 800d494:	103a411e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d498:	d8c02017 	ldw	r3,128(sp)
 800d49c:	d8801f17 	ldw	r2,124(sp)
 800d4a0:	da000404 	addi	r8,sp,16
 800d4a4:	003fee06 	br	800d460 <__alt_data_end+0xfc00d460>
 800d4a8:	00bfffc4 	movi	r2,-1
 800d4ac:	003a3f06 	br	800bdac <__alt_data_end+0xfc00bdac>
 800d4b0:	008011c4 	movi	r2,71
 800d4b4:	1440b816 	blt	r2,r17,800d798 <___vfprintf_internal_r+0x1e0c>
 800d4b8:	040200b4 	movhi	r16,2050
 800d4bc:	842b2e04 	addi	r16,r16,-21320
 800d4c0:	00c000c4 	movi	r3,3
 800d4c4:	00bfdfc4 	movi	r2,-129
 800d4c8:	d8c02915 	stw	r3,164(sp)
 800d4cc:	90a4703a 	and	r18,r18,r2
 800d4d0:	df002783 	ldbu	fp,158(sp)
 800d4d4:	d8c02b15 	stw	r3,172(sp)
 800d4d8:	d8002a15 	stw	zero,168(sp)
 800d4dc:	d8003215 	stw	zero,200(sp)
 800d4e0:	003b0706 	br	800c100 <__alt_data_end+0xfc00c100>
 800d4e4:	d8c02e17 	ldw	r3,184(sp)
 800d4e8:	1cc00017 	ldw	r19,0(r3)
 800d4ec:	18c00104 	addi	r3,r3,4
 800d4f0:	d8c02e15 	stw	r3,184(sp)
 800d4f4:	982dd7fa 	srai	r22,r19,31
 800d4f8:	b005883a 	mov	r2,r22
 800d4fc:	003a7706 	br	800bedc <__alt_data_end+0xfc00bedc>
 800d500:	d8c02e17 	ldw	r3,184(sp)
 800d504:	d9002f17 	ldw	r4,188(sp)
 800d508:	18800017 	ldw	r2,0(r3)
 800d50c:	18c00104 	addi	r3,r3,4
 800d510:	d8c02e15 	stw	r3,184(sp)
 800d514:	11000015 	stw	r4,0(r2)
 800d518:	00395406 	br	800ba6c <__alt_data_end+0xfc00ba6c>
 800d51c:	d9002e17 	ldw	r4,184(sp)
 800d520:	002d883a 	mov	r22,zero
 800d524:	24c00017 	ldw	r19,0(r4)
 800d528:	21000104 	addi	r4,r4,4
 800d52c:	d9002e15 	stw	r4,184(sp)
 800d530:	003c0706 	br	800c550 <__alt_data_end+0xfc00c550>
 800d534:	d9402e17 	ldw	r5,184(sp)
 800d538:	d8c02a17 	ldw	r3,168(sp)
 800d53c:	002d883a 	mov	r22,zero
 800d540:	28800104 	addi	r2,r5,4
 800d544:	2cc0000b 	ldhu	r19,0(r5)
 800d548:	183dc10e 	bge	r3,zero,800cc50 <__alt_data_end+0xfc00cc50>
 800d54c:	003f7506 	br	800d324 <__alt_data_end+0xfc00d324>
 800d550:	040200b4 	movhi	r16,2050
 800d554:	842b2c04 	addi	r16,r16,-21328
 800d558:	003aa706 	br	800bff8 <__alt_data_end+0xfc00bff8>
 800d55c:	d9002d17 	ldw	r4,180(sp)
 800d560:	d9801e04 	addi	r6,sp,120
 800d564:	b80b883a 	mov	r5,r23
 800d568:	80130f80 	call	80130f8 <__sprint_r>
 800d56c:	103a0b1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d570:	dc402617 	ldw	r17,152(sp)
 800d574:	d8c02017 	ldw	r3,128(sp)
 800d578:	da000404 	addi	r8,sp,16
 800d57c:	003f9c06 	br	800d3f0 <__alt_data_end+0xfc00d3f0>
 800d580:	ac400043 	ldbu	r17,1(r21)
 800d584:	84000814 	ori	r16,r16,32
 800d588:	ad400044 	addi	r21,r21,1
 800d58c:	8c403fcc 	andi	r17,r17,255
 800d590:	8c40201c 	xori	r17,r17,128
 800d594:	8c7fe004 	addi	r17,r17,-128
 800d598:	00395e06 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800d59c:	d8c02e15 	stw	r3,184(sp)
 800d5a0:	0039883a 	mov	fp,zero
 800d5a4:	003e3506 	br	800ce7c <__alt_data_end+0xfc00ce7c>
 800d5a8:	d9002d17 	ldw	r4,180(sp)
 800d5ac:	d9801e04 	addi	r6,sp,120
 800d5b0:	b80b883a 	mov	r5,r23
 800d5b4:	80130f80 	call	80130f8 <__sprint_r>
 800d5b8:	1039f81e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d5bc:	d8c02017 	ldw	r3,128(sp)
 800d5c0:	da000404 	addi	r8,sp,16
 800d5c4:	003cd006 	br	800c908 <__alt_data_end+0xfc00c908>
 800d5c8:	8009883a 	mov	r4,r16
 800d5cc:	df003d15 	stw	fp,244(sp)
 800d5d0:	800b8f40 	call	800b8f4 <strlen>
 800d5d4:	d8802b15 	stw	r2,172(sp)
 800d5d8:	da003d17 	ldw	r8,244(sp)
 800d5dc:	103c200e 	bge	r2,zero,800c660 <__alt_data_end+0xfc00c660>
 800d5e0:	0005883a 	mov	r2,zero
 800d5e4:	003c1e06 	br	800c660 <__alt_data_end+0xfc00c660>
 800d5e8:	d9002d17 	ldw	r4,180(sp)
 800d5ec:	d9801e04 	addi	r6,sp,120
 800d5f0:	b80b883a 	mov	r5,r23
 800d5f4:	80130f80 	call	80130f8 <__sprint_r>
 800d5f8:	1039e81e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d5fc:	d8c02017 	ldw	r3,128(sp)
 800d600:	d8801f17 	ldw	r2,124(sp)
 800d604:	da000404 	addi	r8,sp,16
 800d608:	d9403317 	ldw	r5,204(sp)
 800d60c:	10800044 	addi	r2,r2,1
 800d610:	44000015 	stw	r16,0(r8)
 800d614:	28c7883a 	add	r3,r5,r3
 800d618:	003b5b06 	br	800c388 <__alt_data_end+0xfc00c388>
 800d61c:	010200b4 	movhi	r4,2050
 800d620:	212b4084 	addi	r4,r4,-21246
 800d624:	d9003515 	stw	r4,212(sp)
 800d628:	003af206 	br	800c1f4 <__alt_data_end+0xfc00c1f4>
 800d62c:	013fffc4 	movi	r4,-1
 800d630:	003a0806 	br	800be54 <__alt_data_end+0xfc00be54>
 800d634:	0023883a 	mov	r17,zero
 800d638:	003d9d06 	br	800ccb0 <__alt_data_end+0xfc00ccb0>
 800d63c:	d9002d17 	ldw	r4,180(sp)
 800d640:	d9801e04 	addi	r6,sp,120
 800d644:	b80b883a 	mov	r5,r23
 800d648:	80130f80 	call	80130f8 <__sprint_r>
 800d64c:	1039d31e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d650:	d8c02017 	ldw	r3,128(sp)
 800d654:	da000404 	addi	r8,sp,16
 800d658:	003d9406 	br	800ccac <__alt_data_end+0xfc00ccac>
 800d65c:	010200b4 	movhi	r4,2050
 800d660:	212b3c84 	addi	r4,r4,-21262
 800d664:	d9002c15 	stw	r4,176(sp)
 800d668:	d9002c17 	ldw	r4,176(sp)
 800d66c:	1c47883a 	add	r3,r3,r17
 800d670:	10800044 	addi	r2,r2,1
 800d674:	41000015 	stw	r4,0(r8)
 800d678:	44400115 	stw	r17,4(r8)
 800d67c:	d8c02015 	stw	r3,128(sp)
 800d680:	d8801f15 	stw	r2,124(sp)
 800d684:	010001c4 	movi	r4,7
 800d688:	20bfd716 	blt	r4,r2,800d5e8 <__alt_data_end+0xfc00d5e8>
 800d68c:	42000204 	addi	r8,r8,8
 800d690:	003fdd06 	br	800d608 <__alt_data_end+0xfc00d608>
 800d694:	d9002d17 	ldw	r4,180(sp)
 800d698:	d9801e04 	addi	r6,sp,120
 800d69c:	b80b883a 	mov	r5,r23
 800d6a0:	80130f80 	call	80130f8 <__sprint_r>
 800d6a4:	1039bd1e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d6a8:	d8802617 	ldw	r2,152(sp)
 800d6ac:	d8c02017 	ldw	r3,128(sp)
 800d6b0:	da000404 	addi	r8,sp,16
 800d6b4:	003e1006 	br	800cef8 <__alt_data_end+0xfc00cef8>
 800d6b8:	00800044 	movi	r2,1
 800d6bc:	10803fcc 	andi	r2,r2,255
 800d6c0:	00c00044 	movi	r3,1
 800d6c4:	10fa0d26 	beq	r2,r3,800befc <__alt_data_end+0xfc00befc>
 800d6c8:	00c00084 	movi	r3,2
 800d6cc:	10fbaf26 	beq	r2,r3,800c58c <__alt_data_end+0xfc00c58c>
 800d6d0:	003a6d06 	br	800c088 <__alt_data_end+0xfc00c088>
 800d6d4:	010200b4 	movhi	r4,2050
 800d6d8:	212b4084 	addi	r4,r4,-21246
 800d6dc:	d9003515 	stw	r4,212(sp)
 800d6e0:	003b5406 	br	800c434 <__alt_data_end+0xfc00c434>
 800d6e4:	d8802a17 	ldw	r2,168(sp)
 800d6e8:	00c00184 	movi	r3,6
 800d6ec:	1880012e 	bgeu	r3,r2,800d6f4 <___vfprintf_internal_r+0x1d68>
 800d6f0:	1805883a 	mov	r2,r3
 800d6f4:	d8802b15 	stw	r2,172(sp)
 800d6f8:	1000ef16 	blt	r2,zero,800dab8 <___vfprintf_internal_r+0x212c>
 800d6fc:	040200b4 	movhi	r16,2050
 800d700:	d8802915 	stw	r2,164(sp)
 800d704:	dcc02e15 	stw	r19,184(sp)
 800d708:	d8002a15 	stw	zero,168(sp)
 800d70c:	d8003215 	stw	zero,200(sp)
 800d710:	842b3a04 	addi	r16,r16,-21272
 800d714:	0039883a 	mov	fp,zero
 800d718:	003a8006 	br	800c11c <__alt_data_end+0xfc00c11c>
 800d71c:	0021883a 	mov	r16,zero
 800d720:	003e0706 	br	800cf40 <__alt_data_end+0xfc00cf40>
 800d724:	d9002d17 	ldw	r4,180(sp)
 800d728:	d9801e04 	addi	r6,sp,120
 800d72c:	b80b883a 	mov	r5,r23
 800d730:	80130f80 	call	80130f8 <__sprint_r>
 800d734:	1039991e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d738:	d8802617 	ldw	r2,152(sp)
 800d73c:	d9403317 	ldw	r5,204(sp)
 800d740:	d8c02017 	ldw	r3,128(sp)
 800d744:	da000404 	addi	r8,sp,16
 800d748:	2885c83a 	sub	r2,r5,r2
 800d74c:	003dfb06 	br	800cf3c <__alt_data_end+0xfc00cf3c>
 800d750:	9080004c 	andi	r2,r18,1
 800d754:	103e8f1e 	bne	r2,zero,800d194 <__alt_data_end+0xfc00d194>
 800d758:	d8802117 	ldw	r2,132(sp)
 800d75c:	003e9e06 	br	800d1d8 <__alt_data_end+0xfc00d1d8>
 800d760:	1025883a 	mov	r18,r2
 800d764:	0039883a 	mov	fp,zero
 800d768:	00800084 	movi	r2,2
 800d76c:	003fd306 	br	800d6bc <__alt_data_end+0xfc00d6bc>
 800d770:	07000b44 	movi	fp,45
 800d774:	df002785 	stb	fp,158(sp)
 800d778:	003a1b06 	br	800bfe8 <__alt_data_end+0xfc00bfe8>
 800d77c:	00c00b44 	movi	r3,45
 800d780:	d8c02785 	stb	r3,158(sp)
 800d784:	d8802915 	stw	r2,164(sp)
 800d788:	dc802c17 	ldw	r18,176(sp)
 800d78c:	d8002a15 	stw	zero,168(sp)
 800d790:	07000b44 	movi	fp,45
 800d794:	003a5e06 	br	800c110 <__alt_data_end+0xfc00c110>
 800d798:	040200b4 	movhi	r16,2050
 800d79c:	842b2f04 	addi	r16,r16,-21316
 800d7a0:	003f4706 	br	800d4c0 <__alt_data_end+0xfc00d4c0>
 800d7a4:	d9002e17 	ldw	r4,184(sp)
 800d7a8:	d9402f17 	ldw	r5,188(sp)
 800d7ac:	20800017 	ldw	r2,0(r4)
 800d7b0:	21000104 	addi	r4,r4,4
 800d7b4:	d9002e15 	stw	r4,184(sp)
 800d7b8:	11400015 	stw	r5,0(r2)
 800d7bc:	0038ab06 	br	800ba6c <__alt_data_end+0xfc00ba6c>
 800d7c0:	dd802617 	ldw	r22,152(sp)
 800d7c4:	00bfff44 	movi	r2,-3
 800d7c8:	b0801c16 	blt	r22,r2,800d83c <___vfprintf_internal_r+0x1eb0>
 800d7cc:	d9402a17 	ldw	r5,168(sp)
 800d7d0:	2d801a16 	blt	r5,r22,800d83c <___vfprintf_internal_r+0x1eb0>
 800d7d4:	dd803215 	stw	r22,200(sp)
 800d7d8:	003e8906 	br	800d200 <__alt_data_end+0xfc00d200>
 800d7dc:	010200b4 	movhi	r4,2050
 800d7e0:	212b3c84 	addi	r4,r4,-21262
 800d7e4:	d9002c15 	stw	r4,176(sp)
 800d7e8:	003c9106 	br	800ca30 <__alt_data_end+0xfc00ca30>
 800d7ec:	e005883a 	mov	r2,fp
 800d7f0:	003e7906 	br	800d1d8 <__alt_data_end+0xfc00d1d8>
 800d7f4:	d9002a17 	ldw	r4,168(sp)
 800d7f8:	df002783 	ldbu	fp,158(sp)
 800d7fc:	dcc02e15 	stw	r19,184(sp)
 800d800:	d9002915 	stw	r4,164(sp)
 800d804:	d9002b15 	stw	r4,172(sp)
 800d808:	d8002a15 	stw	zero,168(sp)
 800d80c:	d8003215 	stw	zero,200(sp)
 800d810:	003a3b06 	br	800c100 <__alt_data_end+0xfc00c100>
 800d814:	9080004c 	andi	r2,r18,1
 800d818:	0039883a 	mov	fp,zero
 800d81c:	10000426 	beq	r2,zero,800d830 <___vfprintf_internal_r+0x1ea4>
 800d820:	00800c04 	movi	r2,48
 800d824:	dc001dc4 	addi	r16,sp,119
 800d828:	d8801dc5 	stb	r2,119(sp)
 800d82c:	003b6406 	br	800c5c0 <__alt_data_end+0xfc00c5c0>
 800d830:	d8002b15 	stw	zero,172(sp)
 800d834:	dc001e04 	addi	r16,sp,120
 800d838:	003a2b06 	br	800c0e8 <__alt_data_end+0xfc00c0e8>
 800d83c:	8c7fff84 	addi	r17,r17,-2
 800d840:	b5bfffc4 	addi	r22,r22,-1
 800d844:	dd802615 	stw	r22,152(sp)
 800d848:	dc4022c5 	stb	r17,139(sp)
 800d84c:	b000bf16 	blt	r22,zero,800db4c <___vfprintf_internal_r+0x21c0>
 800d850:	00800ac4 	movi	r2,43
 800d854:	d8802305 	stb	r2,140(sp)
 800d858:	00800244 	movi	r2,9
 800d85c:	15807016 	blt	r2,r22,800da20 <___vfprintf_internal_r+0x2094>
 800d860:	00800c04 	movi	r2,48
 800d864:	b5800c04 	addi	r22,r22,48
 800d868:	d8802345 	stb	r2,141(sp)
 800d86c:	dd802385 	stb	r22,142(sp)
 800d870:	d88023c4 	addi	r2,sp,143
 800d874:	df0022c4 	addi	fp,sp,139
 800d878:	d8c03317 	ldw	r3,204(sp)
 800d87c:	1739c83a 	sub	fp,r2,fp
 800d880:	d9003317 	ldw	r4,204(sp)
 800d884:	e0c7883a 	add	r3,fp,r3
 800d888:	df003a15 	stw	fp,232(sp)
 800d88c:	d8c02b15 	stw	r3,172(sp)
 800d890:	00800044 	movi	r2,1
 800d894:	1100b30e 	bge	r2,r4,800db64 <___vfprintf_internal_r+0x21d8>
 800d898:	d8c02b17 	ldw	r3,172(sp)
 800d89c:	18c00044 	addi	r3,r3,1
 800d8a0:	d8c02b15 	stw	r3,172(sp)
 800d8a4:	1805883a 	mov	r2,r3
 800d8a8:	1800ac16 	blt	r3,zero,800db5c <___vfprintf_internal_r+0x21d0>
 800d8ac:	d8003215 	stw	zero,200(sp)
 800d8b0:	003e5d06 	br	800d228 <__alt_data_end+0xfc00d228>
 800d8b4:	d9002d17 	ldw	r4,180(sp)
 800d8b8:	d9801e04 	addi	r6,sp,120
 800d8bc:	b80b883a 	mov	r5,r23
 800d8c0:	80130f80 	call	80130f8 <__sprint_r>
 800d8c4:	1039351e 	bne	r2,zero,800bd9c <__alt_data_end+0xfc00bd9c>
 800d8c8:	dc402617 	ldw	r17,152(sp)
 800d8cc:	d8c02017 	ldw	r3,128(sp)
 800d8d0:	d8801f17 	ldw	r2,124(sp)
 800d8d4:	da000404 	addi	r8,sp,16
 800d8d8:	003ed606 	br	800d434 <__alt_data_end+0xfc00d434>
 800d8dc:	182b883a 	mov	r21,r3
 800d8e0:	d8002a15 	stw	zero,168(sp)
 800d8e4:	00388c06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800d8e8:	d8802a17 	ldw	r2,168(sp)
 800d8ec:	103e071e 	bne	r2,zero,800d10c <__alt_data_end+0xfc00d10c>
 800d8f0:	dc002a15 	stw	r16,168(sp)
 800d8f4:	003e0506 	br	800d10c <__alt_data_end+0xfc00d10c>
 800d8f8:	d9002a17 	ldw	r4,168(sp)
 800d8fc:	20c00044 	addi	r3,r4,1
 800d900:	003e0f06 	br	800d140 <__alt_data_end+0xfc00d140>
 800d904:	01400184 	movi	r5,6
 800d908:	d9402a15 	stw	r5,168(sp)
 800d90c:	003dff06 	br	800d10c <__alt_data_end+0xfc00d10c>
 800d910:	d8802104 	addi	r2,sp,132
 800d914:	d8800315 	stw	r2,12(sp)
 800d918:	d8802504 	addi	r2,sp,148
 800d91c:	d8800215 	stw	r2,8(sp)
 800d920:	d8802604 	addi	r2,sp,152
 800d924:	d8800115 	stw	r2,4(sp)
 800d928:	d8802a17 	ldw	r2,168(sp)
 800d92c:	d9403617 	ldw	r5,216(sp)
 800d930:	d9002d17 	ldw	r4,180(sp)
 800d934:	d8800015 	stw	r2,0(sp)
 800d938:	01c000c4 	movi	r7,3
 800d93c:	980d883a 	mov	r6,r19
 800d940:	da003d15 	stw	r8,244(sp)
 800d944:	800e0bc0 	call	800e0bc <_dtoa_r>
 800d948:	d8c02a17 	ldw	r3,168(sp)
 800d94c:	da003d17 	ldw	r8,244(sp)
 800d950:	1021883a 	mov	r16,r2
 800d954:	10f9883a 	add	fp,r2,r3
 800d958:	81000007 	ldb	r4,0(r16)
 800d95c:	00800c04 	movi	r2,48
 800d960:	20805e26 	beq	r4,r2,800dadc <___vfprintf_internal_r+0x2150>
 800d964:	d8c02617 	ldw	r3,152(sp)
 800d968:	e0f9883a 	add	fp,fp,r3
 800d96c:	003e0a06 	br	800d198 <__alt_data_end+0xfc00d198>
 800d970:	00c00b44 	movi	r3,45
 800d974:	24e0003c 	xorhi	r19,r4,32768
 800d978:	d8c02905 	stb	r3,164(sp)
 800d97c:	003de906 	br	800d124 <__alt_data_end+0xfc00d124>
 800d980:	d8c03217 	ldw	r3,200(sp)
 800d984:	00c07a0e 	bge	zero,r3,800db70 <___vfprintf_internal_r+0x21e4>
 800d988:	00800044 	movi	r2,1
 800d98c:	d9003317 	ldw	r4,204(sp)
 800d990:	1105883a 	add	r2,r2,r4
 800d994:	d8802b15 	stw	r2,172(sp)
 800d998:	10004e16 	blt	r2,zero,800dad4 <___vfprintf_internal_r+0x2148>
 800d99c:	044019c4 	movi	r17,103
 800d9a0:	003e2106 	br	800d228 <__alt_data_end+0xfc00d228>
 800d9a4:	d9002a17 	ldw	r4,168(sp)
 800d9a8:	d8802104 	addi	r2,sp,132
 800d9ac:	d8800315 	stw	r2,12(sp)
 800d9b0:	d9000015 	stw	r4,0(sp)
 800d9b4:	d8802504 	addi	r2,sp,148
 800d9b8:	d9403617 	ldw	r5,216(sp)
 800d9bc:	d9002d17 	ldw	r4,180(sp)
 800d9c0:	d8800215 	stw	r2,8(sp)
 800d9c4:	d8802604 	addi	r2,sp,152
 800d9c8:	d8800115 	stw	r2,4(sp)
 800d9cc:	01c000c4 	movi	r7,3
 800d9d0:	980d883a 	mov	r6,r19
 800d9d4:	da003d15 	stw	r8,244(sp)
 800d9d8:	800e0bc0 	call	800e0bc <_dtoa_r>
 800d9dc:	d8c02a17 	ldw	r3,168(sp)
 800d9e0:	da003d17 	ldw	r8,244(sp)
 800d9e4:	1021883a 	mov	r16,r2
 800d9e8:	00801184 	movi	r2,70
 800d9ec:	80f9883a 	add	fp,r16,r3
 800d9f0:	88bfd926 	beq	r17,r2,800d958 <__alt_data_end+0xfc00d958>
 800d9f4:	003de806 	br	800d198 <__alt_data_end+0xfc00d198>
 800d9f8:	d9002a17 	ldw	r4,168(sp)
 800d9fc:	00c04d0e 	bge	zero,r3,800db34 <___vfprintf_internal_r+0x21a8>
 800da00:	2000441e 	bne	r4,zero,800db14 <___vfprintf_internal_r+0x2188>
 800da04:	9480004c 	andi	r18,r18,1
 800da08:	9000421e 	bne	r18,zero,800db14 <___vfprintf_internal_r+0x2188>
 800da0c:	1805883a 	mov	r2,r3
 800da10:	18006f16 	blt	r3,zero,800dbd0 <___vfprintf_internal_r+0x2244>
 800da14:	d8c03217 	ldw	r3,200(sp)
 800da18:	d8c02b15 	stw	r3,172(sp)
 800da1c:	003e0206 	br	800d228 <__alt_data_end+0xfc00d228>
 800da20:	df0022c4 	addi	fp,sp,139
 800da24:	dc002a15 	stw	r16,168(sp)
 800da28:	4027883a 	mov	r19,r8
 800da2c:	e021883a 	mov	r16,fp
 800da30:	b009883a 	mov	r4,r22
 800da34:	01400284 	movi	r5,10
 800da38:	80081fc0 	call	80081fc <__modsi3>
 800da3c:	10800c04 	addi	r2,r2,48
 800da40:	843fffc4 	addi	r16,r16,-1
 800da44:	b009883a 	mov	r4,r22
 800da48:	01400284 	movi	r5,10
 800da4c:	80800005 	stb	r2,0(r16)
 800da50:	80081780 	call	8008178 <__divsi3>
 800da54:	102d883a 	mov	r22,r2
 800da58:	00800244 	movi	r2,9
 800da5c:	15bff416 	blt	r2,r22,800da30 <__alt_data_end+0xfc00da30>
 800da60:	9811883a 	mov	r8,r19
 800da64:	b0800c04 	addi	r2,r22,48
 800da68:	8027883a 	mov	r19,r16
 800da6c:	997fffc4 	addi	r5,r19,-1
 800da70:	98bfffc5 	stb	r2,-1(r19)
 800da74:	dc002a17 	ldw	r16,168(sp)
 800da78:	2f006d2e 	bgeu	r5,fp,800dc30 <___vfprintf_internal_r+0x22a4>
 800da7c:	d9c02384 	addi	r7,sp,142
 800da80:	3ccfc83a 	sub	r7,r7,r19
 800da84:	d9002344 	addi	r4,sp,141
 800da88:	e1cf883a 	add	r7,fp,r7
 800da8c:	00000106 	br	800da94 <___vfprintf_internal_r+0x2108>
 800da90:	28800003 	ldbu	r2,0(r5)
 800da94:	20800005 	stb	r2,0(r4)
 800da98:	21000044 	addi	r4,r4,1
 800da9c:	29400044 	addi	r5,r5,1
 800daa0:	393ffb1e 	bne	r7,r4,800da90 <__alt_data_end+0xfc00da90>
 800daa4:	d8802304 	addi	r2,sp,140
 800daa8:	14c5c83a 	sub	r2,r2,r19
 800daac:	d8c02344 	addi	r3,sp,141
 800dab0:	1885883a 	add	r2,r3,r2
 800dab4:	003f7006 	br	800d878 <__alt_data_end+0xfc00d878>
 800dab8:	0005883a 	mov	r2,zero
 800dabc:	003f0f06 	br	800d6fc <__alt_data_end+0xfc00d6fc>
 800dac0:	d8c03217 	ldw	r3,200(sp)
 800dac4:	18c00044 	addi	r3,r3,1
 800dac8:	d8c02b15 	stw	r3,172(sp)
 800dacc:	1805883a 	mov	r2,r3
 800dad0:	183fb20e 	bge	r3,zero,800d99c <__alt_data_end+0xfc00d99c>
 800dad4:	0005883a 	mov	r2,zero
 800dad8:	003fb006 	br	800d99c <__alt_data_end+0xfc00d99c>
 800dadc:	d9003617 	ldw	r4,216(sp)
 800dae0:	000d883a 	mov	r6,zero
 800dae4:	000f883a 	mov	r7,zero
 800dae8:	980b883a 	mov	r5,r19
 800daec:	d8c03c15 	stw	r3,240(sp)
 800daf0:	da003d15 	stw	r8,244(sp)
 800daf4:	800a1000 	call	800a100 <__eqdf2>
 800daf8:	d8c03c17 	ldw	r3,240(sp)
 800dafc:	da003d17 	ldw	r8,244(sp)
 800db00:	103f9826 	beq	r2,zero,800d964 <__alt_data_end+0xfc00d964>
 800db04:	00800044 	movi	r2,1
 800db08:	10c7c83a 	sub	r3,r2,r3
 800db0c:	d8c02615 	stw	r3,152(sp)
 800db10:	003f9506 	br	800d968 <__alt_data_end+0xfc00d968>
 800db14:	d9002a17 	ldw	r4,168(sp)
 800db18:	d8c03217 	ldw	r3,200(sp)
 800db1c:	20800044 	addi	r2,r4,1
 800db20:	1885883a 	add	r2,r3,r2
 800db24:	d8802b15 	stw	r2,172(sp)
 800db28:	103dbf0e 	bge	r2,zero,800d228 <__alt_data_end+0xfc00d228>
 800db2c:	0005883a 	mov	r2,zero
 800db30:	003dbd06 	br	800d228 <__alt_data_end+0xfc00d228>
 800db34:	2000201e 	bne	r4,zero,800dbb8 <___vfprintf_internal_r+0x222c>
 800db38:	9480004c 	andi	r18,r18,1
 800db3c:	90001e1e 	bne	r18,zero,800dbb8 <___vfprintf_internal_r+0x222c>
 800db40:	00800044 	movi	r2,1
 800db44:	d8802b15 	stw	r2,172(sp)
 800db48:	003db706 	br	800d228 <__alt_data_end+0xfc00d228>
 800db4c:	00800b44 	movi	r2,45
 800db50:	05adc83a 	sub	r22,zero,r22
 800db54:	d8802305 	stb	r2,140(sp)
 800db58:	003f3f06 	br	800d858 <__alt_data_end+0xfc00d858>
 800db5c:	0005883a 	mov	r2,zero
 800db60:	003f5206 	br	800d8ac <__alt_data_end+0xfc00d8ac>
 800db64:	90a4703a 	and	r18,r18,r2
 800db68:	903f4e26 	beq	r18,zero,800d8a4 <__alt_data_end+0xfc00d8a4>
 800db6c:	003f4a06 	br	800d898 <__alt_data_end+0xfc00d898>
 800db70:	00800084 	movi	r2,2
 800db74:	10c5c83a 	sub	r2,r2,r3
 800db78:	003f8406 	br	800d98c <__alt_data_end+0xfc00d98c>
 800db7c:	d9402e17 	ldw	r5,184(sp)
 800db80:	d9002e17 	ldw	r4,184(sp)
 800db84:	ac400043 	ldbu	r17,1(r21)
 800db88:	29400017 	ldw	r5,0(r5)
 800db8c:	20800104 	addi	r2,r4,4
 800db90:	d8802e15 	stw	r2,184(sp)
 800db94:	d9402a15 	stw	r5,168(sp)
 800db98:	182b883a 	mov	r21,r3
 800db9c:	283e7b0e 	bge	r5,zero,800d58c <__alt_data_end+0xfc00d58c>
 800dba0:	8c403fcc 	andi	r17,r17,255
 800dba4:	017fffc4 	movi	r5,-1
 800dba8:	8c40201c 	xori	r17,r17,128
 800dbac:	d9402a15 	stw	r5,168(sp)
 800dbb0:	8c7fe004 	addi	r17,r17,-128
 800dbb4:	0037d706 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800dbb8:	d8c02a17 	ldw	r3,168(sp)
 800dbbc:	18c00084 	addi	r3,r3,2
 800dbc0:	d8c02b15 	stw	r3,172(sp)
 800dbc4:	1805883a 	mov	r2,r3
 800dbc8:	183d970e 	bge	r3,zero,800d228 <__alt_data_end+0xfc00d228>
 800dbcc:	003fd706 	br	800db2c <__alt_data_end+0xfc00db2c>
 800dbd0:	0005883a 	mov	r2,zero
 800dbd4:	003f8f06 	br	800da14 <__alt_data_end+0xfc00da14>
 800dbd8:	9080004c 	andi	r2,r18,1
 800dbdc:	103f821e 	bne	r2,zero,800d9e8 <__alt_data_end+0xfc00d9e8>
 800dbe0:	d8802117 	ldw	r2,132(sp)
 800dbe4:	1405c83a 	sub	r2,r2,r16
 800dbe8:	d8803315 	stw	r2,204(sp)
 800dbec:	b47ef426 	beq	r22,r17,800d7c0 <__alt_data_end+0xfc00d7c0>
 800dbf0:	dd802617 	ldw	r22,152(sp)
 800dbf4:	003f1206 	br	800d840 <__alt_data_end+0xfc00d840>
 800dbf8:	d8c02b03 	ldbu	r3,172(sp)
 800dbfc:	d8c02785 	stb	r3,158(sp)
 800dc00:	0038df06 	br	800bf80 <__alt_data_end+0xfc00bf80>
 800dc04:	d8c02b03 	ldbu	r3,172(sp)
 800dc08:	d8c02785 	stb	r3,158(sp)
 800dc0c:	0038aa06 	br	800beb8 <__alt_data_end+0xfc00beb8>
 800dc10:	d8c02b03 	ldbu	r3,172(sp)
 800dc14:	d8c02785 	stb	r3,158(sp)
 800dc18:	003a4306 	br	800c528 <__alt_data_end+0xfc00c528>
 800dc1c:	d8c02b03 	ldbu	r3,172(sp)
 800dc20:	d8c02785 	stb	r3,158(sp)
 800dc24:	003af506 	br	800c7fc <__alt_data_end+0xfc00c7fc>
 800dc28:	0005883a 	mov	r2,zero
 800dc2c:	003d7b06 	br	800d21c <__alt_data_end+0xfc00d21c>
 800dc30:	d8802344 	addi	r2,sp,141
 800dc34:	003f1006 	br	800d878 <__alt_data_end+0xfc00d878>
 800dc38:	d8c02b03 	ldbu	r3,172(sp)
 800dc3c:	d8c02785 	stb	r3,158(sp)
 800dc40:	0038fd06 	br	800c038 <__alt_data_end+0xfc00c038>
 800dc44:	d8c02b03 	ldbu	r3,172(sp)
 800dc48:	d8c02785 	stb	r3,158(sp)
 800dc4c:	003a9706 	br	800c6ac <__alt_data_end+0xfc00c6ac>
 800dc50:	d8c02b03 	ldbu	r3,172(sp)
 800dc54:	d8c02785 	stb	r3,158(sp)
 800dc58:	003a1806 	br	800c4bc <__alt_data_end+0xfc00c4bc>
 800dc5c:	d8c02b03 	ldbu	r3,172(sp)
 800dc60:	d8c02785 	stb	r3,158(sp)
 800dc64:	003abe06 	br	800c760 <__alt_data_end+0xfc00c760>

0800dc68 <__vfprintf_internal>:
 800dc68:	008200b4 	movhi	r2,2050
 800dc6c:	10b2dd04 	addi	r2,r2,-13452
 800dc70:	300f883a 	mov	r7,r6
 800dc74:	280d883a 	mov	r6,r5
 800dc78:	200b883a 	mov	r5,r4
 800dc7c:	11000017 	ldw	r4,0(r2)
 800dc80:	800b98c1 	jmpi	800b98c <___vfprintf_internal_r>

0800dc84 <__sbprintf>:
 800dc84:	2880030b 	ldhu	r2,12(r5)
 800dc88:	2ac01917 	ldw	r11,100(r5)
 800dc8c:	2a80038b 	ldhu	r10,14(r5)
 800dc90:	2a400717 	ldw	r9,28(r5)
 800dc94:	2a000917 	ldw	r8,36(r5)
 800dc98:	defee204 	addi	sp,sp,-1144
 800dc9c:	00c10004 	movi	r3,1024
 800dca0:	dc011a15 	stw	r16,1128(sp)
 800dca4:	10bfff4c 	andi	r2,r2,65533
 800dca8:	2821883a 	mov	r16,r5
 800dcac:	d8cb883a 	add	r5,sp,r3
 800dcb0:	dc811c15 	stw	r18,1136(sp)
 800dcb4:	dc411b15 	stw	r17,1132(sp)
 800dcb8:	dfc11d15 	stw	ra,1140(sp)
 800dcbc:	2025883a 	mov	r18,r4
 800dcc0:	d881030d 	sth	r2,1036(sp)
 800dcc4:	dac11915 	stw	r11,1124(sp)
 800dcc8:	da81038d 	sth	r10,1038(sp)
 800dccc:	da410715 	stw	r9,1052(sp)
 800dcd0:	da010915 	stw	r8,1060(sp)
 800dcd4:	dec10015 	stw	sp,1024(sp)
 800dcd8:	dec10415 	stw	sp,1040(sp)
 800dcdc:	d8c10215 	stw	r3,1032(sp)
 800dce0:	d8c10515 	stw	r3,1044(sp)
 800dce4:	d8010615 	stw	zero,1048(sp)
 800dce8:	800b98c0 	call	800b98c <___vfprintf_internal_r>
 800dcec:	1023883a 	mov	r17,r2
 800dcf0:	10000416 	blt	r2,zero,800dd04 <__sbprintf+0x80>
 800dcf4:	d9410004 	addi	r5,sp,1024
 800dcf8:	9009883a 	mov	r4,r18
 800dcfc:	800f9600 	call	800f960 <_fflush_r>
 800dd00:	10000d1e 	bne	r2,zero,800dd38 <__sbprintf+0xb4>
 800dd04:	d881030b 	ldhu	r2,1036(sp)
 800dd08:	1080100c 	andi	r2,r2,64
 800dd0c:	10000326 	beq	r2,zero,800dd1c <__sbprintf+0x98>
 800dd10:	8080030b 	ldhu	r2,12(r16)
 800dd14:	10801014 	ori	r2,r2,64
 800dd18:	8080030d 	sth	r2,12(r16)
 800dd1c:	8805883a 	mov	r2,r17
 800dd20:	dfc11d17 	ldw	ra,1140(sp)
 800dd24:	dc811c17 	ldw	r18,1136(sp)
 800dd28:	dc411b17 	ldw	r17,1132(sp)
 800dd2c:	dc011a17 	ldw	r16,1128(sp)
 800dd30:	dec11e04 	addi	sp,sp,1144
 800dd34:	f800283a 	ret
 800dd38:	047fffc4 	movi	r17,-1
 800dd3c:	003ff106 	br	800dd04 <__alt_data_end+0xfc00dd04>

0800dd40 <__swsetup_r>:
 800dd40:	008200b4 	movhi	r2,2050
 800dd44:	defffd04 	addi	sp,sp,-12
 800dd48:	10b2dd04 	addi	r2,r2,-13452
 800dd4c:	dc400115 	stw	r17,4(sp)
 800dd50:	2023883a 	mov	r17,r4
 800dd54:	11000017 	ldw	r4,0(r2)
 800dd58:	dc000015 	stw	r16,0(sp)
 800dd5c:	dfc00215 	stw	ra,8(sp)
 800dd60:	2821883a 	mov	r16,r5
 800dd64:	20000226 	beq	r4,zero,800dd70 <__swsetup_r+0x30>
 800dd68:	20800e17 	ldw	r2,56(r4)
 800dd6c:	10003126 	beq	r2,zero,800de34 <__swsetup_r+0xf4>
 800dd70:	8080030b 	ldhu	r2,12(r16)
 800dd74:	10c0020c 	andi	r3,r2,8
 800dd78:	1009883a 	mov	r4,r2
 800dd7c:	18000f26 	beq	r3,zero,800ddbc <__swsetup_r+0x7c>
 800dd80:	80c00417 	ldw	r3,16(r16)
 800dd84:	18001526 	beq	r3,zero,800dddc <__swsetup_r+0x9c>
 800dd88:	1100004c 	andi	r4,r2,1
 800dd8c:	20001c1e 	bne	r4,zero,800de00 <__swsetup_r+0xc0>
 800dd90:	1080008c 	andi	r2,r2,2
 800dd94:	1000291e 	bne	r2,zero,800de3c <__swsetup_r+0xfc>
 800dd98:	80800517 	ldw	r2,20(r16)
 800dd9c:	80800215 	stw	r2,8(r16)
 800dda0:	18001c26 	beq	r3,zero,800de14 <__swsetup_r+0xd4>
 800dda4:	0005883a 	mov	r2,zero
 800dda8:	dfc00217 	ldw	ra,8(sp)
 800ddac:	dc400117 	ldw	r17,4(sp)
 800ddb0:	dc000017 	ldw	r16,0(sp)
 800ddb4:	dec00304 	addi	sp,sp,12
 800ddb8:	f800283a 	ret
 800ddbc:	2080040c 	andi	r2,r4,16
 800ddc0:	10002e26 	beq	r2,zero,800de7c <__swsetup_r+0x13c>
 800ddc4:	2080010c 	andi	r2,r4,4
 800ddc8:	10001e1e 	bne	r2,zero,800de44 <__swsetup_r+0x104>
 800ddcc:	80c00417 	ldw	r3,16(r16)
 800ddd0:	20800214 	ori	r2,r4,8
 800ddd4:	8080030d 	sth	r2,12(r16)
 800ddd8:	183feb1e 	bne	r3,zero,800dd88 <__alt_data_end+0xfc00dd88>
 800dddc:	1100a00c 	andi	r4,r2,640
 800dde0:	01408004 	movi	r5,512
 800dde4:	217fe826 	beq	r4,r5,800dd88 <__alt_data_end+0xfc00dd88>
 800dde8:	800b883a 	mov	r5,r16
 800ddec:	8809883a 	mov	r4,r17
 800ddf0:	80108fc0 	call	80108fc <__smakebuf_r>
 800ddf4:	8080030b 	ldhu	r2,12(r16)
 800ddf8:	80c00417 	ldw	r3,16(r16)
 800ddfc:	003fe206 	br	800dd88 <__alt_data_end+0xfc00dd88>
 800de00:	80800517 	ldw	r2,20(r16)
 800de04:	80000215 	stw	zero,8(r16)
 800de08:	0085c83a 	sub	r2,zero,r2
 800de0c:	80800615 	stw	r2,24(r16)
 800de10:	183fe41e 	bne	r3,zero,800dda4 <__alt_data_end+0xfc00dda4>
 800de14:	80c0030b 	ldhu	r3,12(r16)
 800de18:	0005883a 	mov	r2,zero
 800de1c:	1900200c 	andi	r4,r3,128
 800de20:	203fe126 	beq	r4,zero,800dda8 <__alt_data_end+0xfc00dda8>
 800de24:	18c01014 	ori	r3,r3,64
 800de28:	80c0030d 	sth	r3,12(r16)
 800de2c:	00bfffc4 	movi	r2,-1
 800de30:	003fdd06 	br	800dda8 <__alt_data_end+0xfc00dda8>
 800de34:	800fd4c0 	call	800fd4c <__sinit>
 800de38:	003fcd06 	br	800dd70 <__alt_data_end+0xfc00dd70>
 800de3c:	0005883a 	mov	r2,zero
 800de40:	003fd606 	br	800dd9c <__alt_data_end+0xfc00dd9c>
 800de44:	81400c17 	ldw	r5,48(r16)
 800de48:	28000626 	beq	r5,zero,800de64 <__swsetup_r+0x124>
 800de4c:	80801004 	addi	r2,r16,64
 800de50:	28800326 	beq	r5,r2,800de60 <__swsetup_r+0x120>
 800de54:	8809883a 	mov	r4,r17
 800de58:	800fec00 	call	800fec0 <_free_r>
 800de5c:	8100030b 	ldhu	r4,12(r16)
 800de60:	80000c15 	stw	zero,48(r16)
 800de64:	80c00417 	ldw	r3,16(r16)
 800de68:	00bff6c4 	movi	r2,-37
 800de6c:	1108703a 	and	r4,r2,r4
 800de70:	80000115 	stw	zero,4(r16)
 800de74:	80c00015 	stw	r3,0(r16)
 800de78:	003fd506 	br	800ddd0 <__alt_data_end+0xfc00ddd0>
 800de7c:	00800244 	movi	r2,9
 800de80:	88800015 	stw	r2,0(r17)
 800de84:	20801014 	ori	r2,r4,64
 800de88:	8080030d 	sth	r2,12(r16)
 800de8c:	00bfffc4 	movi	r2,-1
 800de90:	003fc506 	br	800dda8 <__alt_data_end+0xfc00dda8>

0800de94 <quorem>:
 800de94:	defff204 	addi	sp,sp,-56
 800de98:	ddc00b15 	stw	r23,44(sp)
 800de9c:	20800417 	ldw	r2,16(r4)
 800dea0:	2dc00417 	ldw	r23,16(r5)
 800dea4:	dfc00d15 	stw	ra,52(sp)
 800dea8:	df000c15 	stw	fp,48(sp)
 800deac:	dd800a15 	stw	r22,40(sp)
 800deb0:	dd400915 	stw	r21,36(sp)
 800deb4:	dd000815 	stw	r20,32(sp)
 800deb8:	dcc00715 	stw	r19,28(sp)
 800debc:	dc800615 	stw	r18,24(sp)
 800dec0:	dc400515 	stw	r17,20(sp)
 800dec4:	dc000415 	stw	r16,16(sp)
 800dec8:	15c07a16 	blt	r2,r23,800e0b4 <quorem+0x220>
 800decc:	bdffffc4 	addi	r23,r23,-1
 800ded0:	bde9883a 	add	r20,r23,r23
 800ded4:	28c00504 	addi	r3,r5,20
 800ded8:	a529883a 	add	r20,r20,r20
 800dedc:	1d39883a 	add	fp,r3,r20
 800dee0:	24c00504 	addi	r19,r4,20
 800dee4:	d9400215 	stw	r5,8(sp)
 800dee8:	9d29883a 	add	r20,r19,r20
 800deec:	e1400017 	ldw	r5,0(fp)
 800def0:	d9000015 	stw	r4,0(sp)
 800def4:	a1000017 	ldw	r4,0(r20)
 800def8:	29400044 	addi	r5,r5,1
 800defc:	d8c00115 	stw	r3,4(sp)
 800df00:	dd000315 	stw	r20,12(sp)
 800df04:	80082700 	call	8008270 <__udivsi3>
 800df08:	1025883a 	mov	r18,r2
 800df0c:	10003026 	beq	r2,zero,800dfd0 <quorem+0x13c>
 800df10:	dc400117 	ldw	r17,4(sp)
 800df14:	9829883a 	mov	r20,r19
 800df18:	002d883a 	mov	r22,zero
 800df1c:	0021883a 	mov	r16,zero
 800df20:	8d400017 	ldw	r21,0(r17)
 800df24:	900b883a 	mov	r5,r18
 800df28:	8c400104 	addi	r17,r17,4
 800df2c:	a93fffcc 	andi	r4,r21,65535
 800df30:	800832c0 	call	800832c <__mulsi3>
 800df34:	a808d43a 	srli	r4,r21,16
 800df38:	900b883a 	mov	r5,r18
 800df3c:	15ad883a 	add	r22,r2,r22
 800df40:	800832c0 	call	800832c <__mulsi3>
 800df44:	a1000017 	ldw	r4,0(r20)
 800df48:	b00cd43a 	srli	r6,r22,16
 800df4c:	b0ffffcc 	andi	r3,r22,65535
 800df50:	217fffcc 	andi	r5,r4,65535
 800df54:	2c21883a 	add	r16,r5,r16
 800df58:	80c7c83a 	sub	r3,r16,r3
 800df5c:	2008d43a 	srli	r4,r4,16
 800df60:	1185883a 	add	r2,r2,r6
 800df64:	1821d43a 	srai	r16,r3,16
 800df68:	117fffcc 	andi	r5,r2,65535
 800df6c:	2149c83a 	sub	r4,r4,r5
 800df70:	2421883a 	add	r16,r4,r16
 800df74:	8008943a 	slli	r4,r16,16
 800df78:	18ffffcc 	andi	r3,r3,65535
 800df7c:	102cd43a 	srli	r22,r2,16
 800df80:	20c8b03a 	or	r4,r4,r3
 800df84:	a1000015 	stw	r4,0(r20)
 800df88:	8021d43a 	srai	r16,r16,16
 800df8c:	a5000104 	addi	r20,r20,4
 800df90:	e47fe32e 	bgeu	fp,r17,800df20 <__alt_data_end+0xfc00df20>
 800df94:	d8c00317 	ldw	r3,12(sp)
 800df98:	18800017 	ldw	r2,0(r3)
 800df9c:	10000c1e 	bne	r2,zero,800dfd0 <quorem+0x13c>
 800dfa0:	18bfff04 	addi	r2,r3,-4
 800dfa4:	9880082e 	bgeu	r19,r2,800dfc8 <quorem+0x134>
 800dfa8:	18ffff17 	ldw	r3,-4(r3)
 800dfac:	18000326 	beq	r3,zero,800dfbc <quorem+0x128>
 800dfb0:	00000506 	br	800dfc8 <quorem+0x134>
 800dfb4:	10c00017 	ldw	r3,0(r2)
 800dfb8:	1800031e 	bne	r3,zero,800dfc8 <quorem+0x134>
 800dfbc:	10bfff04 	addi	r2,r2,-4
 800dfc0:	bdffffc4 	addi	r23,r23,-1
 800dfc4:	98bffb36 	bltu	r19,r2,800dfb4 <__alt_data_end+0xfc00dfb4>
 800dfc8:	d8c00017 	ldw	r3,0(sp)
 800dfcc:	1dc00415 	stw	r23,16(r3)
 800dfd0:	d9400217 	ldw	r5,8(sp)
 800dfd4:	d9000017 	ldw	r4,0(sp)
 800dfd8:	80120f80 	call	80120f8 <__mcmp>
 800dfdc:	10002816 	blt	r2,zero,800e080 <quorem+0x1ec>
 800dfe0:	dc400117 	ldw	r17,4(sp)
 800dfe4:	94800044 	addi	r18,r18,1
 800dfe8:	980d883a 	mov	r6,r19
 800dfec:	0007883a 	mov	r3,zero
 800dff0:	31000017 	ldw	r4,0(r6)
 800dff4:	89400017 	ldw	r5,0(r17)
 800dff8:	31800104 	addi	r6,r6,4
 800dffc:	20bfffcc 	andi	r2,r4,65535
 800e000:	10c7883a 	add	r3,r2,r3
 800e004:	28bfffcc 	andi	r2,r5,65535
 800e008:	1885c83a 	sub	r2,r3,r2
 800e00c:	280ad43a 	srli	r5,r5,16
 800e010:	2008d43a 	srli	r4,r4,16
 800e014:	1007d43a 	srai	r3,r2,16
 800e018:	10bfffcc 	andi	r2,r2,65535
 800e01c:	2149c83a 	sub	r4,r4,r5
 800e020:	20c9883a 	add	r4,r4,r3
 800e024:	200a943a 	slli	r5,r4,16
 800e028:	8c400104 	addi	r17,r17,4
 800e02c:	2007d43a 	srai	r3,r4,16
 800e030:	2884b03a 	or	r2,r5,r2
 800e034:	30bfff15 	stw	r2,-4(r6)
 800e038:	e47fed2e 	bgeu	fp,r17,800dff0 <__alt_data_end+0xfc00dff0>
 800e03c:	bdc5883a 	add	r2,r23,r23
 800e040:	1085883a 	add	r2,r2,r2
 800e044:	9887883a 	add	r3,r19,r2
 800e048:	18800017 	ldw	r2,0(r3)
 800e04c:	10000c1e 	bne	r2,zero,800e080 <quorem+0x1ec>
 800e050:	18bfff04 	addi	r2,r3,-4
 800e054:	9880082e 	bgeu	r19,r2,800e078 <quorem+0x1e4>
 800e058:	18ffff17 	ldw	r3,-4(r3)
 800e05c:	18000326 	beq	r3,zero,800e06c <quorem+0x1d8>
 800e060:	00000506 	br	800e078 <quorem+0x1e4>
 800e064:	10c00017 	ldw	r3,0(r2)
 800e068:	1800031e 	bne	r3,zero,800e078 <quorem+0x1e4>
 800e06c:	10bfff04 	addi	r2,r2,-4
 800e070:	bdffffc4 	addi	r23,r23,-1
 800e074:	98bffb36 	bltu	r19,r2,800e064 <__alt_data_end+0xfc00e064>
 800e078:	d8c00017 	ldw	r3,0(sp)
 800e07c:	1dc00415 	stw	r23,16(r3)
 800e080:	9005883a 	mov	r2,r18
 800e084:	dfc00d17 	ldw	ra,52(sp)
 800e088:	df000c17 	ldw	fp,48(sp)
 800e08c:	ddc00b17 	ldw	r23,44(sp)
 800e090:	dd800a17 	ldw	r22,40(sp)
 800e094:	dd400917 	ldw	r21,36(sp)
 800e098:	dd000817 	ldw	r20,32(sp)
 800e09c:	dcc00717 	ldw	r19,28(sp)
 800e0a0:	dc800617 	ldw	r18,24(sp)
 800e0a4:	dc400517 	ldw	r17,20(sp)
 800e0a8:	dc000417 	ldw	r16,16(sp)
 800e0ac:	dec00e04 	addi	sp,sp,56
 800e0b0:	f800283a 	ret
 800e0b4:	0005883a 	mov	r2,zero
 800e0b8:	003ff206 	br	800e084 <__alt_data_end+0xfc00e084>

0800e0bc <_dtoa_r>:
 800e0bc:	20801017 	ldw	r2,64(r4)
 800e0c0:	deffde04 	addi	sp,sp,-136
 800e0c4:	df002015 	stw	fp,128(sp)
 800e0c8:	dcc01b15 	stw	r19,108(sp)
 800e0cc:	dc801a15 	stw	r18,104(sp)
 800e0d0:	dc401915 	stw	r17,100(sp)
 800e0d4:	dc001815 	stw	r16,96(sp)
 800e0d8:	dfc02115 	stw	ra,132(sp)
 800e0dc:	ddc01f15 	stw	r23,124(sp)
 800e0e0:	dd801e15 	stw	r22,120(sp)
 800e0e4:	dd401d15 	stw	r21,116(sp)
 800e0e8:	dd001c15 	stw	r20,112(sp)
 800e0ec:	d9c00315 	stw	r7,12(sp)
 800e0f0:	2039883a 	mov	fp,r4
 800e0f4:	3023883a 	mov	r17,r6
 800e0f8:	2825883a 	mov	r18,r5
 800e0fc:	dc002417 	ldw	r16,144(sp)
 800e100:	3027883a 	mov	r19,r6
 800e104:	10000826 	beq	r2,zero,800e128 <_dtoa_r+0x6c>
 800e108:	21801117 	ldw	r6,68(r4)
 800e10c:	00c00044 	movi	r3,1
 800e110:	100b883a 	mov	r5,r2
 800e114:	1986983a 	sll	r3,r3,r6
 800e118:	11800115 	stw	r6,4(r2)
 800e11c:	10c00215 	stw	r3,8(r2)
 800e120:	801181c0 	call	801181c <_Bfree>
 800e124:	e0001015 	stw	zero,64(fp)
 800e128:	88002e16 	blt	r17,zero,800e1e4 <_dtoa_r+0x128>
 800e12c:	80000015 	stw	zero,0(r16)
 800e130:	889ffc2c 	andhi	r2,r17,32752
 800e134:	00dffc34 	movhi	r3,32752
 800e138:	10c01c26 	beq	r2,r3,800e1ac <_dtoa_r+0xf0>
 800e13c:	000d883a 	mov	r6,zero
 800e140:	000f883a 	mov	r7,zero
 800e144:	9009883a 	mov	r4,r18
 800e148:	980b883a 	mov	r5,r19
 800e14c:	800a1000 	call	800a100 <__eqdf2>
 800e150:	10002b1e 	bne	r2,zero,800e200 <_dtoa_r+0x144>
 800e154:	d9c02317 	ldw	r7,140(sp)
 800e158:	00800044 	movi	r2,1
 800e15c:	38800015 	stw	r2,0(r7)
 800e160:	d8802517 	ldw	r2,148(sp)
 800e164:	10019e26 	beq	r2,zero,800e7e0 <_dtoa_r+0x724>
 800e168:	d8c02517 	ldw	r3,148(sp)
 800e16c:	008200b4 	movhi	r2,2050
 800e170:	10ab3c44 	addi	r2,r2,-21263
 800e174:	18800015 	stw	r2,0(r3)
 800e178:	10bfffc4 	addi	r2,r2,-1
 800e17c:	dfc02117 	ldw	ra,132(sp)
 800e180:	df002017 	ldw	fp,128(sp)
 800e184:	ddc01f17 	ldw	r23,124(sp)
 800e188:	dd801e17 	ldw	r22,120(sp)
 800e18c:	dd401d17 	ldw	r21,116(sp)
 800e190:	dd001c17 	ldw	r20,112(sp)
 800e194:	dcc01b17 	ldw	r19,108(sp)
 800e198:	dc801a17 	ldw	r18,104(sp)
 800e19c:	dc401917 	ldw	r17,100(sp)
 800e1a0:	dc001817 	ldw	r16,96(sp)
 800e1a4:	dec02204 	addi	sp,sp,136
 800e1a8:	f800283a 	ret
 800e1ac:	d8c02317 	ldw	r3,140(sp)
 800e1b0:	0089c3c4 	movi	r2,9999
 800e1b4:	18800015 	stw	r2,0(r3)
 800e1b8:	90017726 	beq	r18,zero,800e798 <_dtoa_r+0x6dc>
 800e1bc:	008200b4 	movhi	r2,2050
 800e1c0:	10ab4804 	addi	r2,r2,-21216
 800e1c4:	d9002517 	ldw	r4,148(sp)
 800e1c8:	203fec26 	beq	r4,zero,800e17c <__alt_data_end+0xfc00e17c>
 800e1cc:	10c000c7 	ldb	r3,3(r2)
 800e1d0:	1801781e 	bne	r3,zero,800e7b4 <_dtoa_r+0x6f8>
 800e1d4:	10c000c4 	addi	r3,r2,3
 800e1d8:	d9802517 	ldw	r6,148(sp)
 800e1dc:	30c00015 	stw	r3,0(r6)
 800e1e0:	003fe606 	br	800e17c <__alt_data_end+0xfc00e17c>
 800e1e4:	04e00034 	movhi	r19,32768
 800e1e8:	9cffffc4 	addi	r19,r19,-1
 800e1ec:	00800044 	movi	r2,1
 800e1f0:	8ce6703a 	and	r19,r17,r19
 800e1f4:	80800015 	stw	r2,0(r16)
 800e1f8:	9823883a 	mov	r17,r19
 800e1fc:	003fcc06 	br	800e130 <__alt_data_end+0xfc00e130>
 800e200:	d8800204 	addi	r2,sp,8
 800e204:	d8800015 	stw	r2,0(sp)
 800e208:	d9c00104 	addi	r7,sp,4
 800e20c:	900b883a 	mov	r5,r18
 800e210:	980d883a 	mov	r6,r19
 800e214:	e009883a 	mov	r4,fp
 800e218:	8820d53a 	srli	r16,r17,20
 800e21c:	80124c40 	call	80124c4 <__d2b>
 800e220:	d8800915 	stw	r2,36(sp)
 800e224:	8001651e 	bne	r16,zero,800e7bc <_dtoa_r+0x700>
 800e228:	dd800217 	ldw	r22,8(sp)
 800e22c:	dc000117 	ldw	r16,4(sp)
 800e230:	00800804 	movi	r2,32
 800e234:	b421883a 	add	r16,r22,r16
 800e238:	80c10c84 	addi	r3,r16,1074
 800e23c:	10c2d10e 	bge	r2,r3,800ed84 <_dtoa_r+0xcc8>
 800e240:	00801004 	movi	r2,64
 800e244:	81010484 	addi	r4,r16,1042
 800e248:	10c7c83a 	sub	r3,r2,r3
 800e24c:	9108d83a 	srl	r4,r18,r4
 800e250:	88e2983a 	sll	r17,r17,r3
 800e254:	2448b03a 	or	r4,r4,r17
 800e258:	800b61c0 	call	800b61c <__floatunsidf>
 800e25c:	017f8434 	movhi	r5,65040
 800e260:	01800044 	movi	r6,1
 800e264:	1009883a 	mov	r4,r2
 800e268:	194b883a 	add	r5,r3,r5
 800e26c:	843fffc4 	addi	r16,r16,-1
 800e270:	d9801115 	stw	r6,68(sp)
 800e274:	000d883a 	mov	r6,zero
 800e278:	01cffe34 	movhi	r7,16376
 800e27c:	800abc40 	call	800abc4 <__subdf3>
 800e280:	0198dbf4 	movhi	r6,25455
 800e284:	01cff4f4 	movhi	r7,16339
 800e288:	3190d844 	addi	r6,r6,17249
 800e28c:	39e1e9c4 	addi	r7,r7,-30809
 800e290:	1009883a 	mov	r4,r2
 800e294:	180b883a 	mov	r5,r3
 800e298:	800a3580 	call	800a358 <__muldf3>
 800e29c:	01a2d874 	movhi	r6,35681
 800e2a0:	01cff1f4 	movhi	r7,16327
 800e2a4:	31b22cc4 	addi	r6,r6,-14157
 800e2a8:	39e28a04 	addi	r7,r7,-30168
 800e2ac:	180b883a 	mov	r5,r3
 800e2b0:	1009883a 	mov	r4,r2
 800e2b4:	8008e840 	call	8008e84 <__adddf3>
 800e2b8:	8009883a 	mov	r4,r16
 800e2bc:	1029883a 	mov	r20,r2
 800e2c0:	1823883a 	mov	r17,r3
 800e2c4:	800b5400 	call	800b540 <__floatsidf>
 800e2c8:	019427f4 	movhi	r6,20639
 800e2cc:	01cff4f4 	movhi	r7,16339
 800e2d0:	319e7ec4 	addi	r6,r6,31227
 800e2d4:	39d104c4 	addi	r7,r7,17427
 800e2d8:	1009883a 	mov	r4,r2
 800e2dc:	180b883a 	mov	r5,r3
 800e2e0:	800a3580 	call	800a358 <__muldf3>
 800e2e4:	100d883a 	mov	r6,r2
 800e2e8:	180f883a 	mov	r7,r3
 800e2ec:	a009883a 	mov	r4,r20
 800e2f0:	880b883a 	mov	r5,r17
 800e2f4:	8008e840 	call	8008e84 <__adddf3>
 800e2f8:	1009883a 	mov	r4,r2
 800e2fc:	180b883a 	mov	r5,r3
 800e300:	1029883a 	mov	r20,r2
 800e304:	1823883a 	mov	r17,r3
 800e308:	800b4c00 	call	800b4c0 <__fixdfsi>
 800e30c:	000d883a 	mov	r6,zero
 800e310:	000f883a 	mov	r7,zero
 800e314:	a009883a 	mov	r4,r20
 800e318:	880b883a 	mov	r5,r17
 800e31c:	d8800515 	stw	r2,20(sp)
 800e320:	800a2640 	call	800a264 <__ledf2>
 800e324:	10028716 	blt	r2,zero,800ed44 <_dtoa_r+0xc88>
 800e328:	d8c00517 	ldw	r3,20(sp)
 800e32c:	00800584 	movi	r2,22
 800e330:	10c27536 	bltu	r2,r3,800ed08 <_dtoa_r+0xc4c>
 800e334:	180490fa 	slli	r2,r3,3
 800e338:	00c200b4 	movhi	r3,2050
 800e33c:	18eb6304 	addi	r3,r3,-21108
 800e340:	1885883a 	add	r2,r3,r2
 800e344:	11000017 	ldw	r4,0(r2)
 800e348:	11400117 	ldw	r5,4(r2)
 800e34c:	900d883a 	mov	r6,r18
 800e350:	980f883a 	mov	r7,r19
 800e354:	800a1880 	call	800a188 <__gedf2>
 800e358:	00828d0e 	bge	zero,r2,800ed90 <_dtoa_r+0xcd4>
 800e35c:	d9000517 	ldw	r4,20(sp)
 800e360:	d8000e15 	stw	zero,56(sp)
 800e364:	213fffc4 	addi	r4,r4,-1
 800e368:	d9000515 	stw	r4,20(sp)
 800e36c:	b42dc83a 	sub	r22,r22,r16
 800e370:	b5bfffc4 	addi	r22,r22,-1
 800e374:	b0026f16 	blt	r22,zero,800ed34 <_dtoa_r+0xc78>
 800e378:	d8000815 	stw	zero,32(sp)
 800e37c:	d9c00517 	ldw	r7,20(sp)
 800e380:	38026416 	blt	r7,zero,800ed14 <_dtoa_r+0xc58>
 800e384:	b1ed883a 	add	r22,r22,r7
 800e388:	d9c00d15 	stw	r7,52(sp)
 800e38c:	d8000a15 	stw	zero,40(sp)
 800e390:	d9800317 	ldw	r6,12(sp)
 800e394:	00800244 	movi	r2,9
 800e398:	11811436 	bltu	r2,r6,800e7ec <_dtoa_r+0x730>
 800e39c:	00800144 	movi	r2,5
 800e3a0:	1184e10e 	bge	r2,r6,800f728 <_dtoa_r+0x166c>
 800e3a4:	31bfff04 	addi	r6,r6,-4
 800e3a8:	d9800315 	stw	r6,12(sp)
 800e3ac:	0023883a 	mov	r17,zero
 800e3b0:	d9800317 	ldw	r6,12(sp)
 800e3b4:	008000c4 	movi	r2,3
 800e3b8:	30836726 	beq	r6,r2,800f158 <_dtoa_r+0x109c>
 800e3bc:	1183410e 	bge	r2,r6,800f0c4 <_dtoa_r+0x1008>
 800e3c0:	d9c00317 	ldw	r7,12(sp)
 800e3c4:	00800104 	movi	r2,4
 800e3c8:	38827c26 	beq	r7,r2,800edbc <_dtoa_r+0xd00>
 800e3cc:	00800144 	movi	r2,5
 800e3d0:	3884c41e 	bne	r7,r2,800f6e4 <_dtoa_r+0x1628>
 800e3d4:	00800044 	movi	r2,1
 800e3d8:	d8800b15 	stw	r2,44(sp)
 800e3dc:	d8c00517 	ldw	r3,20(sp)
 800e3e0:	d9002217 	ldw	r4,136(sp)
 800e3e4:	1907883a 	add	r3,r3,r4
 800e3e8:	19800044 	addi	r6,r3,1
 800e3ec:	d8c00c15 	stw	r3,48(sp)
 800e3f0:	d9800615 	stw	r6,24(sp)
 800e3f4:	0183a40e 	bge	zero,r6,800f288 <_dtoa_r+0x11cc>
 800e3f8:	d9800617 	ldw	r6,24(sp)
 800e3fc:	3021883a 	mov	r16,r6
 800e400:	e0001115 	stw	zero,68(fp)
 800e404:	008005c4 	movi	r2,23
 800e408:	1184c92e 	bgeu	r2,r6,800f730 <_dtoa_r+0x1674>
 800e40c:	00c00044 	movi	r3,1
 800e410:	00800104 	movi	r2,4
 800e414:	1085883a 	add	r2,r2,r2
 800e418:	11000504 	addi	r4,r2,20
 800e41c:	180b883a 	mov	r5,r3
 800e420:	18c00044 	addi	r3,r3,1
 800e424:	313ffb2e 	bgeu	r6,r4,800e414 <__alt_data_end+0xfc00e414>
 800e428:	e1401115 	stw	r5,68(fp)
 800e42c:	e009883a 	mov	r4,fp
 800e430:	80117740 	call	8011774 <_Balloc>
 800e434:	d8800715 	stw	r2,28(sp)
 800e438:	e0801015 	stw	r2,64(fp)
 800e43c:	00800384 	movi	r2,14
 800e440:	1400f736 	bltu	r2,r16,800e820 <_dtoa_r+0x764>
 800e444:	8800f626 	beq	r17,zero,800e820 <_dtoa_r+0x764>
 800e448:	d9c00517 	ldw	r7,20(sp)
 800e44c:	01c39a0e 	bge	zero,r7,800f2b8 <_dtoa_r+0x11fc>
 800e450:	388003cc 	andi	r2,r7,15
 800e454:	100490fa 	slli	r2,r2,3
 800e458:	382bd13a 	srai	r21,r7,4
 800e45c:	00c200b4 	movhi	r3,2050
 800e460:	18eb6304 	addi	r3,r3,-21108
 800e464:	1885883a 	add	r2,r3,r2
 800e468:	a8c0040c 	andi	r3,r21,16
 800e46c:	12400017 	ldw	r9,0(r2)
 800e470:	12000117 	ldw	r8,4(r2)
 800e474:	18037926 	beq	r3,zero,800f25c <_dtoa_r+0x11a0>
 800e478:	008200b4 	movhi	r2,2050
 800e47c:	10ab5904 	addi	r2,r2,-21148
 800e480:	11800817 	ldw	r6,32(r2)
 800e484:	11c00917 	ldw	r7,36(r2)
 800e488:	9009883a 	mov	r4,r18
 800e48c:	980b883a 	mov	r5,r19
 800e490:	da001715 	stw	r8,92(sp)
 800e494:	da401615 	stw	r9,88(sp)
 800e498:	80097300 	call	8009730 <__divdf3>
 800e49c:	da001717 	ldw	r8,92(sp)
 800e4a0:	da401617 	ldw	r9,88(sp)
 800e4a4:	ad4003cc 	andi	r21,r21,15
 800e4a8:	040000c4 	movi	r16,3
 800e4ac:	1023883a 	mov	r17,r2
 800e4b0:	1829883a 	mov	r20,r3
 800e4b4:	a8001126 	beq	r21,zero,800e4fc <_dtoa_r+0x440>
 800e4b8:	05c200b4 	movhi	r23,2050
 800e4bc:	bdeb5904 	addi	r23,r23,-21148
 800e4c0:	4805883a 	mov	r2,r9
 800e4c4:	4007883a 	mov	r3,r8
 800e4c8:	a980004c 	andi	r6,r21,1
 800e4cc:	1009883a 	mov	r4,r2
 800e4d0:	a82bd07a 	srai	r21,r21,1
 800e4d4:	180b883a 	mov	r5,r3
 800e4d8:	30000426 	beq	r6,zero,800e4ec <_dtoa_r+0x430>
 800e4dc:	b9800017 	ldw	r6,0(r23)
 800e4e0:	b9c00117 	ldw	r7,4(r23)
 800e4e4:	84000044 	addi	r16,r16,1
 800e4e8:	800a3580 	call	800a358 <__muldf3>
 800e4ec:	bdc00204 	addi	r23,r23,8
 800e4f0:	a83ff51e 	bne	r21,zero,800e4c8 <__alt_data_end+0xfc00e4c8>
 800e4f4:	1013883a 	mov	r9,r2
 800e4f8:	1811883a 	mov	r8,r3
 800e4fc:	480d883a 	mov	r6,r9
 800e500:	400f883a 	mov	r7,r8
 800e504:	8809883a 	mov	r4,r17
 800e508:	a00b883a 	mov	r5,r20
 800e50c:	80097300 	call	8009730 <__divdf3>
 800e510:	d8800f15 	stw	r2,60(sp)
 800e514:	d8c01015 	stw	r3,64(sp)
 800e518:	d8c00e17 	ldw	r3,56(sp)
 800e51c:	18000626 	beq	r3,zero,800e538 <_dtoa_r+0x47c>
 800e520:	d9000f17 	ldw	r4,60(sp)
 800e524:	d9401017 	ldw	r5,64(sp)
 800e528:	000d883a 	mov	r6,zero
 800e52c:	01cffc34 	movhi	r7,16368
 800e530:	800a2640 	call	800a264 <__ledf2>
 800e534:	10040b16 	blt	r2,zero,800f564 <_dtoa_r+0x14a8>
 800e538:	8009883a 	mov	r4,r16
 800e53c:	800b5400 	call	800b540 <__floatsidf>
 800e540:	d9800f17 	ldw	r6,60(sp)
 800e544:	d9c01017 	ldw	r7,64(sp)
 800e548:	1009883a 	mov	r4,r2
 800e54c:	180b883a 	mov	r5,r3
 800e550:	800a3580 	call	800a358 <__muldf3>
 800e554:	000d883a 	mov	r6,zero
 800e558:	01d00734 	movhi	r7,16412
 800e55c:	1009883a 	mov	r4,r2
 800e560:	180b883a 	mov	r5,r3
 800e564:	8008e840 	call	8008e84 <__adddf3>
 800e568:	1021883a 	mov	r16,r2
 800e56c:	d8800617 	ldw	r2,24(sp)
 800e570:	047f3034 	movhi	r17,64704
 800e574:	1c63883a 	add	r17,r3,r17
 800e578:	10031826 	beq	r2,zero,800f1dc <_dtoa_r+0x1120>
 800e57c:	d8c00517 	ldw	r3,20(sp)
 800e580:	db000617 	ldw	r12,24(sp)
 800e584:	d8c01315 	stw	r3,76(sp)
 800e588:	d9000b17 	ldw	r4,44(sp)
 800e58c:	20038f26 	beq	r4,zero,800f3cc <_dtoa_r+0x1310>
 800e590:	60bfffc4 	addi	r2,r12,-1
 800e594:	100490fa 	slli	r2,r2,3
 800e598:	00c200b4 	movhi	r3,2050
 800e59c:	18eb6304 	addi	r3,r3,-21108
 800e5a0:	1885883a 	add	r2,r3,r2
 800e5a4:	11800017 	ldw	r6,0(r2)
 800e5a8:	11c00117 	ldw	r7,4(r2)
 800e5ac:	d8800717 	ldw	r2,28(sp)
 800e5b0:	0009883a 	mov	r4,zero
 800e5b4:	014ff834 	movhi	r5,16352
 800e5b8:	db001615 	stw	r12,88(sp)
 800e5bc:	15c00044 	addi	r23,r2,1
 800e5c0:	80097300 	call	8009730 <__divdf3>
 800e5c4:	800d883a 	mov	r6,r16
 800e5c8:	880f883a 	mov	r7,r17
 800e5cc:	1009883a 	mov	r4,r2
 800e5d0:	180b883a 	mov	r5,r3
 800e5d4:	800abc40 	call	800abc4 <__subdf3>
 800e5d8:	d9401017 	ldw	r5,64(sp)
 800e5dc:	d9000f17 	ldw	r4,60(sp)
 800e5e0:	102b883a 	mov	r21,r2
 800e5e4:	d8c01215 	stw	r3,72(sp)
 800e5e8:	800b4c00 	call	800b4c0 <__fixdfsi>
 800e5ec:	1009883a 	mov	r4,r2
 800e5f0:	1029883a 	mov	r20,r2
 800e5f4:	800b5400 	call	800b540 <__floatsidf>
 800e5f8:	d9000f17 	ldw	r4,60(sp)
 800e5fc:	d9401017 	ldw	r5,64(sp)
 800e600:	100d883a 	mov	r6,r2
 800e604:	180f883a 	mov	r7,r3
 800e608:	800abc40 	call	800abc4 <__subdf3>
 800e60c:	1823883a 	mov	r17,r3
 800e610:	d8c00717 	ldw	r3,28(sp)
 800e614:	d9401217 	ldw	r5,72(sp)
 800e618:	a2000c04 	addi	r8,r20,48
 800e61c:	1021883a 	mov	r16,r2
 800e620:	1a000005 	stb	r8,0(r3)
 800e624:	800d883a 	mov	r6,r16
 800e628:	880f883a 	mov	r7,r17
 800e62c:	a809883a 	mov	r4,r21
 800e630:	4029883a 	mov	r20,r8
 800e634:	800a1880 	call	800a188 <__gedf2>
 800e638:	00841d16 	blt	zero,r2,800f6b0 <_dtoa_r+0x15f4>
 800e63c:	800d883a 	mov	r6,r16
 800e640:	880f883a 	mov	r7,r17
 800e644:	0009883a 	mov	r4,zero
 800e648:	014ffc34 	movhi	r5,16368
 800e64c:	800abc40 	call	800abc4 <__subdf3>
 800e650:	d9401217 	ldw	r5,72(sp)
 800e654:	100d883a 	mov	r6,r2
 800e658:	180f883a 	mov	r7,r3
 800e65c:	a809883a 	mov	r4,r21
 800e660:	800a1880 	call	800a188 <__gedf2>
 800e664:	db001617 	ldw	r12,88(sp)
 800e668:	00840e16 	blt	zero,r2,800f6a4 <_dtoa_r+0x15e8>
 800e66c:	00800044 	movi	r2,1
 800e670:	13006b0e 	bge	r2,r12,800e820 <_dtoa_r+0x764>
 800e674:	d9000717 	ldw	r4,28(sp)
 800e678:	dd800f15 	stw	r22,60(sp)
 800e67c:	dcc01015 	stw	r19,64(sp)
 800e680:	2319883a 	add	r12,r4,r12
 800e684:	dcc01217 	ldw	r19,72(sp)
 800e688:	602d883a 	mov	r22,r12
 800e68c:	dc801215 	stw	r18,72(sp)
 800e690:	b825883a 	mov	r18,r23
 800e694:	00000906 	br	800e6bc <_dtoa_r+0x600>
 800e698:	800abc40 	call	800abc4 <__subdf3>
 800e69c:	a80d883a 	mov	r6,r21
 800e6a0:	980f883a 	mov	r7,r19
 800e6a4:	1009883a 	mov	r4,r2
 800e6a8:	180b883a 	mov	r5,r3
 800e6ac:	800a2640 	call	800a264 <__ledf2>
 800e6b0:	1003e816 	blt	r2,zero,800f654 <_dtoa_r+0x1598>
 800e6b4:	b825883a 	mov	r18,r23
 800e6b8:	bd83e926 	beq	r23,r22,800f660 <_dtoa_r+0x15a4>
 800e6bc:	a809883a 	mov	r4,r21
 800e6c0:	980b883a 	mov	r5,r19
 800e6c4:	000d883a 	mov	r6,zero
 800e6c8:	01d00934 	movhi	r7,16420
 800e6cc:	800a3580 	call	800a358 <__muldf3>
 800e6d0:	000d883a 	mov	r6,zero
 800e6d4:	01d00934 	movhi	r7,16420
 800e6d8:	8009883a 	mov	r4,r16
 800e6dc:	880b883a 	mov	r5,r17
 800e6e0:	102b883a 	mov	r21,r2
 800e6e4:	1827883a 	mov	r19,r3
 800e6e8:	800a3580 	call	800a358 <__muldf3>
 800e6ec:	180b883a 	mov	r5,r3
 800e6f0:	1009883a 	mov	r4,r2
 800e6f4:	1821883a 	mov	r16,r3
 800e6f8:	1023883a 	mov	r17,r2
 800e6fc:	800b4c00 	call	800b4c0 <__fixdfsi>
 800e700:	1009883a 	mov	r4,r2
 800e704:	1029883a 	mov	r20,r2
 800e708:	800b5400 	call	800b540 <__floatsidf>
 800e70c:	8809883a 	mov	r4,r17
 800e710:	800b883a 	mov	r5,r16
 800e714:	100d883a 	mov	r6,r2
 800e718:	180f883a 	mov	r7,r3
 800e71c:	800abc40 	call	800abc4 <__subdf3>
 800e720:	a5000c04 	addi	r20,r20,48
 800e724:	a80d883a 	mov	r6,r21
 800e728:	980f883a 	mov	r7,r19
 800e72c:	1009883a 	mov	r4,r2
 800e730:	180b883a 	mov	r5,r3
 800e734:	95000005 	stb	r20,0(r18)
 800e738:	1021883a 	mov	r16,r2
 800e73c:	1823883a 	mov	r17,r3
 800e740:	800a2640 	call	800a264 <__ledf2>
 800e744:	bdc00044 	addi	r23,r23,1
 800e748:	800d883a 	mov	r6,r16
 800e74c:	880f883a 	mov	r7,r17
 800e750:	0009883a 	mov	r4,zero
 800e754:	014ffc34 	movhi	r5,16368
 800e758:	103fcf0e 	bge	r2,zero,800e698 <__alt_data_end+0xfc00e698>
 800e75c:	d8c01317 	ldw	r3,76(sp)
 800e760:	d8c00515 	stw	r3,20(sp)
 800e764:	d9400917 	ldw	r5,36(sp)
 800e768:	e009883a 	mov	r4,fp
 800e76c:	801181c0 	call	801181c <_Bfree>
 800e770:	d9000517 	ldw	r4,20(sp)
 800e774:	d9802317 	ldw	r6,140(sp)
 800e778:	d9c02517 	ldw	r7,148(sp)
 800e77c:	b8000005 	stb	zero,0(r23)
 800e780:	20800044 	addi	r2,r4,1
 800e784:	30800015 	stw	r2,0(r6)
 800e788:	3802aa26 	beq	r7,zero,800f234 <_dtoa_r+0x1178>
 800e78c:	3dc00015 	stw	r23,0(r7)
 800e790:	d8800717 	ldw	r2,28(sp)
 800e794:	003e7906 	br	800e17c <__alt_data_end+0xfc00e17c>
 800e798:	00800434 	movhi	r2,16
 800e79c:	10bfffc4 	addi	r2,r2,-1
 800e7a0:	88a2703a 	and	r17,r17,r2
 800e7a4:	883e851e 	bne	r17,zero,800e1bc <__alt_data_end+0xfc00e1bc>
 800e7a8:	008200b4 	movhi	r2,2050
 800e7ac:	10ab4504 	addi	r2,r2,-21228
 800e7b0:	003e8406 	br	800e1c4 <__alt_data_end+0xfc00e1c4>
 800e7b4:	10c00204 	addi	r3,r2,8
 800e7b8:	003e8706 	br	800e1d8 <__alt_data_end+0xfc00e1d8>
 800e7bc:	01400434 	movhi	r5,16
 800e7c0:	297fffc4 	addi	r5,r5,-1
 800e7c4:	994a703a 	and	r5,r19,r5
 800e7c8:	9009883a 	mov	r4,r18
 800e7cc:	843f0044 	addi	r16,r16,-1023
 800e7d0:	294ffc34 	orhi	r5,r5,16368
 800e7d4:	dd800217 	ldw	r22,8(sp)
 800e7d8:	d8001115 	stw	zero,68(sp)
 800e7dc:	003ea506 	br	800e274 <__alt_data_end+0xfc00e274>
 800e7e0:	008200b4 	movhi	r2,2050
 800e7e4:	10ab3c04 	addi	r2,r2,-21264
 800e7e8:	003e6406 	br	800e17c <__alt_data_end+0xfc00e17c>
 800e7ec:	e0001115 	stw	zero,68(fp)
 800e7f0:	000b883a 	mov	r5,zero
 800e7f4:	e009883a 	mov	r4,fp
 800e7f8:	80117740 	call	8011774 <_Balloc>
 800e7fc:	01bfffc4 	movi	r6,-1
 800e800:	01c00044 	movi	r7,1
 800e804:	d8800715 	stw	r2,28(sp)
 800e808:	d9800c15 	stw	r6,48(sp)
 800e80c:	e0801015 	stw	r2,64(fp)
 800e810:	d8000315 	stw	zero,12(sp)
 800e814:	d9c00b15 	stw	r7,44(sp)
 800e818:	d9800615 	stw	r6,24(sp)
 800e81c:	d8002215 	stw	zero,136(sp)
 800e820:	d8800117 	ldw	r2,4(sp)
 800e824:	10008916 	blt	r2,zero,800ea4c <_dtoa_r+0x990>
 800e828:	d9000517 	ldw	r4,20(sp)
 800e82c:	00c00384 	movi	r3,14
 800e830:	19008616 	blt	r3,r4,800ea4c <_dtoa_r+0x990>
 800e834:	200490fa 	slli	r2,r4,3
 800e838:	00c200b4 	movhi	r3,2050
 800e83c:	d9802217 	ldw	r6,136(sp)
 800e840:	18eb6304 	addi	r3,r3,-21108
 800e844:	1885883a 	add	r2,r3,r2
 800e848:	14000017 	ldw	r16,0(r2)
 800e84c:	14400117 	ldw	r17,4(r2)
 800e850:	30016316 	blt	r6,zero,800ede0 <_dtoa_r+0xd24>
 800e854:	800d883a 	mov	r6,r16
 800e858:	880f883a 	mov	r7,r17
 800e85c:	9009883a 	mov	r4,r18
 800e860:	980b883a 	mov	r5,r19
 800e864:	80097300 	call	8009730 <__divdf3>
 800e868:	180b883a 	mov	r5,r3
 800e86c:	1009883a 	mov	r4,r2
 800e870:	800b4c00 	call	800b4c0 <__fixdfsi>
 800e874:	1009883a 	mov	r4,r2
 800e878:	102b883a 	mov	r21,r2
 800e87c:	800b5400 	call	800b540 <__floatsidf>
 800e880:	800d883a 	mov	r6,r16
 800e884:	880f883a 	mov	r7,r17
 800e888:	1009883a 	mov	r4,r2
 800e88c:	180b883a 	mov	r5,r3
 800e890:	800a3580 	call	800a358 <__muldf3>
 800e894:	100d883a 	mov	r6,r2
 800e898:	180f883a 	mov	r7,r3
 800e89c:	9009883a 	mov	r4,r18
 800e8a0:	980b883a 	mov	r5,r19
 800e8a4:	800abc40 	call	800abc4 <__subdf3>
 800e8a8:	d9c00717 	ldw	r7,28(sp)
 800e8ac:	1009883a 	mov	r4,r2
 800e8b0:	a8800c04 	addi	r2,r21,48
 800e8b4:	38800005 	stb	r2,0(r7)
 800e8b8:	3dc00044 	addi	r23,r7,1
 800e8bc:	d9c00617 	ldw	r7,24(sp)
 800e8c0:	01800044 	movi	r6,1
 800e8c4:	180b883a 	mov	r5,r3
 800e8c8:	2005883a 	mov	r2,r4
 800e8cc:	39803826 	beq	r7,r6,800e9b0 <_dtoa_r+0x8f4>
 800e8d0:	000d883a 	mov	r6,zero
 800e8d4:	01d00934 	movhi	r7,16420
 800e8d8:	800a3580 	call	800a358 <__muldf3>
 800e8dc:	000d883a 	mov	r6,zero
 800e8e0:	000f883a 	mov	r7,zero
 800e8e4:	1009883a 	mov	r4,r2
 800e8e8:	180b883a 	mov	r5,r3
 800e8ec:	1025883a 	mov	r18,r2
 800e8f0:	1827883a 	mov	r19,r3
 800e8f4:	800a1000 	call	800a100 <__eqdf2>
 800e8f8:	103f9a26 	beq	r2,zero,800e764 <__alt_data_end+0xfc00e764>
 800e8fc:	d9c00617 	ldw	r7,24(sp)
 800e900:	d8c00717 	ldw	r3,28(sp)
 800e904:	b829883a 	mov	r20,r23
 800e908:	38bfffc4 	addi	r2,r7,-1
 800e90c:	18ad883a 	add	r22,r3,r2
 800e910:	00000a06 	br	800e93c <_dtoa_r+0x880>
 800e914:	800a3580 	call	800a358 <__muldf3>
 800e918:	000d883a 	mov	r6,zero
 800e91c:	000f883a 	mov	r7,zero
 800e920:	1009883a 	mov	r4,r2
 800e924:	180b883a 	mov	r5,r3
 800e928:	1025883a 	mov	r18,r2
 800e92c:	1827883a 	mov	r19,r3
 800e930:	b829883a 	mov	r20,r23
 800e934:	800a1000 	call	800a100 <__eqdf2>
 800e938:	103f8a26 	beq	r2,zero,800e764 <__alt_data_end+0xfc00e764>
 800e93c:	800d883a 	mov	r6,r16
 800e940:	880f883a 	mov	r7,r17
 800e944:	9009883a 	mov	r4,r18
 800e948:	980b883a 	mov	r5,r19
 800e94c:	80097300 	call	8009730 <__divdf3>
 800e950:	180b883a 	mov	r5,r3
 800e954:	1009883a 	mov	r4,r2
 800e958:	800b4c00 	call	800b4c0 <__fixdfsi>
 800e95c:	1009883a 	mov	r4,r2
 800e960:	102b883a 	mov	r21,r2
 800e964:	800b5400 	call	800b540 <__floatsidf>
 800e968:	800d883a 	mov	r6,r16
 800e96c:	880f883a 	mov	r7,r17
 800e970:	1009883a 	mov	r4,r2
 800e974:	180b883a 	mov	r5,r3
 800e978:	800a3580 	call	800a358 <__muldf3>
 800e97c:	100d883a 	mov	r6,r2
 800e980:	180f883a 	mov	r7,r3
 800e984:	9009883a 	mov	r4,r18
 800e988:	980b883a 	mov	r5,r19
 800e98c:	800abc40 	call	800abc4 <__subdf3>
 800e990:	aa000c04 	addi	r8,r21,48
 800e994:	a2000005 	stb	r8,0(r20)
 800e998:	000d883a 	mov	r6,zero
 800e99c:	01d00934 	movhi	r7,16420
 800e9a0:	1009883a 	mov	r4,r2
 800e9a4:	180b883a 	mov	r5,r3
 800e9a8:	a5c00044 	addi	r23,r20,1
 800e9ac:	b53fd91e 	bne	r22,r20,800e914 <__alt_data_end+0xfc00e914>
 800e9b0:	100d883a 	mov	r6,r2
 800e9b4:	180f883a 	mov	r7,r3
 800e9b8:	1009883a 	mov	r4,r2
 800e9bc:	180b883a 	mov	r5,r3
 800e9c0:	8008e840 	call	8008e84 <__adddf3>
 800e9c4:	100d883a 	mov	r6,r2
 800e9c8:	180f883a 	mov	r7,r3
 800e9cc:	8009883a 	mov	r4,r16
 800e9d0:	880b883a 	mov	r5,r17
 800e9d4:	1027883a 	mov	r19,r2
 800e9d8:	1825883a 	mov	r18,r3
 800e9dc:	800a2640 	call	800a264 <__ledf2>
 800e9e0:	10000816 	blt	r2,zero,800ea04 <_dtoa_r+0x948>
 800e9e4:	980d883a 	mov	r6,r19
 800e9e8:	900f883a 	mov	r7,r18
 800e9ec:	8009883a 	mov	r4,r16
 800e9f0:	880b883a 	mov	r5,r17
 800e9f4:	800a1000 	call	800a100 <__eqdf2>
 800e9f8:	103f5a1e 	bne	r2,zero,800e764 <__alt_data_end+0xfc00e764>
 800e9fc:	ad40004c 	andi	r21,r21,1
 800ea00:	a83f5826 	beq	r21,zero,800e764 <__alt_data_end+0xfc00e764>
 800ea04:	bd3fffc3 	ldbu	r20,-1(r23)
 800ea08:	b8bfffc4 	addi	r2,r23,-1
 800ea0c:	1007883a 	mov	r3,r2
 800ea10:	01400e44 	movi	r5,57
 800ea14:	d9800717 	ldw	r6,28(sp)
 800ea18:	00000506 	br	800ea30 <_dtoa_r+0x974>
 800ea1c:	18ffffc4 	addi	r3,r3,-1
 800ea20:	11824726 	beq	r2,r6,800f340 <_dtoa_r+0x1284>
 800ea24:	1d000003 	ldbu	r20,0(r3)
 800ea28:	102f883a 	mov	r23,r2
 800ea2c:	10bfffc4 	addi	r2,r2,-1
 800ea30:	a1003fcc 	andi	r4,r20,255
 800ea34:	2100201c 	xori	r4,r4,128
 800ea38:	213fe004 	addi	r4,r4,-128
 800ea3c:	217ff726 	beq	r4,r5,800ea1c <__alt_data_end+0xfc00ea1c>
 800ea40:	a2000044 	addi	r8,r20,1
 800ea44:	12000005 	stb	r8,0(r2)
 800ea48:	003f4606 	br	800e764 <__alt_data_end+0xfc00e764>
 800ea4c:	d9000b17 	ldw	r4,44(sp)
 800ea50:	2000c826 	beq	r4,zero,800ed74 <_dtoa_r+0xcb8>
 800ea54:	d9800317 	ldw	r6,12(sp)
 800ea58:	00c00044 	movi	r3,1
 800ea5c:	1980f90e 	bge	r3,r6,800ee44 <_dtoa_r+0xd88>
 800ea60:	d8800617 	ldw	r2,24(sp)
 800ea64:	d8c00a17 	ldw	r3,40(sp)
 800ea68:	157fffc4 	addi	r21,r2,-1
 800ea6c:	1d41f316 	blt	r3,r21,800f23c <_dtoa_r+0x1180>
 800ea70:	1d6bc83a 	sub	r21,r3,r21
 800ea74:	d9c00617 	ldw	r7,24(sp)
 800ea78:	3802aa16 	blt	r7,zero,800f524 <_dtoa_r+0x1468>
 800ea7c:	dd000817 	ldw	r20,32(sp)
 800ea80:	d8800617 	ldw	r2,24(sp)
 800ea84:	d8c00817 	ldw	r3,32(sp)
 800ea88:	01400044 	movi	r5,1
 800ea8c:	e009883a 	mov	r4,fp
 800ea90:	1887883a 	add	r3,r3,r2
 800ea94:	d8c00815 	stw	r3,32(sp)
 800ea98:	b0ad883a 	add	r22,r22,r2
 800ea9c:	8011ba80 	call	8011ba8 <__i2b>
 800eaa0:	1023883a 	mov	r17,r2
 800eaa4:	a0000826 	beq	r20,zero,800eac8 <_dtoa_r+0xa0c>
 800eaa8:	0580070e 	bge	zero,r22,800eac8 <_dtoa_r+0xa0c>
 800eaac:	a005883a 	mov	r2,r20
 800eab0:	b500b916 	blt	r22,r20,800ed98 <_dtoa_r+0xcdc>
 800eab4:	d9000817 	ldw	r4,32(sp)
 800eab8:	a0a9c83a 	sub	r20,r20,r2
 800eabc:	b0adc83a 	sub	r22,r22,r2
 800eac0:	2089c83a 	sub	r4,r4,r2
 800eac4:	d9000815 	stw	r4,32(sp)
 800eac8:	d9800a17 	ldw	r6,40(sp)
 800eacc:	0181810e 	bge	zero,r6,800f0d4 <_dtoa_r+0x1018>
 800ead0:	d9c00b17 	ldw	r7,44(sp)
 800ead4:	3800b326 	beq	r7,zero,800eda4 <_dtoa_r+0xce8>
 800ead8:	a800b226 	beq	r21,zero,800eda4 <_dtoa_r+0xce8>
 800eadc:	880b883a 	mov	r5,r17
 800eae0:	a80d883a 	mov	r6,r21
 800eae4:	e009883a 	mov	r4,fp
 800eae8:	8011e700 	call	8011e70 <__pow5mult>
 800eaec:	d9800917 	ldw	r6,36(sp)
 800eaf0:	100b883a 	mov	r5,r2
 800eaf4:	e009883a 	mov	r4,fp
 800eaf8:	1023883a 	mov	r17,r2
 800eafc:	8011be40 	call	8011be4 <__multiply>
 800eb00:	1021883a 	mov	r16,r2
 800eb04:	d8800a17 	ldw	r2,40(sp)
 800eb08:	d9400917 	ldw	r5,36(sp)
 800eb0c:	e009883a 	mov	r4,fp
 800eb10:	1545c83a 	sub	r2,r2,r21
 800eb14:	d8800a15 	stw	r2,40(sp)
 800eb18:	801181c0 	call	801181c <_Bfree>
 800eb1c:	d8c00a17 	ldw	r3,40(sp)
 800eb20:	18009f1e 	bne	r3,zero,800eda0 <_dtoa_r+0xce4>
 800eb24:	05c00044 	movi	r23,1
 800eb28:	e009883a 	mov	r4,fp
 800eb2c:	b80b883a 	mov	r5,r23
 800eb30:	8011ba80 	call	8011ba8 <__i2b>
 800eb34:	d9000d17 	ldw	r4,52(sp)
 800eb38:	102b883a 	mov	r21,r2
 800eb3c:	2000ce26 	beq	r4,zero,800ee78 <_dtoa_r+0xdbc>
 800eb40:	200d883a 	mov	r6,r4
 800eb44:	100b883a 	mov	r5,r2
 800eb48:	e009883a 	mov	r4,fp
 800eb4c:	8011e700 	call	8011e70 <__pow5mult>
 800eb50:	d9800317 	ldw	r6,12(sp)
 800eb54:	102b883a 	mov	r21,r2
 800eb58:	b981810e 	bge	r23,r6,800f160 <_dtoa_r+0x10a4>
 800eb5c:	0027883a 	mov	r19,zero
 800eb60:	a8800417 	ldw	r2,16(r21)
 800eb64:	05c00804 	movi	r23,32
 800eb68:	10800104 	addi	r2,r2,4
 800eb6c:	1085883a 	add	r2,r2,r2
 800eb70:	1085883a 	add	r2,r2,r2
 800eb74:	a885883a 	add	r2,r21,r2
 800eb78:	11000017 	ldw	r4,0(r2)
 800eb7c:	8011a900 	call	8011a90 <__hi0bits>
 800eb80:	b885c83a 	sub	r2,r23,r2
 800eb84:	1585883a 	add	r2,r2,r22
 800eb88:	108007cc 	andi	r2,r2,31
 800eb8c:	1000b326 	beq	r2,zero,800ee5c <_dtoa_r+0xda0>
 800eb90:	00c00804 	movi	r3,32
 800eb94:	1887c83a 	sub	r3,r3,r2
 800eb98:	01000104 	movi	r4,4
 800eb9c:	20c2cd0e 	bge	r4,r3,800f6d4 <_dtoa_r+0x1618>
 800eba0:	00c00704 	movi	r3,28
 800eba4:	1885c83a 	sub	r2,r3,r2
 800eba8:	d8c00817 	ldw	r3,32(sp)
 800ebac:	a0a9883a 	add	r20,r20,r2
 800ebb0:	b0ad883a 	add	r22,r22,r2
 800ebb4:	1887883a 	add	r3,r3,r2
 800ebb8:	d8c00815 	stw	r3,32(sp)
 800ebbc:	d9800817 	ldw	r6,32(sp)
 800ebc0:	0180040e 	bge	zero,r6,800ebd4 <_dtoa_r+0xb18>
 800ebc4:	800b883a 	mov	r5,r16
 800ebc8:	e009883a 	mov	r4,fp
 800ebcc:	8011fb00 	call	8011fb0 <__lshift>
 800ebd0:	1021883a 	mov	r16,r2
 800ebd4:	0580050e 	bge	zero,r22,800ebec <_dtoa_r+0xb30>
 800ebd8:	a80b883a 	mov	r5,r21
 800ebdc:	b00d883a 	mov	r6,r22
 800ebe0:	e009883a 	mov	r4,fp
 800ebe4:	8011fb00 	call	8011fb0 <__lshift>
 800ebe8:	102b883a 	mov	r21,r2
 800ebec:	d9c00e17 	ldw	r7,56(sp)
 800ebf0:	3801211e 	bne	r7,zero,800f078 <_dtoa_r+0xfbc>
 800ebf4:	d9800617 	ldw	r6,24(sp)
 800ebf8:	0181380e 	bge	zero,r6,800f0dc <_dtoa_r+0x1020>
 800ebfc:	d8c00b17 	ldw	r3,44(sp)
 800ec00:	1800ab1e 	bne	r3,zero,800eeb0 <_dtoa_r+0xdf4>
 800ec04:	dc800717 	ldw	r18,28(sp)
 800ec08:	dcc00617 	ldw	r19,24(sp)
 800ec0c:	9029883a 	mov	r20,r18
 800ec10:	00000206 	br	800ec1c <_dtoa_r+0xb60>
 800ec14:	80118440 	call	8011844 <__multadd>
 800ec18:	1021883a 	mov	r16,r2
 800ec1c:	a80b883a 	mov	r5,r21
 800ec20:	8009883a 	mov	r4,r16
 800ec24:	800de940 	call	800de94 <quorem>
 800ec28:	10800c04 	addi	r2,r2,48
 800ec2c:	90800005 	stb	r2,0(r18)
 800ec30:	94800044 	addi	r18,r18,1
 800ec34:	9507c83a 	sub	r3,r18,r20
 800ec38:	000f883a 	mov	r7,zero
 800ec3c:	01800284 	movi	r6,10
 800ec40:	800b883a 	mov	r5,r16
 800ec44:	e009883a 	mov	r4,fp
 800ec48:	1cfff216 	blt	r3,r19,800ec14 <__alt_data_end+0xfc00ec14>
 800ec4c:	1011883a 	mov	r8,r2
 800ec50:	d8800617 	ldw	r2,24(sp)
 800ec54:	0082370e 	bge	zero,r2,800f534 <_dtoa_r+0x1478>
 800ec58:	d9000717 	ldw	r4,28(sp)
 800ec5c:	0025883a 	mov	r18,zero
 800ec60:	20af883a 	add	r23,r4,r2
 800ec64:	01800044 	movi	r6,1
 800ec68:	800b883a 	mov	r5,r16
 800ec6c:	e009883a 	mov	r4,fp
 800ec70:	da001715 	stw	r8,92(sp)
 800ec74:	8011fb00 	call	8011fb0 <__lshift>
 800ec78:	a80b883a 	mov	r5,r21
 800ec7c:	1009883a 	mov	r4,r2
 800ec80:	d8800915 	stw	r2,36(sp)
 800ec84:	80120f80 	call	80120f8 <__mcmp>
 800ec88:	da001717 	ldw	r8,92(sp)
 800ec8c:	0081800e 	bge	zero,r2,800f290 <_dtoa_r+0x11d4>
 800ec90:	b93fffc3 	ldbu	r4,-1(r23)
 800ec94:	b8bfffc4 	addi	r2,r23,-1
 800ec98:	1007883a 	mov	r3,r2
 800ec9c:	01800e44 	movi	r6,57
 800eca0:	d9c00717 	ldw	r7,28(sp)
 800eca4:	00000506 	br	800ecbc <_dtoa_r+0xc00>
 800eca8:	18ffffc4 	addi	r3,r3,-1
 800ecac:	11c12326 	beq	r2,r7,800f13c <_dtoa_r+0x1080>
 800ecb0:	19000003 	ldbu	r4,0(r3)
 800ecb4:	102f883a 	mov	r23,r2
 800ecb8:	10bfffc4 	addi	r2,r2,-1
 800ecbc:	21403fcc 	andi	r5,r4,255
 800ecc0:	2940201c 	xori	r5,r5,128
 800ecc4:	297fe004 	addi	r5,r5,-128
 800ecc8:	29bff726 	beq	r5,r6,800eca8 <__alt_data_end+0xfc00eca8>
 800eccc:	21000044 	addi	r4,r4,1
 800ecd0:	11000005 	stb	r4,0(r2)
 800ecd4:	a80b883a 	mov	r5,r21
 800ecd8:	e009883a 	mov	r4,fp
 800ecdc:	801181c0 	call	801181c <_Bfree>
 800ece0:	883ea026 	beq	r17,zero,800e764 <__alt_data_end+0xfc00e764>
 800ece4:	90000426 	beq	r18,zero,800ecf8 <_dtoa_r+0xc3c>
 800ece8:	94400326 	beq	r18,r17,800ecf8 <_dtoa_r+0xc3c>
 800ecec:	900b883a 	mov	r5,r18
 800ecf0:	e009883a 	mov	r4,fp
 800ecf4:	801181c0 	call	801181c <_Bfree>
 800ecf8:	880b883a 	mov	r5,r17
 800ecfc:	e009883a 	mov	r4,fp
 800ed00:	801181c0 	call	801181c <_Bfree>
 800ed04:	003e9706 	br	800e764 <__alt_data_end+0xfc00e764>
 800ed08:	01800044 	movi	r6,1
 800ed0c:	d9800e15 	stw	r6,56(sp)
 800ed10:	003d9606 	br	800e36c <__alt_data_end+0xfc00e36c>
 800ed14:	d8800817 	ldw	r2,32(sp)
 800ed18:	d8c00517 	ldw	r3,20(sp)
 800ed1c:	d8000d15 	stw	zero,52(sp)
 800ed20:	10c5c83a 	sub	r2,r2,r3
 800ed24:	00c9c83a 	sub	r4,zero,r3
 800ed28:	d8800815 	stw	r2,32(sp)
 800ed2c:	d9000a15 	stw	r4,40(sp)
 800ed30:	003d9706 	br	800e390 <__alt_data_end+0xfc00e390>
 800ed34:	05adc83a 	sub	r22,zero,r22
 800ed38:	dd800815 	stw	r22,32(sp)
 800ed3c:	002d883a 	mov	r22,zero
 800ed40:	003d8e06 	br	800e37c <__alt_data_end+0xfc00e37c>
 800ed44:	d9000517 	ldw	r4,20(sp)
 800ed48:	800b5400 	call	800b540 <__floatsidf>
 800ed4c:	100d883a 	mov	r6,r2
 800ed50:	180f883a 	mov	r7,r3
 800ed54:	a009883a 	mov	r4,r20
 800ed58:	880b883a 	mov	r5,r17
 800ed5c:	800a1000 	call	800a100 <__eqdf2>
 800ed60:	103d7126 	beq	r2,zero,800e328 <__alt_data_end+0xfc00e328>
 800ed64:	d9c00517 	ldw	r7,20(sp)
 800ed68:	39ffffc4 	addi	r7,r7,-1
 800ed6c:	d9c00515 	stw	r7,20(sp)
 800ed70:	003d6d06 	br	800e328 <__alt_data_end+0xfc00e328>
 800ed74:	dd400a17 	ldw	r21,40(sp)
 800ed78:	dd000817 	ldw	r20,32(sp)
 800ed7c:	0023883a 	mov	r17,zero
 800ed80:	003f4806 	br	800eaa4 <__alt_data_end+0xfc00eaa4>
 800ed84:	10e3c83a 	sub	r17,r2,r3
 800ed88:	9448983a 	sll	r4,r18,r17
 800ed8c:	003d3206 	br	800e258 <__alt_data_end+0xfc00e258>
 800ed90:	d8000e15 	stw	zero,56(sp)
 800ed94:	003d7506 	br	800e36c <__alt_data_end+0xfc00e36c>
 800ed98:	b005883a 	mov	r2,r22
 800ed9c:	003f4506 	br	800eab4 <__alt_data_end+0xfc00eab4>
 800eda0:	dc000915 	stw	r16,36(sp)
 800eda4:	d9800a17 	ldw	r6,40(sp)
 800eda8:	d9400917 	ldw	r5,36(sp)
 800edac:	e009883a 	mov	r4,fp
 800edb0:	8011e700 	call	8011e70 <__pow5mult>
 800edb4:	1021883a 	mov	r16,r2
 800edb8:	003f5a06 	br	800eb24 <__alt_data_end+0xfc00eb24>
 800edbc:	01c00044 	movi	r7,1
 800edc0:	d9c00b15 	stw	r7,44(sp)
 800edc4:	d8802217 	ldw	r2,136(sp)
 800edc8:	0081280e 	bge	zero,r2,800f26c <_dtoa_r+0x11b0>
 800edcc:	100d883a 	mov	r6,r2
 800edd0:	1021883a 	mov	r16,r2
 800edd4:	d8800c15 	stw	r2,48(sp)
 800edd8:	d8800615 	stw	r2,24(sp)
 800eddc:	003d8806 	br	800e400 <__alt_data_end+0xfc00e400>
 800ede0:	d8800617 	ldw	r2,24(sp)
 800ede4:	00be9b16 	blt	zero,r2,800e854 <__alt_data_end+0xfc00e854>
 800ede8:	10010f1e 	bne	r2,zero,800f228 <_dtoa_r+0x116c>
 800edec:	880b883a 	mov	r5,r17
 800edf0:	000d883a 	mov	r6,zero
 800edf4:	01d00534 	movhi	r7,16404
 800edf8:	8009883a 	mov	r4,r16
 800edfc:	800a3580 	call	800a358 <__muldf3>
 800ee00:	900d883a 	mov	r6,r18
 800ee04:	980f883a 	mov	r7,r19
 800ee08:	1009883a 	mov	r4,r2
 800ee0c:	180b883a 	mov	r5,r3
 800ee10:	800a1880 	call	800a188 <__gedf2>
 800ee14:	002b883a 	mov	r21,zero
 800ee18:	0023883a 	mov	r17,zero
 800ee1c:	1000bf16 	blt	r2,zero,800f11c <_dtoa_r+0x1060>
 800ee20:	d9802217 	ldw	r6,136(sp)
 800ee24:	ddc00717 	ldw	r23,28(sp)
 800ee28:	018c303a 	nor	r6,zero,r6
 800ee2c:	d9800515 	stw	r6,20(sp)
 800ee30:	a80b883a 	mov	r5,r21
 800ee34:	e009883a 	mov	r4,fp
 800ee38:	801181c0 	call	801181c <_Bfree>
 800ee3c:	883e4926 	beq	r17,zero,800e764 <__alt_data_end+0xfc00e764>
 800ee40:	003fad06 	br	800ecf8 <__alt_data_end+0xfc00ecf8>
 800ee44:	d9c01117 	ldw	r7,68(sp)
 800ee48:	3801bc26 	beq	r7,zero,800f53c <_dtoa_r+0x1480>
 800ee4c:	10810cc4 	addi	r2,r2,1075
 800ee50:	dd400a17 	ldw	r21,40(sp)
 800ee54:	dd000817 	ldw	r20,32(sp)
 800ee58:	003f0a06 	br	800ea84 <__alt_data_end+0xfc00ea84>
 800ee5c:	00800704 	movi	r2,28
 800ee60:	d9000817 	ldw	r4,32(sp)
 800ee64:	a0a9883a 	add	r20,r20,r2
 800ee68:	b0ad883a 	add	r22,r22,r2
 800ee6c:	2089883a 	add	r4,r4,r2
 800ee70:	d9000815 	stw	r4,32(sp)
 800ee74:	003f5106 	br	800ebbc <__alt_data_end+0xfc00ebbc>
 800ee78:	d8c00317 	ldw	r3,12(sp)
 800ee7c:	b8c1fc0e 	bge	r23,r3,800f670 <_dtoa_r+0x15b4>
 800ee80:	0027883a 	mov	r19,zero
 800ee84:	b805883a 	mov	r2,r23
 800ee88:	003f3e06 	br	800eb84 <__alt_data_end+0xfc00eb84>
 800ee8c:	880b883a 	mov	r5,r17
 800ee90:	e009883a 	mov	r4,fp
 800ee94:	000f883a 	mov	r7,zero
 800ee98:	01800284 	movi	r6,10
 800ee9c:	80118440 	call	8011844 <__multadd>
 800eea0:	d9000c17 	ldw	r4,48(sp)
 800eea4:	1023883a 	mov	r17,r2
 800eea8:	0102040e 	bge	zero,r4,800f6bc <_dtoa_r+0x1600>
 800eeac:	d9000615 	stw	r4,24(sp)
 800eeb0:	0500050e 	bge	zero,r20,800eec8 <_dtoa_r+0xe0c>
 800eeb4:	880b883a 	mov	r5,r17
 800eeb8:	a00d883a 	mov	r6,r20
 800eebc:	e009883a 	mov	r4,fp
 800eec0:	8011fb00 	call	8011fb0 <__lshift>
 800eec4:	1023883a 	mov	r17,r2
 800eec8:	9801241e 	bne	r19,zero,800f35c <_dtoa_r+0x12a0>
 800eecc:	8829883a 	mov	r20,r17
 800eed0:	d9000617 	ldw	r4,24(sp)
 800eed4:	dcc00717 	ldw	r19,28(sp)
 800eed8:	9480004c 	andi	r18,r18,1
 800eedc:	20bfffc4 	addi	r2,r4,-1
 800eee0:	9885883a 	add	r2,r19,r2
 800eee4:	d8800415 	stw	r2,16(sp)
 800eee8:	dc800615 	stw	r18,24(sp)
 800eeec:	a80b883a 	mov	r5,r21
 800eef0:	8009883a 	mov	r4,r16
 800eef4:	800de940 	call	800de94 <quorem>
 800eef8:	880b883a 	mov	r5,r17
 800eefc:	8009883a 	mov	r4,r16
 800ef00:	102f883a 	mov	r23,r2
 800ef04:	80120f80 	call	80120f8 <__mcmp>
 800ef08:	a80b883a 	mov	r5,r21
 800ef0c:	a00d883a 	mov	r6,r20
 800ef10:	e009883a 	mov	r4,fp
 800ef14:	102d883a 	mov	r22,r2
 800ef18:	80121580 	call	8012158 <__mdiff>
 800ef1c:	1007883a 	mov	r3,r2
 800ef20:	10800317 	ldw	r2,12(r2)
 800ef24:	bc800c04 	addi	r18,r23,48
 800ef28:	180b883a 	mov	r5,r3
 800ef2c:	10004e1e 	bne	r2,zero,800f068 <_dtoa_r+0xfac>
 800ef30:	8009883a 	mov	r4,r16
 800ef34:	d8c01615 	stw	r3,88(sp)
 800ef38:	80120f80 	call	80120f8 <__mcmp>
 800ef3c:	d8c01617 	ldw	r3,88(sp)
 800ef40:	e009883a 	mov	r4,fp
 800ef44:	d8801615 	stw	r2,88(sp)
 800ef48:	180b883a 	mov	r5,r3
 800ef4c:	801181c0 	call	801181c <_Bfree>
 800ef50:	d8801617 	ldw	r2,88(sp)
 800ef54:	1000041e 	bne	r2,zero,800ef68 <_dtoa_r+0xeac>
 800ef58:	d9800317 	ldw	r6,12(sp)
 800ef5c:	3000021e 	bne	r6,zero,800ef68 <_dtoa_r+0xeac>
 800ef60:	d8c00617 	ldw	r3,24(sp)
 800ef64:	18003726 	beq	r3,zero,800f044 <_dtoa_r+0xf88>
 800ef68:	b0002016 	blt	r22,zero,800efec <_dtoa_r+0xf30>
 800ef6c:	b000041e 	bne	r22,zero,800ef80 <_dtoa_r+0xec4>
 800ef70:	d9000317 	ldw	r4,12(sp)
 800ef74:	2000021e 	bne	r4,zero,800ef80 <_dtoa_r+0xec4>
 800ef78:	d8c00617 	ldw	r3,24(sp)
 800ef7c:	18001b26 	beq	r3,zero,800efec <_dtoa_r+0xf30>
 800ef80:	00810716 	blt	zero,r2,800f3a0 <_dtoa_r+0x12e4>
 800ef84:	d8c00417 	ldw	r3,16(sp)
 800ef88:	9d800044 	addi	r22,r19,1
 800ef8c:	9c800005 	stb	r18,0(r19)
 800ef90:	b02f883a 	mov	r23,r22
 800ef94:	98c10626 	beq	r19,r3,800f3b0 <_dtoa_r+0x12f4>
 800ef98:	800b883a 	mov	r5,r16
 800ef9c:	000f883a 	mov	r7,zero
 800efa0:	01800284 	movi	r6,10
 800efa4:	e009883a 	mov	r4,fp
 800efa8:	80118440 	call	8011844 <__multadd>
 800efac:	1021883a 	mov	r16,r2
 800efb0:	000f883a 	mov	r7,zero
 800efb4:	01800284 	movi	r6,10
 800efb8:	880b883a 	mov	r5,r17
 800efbc:	e009883a 	mov	r4,fp
 800efc0:	8d002526 	beq	r17,r20,800f058 <_dtoa_r+0xf9c>
 800efc4:	80118440 	call	8011844 <__multadd>
 800efc8:	a00b883a 	mov	r5,r20
 800efcc:	000f883a 	mov	r7,zero
 800efd0:	01800284 	movi	r6,10
 800efd4:	e009883a 	mov	r4,fp
 800efd8:	1023883a 	mov	r17,r2
 800efdc:	80118440 	call	8011844 <__multadd>
 800efe0:	1029883a 	mov	r20,r2
 800efe4:	b027883a 	mov	r19,r22
 800efe8:	003fc006 	br	800eeec <__alt_data_end+0xfc00eeec>
 800efec:	9011883a 	mov	r8,r18
 800eff0:	00800e0e 	bge	zero,r2,800f02c <_dtoa_r+0xf70>
 800eff4:	800b883a 	mov	r5,r16
 800eff8:	01800044 	movi	r6,1
 800effc:	e009883a 	mov	r4,fp
 800f000:	da001715 	stw	r8,92(sp)
 800f004:	8011fb00 	call	8011fb0 <__lshift>
 800f008:	a80b883a 	mov	r5,r21
 800f00c:	1009883a 	mov	r4,r2
 800f010:	1021883a 	mov	r16,r2
 800f014:	80120f80 	call	80120f8 <__mcmp>
 800f018:	da001717 	ldw	r8,92(sp)
 800f01c:	0081960e 	bge	zero,r2,800f678 <_dtoa_r+0x15bc>
 800f020:	00800e44 	movi	r2,57
 800f024:	40817026 	beq	r8,r2,800f5e8 <_dtoa_r+0x152c>
 800f028:	ba000c44 	addi	r8,r23,49
 800f02c:	8825883a 	mov	r18,r17
 800f030:	9dc00044 	addi	r23,r19,1
 800f034:	9a000005 	stb	r8,0(r19)
 800f038:	a023883a 	mov	r17,r20
 800f03c:	dc000915 	stw	r16,36(sp)
 800f040:	003f2406 	br	800ecd4 <__alt_data_end+0xfc00ecd4>
 800f044:	00800e44 	movi	r2,57
 800f048:	9011883a 	mov	r8,r18
 800f04c:	90816626 	beq	r18,r2,800f5e8 <_dtoa_r+0x152c>
 800f050:	05bff516 	blt	zero,r22,800f028 <__alt_data_end+0xfc00f028>
 800f054:	003ff506 	br	800f02c <__alt_data_end+0xfc00f02c>
 800f058:	80118440 	call	8011844 <__multadd>
 800f05c:	1023883a 	mov	r17,r2
 800f060:	1029883a 	mov	r20,r2
 800f064:	003fdf06 	br	800efe4 <__alt_data_end+0xfc00efe4>
 800f068:	e009883a 	mov	r4,fp
 800f06c:	801181c0 	call	801181c <_Bfree>
 800f070:	00800044 	movi	r2,1
 800f074:	003fbc06 	br	800ef68 <__alt_data_end+0xfc00ef68>
 800f078:	a80b883a 	mov	r5,r21
 800f07c:	8009883a 	mov	r4,r16
 800f080:	80120f80 	call	80120f8 <__mcmp>
 800f084:	103edb0e 	bge	r2,zero,800ebf4 <__alt_data_end+0xfc00ebf4>
 800f088:	800b883a 	mov	r5,r16
 800f08c:	000f883a 	mov	r7,zero
 800f090:	01800284 	movi	r6,10
 800f094:	e009883a 	mov	r4,fp
 800f098:	80118440 	call	8011844 <__multadd>
 800f09c:	1021883a 	mov	r16,r2
 800f0a0:	d8800517 	ldw	r2,20(sp)
 800f0a4:	d8c00b17 	ldw	r3,44(sp)
 800f0a8:	10bfffc4 	addi	r2,r2,-1
 800f0ac:	d8800515 	stw	r2,20(sp)
 800f0b0:	183f761e 	bne	r3,zero,800ee8c <__alt_data_end+0xfc00ee8c>
 800f0b4:	d9000c17 	ldw	r4,48(sp)
 800f0b8:	0101730e 	bge	zero,r4,800f688 <_dtoa_r+0x15cc>
 800f0bc:	d9000615 	stw	r4,24(sp)
 800f0c0:	003ed006 	br	800ec04 <__alt_data_end+0xfc00ec04>
 800f0c4:	00800084 	movi	r2,2
 800f0c8:	3081861e 	bne	r6,r2,800f6e4 <_dtoa_r+0x1628>
 800f0cc:	d8000b15 	stw	zero,44(sp)
 800f0d0:	003f3c06 	br	800edc4 <__alt_data_end+0xfc00edc4>
 800f0d4:	dc000917 	ldw	r16,36(sp)
 800f0d8:	003e9206 	br	800eb24 <__alt_data_end+0xfc00eb24>
 800f0dc:	d9c00317 	ldw	r7,12(sp)
 800f0e0:	00800084 	movi	r2,2
 800f0e4:	11fec50e 	bge	r2,r7,800ebfc <__alt_data_end+0xfc00ebfc>
 800f0e8:	d9000617 	ldw	r4,24(sp)
 800f0ec:	20013c1e 	bne	r4,zero,800f5e0 <_dtoa_r+0x1524>
 800f0f0:	a80b883a 	mov	r5,r21
 800f0f4:	000f883a 	mov	r7,zero
 800f0f8:	01800144 	movi	r6,5
 800f0fc:	e009883a 	mov	r4,fp
 800f100:	80118440 	call	8011844 <__multadd>
 800f104:	100b883a 	mov	r5,r2
 800f108:	8009883a 	mov	r4,r16
 800f10c:	102b883a 	mov	r21,r2
 800f110:	80120f80 	call	80120f8 <__mcmp>
 800f114:	dc000915 	stw	r16,36(sp)
 800f118:	00bf410e 	bge	zero,r2,800ee20 <__alt_data_end+0xfc00ee20>
 800f11c:	d9c00717 	ldw	r7,28(sp)
 800f120:	00800c44 	movi	r2,49
 800f124:	38800005 	stb	r2,0(r7)
 800f128:	d8800517 	ldw	r2,20(sp)
 800f12c:	3dc00044 	addi	r23,r7,1
 800f130:	10800044 	addi	r2,r2,1
 800f134:	d8800515 	stw	r2,20(sp)
 800f138:	003f3d06 	br	800ee30 <__alt_data_end+0xfc00ee30>
 800f13c:	d9800517 	ldw	r6,20(sp)
 800f140:	d9c00717 	ldw	r7,28(sp)
 800f144:	00800c44 	movi	r2,49
 800f148:	31800044 	addi	r6,r6,1
 800f14c:	d9800515 	stw	r6,20(sp)
 800f150:	38800005 	stb	r2,0(r7)
 800f154:	003edf06 	br	800ecd4 <__alt_data_end+0xfc00ecd4>
 800f158:	d8000b15 	stw	zero,44(sp)
 800f15c:	003c9f06 	br	800e3dc <__alt_data_end+0xfc00e3dc>
 800f160:	903e7e1e 	bne	r18,zero,800eb5c <__alt_data_end+0xfc00eb5c>
 800f164:	00800434 	movhi	r2,16
 800f168:	10bfffc4 	addi	r2,r2,-1
 800f16c:	9884703a 	and	r2,r19,r2
 800f170:	1000ea1e 	bne	r2,zero,800f51c <_dtoa_r+0x1460>
 800f174:	9cdffc2c 	andhi	r19,r19,32752
 800f178:	9800e826 	beq	r19,zero,800f51c <_dtoa_r+0x1460>
 800f17c:	d9c00817 	ldw	r7,32(sp)
 800f180:	b5800044 	addi	r22,r22,1
 800f184:	04c00044 	movi	r19,1
 800f188:	39c00044 	addi	r7,r7,1
 800f18c:	d9c00815 	stw	r7,32(sp)
 800f190:	d8800d17 	ldw	r2,52(sp)
 800f194:	103e721e 	bne	r2,zero,800eb60 <__alt_data_end+0xfc00eb60>
 800f198:	00800044 	movi	r2,1
 800f19c:	003e7906 	br	800eb84 <__alt_data_end+0xfc00eb84>
 800f1a0:	8009883a 	mov	r4,r16
 800f1a4:	800b5400 	call	800b540 <__floatsidf>
 800f1a8:	d9800f17 	ldw	r6,60(sp)
 800f1ac:	d9c01017 	ldw	r7,64(sp)
 800f1b0:	1009883a 	mov	r4,r2
 800f1b4:	180b883a 	mov	r5,r3
 800f1b8:	800a3580 	call	800a358 <__muldf3>
 800f1bc:	000d883a 	mov	r6,zero
 800f1c0:	01d00734 	movhi	r7,16412
 800f1c4:	1009883a 	mov	r4,r2
 800f1c8:	180b883a 	mov	r5,r3
 800f1cc:	8008e840 	call	8008e84 <__adddf3>
 800f1d0:	047f3034 	movhi	r17,64704
 800f1d4:	1021883a 	mov	r16,r2
 800f1d8:	1c63883a 	add	r17,r3,r17
 800f1dc:	d9000f17 	ldw	r4,60(sp)
 800f1e0:	d9401017 	ldw	r5,64(sp)
 800f1e4:	000d883a 	mov	r6,zero
 800f1e8:	01d00534 	movhi	r7,16404
 800f1ec:	800abc40 	call	800abc4 <__subdf3>
 800f1f0:	800d883a 	mov	r6,r16
 800f1f4:	880f883a 	mov	r7,r17
 800f1f8:	1009883a 	mov	r4,r2
 800f1fc:	180b883a 	mov	r5,r3
 800f200:	102b883a 	mov	r21,r2
 800f204:	1829883a 	mov	r20,r3
 800f208:	800a1880 	call	800a188 <__gedf2>
 800f20c:	00806c16 	blt	zero,r2,800f3c0 <_dtoa_r+0x1304>
 800f210:	89e0003c 	xorhi	r7,r17,32768
 800f214:	800d883a 	mov	r6,r16
 800f218:	a809883a 	mov	r4,r21
 800f21c:	a00b883a 	mov	r5,r20
 800f220:	800a2640 	call	800a264 <__ledf2>
 800f224:	103d7e0e 	bge	r2,zero,800e820 <__alt_data_end+0xfc00e820>
 800f228:	002b883a 	mov	r21,zero
 800f22c:	0023883a 	mov	r17,zero
 800f230:	003efb06 	br	800ee20 <__alt_data_end+0xfc00ee20>
 800f234:	d8800717 	ldw	r2,28(sp)
 800f238:	003bd006 	br	800e17c <__alt_data_end+0xfc00e17c>
 800f23c:	d9000a17 	ldw	r4,40(sp)
 800f240:	d9800d17 	ldw	r6,52(sp)
 800f244:	dd400a15 	stw	r21,40(sp)
 800f248:	a905c83a 	sub	r2,r21,r4
 800f24c:	308d883a 	add	r6,r6,r2
 800f250:	d9800d15 	stw	r6,52(sp)
 800f254:	002b883a 	mov	r21,zero
 800f258:	003e0606 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f25c:	9023883a 	mov	r17,r18
 800f260:	9829883a 	mov	r20,r19
 800f264:	04000084 	movi	r16,2
 800f268:	003c9206 	br	800e4b4 <__alt_data_end+0xfc00e4b4>
 800f26c:	04000044 	movi	r16,1
 800f270:	dc000c15 	stw	r16,48(sp)
 800f274:	dc000615 	stw	r16,24(sp)
 800f278:	dc002215 	stw	r16,136(sp)
 800f27c:	e0001115 	stw	zero,68(fp)
 800f280:	000b883a 	mov	r5,zero
 800f284:	003c6906 	br	800e42c <__alt_data_end+0xfc00e42c>
 800f288:	3021883a 	mov	r16,r6
 800f28c:	003ffb06 	br	800f27c <__alt_data_end+0xfc00f27c>
 800f290:	1000021e 	bne	r2,zero,800f29c <_dtoa_r+0x11e0>
 800f294:	4200004c 	andi	r8,r8,1
 800f298:	403e7d1e 	bne	r8,zero,800ec90 <__alt_data_end+0xfc00ec90>
 800f29c:	01000c04 	movi	r4,48
 800f2a0:	00000106 	br	800f2a8 <_dtoa_r+0x11ec>
 800f2a4:	102f883a 	mov	r23,r2
 800f2a8:	b8bfffc4 	addi	r2,r23,-1
 800f2ac:	10c00007 	ldb	r3,0(r2)
 800f2b0:	193ffc26 	beq	r3,r4,800f2a4 <__alt_data_end+0xfc00f2a4>
 800f2b4:	003e8706 	br	800ecd4 <__alt_data_end+0xfc00ecd4>
 800f2b8:	d8800517 	ldw	r2,20(sp)
 800f2bc:	00a3c83a 	sub	r17,zero,r2
 800f2c0:	8800a426 	beq	r17,zero,800f554 <_dtoa_r+0x1498>
 800f2c4:	888003cc 	andi	r2,r17,15
 800f2c8:	100490fa 	slli	r2,r2,3
 800f2cc:	00c200b4 	movhi	r3,2050
 800f2d0:	18eb6304 	addi	r3,r3,-21108
 800f2d4:	1885883a 	add	r2,r3,r2
 800f2d8:	11800017 	ldw	r6,0(r2)
 800f2dc:	11c00117 	ldw	r7,4(r2)
 800f2e0:	9009883a 	mov	r4,r18
 800f2e4:	980b883a 	mov	r5,r19
 800f2e8:	8823d13a 	srai	r17,r17,4
 800f2ec:	800a3580 	call	800a358 <__muldf3>
 800f2f0:	d8800f15 	stw	r2,60(sp)
 800f2f4:	d8c01015 	stw	r3,64(sp)
 800f2f8:	8800e826 	beq	r17,zero,800f69c <_dtoa_r+0x15e0>
 800f2fc:	050200b4 	movhi	r20,2050
 800f300:	a52b5904 	addi	r20,r20,-21148
 800f304:	04000084 	movi	r16,2
 800f308:	8980004c 	andi	r6,r17,1
 800f30c:	1009883a 	mov	r4,r2
 800f310:	8823d07a 	srai	r17,r17,1
 800f314:	180b883a 	mov	r5,r3
 800f318:	30000426 	beq	r6,zero,800f32c <_dtoa_r+0x1270>
 800f31c:	a1800017 	ldw	r6,0(r20)
 800f320:	a1c00117 	ldw	r7,4(r20)
 800f324:	84000044 	addi	r16,r16,1
 800f328:	800a3580 	call	800a358 <__muldf3>
 800f32c:	a5000204 	addi	r20,r20,8
 800f330:	883ff51e 	bne	r17,zero,800f308 <__alt_data_end+0xfc00f308>
 800f334:	d8800f15 	stw	r2,60(sp)
 800f338:	d8c01015 	stw	r3,64(sp)
 800f33c:	003c7606 	br	800e518 <__alt_data_end+0xfc00e518>
 800f340:	00c00c04 	movi	r3,48
 800f344:	10c00005 	stb	r3,0(r2)
 800f348:	d8c00517 	ldw	r3,20(sp)
 800f34c:	bd3fffc3 	ldbu	r20,-1(r23)
 800f350:	18c00044 	addi	r3,r3,1
 800f354:	d8c00515 	stw	r3,20(sp)
 800f358:	003db906 	br	800ea40 <__alt_data_end+0xfc00ea40>
 800f35c:	89400117 	ldw	r5,4(r17)
 800f360:	e009883a 	mov	r4,fp
 800f364:	80117740 	call	8011774 <_Balloc>
 800f368:	89800417 	ldw	r6,16(r17)
 800f36c:	89400304 	addi	r5,r17,12
 800f370:	11000304 	addi	r4,r2,12
 800f374:	31800084 	addi	r6,r6,2
 800f378:	318d883a 	add	r6,r6,r6
 800f37c:	318d883a 	add	r6,r6,r6
 800f380:	1027883a 	mov	r19,r2
 800f384:	80113a80 	call	80113a8 <memcpy>
 800f388:	01800044 	movi	r6,1
 800f38c:	980b883a 	mov	r5,r19
 800f390:	e009883a 	mov	r4,fp
 800f394:	8011fb00 	call	8011fb0 <__lshift>
 800f398:	1029883a 	mov	r20,r2
 800f39c:	003ecc06 	br	800eed0 <__alt_data_end+0xfc00eed0>
 800f3a0:	00800e44 	movi	r2,57
 800f3a4:	90809026 	beq	r18,r2,800f5e8 <_dtoa_r+0x152c>
 800f3a8:	92000044 	addi	r8,r18,1
 800f3ac:	003f1f06 	br	800f02c <__alt_data_end+0xfc00f02c>
 800f3b0:	9011883a 	mov	r8,r18
 800f3b4:	8825883a 	mov	r18,r17
 800f3b8:	a023883a 	mov	r17,r20
 800f3bc:	003e2906 	br	800ec64 <__alt_data_end+0xfc00ec64>
 800f3c0:	002b883a 	mov	r21,zero
 800f3c4:	0023883a 	mov	r17,zero
 800f3c8:	003f5406 	br	800f11c <__alt_data_end+0xfc00f11c>
 800f3cc:	61bfffc4 	addi	r6,r12,-1
 800f3d0:	300490fa 	slli	r2,r6,3
 800f3d4:	00c200b4 	movhi	r3,2050
 800f3d8:	18eb6304 	addi	r3,r3,-21108
 800f3dc:	1885883a 	add	r2,r3,r2
 800f3e0:	11000017 	ldw	r4,0(r2)
 800f3e4:	11400117 	ldw	r5,4(r2)
 800f3e8:	d8800717 	ldw	r2,28(sp)
 800f3ec:	880f883a 	mov	r7,r17
 800f3f0:	d9801215 	stw	r6,72(sp)
 800f3f4:	800d883a 	mov	r6,r16
 800f3f8:	db001615 	stw	r12,88(sp)
 800f3fc:	15c00044 	addi	r23,r2,1
 800f400:	800a3580 	call	800a358 <__muldf3>
 800f404:	d9401017 	ldw	r5,64(sp)
 800f408:	d9000f17 	ldw	r4,60(sp)
 800f40c:	d8c01515 	stw	r3,84(sp)
 800f410:	d8801415 	stw	r2,80(sp)
 800f414:	800b4c00 	call	800b4c0 <__fixdfsi>
 800f418:	1009883a 	mov	r4,r2
 800f41c:	1021883a 	mov	r16,r2
 800f420:	800b5400 	call	800b540 <__floatsidf>
 800f424:	d9000f17 	ldw	r4,60(sp)
 800f428:	d9401017 	ldw	r5,64(sp)
 800f42c:	100d883a 	mov	r6,r2
 800f430:	180f883a 	mov	r7,r3
 800f434:	800abc40 	call	800abc4 <__subdf3>
 800f438:	1829883a 	mov	r20,r3
 800f43c:	d8c00717 	ldw	r3,28(sp)
 800f440:	84000c04 	addi	r16,r16,48
 800f444:	1023883a 	mov	r17,r2
 800f448:	1c000005 	stb	r16,0(r3)
 800f44c:	db001617 	ldw	r12,88(sp)
 800f450:	00800044 	movi	r2,1
 800f454:	60802226 	beq	r12,r2,800f4e0 <_dtoa_r+0x1424>
 800f458:	d9c00717 	ldw	r7,28(sp)
 800f45c:	8805883a 	mov	r2,r17
 800f460:	b82b883a 	mov	r21,r23
 800f464:	3b19883a 	add	r12,r7,r12
 800f468:	6023883a 	mov	r17,r12
 800f46c:	a007883a 	mov	r3,r20
 800f470:	dc800f15 	stw	r18,60(sp)
 800f474:	000d883a 	mov	r6,zero
 800f478:	01d00934 	movhi	r7,16420
 800f47c:	1009883a 	mov	r4,r2
 800f480:	180b883a 	mov	r5,r3
 800f484:	800a3580 	call	800a358 <__muldf3>
 800f488:	180b883a 	mov	r5,r3
 800f48c:	1009883a 	mov	r4,r2
 800f490:	1829883a 	mov	r20,r3
 800f494:	1025883a 	mov	r18,r2
 800f498:	800b4c00 	call	800b4c0 <__fixdfsi>
 800f49c:	1009883a 	mov	r4,r2
 800f4a0:	1021883a 	mov	r16,r2
 800f4a4:	800b5400 	call	800b540 <__floatsidf>
 800f4a8:	100d883a 	mov	r6,r2
 800f4ac:	180f883a 	mov	r7,r3
 800f4b0:	9009883a 	mov	r4,r18
 800f4b4:	a00b883a 	mov	r5,r20
 800f4b8:	84000c04 	addi	r16,r16,48
 800f4bc:	800abc40 	call	800abc4 <__subdf3>
 800f4c0:	ad400044 	addi	r21,r21,1
 800f4c4:	ac3fffc5 	stb	r16,-1(r21)
 800f4c8:	ac7fea1e 	bne	r21,r17,800f474 <__alt_data_end+0xfc00f474>
 800f4cc:	1023883a 	mov	r17,r2
 800f4d0:	d8801217 	ldw	r2,72(sp)
 800f4d4:	dc800f17 	ldw	r18,60(sp)
 800f4d8:	1829883a 	mov	r20,r3
 800f4dc:	b8af883a 	add	r23,r23,r2
 800f4e0:	d9001417 	ldw	r4,80(sp)
 800f4e4:	d9401517 	ldw	r5,84(sp)
 800f4e8:	000d883a 	mov	r6,zero
 800f4ec:	01cff834 	movhi	r7,16352
 800f4f0:	8008e840 	call	8008e84 <__adddf3>
 800f4f4:	880d883a 	mov	r6,r17
 800f4f8:	a00f883a 	mov	r7,r20
 800f4fc:	1009883a 	mov	r4,r2
 800f500:	180b883a 	mov	r5,r3
 800f504:	800a2640 	call	800a264 <__ledf2>
 800f508:	10003e0e 	bge	r2,zero,800f604 <_dtoa_r+0x1548>
 800f50c:	d9001317 	ldw	r4,76(sp)
 800f510:	bd3fffc3 	ldbu	r20,-1(r23)
 800f514:	d9000515 	stw	r4,20(sp)
 800f518:	003d3b06 	br	800ea08 <__alt_data_end+0xfc00ea08>
 800f51c:	0027883a 	mov	r19,zero
 800f520:	003f1b06 	br	800f190 <__alt_data_end+0xfc00f190>
 800f524:	d8800817 	ldw	r2,32(sp)
 800f528:	11e9c83a 	sub	r20,r2,r7
 800f52c:	0005883a 	mov	r2,zero
 800f530:	003d5406 	br	800ea84 <__alt_data_end+0xfc00ea84>
 800f534:	00800044 	movi	r2,1
 800f538:	003dc706 	br	800ec58 <__alt_data_end+0xfc00ec58>
 800f53c:	d8c00217 	ldw	r3,8(sp)
 800f540:	00800d84 	movi	r2,54
 800f544:	dd400a17 	ldw	r21,40(sp)
 800f548:	10c5c83a 	sub	r2,r2,r3
 800f54c:	dd000817 	ldw	r20,32(sp)
 800f550:	003d4c06 	br	800ea84 <__alt_data_end+0xfc00ea84>
 800f554:	dc800f15 	stw	r18,60(sp)
 800f558:	dcc01015 	stw	r19,64(sp)
 800f55c:	04000084 	movi	r16,2
 800f560:	003bed06 	br	800e518 <__alt_data_end+0xfc00e518>
 800f564:	d9000617 	ldw	r4,24(sp)
 800f568:	203f0d26 	beq	r4,zero,800f1a0 <__alt_data_end+0xfc00f1a0>
 800f56c:	d9800c17 	ldw	r6,48(sp)
 800f570:	01bcab0e 	bge	zero,r6,800e820 <__alt_data_end+0xfc00e820>
 800f574:	d9401017 	ldw	r5,64(sp)
 800f578:	d9000f17 	ldw	r4,60(sp)
 800f57c:	000d883a 	mov	r6,zero
 800f580:	01d00934 	movhi	r7,16420
 800f584:	800a3580 	call	800a358 <__muldf3>
 800f588:	81000044 	addi	r4,r16,1
 800f58c:	d8800f15 	stw	r2,60(sp)
 800f590:	d8c01015 	stw	r3,64(sp)
 800f594:	800b5400 	call	800b540 <__floatsidf>
 800f598:	d9800f17 	ldw	r6,60(sp)
 800f59c:	d9c01017 	ldw	r7,64(sp)
 800f5a0:	1009883a 	mov	r4,r2
 800f5a4:	180b883a 	mov	r5,r3
 800f5a8:	800a3580 	call	800a358 <__muldf3>
 800f5ac:	01d00734 	movhi	r7,16412
 800f5b0:	000d883a 	mov	r6,zero
 800f5b4:	1009883a 	mov	r4,r2
 800f5b8:	180b883a 	mov	r5,r3
 800f5bc:	8008e840 	call	8008e84 <__adddf3>
 800f5c0:	d9c00517 	ldw	r7,20(sp)
 800f5c4:	047f3034 	movhi	r17,64704
 800f5c8:	1021883a 	mov	r16,r2
 800f5cc:	39ffffc4 	addi	r7,r7,-1
 800f5d0:	d9c01315 	stw	r7,76(sp)
 800f5d4:	1c63883a 	add	r17,r3,r17
 800f5d8:	db000c17 	ldw	r12,48(sp)
 800f5dc:	003bea06 	br	800e588 <__alt_data_end+0xfc00e588>
 800f5e0:	dc000915 	stw	r16,36(sp)
 800f5e4:	003e0e06 	br	800ee20 <__alt_data_end+0xfc00ee20>
 800f5e8:	01000e44 	movi	r4,57
 800f5ec:	8825883a 	mov	r18,r17
 800f5f0:	9dc00044 	addi	r23,r19,1
 800f5f4:	99000005 	stb	r4,0(r19)
 800f5f8:	a023883a 	mov	r17,r20
 800f5fc:	dc000915 	stw	r16,36(sp)
 800f600:	003da406 	br	800ec94 <__alt_data_end+0xfc00ec94>
 800f604:	d9801417 	ldw	r6,80(sp)
 800f608:	d9c01517 	ldw	r7,84(sp)
 800f60c:	0009883a 	mov	r4,zero
 800f610:	014ff834 	movhi	r5,16352
 800f614:	800abc40 	call	800abc4 <__subdf3>
 800f618:	880d883a 	mov	r6,r17
 800f61c:	a00f883a 	mov	r7,r20
 800f620:	1009883a 	mov	r4,r2
 800f624:	180b883a 	mov	r5,r3
 800f628:	800a1880 	call	800a188 <__gedf2>
 800f62c:	00bc7c0e 	bge	zero,r2,800e820 <__alt_data_end+0xfc00e820>
 800f630:	01000c04 	movi	r4,48
 800f634:	00000106 	br	800f63c <_dtoa_r+0x1580>
 800f638:	102f883a 	mov	r23,r2
 800f63c:	b8bfffc4 	addi	r2,r23,-1
 800f640:	10c00007 	ldb	r3,0(r2)
 800f644:	193ffc26 	beq	r3,r4,800f638 <__alt_data_end+0xfc00f638>
 800f648:	d9801317 	ldw	r6,76(sp)
 800f64c:	d9800515 	stw	r6,20(sp)
 800f650:	003c4406 	br	800e764 <__alt_data_end+0xfc00e764>
 800f654:	d9801317 	ldw	r6,76(sp)
 800f658:	d9800515 	stw	r6,20(sp)
 800f65c:	003cea06 	br	800ea08 <__alt_data_end+0xfc00ea08>
 800f660:	dd800f17 	ldw	r22,60(sp)
 800f664:	dcc01017 	ldw	r19,64(sp)
 800f668:	dc801217 	ldw	r18,72(sp)
 800f66c:	003c6c06 	br	800e820 <__alt_data_end+0xfc00e820>
 800f670:	903e031e 	bne	r18,zero,800ee80 <__alt_data_end+0xfc00ee80>
 800f674:	003ebb06 	br	800f164 <__alt_data_end+0xfc00f164>
 800f678:	103e6c1e 	bne	r2,zero,800f02c <__alt_data_end+0xfc00f02c>
 800f67c:	4080004c 	andi	r2,r8,1
 800f680:	103e6a26 	beq	r2,zero,800f02c <__alt_data_end+0xfc00f02c>
 800f684:	003e6606 	br	800f020 <__alt_data_end+0xfc00f020>
 800f688:	d8c00317 	ldw	r3,12(sp)
 800f68c:	00800084 	movi	r2,2
 800f690:	10c02916 	blt	r2,r3,800f738 <_dtoa_r+0x167c>
 800f694:	d9000c17 	ldw	r4,48(sp)
 800f698:	003e8806 	br	800f0bc <__alt_data_end+0xfc00f0bc>
 800f69c:	04000084 	movi	r16,2
 800f6a0:	003b9d06 	br	800e518 <__alt_data_end+0xfc00e518>
 800f6a4:	d9001317 	ldw	r4,76(sp)
 800f6a8:	d9000515 	stw	r4,20(sp)
 800f6ac:	003cd606 	br	800ea08 <__alt_data_end+0xfc00ea08>
 800f6b0:	d8801317 	ldw	r2,76(sp)
 800f6b4:	d8800515 	stw	r2,20(sp)
 800f6b8:	003c2a06 	br	800e764 <__alt_data_end+0xfc00e764>
 800f6bc:	d9800317 	ldw	r6,12(sp)
 800f6c0:	00800084 	movi	r2,2
 800f6c4:	11801516 	blt	r2,r6,800f71c <_dtoa_r+0x1660>
 800f6c8:	d9c00c17 	ldw	r7,48(sp)
 800f6cc:	d9c00615 	stw	r7,24(sp)
 800f6d0:	003df706 	br	800eeb0 <__alt_data_end+0xfc00eeb0>
 800f6d4:	193d3926 	beq	r3,r4,800ebbc <__alt_data_end+0xfc00ebbc>
 800f6d8:	00c00f04 	movi	r3,60
 800f6dc:	1885c83a 	sub	r2,r3,r2
 800f6e0:	003ddf06 	br	800ee60 <__alt_data_end+0xfc00ee60>
 800f6e4:	e009883a 	mov	r4,fp
 800f6e8:	e0001115 	stw	zero,68(fp)
 800f6ec:	000b883a 	mov	r5,zero
 800f6f0:	80117740 	call	8011774 <_Balloc>
 800f6f4:	d8800715 	stw	r2,28(sp)
 800f6f8:	d8c00717 	ldw	r3,28(sp)
 800f6fc:	00bfffc4 	movi	r2,-1
 800f700:	01000044 	movi	r4,1
 800f704:	d8800c15 	stw	r2,48(sp)
 800f708:	e0c01015 	stw	r3,64(fp)
 800f70c:	d9000b15 	stw	r4,44(sp)
 800f710:	d8800615 	stw	r2,24(sp)
 800f714:	d8002215 	stw	zero,136(sp)
 800f718:	003c4106 	br	800e820 <__alt_data_end+0xfc00e820>
 800f71c:	d8c00c17 	ldw	r3,48(sp)
 800f720:	d8c00615 	stw	r3,24(sp)
 800f724:	003e7006 	br	800f0e8 <__alt_data_end+0xfc00f0e8>
 800f728:	04400044 	movi	r17,1
 800f72c:	003b2006 	br	800e3b0 <__alt_data_end+0xfc00e3b0>
 800f730:	000b883a 	mov	r5,zero
 800f734:	003b3d06 	br	800e42c <__alt_data_end+0xfc00e42c>
 800f738:	d8800c17 	ldw	r2,48(sp)
 800f73c:	d8800615 	stw	r2,24(sp)
 800f740:	003e6906 	br	800f0e8 <__alt_data_end+0xfc00f0e8>

0800f744 <__sflush_r>:
 800f744:	2880030b 	ldhu	r2,12(r5)
 800f748:	defffb04 	addi	sp,sp,-20
 800f74c:	dcc00315 	stw	r19,12(sp)
 800f750:	dc400115 	stw	r17,4(sp)
 800f754:	dfc00415 	stw	ra,16(sp)
 800f758:	dc800215 	stw	r18,8(sp)
 800f75c:	dc000015 	stw	r16,0(sp)
 800f760:	10c0020c 	andi	r3,r2,8
 800f764:	2823883a 	mov	r17,r5
 800f768:	2027883a 	mov	r19,r4
 800f76c:	1800311e 	bne	r3,zero,800f834 <__sflush_r+0xf0>
 800f770:	28c00117 	ldw	r3,4(r5)
 800f774:	10820014 	ori	r2,r2,2048
 800f778:	2880030d 	sth	r2,12(r5)
 800f77c:	00c04b0e 	bge	zero,r3,800f8ac <__sflush_r+0x168>
 800f780:	8a000a17 	ldw	r8,40(r17)
 800f784:	40002326 	beq	r8,zero,800f814 <__sflush_r+0xd0>
 800f788:	9c000017 	ldw	r16,0(r19)
 800f78c:	10c4000c 	andi	r3,r2,4096
 800f790:	98000015 	stw	zero,0(r19)
 800f794:	18004826 	beq	r3,zero,800f8b8 <__sflush_r+0x174>
 800f798:	89801417 	ldw	r6,80(r17)
 800f79c:	10c0010c 	andi	r3,r2,4
 800f7a0:	18000626 	beq	r3,zero,800f7bc <__sflush_r+0x78>
 800f7a4:	88c00117 	ldw	r3,4(r17)
 800f7a8:	88800c17 	ldw	r2,48(r17)
 800f7ac:	30cdc83a 	sub	r6,r6,r3
 800f7b0:	10000226 	beq	r2,zero,800f7bc <__sflush_r+0x78>
 800f7b4:	88800f17 	ldw	r2,60(r17)
 800f7b8:	308dc83a 	sub	r6,r6,r2
 800f7bc:	89400717 	ldw	r5,28(r17)
 800f7c0:	000f883a 	mov	r7,zero
 800f7c4:	9809883a 	mov	r4,r19
 800f7c8:	403ee83a 	callr	r8
 800f7cc:	00ffffc4 	movi	r3,-1
 800f7d0:	10c04426 	beq	r2,r3,800f8e4 <__sflush_r+0x1a0>
 800f7d4:	88c0030b 	ldhu	r3,12(r17)
 800f7d8:	89000417 	ldw	r4,16(r17)
 800f7dc:	88000115 	stw	zero,4(r17)
 800f7e0:	197dffcc 	andi	r5,r3,63487
 800f7e4:	8940030d 	sth	r5,12(r17)
 800f7e8:	89000015 	stw	r4,0(r17)
 800f7ec:	18c4000c 	andi	r3,r3,4096
 800f7f0:	18002c1e 	bne	r3,zero,800f8a4 <__sflush_r+0x160>
 800f7f4:	89400c17 	ldw	r5,48(r17)
 800f7f8:	9c000015 	stw	r16,0(r19)
 800f7fc:	28000526 	beq	r5,zero,800f814 <__sflush_r+0xd0>
 800f800:	88801004 	addi	r2,r17,64
 800f804:	28800226 	beq	r5,r2,800f810 <__sflush_r+0xcc>
 800f808:	9809883a 	mov	r4,r19
 800f80c:	800fec00 	call	800fec0 <_free_r>
 800f810:	88000c15 	stw	zero,48(r17)
 800f814:	0005883a 	mov	r2,zero
 800f818:	dfc00417 	ldw	ra,16(sp)
 800f81c:	dcc00317 	ldw	r19,12(sp)
 800f820:	dc800217 	ldw	r18,8(sp)
 800f824:	dc400117 	ldw	r17,4(sp)
 800f828:	dc000017 	ldw	r16,0(sp)
 800f82c:	dec00504 	addi	sp,sp,20
 800f830:	f800283a 	ret
 800f834:	2c800417 	ldw	r18,16(r5)
 800f838:	903ff626 	beq	r18,zero,800f814 <__alt_data_end+0xfc00f814>
 800f83c:	2c000017 	ldw	r16,0(r5)
 800f840:	108000cc 	andi	r2,r2,3
 800f844:	2c800015 	stw	r18,0(r5)
 800f848:	84a1c83a 	sub	r16,r16,r18
 800f84c:	1000131e 	bne	r2,zero,800f89c <__sflush_r+0x158>
 800f850:	28800517 	ldw	r2,20(r5)
 800f854:	88800215 	stw	r2,8(r17)
 800f858:	04000316 	blt	zero,r16,800f868 <__sflush_r+0x124>
 800f85c:	003fed06 	br	800f814 <__alt_data_end+0xfc00f814>
 800f860:	90a5883a 	add	r18,r18,r2
 800f864:	043feb0e 	bge	zero,r16,800f814 <__alt_data_end+0xfc00f814>
 800f868:	88800917 	ldw	r2,36(r17)
 800f86c:	89400717 	ldw	r5,28(r17)
 800f870:	800f883a 	mov	r7,r16
 800f874:	900d883a 	mov	r6,r18
 800f878:	9809883a 	mov	r4,r19
 800f87c:	103ee83a 	callr	r2
 800f880:	80a1c83a 	sub	r16,r16,r2
 800f884:	00bff616 	blt	zero,r2,800f860 <__alt_data_end+0xfc00f860>
 800f888:	88c0030b 	ldhu	r3,12(r17)
 800f88c:	00bfffc4 	movi	r2,-1
 800f890:	18c01014 	ori	r3,r3,64
 800f894:	88c0030d 	sth	r3,12(r17)
 800f898:	003fdf06 	br	800f818 <__alt_data_end+0xfc00f818>
 800f89c:	0005883a 	mov	r2,zero
 800f8a0:	003fec06 	br	800f854 <__alt_data_end+0xfc00f854>
 800f8a4:	88801415 	stw	r2,80(r17)
 800f8a8:	003fd206 	br	800f7f4 <__alt_data_end+0xfc00f7f4>
 800f8ac:	28c00f17 	ldw	r3,60(r5)
 800f8b0:	00ffb316 	blt	zero,r3,800f780 <__alt_data_end+0xfc00f780>
 800f8b4:	003fd706 	br	800f814 <__alt_data_end+0xfc00f814>
 800f8b8:	89400717 	ldw	r5,28(r17)
 800f8bc:	000d883a 	mov	r6,zero
 800f8c0:	01c00044 	movi	r7,1
 800f8c4:	9809883a 	mov	r4,r19
 800f8c8:	403ee83a 	callr	r8
 800f8cc:	100d883a 	mov	r6,r2
 800f8d0:	00bfffc4 	movi	r2,-1
 800f8d4:	30801426 	beq	r6,r2,800f928 <__sflush_r+0x1e4>
 800f8d8:	8880030b 	ldhu	r2,12(r17)
 800f8dc:	8a000a17 	ldw	r8,40(r17)
 800f8e0:	003fae06 	br	800f79c <__alt_data_end+0xfc00f79c>
 800f8e4:	98c00017 	ldw	r3,0(r19)
 800f8e8:	183fba26 	beq	r3,zero,800f7d4 <__alt_data_end+0xfc00f7d4>
 800f8ec:	01000744 	movi	r4,29
 800f8f0:	19000626 	beq	r3,r4,800f90c <__sflush_r+0x1c8>
 800f8f4:	01000584 	movi	r4,22
 800f8f8:	19000426 	beq	r3,r4,800f90c <__sflush_r+0x1c8>
 800f8fc:	88c0030b 	ldhu	r3,12(r17)
 800f900:	18c01014 	ori	r3,r3,64
 800f904:	88c0030d 	sth	r3,12(r17)
 800f908:	003fc306 	br	800f818 <__alt_data_end+0xfc00f818>
 800f90c:	8880030b 	ldhu	r2,12(r17)
 800f910:	88c00417 	ldw	r3,16(r17)
 800f914:	88000115 	stw	zero,4(r17)
 800f918:	10bdffcc 	andi	r2,r2,63487
 800f91c:	8880030d 	sth	r2,12(r17)
 800f920:	88c00015 	stw	r3,0(r17)
 800f924:	003fb306 	br	800f7f4 <__alt_data_end+0xfc00f7f4>
 800f928:	98800017 	ldw	r2,0(r19)
 800f92c:	103fea26 	beq	r2,zero,800f8d8 <__alt_data_end+0xfc00f8d8>
 800f930:	00c00744 	movi	r3,29
 800f934:	10c00226 	beq	r2,r3,800f940 <__sflush_r+0x1fc>
 800f938:	00c00584 	movi	r3,22
 800f93c:	10c0031e 	bne	r2,r3,800f94c <__sflush_r+0x208>
 800f940:	9c000015 	stw	r16,0(r19)
 800f944:	0005883a 	mov	r2,zero
 800f948:	003fb306 	br	800f818 <__alt_data_end+0xfc00f818>
 800f94c:	88c0030b 	ldhu	r3,12(r17)
 800f950:	3005883a 	mov	r2,r6
 800f954:	18c01014 	ori	r3,r3,64
 800f958:	88c0030d 	sth	r3,12(r17)
 800f95c:	003fae06 	br	800f818 <__alt_data_end+0xfc00f818>

0800f960 <_fflush_r>:
 800f960:	defffd04 	addi	sp,sp,-12
 800f964:	dc000115 	stw	r16,4(sp)
 800f968:	dfc00215 	stw	ra,8(sp)
 800f96c:	2021883a 	mov	r16,r4
 800f970:	20000226 	beq	r4,zero,800f97c <_fflush_r+0x1c>
 800f974:	20800e17 	ldw	r2,56(r4)
 800f978:	10000c26 	beq	r2,zero,800f9ac <_fflush_r+0x4c>
 800f97c:	2880030f 	ldh	r2,12(r5)
 800f980:	1000051e 	bne	r2,zero,800f998 <_fflush_r+0x38>
 800f984:	0005883a 	mov	r2,zero
 800f988:	dfc00217 	ldw	ra,8(sp)
 800f98c:	dc000117 	ldw	r16,4(sp)
 800f990:	dec00304 	addi	sp,sp,12
 800f994:	f800283a 	ret
 800f998:	8009883a 	mov	r4,r16
 800f99c:	dfc00217 	ldw	ra,8(sp)
 800f9a0:	dc000117 	ldw	r16,4(sp)
 800f9a4:	dec00304 	addi	sp,sp,12
 800f9a8:	800f7441 	jmpi	800f744 <__sflush_r>
 800f9ac:	d9400015 	stw	r5,0(sp)
 800f9b0:	800fd4c0 	call	800fd4c <__sinit>
 800f9b4:	d9400017 	ldw	r5,0(sp)
 800f9b8:	003ff006 	br	800f97c <__alt_data_end+0xfc00f97c>

0800f9bc <fflush>:
 800f9bc:	20000526 	beq	r4,zero,800f9d4 <fflush+0x18>
 800f9c0:	008200b4 	movhi	r2,2050
 800f9c4:	10b2dd04 	addi	r2,r2,-13452
 800f9c8:	200b883a 	mov	r5,r4
 800f9cc:	11000017 	ldw	r4,0(r2)
 800f9d0:	800f9601 	jmpi	800f960 <_fflush_r>
 800f9d4:	008200b4 	movhi	r2,2050
 800f9d8:	10b2dc04 	addi	r2,r2,-13456
 800f9dc:	11000017 	ldw	r4,0(r2)
 800f9e0:	01420074 	movhi	r5,2049
 800f9e4:	297e5804 	addi	r5,r5,-1696
 800f9e8:	801075c1 	jmpi	801075c <_fwalk_reent>

0800f9ec <__fp_unlock>:
 800f9ec:	0005883a 	mov	r2,zero
 800f9f0:	f800283a 	ret

0800f9f4 <_cleanup_r>:
 800f9f4:	01420074 	movhi	r5,2049
 800f9f8:	29522104 	addi	r5,r5,18564
 800f9fc:	801075c1 	jmpi	801075c <_fwalk_reent>

0800fa00 <__sinit.part.1>:
 800fa00:	defff704 	addi	sp,sp,-36
 800fa04:	00c20074 	movhi	r3,2049
 800fa08:	dfc00815 	stw	ra,32(sp)
 800fa0c:	ddc00715 	stw	r23,28(sp)
 800fa10:	dd800615 	stw	r22,24(sp)
 800fa14:	dd400515 	stw	r21,20(sp)
 800fa18:	dd000415 	stw	r20,16(sp)
 800fa1c:	dcc00315 	stw	r19,12(sp)
 800fa20:	dc800215 	stw	r18,8(sp)
 800fa24:	dc400115 	stw	r17,4(sp)
 800fa28:	dc000015 	stw	r16,0(sp)
 800fa2c:	18fe7d04 	addi	r3,r3,-1548
 800fa30:	24000117 	ldw	r16,4(r4)
 800fa34:	20c00f15 	stw	r3,60(r4)
 800fa38:	2080bb04 	addi	r2,r4,748
 800fa3c:	00c000c4 	movi	r3,3
 800fa40:	20c0b915 	stw	r3,740(r4)
 800fa44:	2080ba15 	stw	r2,744(r4)
 800fa48:	2000b815 	stw	zero,736(r4)
 800fa4c:	05c00204 	movi	r23,8
 800fa50:	00800104 	movi	r2,4
 800fa54:	2025883a 	mov	r18,r4
 800fa58:	b80d883a 	mov	r6,r23
 800fa5c:	81001704 	addi	r4,r16,92
 800fa60:	000b883a 	mov	r5,zero
 800fa64:	80000015 	stw	zero,0(r16)
 800fa68:	80000115 	stw	zero,4(r16)
 800fa6c:	80000215 	stw	zero,8(r16)
 800fa70:	8080030d 	sth	r2,12(r16)
 800fa74:	80001915 	stw	zero,100(r16)
 800fa78:	8000038d 	sth	zero,14(r16)
 800fa7c:	80000415 	stw	zero,16(r16)
 800fa80:	80000515 	stw	zero,20(r16)
 800fa84:	80000615 	stw	zero,24(r16)
 800fa88:	801164c0 	call	801164c <memset>
 800fa8c:	05820074 	movhi	r22,2049
 800fa90:	94400217 	ldw	r17,8(r18)
 800fa94:	05420074 	movhi	r21,2049
 800fa98:	05020074 	movhi	r20,2049
 800fa9c:	04c20074 	movhi	r19,2049
 800faa0:	b58b7904 	addi	r22,r22,11748
 800faa4:	ad4b9004 	addi	r21,r21,11840
 800faa8:	a50baf04 	addi	r20,r20,11964
 800faac:	9ccbc604 	addi	r19,r19,12056
 800fab0:	85800815 	stw	r22,32(r16)
 800fab4:	85400915 	stw	r21,36(r16)
 800fab8:	85000a15 	stw	r20,40(r16)
 800fabc:	84c00b15 	stw	r19,44(r16)
 800fac0:	84000715 	stw	r16,28(r16)
 800fac4:	00800284 	movi	r2,10
 800fac8:	8880030d 	sth	r2,12(r17)
 800facc:	00800044 	movi	r2,1
 800fad0:	b80d883a 	mov	r6,r23
 800fad4:	89001704 	addi	r4,r17,92
 800fad8:	000b883a 	mov	r5,zero
 800fadc:	88000015 	stw	zero,0(r17)
 800fae0:	88000115 	stw	zero,4(r17)
 800fae4:	88000215 	stw	zero,8(r17)
 800fae8:	88001915 	stw	zero,100(r17)
 800faec:	8880038d 	sth	r2,14(r17)
 800faf0:	88000415 	stw	zero,16(r17)
 800faf4:	88000515 	stw	zero,20(r17)
 800faf8:	88000615 	stw	zero,24(r17)
 800fafc:	801164c0 	call	801164c <memset>
 800fb00:	94000317 	ldw	r16,12(r18)
 800fb04:	00800484 	movi	r2,18
 800fb08:	8c400715 	stw	r17,28(r17)
 800fb0c:	8d800815 	stw	r22,32(r17)
 800fb10:	8d400915 	stw	r21,36(r17)
 800fb14:	8d000a15 	stw	r20,40(r17)
 800fb18:	8cc00b15 	stw	r19,44(r17)
 800fb1c:	8080030d 	sth	r2,12(r16)
 800fb20:	00800084 	movi	r2,2
 800fb24:	80000015 	stw	zero,0(r16)
 800fb28:	80000115 	stw	zero,4(r16)
 800fb2c:	80000215 	stw	zero,8(r16)
 800fb30:	80001915 	stw	zero,100(r16)
 800fb34:	8080038d 	sth	r2,14(r16)
 800fb38:	80000415 	stw	zero,16(r16)
 800fb3c:	80000515 	stw	zero,20(r16)
 800fb40:	80000615 	stw	zero,24(r16)
 800fb44:	b80d883a 	mov	r6,r23
 800fb48:	000b883a 	mov	r5,zero
 800fb4c:	81001704 	addi	r4,r16,92
 800fb50:	801164c0 	call	801164c <memset>
 800fb54:	00800044 	movi	r2,1
 800fb58:	84000715 	stw	r16,28(r16)
 800fb5c:	85800815 	stw	r22,32(r16)
 800fb60:	85400915 	stw	r21,36(r16)
 800fb64:	85000a15 	stw	r20,40(r16)
 800fb68:	84c00b15 	stw	r19,44(r16)
 800fb6c:	90800e15 	stw	r2,56(r18)
 800fb70:	dfc00817 	ldw	ra,32(sp)
 800fb74:	ddc00717 	ldw	r23,28(sp)
 800fb78:	dd800617 	ldw	r22,24(sp)
 800fb7c:	dd400517 	ldw	r21,20(sp)
 800fb80:	dd000417 	ldw	r20,16(sp)
 800fb84:	dcc00317 	ldw	r19,12(sp)
 800fb88:	dc800217 	ldw	r18,8(sp)
 800fb8c:	dc400117 	ldw	r17,4(sp)
 800fb90:	dc000017 	ldw	r16,0(sp)
 800fb94:	dec00904 	addi	sp,sp,36
 800fb98:	f800283a 	ret

0800fb9c <__fp_lock>:
 800fb9c:	0005883a 	mov	r2,zero
 800fba0:	f800283a 	ret

0800fba4 <__sfmoreglue>:
 800fba4:	defffc04 	addi	sp,sp,-16
 800fba8:	dc800215 	stw	r18,8(sp)
 800fbac:	2825883a 	mov	r18,r5
 800fbb0:	dc000015 	stw	r16,0(sp)
 800fbb4:	01401a04 	movi	r5,104
 800fbb8:	2021883a 	mov	r16,r4
 800fbbc:	913fffc4 	addi	r4,r18,-1
 800fbc0:	dfc00315 	stw	ra,12(sp)
 800fbc4:	dc400115 	stw	r17,4(sp)
 800fbc8:	800832c0 	call	800832c <__mulsi3>
 800fbcc:	8009883a 	mov	r4,r16
 800fbd0:	11401d04 	addi	r5,r2,116
 800fbd4:	1023883a 	mov	r17,r2
 800fbd8:	8010ab80 	call	8010ab8 <_malloc_r>
 800fbdc:	1021883a 	mov	r16,r2
 800fbe0:	10000726 	beq	r2,zero,800fc00 <__sfmoreglue+0x5c>
 800fbe4:	11000304 	addi	r4,r2,12
 800fbe8:	10000015 	stw	zero,0(r2)
 800fbec:	14800115 	stw	r18,4(r2)
 800fbf0:	11000215 	stw	r4,8(r2)
 800fbf4:	89801a04 	addi	r6,r17,104
 800fbf8:	000b883a 	mov	r5,zero
 800fbfc:	801164c0 	call	801164c <memset>
 800fc00:	8005883a 	mov	r2,r16
 800fc04:	dfc00317 	ldw	ra,12(sp)
 800fc08:	dc800217 	ldw	r18,8(sp)
 800fc0c:	dc400117 	ldw	r17,4(sp)
 800fc10:	dc000017 	ldw	r16,0(sp)
 800fc14:	dec00404 	addi	sp,sp,16
 800fc18:	f800283a 	ret

0800fc1c <__sfp>:
 800fc1c:	defffb04 	addi	sp,sp,-20
 800fc20:	dc000015 	stw	r16,0(sp)
 800fc24:	040200b4 	movhi	r16,2050
 800fc28:	8432dc04 	addi	r16,r16,-13456
 800fc2c:	dcc00315 	stw	r19,12(sp)
 800fc30:	2027883a 	mov	r19,r4
 800fc34:	81000017 	ldw	r4,0(r16)
 800fc38:	dfc00415 	stw	ra,16(sp)
 800fc3c:	dc800215 	stw	r18,8(sp)
 800fc40:	20800e17 	ldw	r2,56(r4)
 800fc44:	dc400115 	stw	r17,4(sp)
 800fc48:	1000021e 	bne	r2,zero,800fc54 <__sfp+0x38>
 800fc4c:	800fa000 	call	800fa00 <__sinit.part.1>
 800fc50:	81000017 	ldw	r4,0(r16)
 800fc54:	2480b804 	addi	r18,r4,736
 800fc58:	047fffc4 	movi	r17,-1
 800fc5c:	91000117 	ldw	r4,4(r18)
 800fc60:	94000217 	ldw	r16,8(r18)
 800fc64:	213fffc4 	addi	r4,r4,-1
 800fc68:	20000a16 	blt	r4,zero,800fc94 <__sfp+0x78>
 800fc6c:	8080030f 	ldh	r2,12(r16)
 800fc70:	10000c26 	beq	r2,zero,800fca4 <__sfp+0x88>
 800fc74:	80c01d04 	addi	r3,r16,116
 800fc78:	00000206 	br	800fc84 <__sfp+0x68>
 800fc7c:	18bfe60f 	ldh	r2,-104(r3)
 800fc80:	10000826 	beq	r2,zero,800fca4 <__sfp+0x88>
 800fc84:	213fffc4 	addi	r4,r4,-1
 800fc88:	1c3ffd04 	addi	r16,r3,-12
 800fc8c:	18c01a04 	addi	r3,r3,104
 800fc90:	247ffa1e 	bne	r4,r17,800fc7c <__alt_data_end+0xfc00fc7c>
 800fc94:	90800017 	ldw	r2,0(r18)
 800fc98:	10001d26 	beq	r2,zero,800fd10 <__sfp+0xf4>
 800fc9c:	1025883a 	mov	r18,r2
 800fca0:	003fee06 	br	800fc5c <__alt_data_end+0xfc00fc5c>
 800fca4:	00bfffc4 	movi	r2,-1
 800fca8:	8080038d 	sth	r2,14(r16)
 800fcac:	00800044 	movi	r2,1
 800fcb0:	8080030d 	sth	r2,12(r16)
 800fcb4:	80001915 	stw	zero,100(r16)
 800fcb8:	80000015 	stw	zero,0(r16)
 800fcbc:	80000215 	stw	zero,8(r16)
 800fcc0:	80000115 	stw	zero,4(r16)
 800fcc4:	80000415 	stw	zero,16(r16)
 800fcc8:	80000515 	stw	zero,20(r16)
 800fccc:	80000615 	stw	zero,24(r16)
 800fcd0:	01800204 	movi	r6,8
 800fcd4:	000b883a 	mov	r5,zero
 800fcd8:	81001704 	addi	r4,r16,92
 800fcdc:	801164c0 	call	801164c <memset>
 800fce0:	8005883a 	mov	r2,r16
 800fce4:	80000c15 	stw	zero,48(r16)
 800fce8:	80000d15 	stw	zero,52(r16)
 800fcec:	80001115 	stw	zero,68(r16)
 800fcf0:	80001215 	stw	zero,72(r16)
 800fcf4:	dfc00417 	ldw	ra,16(sp)
 800fcf8:	dcc00317 	ldw	r19,12(sp)
 800fcfc:	dc800217 	ldw	r18,8(sp)
 800fd00:	dc400117 	ldw	r17,4(sp)
 800fd04:	dc000017 	ldw	r16,0(sp)
 800fd08:	dec00504 	addi	sp,sp,20
 800fd0c:	f800283a 	ret
 800fd10:	01400104 	movi	r5,4
 800fd14:	9809883a 	mov	r4,r19
 800fd18:	800fba40 	call	800fba4 <__sfmoreglue>
 800fd1c:	90800015 	stw	r2,0(r18)
 800fd20:	103fde1e 	bne	r2,zero,800fc9c <__alt_data_end+0xfc00fc9c>
 800fd24:	00800304 	movi	r2,12
 800fd28:	98800015 	stw	r2,0(r19)
 800fd2c:	0005883a 	mov	r2,zero
 800fd30:	003ff006 	br	800fcf4 <__alt_data_end+0xfc00fcf4>

0800fd34 <_cleanup>:
 800fd34:	008200b4 	movhi	r2,2050
 800fd38:	10b2dc04 	addi	r2,r2,-13456
 800fd3c:	11000017 	ldw	r4,0(r2)
 800fd40:	01420074 	movhi	r5,2049
 800fd44:	29522104 	addi	r5,r5,18564
 800fd48:	801075c1 	jmpi	801075c <_fwalk_reent>

0800fd4c <__sinit>:
 800fd4c:	20800e17 	ldw	r2,56(r4)
 800fd50:	10000126 	beq	r2,zero,800fd58 <__sinit+0xc>
 800fd54:	f800283a 	ret
 800fd58:	800fa001 	jmpi	800fa00 <__sinit.part.1>

0800fd5c <__sfp_lock_acquire>:
 800fd5c:	f800283a 	ret

0800fd60 <__sfp_lock_release>:
 800fd60:	f800283a 	ret

0800fd64 <__sinit_lock_acquire>:
 800fd64:	f800283a 	ret

0800fd68 <__sinit_lock_release>:
 800fd68:	f800283a 	ret

0800fd6c <__fp_lock_all>:
 800fd6c:	008200b4 	movhi	r2,2050
 800fd70:	10b2dd04 	addi	r2,r2,-13452
 800fd74:	11000017 	ldw	r4,0(r2)
 800fd78:	01420074 	movhi	r5,2049
 800fd7c:	297ee704 	addi	r5,r5,-1124
 800fd80:	80106981 	jmpi	8010698 <_fwalk>

0800fd84 <__fp_unlock_all>:
 800fd84:	008200b4 	movhi	r2,2050
 800fd88:	10b2dd04 	addi	r2,r2,-13452
 800fd8c:	11000017 	ldw	r4,0(r2)
 800fd90:	01420074 	movhi	r5,2049
 800fd94:	297e7b04 	addi	r5,r5,-1556
 800fd98:	80106981 	jmpi	8010698 <_fwalk>

0800fd9c <_malloc_trim_r>:
 800fd9c:	defffb04 	addi	sp,sp,-20
 800fda0:	dcc00315 	stw	r19,12(sp)
 800fda4:	04c200b4 	movhi	r19,2050
 800fda8:	dc800215 	stw	r18,8(sp)
 800fdac:	dc400115 	stw	r17,4(sp)
 800fdb0:	dc000015 	stw	r16,0(sp)
 800fdb4:	dfc00415 	stw	ra,16(sp)
 800fdb8:	2821883a 	mov	r16,r5
 800fdbc:	9ced4404 	addi	r19,r19,-19184
 800fdc0:	2025883a 	mov	r18,r4
 800fdc4:	80162a80 	call	80162a8 <__malloc_lock>
 800fdc8:	98800217 	ldw	r2,8(r19)
 800fdcc:	14400117 	ldw	r17,4(r2)
 800fdd0:	00bfff04 	movi	r2,-4
 800fdd4:	88a2703a 	and	r17,r17,r2
 800fdd8:	8c21c83a 	sub	r16,r17,r16
 800fddc:	8403fbc4 	addi	r16,r16,4079
 800fde0:	8020d33a 	srli	r16,r16,12
 800fde4:	0083ffc4 	movi	r2,4095
 800fde8:	843fffc4 	addi	r16,r16,-1
 800fdec:	8020933a 	slli	r16,r16,12
 800fdf0:	1400060e 	bge	r2,r16,800fe0c <_malloc_trim_r+0x70>
 800fdf4:	000b883a 	mov	r5,zero
 800fdf8:	9009883a 	mov	r4,r18
 800fdfc:	8012d900 	call	8012d90 <_sbrk_r>
 800fe00:	98c00217 	ldw	r3,8(r19)
 800fe04:	1c47883a 	add	r3,r3,r17
 800fe08:	10c00a26 	beq	r2,r3,800fe34 <_malloc_trim_r+0x98>
 800fe0c:	9009883a 	mov	r4,r18
 800fe10:	80162cc0 	call	80162cc <__malloc_unlock>
 800fe14:	0005883a 	mov	r2,zero
 800fe18:	dfc00417 	ldw	ra,16(sp)
 800fe1c:	dcc00317 	ldw	r19,12(sp)
 800fe20:	dc800217 	ldw	r18,8(sp)
 800fe24:	dc400117 	ldw	r17,4(sp)
 800fe28:	dc000017 	ldw	r16,0(sp)
 800fe2c:	dec00504 	addi	sp,sp,20
 800fe30:	f800283a 	ret
 800fe34:	040bc83a 	sub	r5,zero,r16
 800fe38:	9009883a 	mov	r4,r18
 800fe3c:	8012d900 	call	8012d90 <_sbrk_r>
 800fe40:	00ffffc4 	movi	r3,-1
 800fe44:	10c00d26 	beq	r2,r3,800fe7c <_malloc_trim_r+0xe0>
 800fe48:	00c200b4 	movhi	r3,2050
 800fe4c:	18fa4a04 	addi	r3,r3,-5848
 800fe50:	18800017 	ldw	r2,0(r3)
 800fe54:	99000217 	ldw	r4,8(r19)
 800fe58:	8c23c83a 	sub	r17,r17,r16
 800fe5c:	8c400054 	ori	r17,r17,1
 800fe60:	1421c83a 	sub	r16,r2,r16
 800fe64:	24400115 	stw	r17,4(r4)
 800fe68:	9009883a 	mov	r4,r18
 800fe6c:	1c000015 	stw	r16,0(r3)
 800fe70:	80162cc0 	call	80162cc <__malloc_unlock>
 800fe74:	00800044 	movi	r2,1
 800fe78:	003fe706 	br	800fe18 <__alt_data_end+0xfc00fe18>
 800fe7c:	000b883a 	mov	r5,zero
 800fe80:	9009883a 	mov	r4,r18
 800fe84:	8012d900 	call	8012d90 <_sbrk_r>
 800fe88:	99000217 	ldw	r4,8(r19)
 800fe8c:	014003c4 	movi	r5,15
 800fe90:	1107c83a 	sub	r3,r2,r4
 800fe94:	28ffdd0e 	bge	r5,r3,800fe0c <__alt_data_end+0xfc00fe0c>
 800fe98:	014200b4 	movhi	r5,2050
 800fe9c:	2972df04 	addi	r5,r5,-13444
 800fea0:	29400017 	ldw	r5,0(r5)
 800fea4:	18c00054 	ori	r3,r3,1
 800fea8:	20c00115 	stw	r3,4(r4)
 800feac:	00c200b4 	movhi	r3,2050
 800feb0:	1145c83a 	sub	r2,r2,r5
 800feb4:	18fa4a04 	addi	r3,r3,-5848
 800feb8:	18800015 	stw	r2,0(r3)
 800febc:	003fd306 	br	800fe0c <__alt_data_end+0xfc00fe0c>

0800fec0 <_free_r>:
 800fec0:	28004126 	beq	r5,zero,800ffc8 <_free_r+0x108>
 800fec4:	defffd04 	addi	sp,sp,-12
 800fec8:	dc400115 	stw	r17,4(sp)
 800fecc:	dc000015 	stw	r16,0(sp)
 800fed0:	2023883a 	mov	r17,r4
 800fed4:	2821883a 	mov	r16,r5
 800fed8:	dfc00215 	stw	ra,8(sp)
 800fedc:	80162a80 	call	80162a8 <__malloc_lock>
 800fee0:	81ffff17 	ldw	r7,-4(r16)
 800fee4:	00bfff84 	movi	r2,-2
 800fee8:	010200b4 	movhi	r4,2050
 800feec:	81bffe04 	addi	r6,r16,-8
 800fef0:	3884703a 	and	r2,r7,r2
 800fef4:	212d4404 	addi	r4,r4,-19184
 800fef8:	308b883a 	add	r5,r6,r2
 800fefc:	2a400117 	ldw	r9,4(r5)
 800ff00:	22000217 	ldw	r8,8(r4)
 800ff04:	00ffff04 	movi	r3,-4
 800ff08:	48c6703a 	and	r3,r9,r3
 800ff0c:	2a005726 	beq	r5,r8,801006c <_free_r+0x1ac>
 800ff10:	28c00115 	stw	r3,4(r5)
 800ff14:	39c0004c 	andi	r7,r7,1
 800ff18:	3800091e 	bne	r7,zero,800ff40 <_free_r+0x80>
 800ff1c:	823ffe17 	ldw	r8,-8(r16)
 800ff20:	22400204 	addi	r9,r4,8
 800ff24:	320dc83a 	sub	r6,r6,r8
 800ff28:	31c00217 	ldw	r7,8(r6)
 800ff2c:	1205883a 	add	r2,r2,r8
 800ff30:	3a406526 	beq	r7,r9,80100c8 <_free_r+0x208>
 800ff34:	32000317 	ldw	r8,12(r6)
 800ff38:	3a000315 	stw	r8,12(r7)
 800ff3c:	41c00215 	stw	r7,8(r8)
 800ff40:	28cf883a 	add	r7,r5,r3
 800ff44:	39c00117 	ldw	r7,4(r7)
 800ff48:	39c0004c 	andi	r7,r7,1
 800ff4c:	38003a26 	beq	r7,zero,8010038 <_free_r+0x178>
 800ff50:	10c00054 	ori	r3,r2,1
 800ff54:	30c00115 	stw	r3,4(r6)
 800ff58:	3087883a 	add	r3,r6,r2
 800ff5c:	18800015 	stw	r2,0(r3)
 800ff60:	00c07fc4 	movi	r3,511
 800ff64:	18801936 	bltu	r3,r2,800ffcc <_free_r+0x10c>
 800ff68:	1004d0fa 	srli	r2,r2,3
 800ff6c:	01c00044 	movi	r7,1
 800ff70:	21400117 	ldw	r5,4(r4)
 800ff74:	10c00044 	addi	r3,r2,1
 800ff78:	18c7883a 	add	r3,r3,r3
 800ff7c:	1005d0ba 	srai	r2,r2,2
 800ff80:	18c7883a 	add	r3,r3,r3
 800ff84:	18c7883a 	add	r3,r3,r3
 800ff88:	1907883a 	add	r3,r3,r4
 800ff8c:	3884983a 	sll	r2,r7,r2
 800ff90:	19c00017 	ldw	r7,0(r3)
 800ff94:	1a3ffe04 	addi	r8,r3,-8
 800ff98:	1144b03a 	or	r2,r2,r5
 800ff9c:	32000315 	stw	r8,12(r6)
 800ffa0:	31c00215 	stw	r7,8(r6)
 800ffa4:	20800115 	stw	r2,4(r4)
 800ffa8:	19800015 	stw	r6,0(r3)
 800ffac:	39800315 	stw	r6,12(r7)
 800ffb0:	8809883a 	mov	r4,r17
 800ffb4:	dfc00217 	ldw	ra,8(sp)
 800ffb8:	dc400117 	ldw	r17,4(sp)
 800ffbc:	dc000017 	ldw	r16,0(sp)
 800ffc0:	dec00304 	addi	sp,sp,12
 800ffc4:	80162cc1 	jmpi	80162cc <__malloc_unlock>
 800ffc8:	f800283a 	ret
 800ffcc:	100ad27a 	srli	r5,r2,9
 800ffd0:	00c00104 	movi	r3,4
 800ffd4:	19404a36 	bltu	r3,r5,8010100 <_free_r+0x240>
 800ffd8:	100ad1ba 	srli	r5,r2,6
 800ffdc:	28c00e44 	addi	r3,r5,57
 800ffe0:	18c7883a 	add	r3,r3,r3
 800ffe4:	29400e04 	addi	r5,r5,56
 800ffe8:	18c7883a 	add	r3,r3,r3
 800ffec:	18c7883a 	add	r3,r3,r3
 800fff0:	1909883a 	add	r4,r3,r4
 800fff4:	20c00017 	ldw	r3,0(r4)
 800fff8:	01c200b4 	movhi	r7,2050
 800fffc:	213ffe04 	addi	r4,r4,-8
 8010000:	39ed4404 	addi	r7,r7,-19184
 8010004:	20c04426 	beq	r4,r3,8010118 <_free_r+0x258>
 8010008:	01ffff04 	movi	r7,-4
 801000c:	19400117 	ldw	r5,4(r3)
 8010010:	29ca703a 	and	r5,r5,r7
 8010014:	1140022e 	bgeu	r2,r5,8010020 <_free_r+0x160>
 8010018:	18c00217 	ldw	r3,8(r3)
 801001c:	20fffb1e 	bne	r4,r3,801000c <__alt_data_end+0xfc01000c>
 8010020:	19000317 	ldw	r4,12(r3)
 8010024:	31000315 	stw	r4,12(r6)
 8010028:	30c00215 	stw	r3,8(r6)
 801002c:	21800215 	stw	r6,8(r4)
 8010030:	19800315 	stw	r6,12(r3)
 8010034:	003fde06 	br	800ffb0 <__alt_data_end+0xfc00ffb0>
 8010038:	29c00217 	ldw	r7,8(r5)
 801003c:	10c5883a 	add	r2,r2,r3
 8010040:	00c200b4 	movhi	r3,2050
 8010044:	18ed4604 	addi	r3,r3,-19176
 8010048:	38c03b26 	beq	r7,r3,8010138 <_free_r+0x278>
 801004c:	2a000317 	ldw	r8,12(r5)
 8010050:	11400054 	ori	r5,r2,1
 8010054:	3087883a 	add	r3,r6,r2
 8010058:	3a000315 	stw	r8,12(r7)
 801005c:	41c00215 	stw	r7,8(r8)
 8010060:	31400115 	stw	r5,4(r6)
 8010064:	18800015 	stw	r2,0(r3)
 8010068:	003fbd06 	br	800ff60 <__alt_data_end+0xfc00ff60>
 801006c:	39c0004c 	andi	r7,r7,1
 8010070:	10c5883a 	add	r2,r2,r3
 8010074:	3800071e 	bne	r7,zero,8010094 <_free_r+0x1d4>
 8010078:	81fffe17 	ldw	r7,-8(r16)
 801007c:	31cdc83a 	sub	r6,r6,r7
 8010080:	30c00317 	ldw	r3,12(r6)
 8010084:	31400217 	ldw	r5,8(r6)
 8010088:	11c5883a 	add	r2,r2,r7
 801008c:	28c00315 	stw	r3,12(r5)
 8010090:	19400215 	stw	r5,8(r3)
 8010094:	10c00054 	ori	r3,r2,1
 8010098:	30c00115 	stw	r3,4(r6)
 801009c:	00c200b4 	movhi	r3,2050
 80100a0:	18f2e004 	addi	r3,r3,-13440
 80100a4:	18c00017 	ldw	r3,0(r3)
 80100a8:	21800215 	stw	r6,8(r4)
 80100ac:	10ffc036 	bltu	r2,r3,800ffb0 <__alt_data_end+0xfc00ffb0>
 80100b0:	008200b4 	movhi	r2,2050
 80100b4:	10ba3704 	addi	r2,r2,-5924
 80100b8:	11400017 	ldw	r5,0(r2)
 80100bc:	8809883a 	mov	r4,r17
 80100c0:	800fd9c0 	call	800fd9c <_malloc_trim_r>
 80100c4:	003fba06 	br	800ffb0 <__alt_data_end+0xfc00ffb0>
 80100c8:	28c9883a 	add	r4,r5,r3
 80100cc:	21000117 	ldw	r4,4(r4)
 80100d0:	2100004c 	andi	r4,r4,1
 80100d4:	2000391e 	bne	r4,zero,80101bc <_free_r+0x2fc>
 80100d8:	29c00217 	ldw	r7,8(r5)
 80100dc:	29000317 	ldw	r4,12(r5)
 80100e0:	1885883a 	add	r2,r3,r2
 80100e4:	10c00054 	ori	r3,r2,1
 80100e8:	39000315 	stw	r4,12(r7)
 80100ec:	21c00215 	stw	r7,8(r4)
 80100f0:	30c00115 	stw	r3,4(r6)
 80100f4:	308d883a 	add	r6,r6,r2
 80100f8:	30800015 	stw	r2,0(r6)
 80100fc:	003fac06 	br	800ffb0 <__alt_data_end+0xfc00ffb0>
 8010100:	00c00504 	movi	r3,20
 8010104:	19401536 	bltu	r3,r5,801015c <_free_r+0x29c>
 8010108:	28c01704 	addi	r3,r5,92
 801010c:	18c7883a 	add	r3,r3,r3
 8010110:	294016c4 	addi	r5,r5,91
 8010114:	003fb406 	br	800ffe8 <__alt_data_end+0xfc00ffe8>
 8010118:	280bd0ba 	srai	r5,r5,2
 801011c:	00c00044 	movi	r3,1
 8010120:	38800117 	ldw	r2,4(r7)
 8010124:	194a983a 	sll	r5,r3,r5
 8010128:	2007883a 	mov	r3,r4
 801012c:	2884b03a 	or	r2,r5,r2
 8010130:	38800115 	stw	r2,4(r7)
 8010134:	003fbb06 	br	8010024 <__alt_data_end+0xfc010024>
 8010138:	21800515 	stw	r6,20(r4)
 801013c:	21800415 	stw	r6,16(r4)
 8010140:	10c00054 	ori	r3,r2,1
 8010144:	31c00315 	stw	r7,12(r6)
 8010148:	31c00215 	stw	r7,8(r6)
 801014c:	30c00115 	stw	r3,4(r6)
 8010150:	308d883a 	add	r6,r6,r2
 8010154:	30800015 	stw	r2,0(r6)
 8010158:	003f9506 	br	800ffb0 <__alt_data_end+0xfc00ffb0>
 801015c:	00c01504 	movi	r3,84
 8010160:	19400536 	bltu	r3,r5,8010178 <_free_r+0x2b8>
 8010164:	100ad33a 	srli	r5,r2,12
 8010168:	28c01bc4 	addi	r3,r5,111
 801016c:	18c7883a 	add	r3,r3,r3
 8010170:	29401b84 	addi	r5,r5,110
 8010174:	003f9c06 	br	800ffe8 <__alt_data_end+0xfc00ffe8>
 8010178:	00c05504 	movi	r3,340
 801017c:	19400536 	bltu	r3,r5,8010194 <_free_r+0x2d4>
 8010180:	100ad3fa 	srli	r5,r2,15
 8010184:	28c01e04 	addi	r3,r5,120
 8010188:	18c7883a 	add	r3,r3,r3
 801018c:	29401dc4 	addi	r5,r5,119
 8010190:	003f9506 	br	800ffe8 <__alt_data_end+0xfc00ffe8>
 8010194:	00c15504 	movi	r3,1364
 8010198:	19400536 	bltu	r3,r5,80101b0 <_free_r+0x2f0>
 801019c:	100ad4ba 	srli	r5,r2,18
 80101a0:	28c01f44 	addi	r3,r5,125
 80101a4:	18c7883a 	add	r3,r3,r3
 80101a8:	29401f04 	addi	r5,r5,124
 80101ac:	003f8e06 	br	800ffe8 <__alt_data_end+0xfc00ffe8>
 80101b0:	00c03f84 	movi	r3,254
 80101b4:	01401f84 	movi	r5,126
 80101b8:	003f8b06 	br	800ffe8 <__alt_data_end+0xfc00ffe8>
 80101bc:	10c00054 	ori	r3,r2,1
 80101c0:	30c00115 	stw	r3,4(r6)
 80101c4:	308d883a 	add	r6,r6,r2
 80101c8:	30800015 	stw	r2,0(r6)
 80101cc:	003f7806 	br	800ffb0 <__alt_data_end+0xfc00ffb0>

080101d0 <__sfvwrite_r>:
 80101d0:	30800217 	ldw	r2,8(r6)
 80101d4:	10006726 	beq	r2,zero,8010374 <__sfvwrite_r+0x1a4>
 80101d8:	28c0030b 	ldhu	r3,12(r5)
 80101dc:	defff404 	addi	sp,sp,-48
 80101e0:	dd400715 	stw	r21,28(sp)
 80101e4:	dd000615 	stw	r20,24(sp)
 80101e8:	dc000215 	stw	r16,8(sp)
 80101ec:	dfc00b15 	stw	ra,44(sp)
 80101f0:	df000a15 	stw	fp,40(sp)
 80101f4:	ddc00915 	stw	r23,36(sp)
 80101f8:	dd800815 	stw	r22,32(sp)
 80101fc:	dcc00515 	stw	r19,20(sp)
 8010200:	dc800415 	stw	r18,16(sp)
 8010204:	dc400315 	stw	r17,12(sp)
 8010208:	1880020c 	andi	r2,r3,8
 801020c:	2821883a 	mov	r16,r5
 8010210:	202b883a 	mov	r21,r4
 8010214:	3029883a 	mov	r20,r6
 8010218:	10002726 	beq	r2,zero,80102b8 <__sfvwrite_r+0xe8>
 801021c:	28800417 	ldw	r2,16(r5)
 8010220:	10002526 	beq	r2,zero,80102b8 <__sfvwrite_r+0xe8>
 8010224:	1880008c 	andi	r2,r3,2
 8010228:	a4400017 	ldw	r17,0(r20)
 801022c:	10002a26 	beq	r2,zero,80102d8 <__sfvwrite_r+0x108>
 8010230:	05a00034 	movhi	r22,32768
 8010234:	0027883a 	mov	r19,zero
 8010238:	0025883a 	mov	r18,zero
 801023c:	b5bf0004 	addi	r22,r22,-1024
 8010240:	980d883a 	mov	r6,r19
 8010244:	a809883a 	mov	r4,r21
 8010248:	90004626 	beq	r18,zero,8010364 <__sfvwrite_r+0x194>
 801024c:	900f883a 	mov	r7,r18
 8010250:	b480022e 	bgeu	r22,r18,801025c <__sfvwrite_r+0x8c>
 8010254:	01e00034 	movhi	r7,32768
 8010258:	39ff0004 	addi	r7,r7,-1024
 801025c:	80800917 	ldw	r2,36(r16)
 8010260:	81400717 	ldw	r5,28(r16)
 8010264:	103ee83a 	callr	r2
 8010268:	00805a0e 	bge	zero,r2,80103d4 <__sfvwrite_r+0x204>
 801026c:	a0c00217 	ldw	r3,8(r20)
 8010270:	98a7883a 	add	r19,r19,r2
 8010274:	90a5c83a 	sub	r18,r18,r2
 8010278:	1885c83a 	sub	r2,r3,r2
 801027c:	a0800215 	stw	r2,8(r20)
 8010280:	103fef1e 	bne	r2,zero,8010240 <__alt_data_end+0xfc010240>
 8010284:	0005883a 	mov	r2,zero
 8010288:	dfc00b17 	ldw	ra,44(sp)
 801028c:	df000a17 	ldw	fp,40(sp)
 8010290:	ddc00917 	ldw	r23,36(sp)
 8010294:	dd800817 	ldw	r22,32(sp)
 8010298:	dd400717 	ldw	r21,28(sp)
 801029c:	dd000617 	ldw	r20,24(sp)
 80102a0:	dcc00517 	ldw	r19,20(sp)
 80102a4:	dc800417 	ldw	r18,16(sp)
 80102a8:	dc400317 	ldw	r17,12(sp)
 80102ac:	dc000217 	ldw	r16,8(sp)
 80102b0:	dec00c04 	addi	sp,sp,48
 80102b4:	f800283a 	ret
 80102b8:	800b883a 	mov	r5,r16
 80102bc:	a809883a 	mov	r4,r21
 80102c0:	800dd400 	call	800dd40 <__swsetup_r>
 80102c4:	1000ee1e 	bne	r2,zero,8010680 <__sfvwrite_r+0x4b0>
 80102c8:	80c0030b 	ldhu	r3,12(r16)
 80102cc:	a4400017 	ldw	r17,0(r20)
 80102d0:	1880008c 	andi	r2,r3,2
 80102d4:	103fd61e 	bne	r2,zero,8010230 <__alt_data_end+0xfc010230>
 80102d8:	1880004c 	andi	r2,r3,1
 80102dc:	1000421e 	bne	r2,zero,80103e8 <__sfvwrite_r+0x218>
 80102e0:	0039883a 	mov	fp,zero
 80102e4:	0025883a 	mov	r18,zero
 80102e8:	90001a26 	beq	r18,zero,8010354 <__sfvwrite_r+0x184>
 80102ec:	1880800c 	andi	r2,r3,512
 80102f0:	84c00217 	ldw	r19,8(r16)
 80102f4:	10002126 	beq	r2,zero,801037c <__sfvwrite_r+0x1ac>
 80102f8:	982f883a 	mov	r23,r19
 80102fc:	94c09636 	bltu	r18,r19,8010558 <__sfvwrite_r+0x388>
 8010300:	1881200c 	andi	r2,r3,1152
 8010304:	1000a11e 	bne	r2,zero,801058c <__sfvwrite_r+0x3bc>
 8010308:	81000017 	ldw	r4,0(r16)
 801030c:	b80d883a 	mov	r6,r23
 8010310:	e00b883a 	mov	r5,fp
 8010314:	80114f00 	call	80114f0 <memmove>
 8010318:	80c00217 	ldw	r3,8(r16)
 801031c:	81000017 	ldw	r4,0(r16)
 8010320:	9005883a 	mov	r2,r18
 8010324:	1ce7c83a 	sub	r19,r3,r19
 8010328:	25cf883a 	add	r7,r4,r23
 801032c:	84c00215 	stw	r19,8(r16)
 8010330:	81c00015 	stw	r7,0(r16)
 8010334:	a0c00217 	ldw	r3,8(r20)
 8010338:	e0b9883a 	add	fp,fp,r2
 801033c:	90a5c83a 	sub	r18,r18,r2
 8010340:	18a7c83a 	sub	r19,r3,r2
 8010344:	a4c00215 	stw	r19,8(r20)
 8010348:	983fce26 	beq	r19,zero,8010284 <__alt_data_end+0xfc010284>
 801034c:	80c0030b 	ldhu	r3,12(r16)
 8010350:	903fe61e 	bne	r18,zero,80102ec <__alt_data_end+0xfc0102ec>
 8010354:	8f000017 	ldw	fp,0(r17)
 8010358:	8c800117 	ldw	r18,4(r17)
 801035c:	8c400204 	addi	r17,r17,8
 8010360:	003fe106 	br	80102e8 <__alt_data_end+0xfc0102e8>
 8010364:	8cc00017 	ldw	r19,0(r17)
 8010368:	8c800117 	ldw	r18,4(r17)
 801036c:	8c400204 	addi	r17,r17,8
 8010370:	003fb306 	br	8010240 <__alt_data_end+0xfc010240>
 8010374:	0005883a 	mov	r2,zero
 8010378:	f800283a 	ret
 801037c:	81000017 	ldw	r4,0(r16)
 8010380:	80800417 	ldw	r2,16(r16)
 8010384:	11005a36 	bltu	r2,r4,80104f0 <__sfvwrite_r+0x320>
 8010388:	85c00517 	ldw	r23,20(r16)
 801038c:	95c05836 	bltu	r18,r23,80104f0 <__sfvwrite_r+0x320>
 8010390:	00a00034 	movhi	r2,32768
 8010394:	10bfffc4 	addi	r2,r2,-1
 8010398:	9009883a 	mov	r4,r18
 801039c:	1480012e 	bgeu	r2,r18,80103a4 <__sfvwrite_r+0x1d4>
 80103a0:	1009883a 	mov	r4,r2
 80103a4:	b80b883a 	mov	r5,r23
 80103a8:	80081780 	call	8008178 <__divsi3>
 80103ac:	b80b883a 	mov	r5,r23
 80103b0:	1009883a 	mov	r4,r2
 80103b4:	800832c0 	call	800832c <__mulsi3>
 80103b8:	81400717 	ldw	r5,28(r16)
 80103bc:	80c00917 	ldw	r3,36(r16)
 80103c0:	100f883a 	mov	r7,r2
 80103c4:	e00d883a 	mov	r6,fp
 80103c8:	a809883a 	mov	r4,r21
 80103cc:	183ee83a 	callr	r3
 80103d0:	00bfd816 	blt	zero,r2,8010334 <__alt_data_end+0xfc010334>
 80103d4:	8080030b 	ldhu	r2,12(r16)
 80103d8:	10801014 	ori	r2,r2,64
 80103dc:	8080030d 	sth	r2,12(r16)
 80103e0:	00bfffc4 	movi	r2,-1
 80103e4:	003fa806 	br	8010288 <__alt_data_end+0xfc010288>
 80103e8:	0027883a 	mov	r19,zero
 80103ec:	0011883a 	mov	r8,zero
 80103f0:	0039883a 	mov	fp,zero
 80103f4:	0025883a 	mov	r18,zero
 80103f8:	90001f26 	beq	r18,zero,8010478 <__sfvwrite_r+0x2a8>
 80103fc:	40005a26 	beq	r8,zero,8010568 <__sfvwrite_r+0x398>
 8010400:	982d883a 	mov	r22,r19
 8010404:	94c0012e 	bgeu	r18,r19,801040c <__sfvwrite_r+0x23c>
 8010408:	902d883a 	mov	r22,r18
 801040c:	81000017 	ldw	r4,0(r16)
 8010410:	80800417 	ldw	r2,16(r16)
 8010414:	b02f883a 	mov	r23,r22
 8010418:	81c00517 	ldw	r7,20(r16)
 801041c:	1100032e 	bgeu	r2,r4,801042c <__sfvwrite_r+0x25c>
 8010420:	80c00217 	ldw	r3,8(r16)
 8010424:	38c7883a 	add	r3,r7,r3
 8010428:	1d801816 	blt	r3,r22,801048c <__sfvwrite_r+0x2bc>
 801042c:	b1c03e16 	blt	r22,r7,8010528 <__sfvwrite_r+0x358>
 8010430:	80800917 	ldw	r2,36(r16)
 8010434:	81400717 	ldw	r5,28(r16)
 8010438:	e00d883a 	mov	r6,fp
 801043c:	da000115 	stw	r8,4(sp)
 8010440:	a809883a 	mov	r4,r21
 8010444:	103ee83a 	callr	r2
 8010448:	102f883a 	mov	r23,r2
 801044c:	da000117 	ldw	r8,4(sp)
 8010450:	00bfe00e 	bge	zero,r2,80103d4 <__alt_data_end+0xfc0103d4>
 8010454:	9de7c83a 	sub	r19,r19,r23
 8010458:	98001f26 	beq	r19,zero,80104d8 <__sfvwrite_r+0x308>
 801045c:	a0800217 	ldw	r2,8(r20)
 8010460:	e5f9883a 	add	fp,fp,r23
 8010464:	95e5c83a 	sub	r18,r18,r23
 8010468:	15efc83a 	sub	r23,r2,r23
 801046c:	a5c00215 	stw	r23,8(r20)
 8010470:	b83f8426 	beq	r23,zero,8010284 <__alt_data_end+0xfc010284>
 8010474:	903fe11e 	bne	r18,zero,80103fc <__alt_data_end+0xfc0103fc>
 8010478:	8f000017 	ldw	fp,0(r17)
 801047c:	8c800117 	ldw	r18,4(r17)
 8010480:	0011883a 	mov	r8,zero
 8010484:	8c400204 	addi	r17,r17,8
 8010488:	003fdb06 	br	80103f8 <__alt_data_end+0xfc0103f8>
 801048c:	180d883a 	mov	r6,r3
 8010490:	e00b883a 	mov	r5,fp
 8010494:	da000115 	stw	r8,4(sp)
 8010498:	d8c00015 	stw	r3,0(sp)
 801049c:	80114f00 	call	80114f0 <memmove>
 80104a0:	d8c00017 	ldw	r3,0(sp)
 80104a4:	80800017 	ldw	r2,0(r16)
 80104a8:	800b883a 	mov	r5,r16
 80104ac:	a809883a 	mov	r4,r21
 80104b0:	10c5883a 	add	r2,r2,r3
 80104b4:	80800015 	stw	r2,0(r16)
 80104b8:	d8c00015 	stw	r3,0(sp)
 80104bc:	800f9600 	call	800f960 <_fflush_r>
 80104c0:	d8c00017 	ldw	r3,0(sp)
 80104c4:	da000117 	ldw	r8,4(sp)
 80104c8:	103fc21e 	bne	r2,zero,80103d4 <__alt_data_end+0xfc0103d4>
 80104cc:	182f883a 	mov	r23,r3
 80104d0:	9de7c83a 	sub	r19,r19,r23
 80104d4:	983fe11e 	bne	r19,zero,801045c <__alt_data_end+0xfc01045c>
 80104d8:	800b883a 	mov	r5,r16
 80104dc:	a809883a 	mov	r4,r21
 80104e0:	800f9600 	call	800f960 <_fflush_r>
 80104e4:	103fbb1e 	bne	r2,zero,80103d4 <__alt_data_end+0xfc0103d4>
 80104e8:	0011883a 	mov	r8,zero
 80104ec:	003fdb06 	br	801045c <__alt_data_end+0xfc01045c>
 80104f0:	94c0012e 	bgeu	r18,r19,80104f8 <__sfvwrite_r+0x328>
 80104f4:	9027883a 	mov	r19,r18
 80104f8:	980d883a 	mov	r6,r19
 80104fc:	e00b883a 	mov	r5,fp
 8010500:	80114f00 	call	80114f0 <memmove>
 8010504:	80800217 	ldw	r2,8(r16)
 8010508:	80c00017 	ldw	r3,0(r16)
 801050c:	14c5c83a 	sub	r2,r2,r19
 8010510:	1cc7883a 	add	r3,r3,r19
 8010514:	80800215 	stw	r2,8(r16)
 8010518:	80c00015 	stw	r3,0(r16)
 801051c:	10004326 	beq	r2,zero,801062c <__sfvwrite_r+0x45c>
 8010520:	9805883a 	mov	r2,r19
 8010524:	003f8306 	br	8010334 <__alt_data_end+0xfc010334>
 8010528:	b00d883a 	mov	r6,r22
 801052c:	e00b883a 	mov	r5,fp
 8010530:	da000115 	stw	r8,4(sp)
 8010534:	80114f00 	call	80114f0 <memmove>
 8010538:	80800217 	ldw	r2,8(r16)
 801053c:	80c00017 	ldw	r3,0(r16)
 8010540:	da000117 	ldw	r8,4(sp)
 8010544:	1585c83a 	sub	r2,r2,r22
 8010548:	1dad883a 	add	r22,r3,r22
 801054c:	80800215 	stw	r2,8(r16)
 8010550:	85800015 	stw	r22,0(r16)
 8010554:	003fbf06 	br	8010454 <__alt_data_end+0xfc010454>
 8010558:	81000017 	ldw	r4,0(r16)
 801055c:	9027883a 	mov	r19,r18
 8010560:	902f883a 	mov	r23,r18
 8010564:	003f6906 	br	801030c <__alt_data_end+0xfc01030c>
 8010568:	900d883a 	mov	r6,r18
 801056c:	01400284 	movi	r5,10
 8010570:	e009883a 	mov	r4,fp
 8010574:	80112c40 	call	80112c4 <memchr>
 8010578:	10003e26 	beq	r2,zero,8010674 <__sfvwrite_r+0x4a4>
 801057c:	10800044 	addi	r2,r2,1
 8010580:	1727c83a 	sub	r19,r2,fp
 8010584:	02000044 	movi	r8,1
 8010588:	003f9d06 	br	8010400 <__alt_data_end+0xfc010400>
 801058c:	80800517 	ldw	r2,20(r16)
 8010590:	81400417 	ldw	r5,16(r16)
 8010594:	81c00017 	ldw	r7,0(r16)
 8010598:	10a7883a 	add	r19,r2,r2
 801059c:	9885883a 	add	r2,r19,r2
 80105a0:	1026d7fa 	srli	r19,r2,31
 80105a4:	396dc83a 	sub	r22,r7,r5
 80105a8:	b1000044 	addi	r4,r22,1
 80105ac:	9885883a 	add	r2,r19,r2
 80105b0:	1027d07a 	srai	r19,r2,1
 80105b4:	2485883a 	add	r2,r4,r18
 80105b8:	980d883a 	mov	r6,r19
 80105bc:	9880022e 	bgeu	r19,r2,80105c8 <__sfvwrite_r+0x3f8>
 80105c0:	1027883a 	mov	r19,r2
 80105c4:	100d883a 	mov	r6,r2
 80105c8:	18c1000c 	andi	r3,r3,1024
 80105cc:	18001c26 	beq	r3,zero,8010640 <__sfvwrite_r+0x470>
 80105d0:	300b883a 	mov	r5,r6
 80105d4:	a809883a 	mov	r4,r21
 80105d8:	8010ab80 	call	8010ab8 <_malloc_r>
 80105dc:	102f883a 	mov	r23,r2
 80105e0:	10002926 	beq	r2,zero,8010688 <__sfvwrite_r+0x4b8>
 80105e4:	81400417 	ldw	r5,16(r16)
 80105e8:	b00d883a 	mov	r6,r22
 80105ec:	1009883a 	mov	r4,r2
 80105f0:	80113a80 	call	80113a8 <memcpy>
 80105f4:	8080030b 	ldhu	r2,12(r16)
 80105f8:	00fedfc4 	movi	r3,-1153
 80105fc:	10c4703a 	and	r2,r2,r3
 8010600:	10802014 	ori	r2,r2,128
 8010604:	8080030d 	sth	r2,12(r16)
 8010608:	bd89883a 	add	r4,r23,r22
 801060c:	9d8fc83a 	sub	r7,r19,r22
 8010610:	85c00415 	stw	r23,16(r16)
 8010614:	84c00515 	stw	r19,20(r16)
 8010618:	81000015 	stw	r4,0(r16)
 801061c:	9027883a 	mov	r19,r18
 8010620:	81c00215 	stw	r7,8(r16)
 8010624:	902f883a 	mov	r23,r18
 8010628:	003f3806 	br	801030c <__alt_data_end+0xfc01030c>
 801062c:	800b883a 	mov	r5,r16
 8010630:	a809883a 	mov	r4,r21
 8010634:	800f9600 	call	800f960 <_fflush_r>
 8010638:	103fb926 	beq	r2,zero,8010520 <__alt_data_end+0xfc010520>
 801063c:	003f6506 	br	80103d4 <__alt_data_end+0xfc0103d4>
 8010640:	a809883a 	mov	r4,r21
 8010644:	801282c0 	call	801282c <_realloc_r>
 8010648:	102f883a 	mov	r23,r2
 801064c:	103fee1e 	bne	r2,zero,8010608 <__alt_data_end+0xfc010608>
 8010650:	81400417 	ldw	r5,16(r16)
 8010654:	a809883a 	mov	r4,r21
 8010658:	800fec00 	call	800fec0 <_free_r>
 801065c:	8080030b 	ldhu	r2,12(r16)
 8010660:	00ffdfc4 	movi	r3,-129
 8010664:	1884703a 	and	r2,r3,r2
 8010668:	00c00304 	movi	r3,12
 801066c:	a8c00015 	stw	r3,0(r21)
 8010670:	003f5906 	br	80103d8 <__alt_data_end+0xfc0103d8>
 8010674:	94c00044 	addi	r19,r18,1
 8010678:	02000044 	movi	r8,1
 801067c:	003f6006 	br	8010400 <__alt_data_end+0xfc010400>
 8010680:	00bfffc4 	movi	r2,-1
 8010684:	003f0006 	br	8010288 <__alt_data_end+0xfc010288>
 8010688:	00800304 	movi	r2,12
 801068c:	a8800015 	stw	r2,0(r21)
 8010690:	8080030b 	ldhu	r2,12(r16)
 8010694:	003f5006 	br	80103d8 <__alt_data_end+0xfc0103d8>

08010698 <_fwalk>:
 8010698:	defff704 	addi	sp,sp,-36
 801069c:	dd000415 	stw	r20,16(sp)
 80106a0:	dfc00815 	stw	ra,32(sp)
 80106a4:	ddc00715 	stw	r23,28(sp)
 80106a8:	dd800615 	stw	r22,24(sp)
 80106ac:	dd400515 	stw	r21,20(sp)
 80106b0:	dcc00315 	stw	r19,12(sp)
 80106b4:	dc800215 	stw	r18,8(sp)
 80106b8:	dc400115 	stw	r17,4(sp)
 80106bc:	dc000015 	stw	r16,0(sp)
 80106c0:	2500b804 	addi	r20,r4,736
 80106c4:	a0002326 	beq	r20,zero,8010754 <_fwalk+0xbc>
 80106c8:	282b883a 	mov	r21,r5
 80106cc:	002f883a 	mov	r23,zero
 80106d0:	05800044 	movi	r22,1
 80106d4:	04ffffc4 	movi	r19,-1
 80106d8:	a4400117 	ldw	r17,4(r20)
 80106dc:	a4800217 	ldw	r18,8(r20)
 80106e0:	8c7fffc4 	addi	r17,r17,-1
 80106e4:	88000d16 	blt	r17,zero,801071c <_fwalk+0x84>
 80106e8:	94000304 	addi	r16,r18,12
 80106ec:	94800384 	addi	r18,r18,14
 80106f0:	8080000b 	ldhu	r2,0(r16)
 80106f4:	8c7fffc4 	addi	r17,r17,-1
 80106f8:	813ffd04 	addi	r4,r16,-12
 80106fc:	b080042e 	bgeu	r22,r2,8010710 <_fwalk+0x78>
 8010700:	9080000f 	ldh	r2,0(r18)
 8010704:	14c00226 	beq	r2,r19,8010710 <_fwalk+0x78>
 8010708:	a83ee83a 	callr	r21
 801070c:	b8aeb03a 	or	r23,r23,r2
 8010710:	84001a04 	addi	r16,r16,104
 8010714:	94801a04 	addi	r18,r18,104
 8010718:	8cfff51e 	bne	r17,r19,80106f0 <__alt_data_end+0xfc0106f0>
 801071c:	a5000017 	ldw	r20,0(r20)
 8010720:	a03fed1e 	bne	r20,zero,80106d8 <__alt_data_end+0xfc0106d8>
 8010724:	b805883a 	mov	r2,r23
 8010728:	dfc00817 	ldw	ra,32(sp)
 801072c:	ddc00717 	ldw	r23,28(sp)
 8010730:	dd800617 	ldw	r22,24(sp)
 8010734:	dd400517 	ldw	r21,20(sp)
 8010738:	dd000417 	ldw	r20,16(sp)
 801073c:	dcc00317 	ldw	r19,12(sp)
 8010740:	dc800217 	ldw	r18,8(sp)
 8010744:	dc400117 	ldw	r17,4(sp)
 8010748:	dc000017 	ldw	r16,0(sp)
 801074c:	dec00904 	addi	sp,sp,36
 8010750:	f800283a 	ret
 8010754:	002f883a 	mov	r23,zero
 8010758:	003ff206 	br	8010724 <__alt_data_end+0xfc010724>

0801075c <_fwalk_reent>:
 801075c:	defff704 	addi	sp,sp,-36
 8010760:	dd000415 	stw	r20,16(sp)
 8010764:	dfc00815 	stw	ra,32(sp)
 8010768:	ddc00715 	stw	r23,28(sp)
 801076c:	dd800615 	stw	r22,24(sp)
 8010770:	dd400515 	stw	r21,20(sp)
 8010774:	dcc00315 	stw	r19,12(sp)
 8010778:	dc800215 	stw	r18,8(sp)
 801077c:	dc400115 	stw	r17,4(sp)
 8010780:	dc000015 	stw	r16,0(sp)
 8010784:	2500b804 	addi	r20,r4,736
 8010788:	a0002326 	beq	r20,zero,8010818 <_fwalk_reent+0xbc>
 801078c:	282b883a 	mov	r21,r5
 8010790:	2027883a 	mov	r19,r4
 8010794:	002f883a 	mov	r23,zero
 8010798:	05800044 	movi	r22,1
 801079c:	04bfffc4 	movi	r18,-1
 80107a0:	a4400117 	ldw	r17,4(r20)
 80107a4:	a4000217 	ldw	r16,8(r20)
 80107a8:	8c7fffc4 	addi	r17,r17,-1
 80107ac:	88000c16 	blt	r17,zero,80107e0 <_fwalk_reent+0x84>
 80107b0:	84000304 	addi	r16,r16,12
 80107b4:	8080000b 	ldhu	r2,0(r16)
 80107b8:	8c7fffc4 	addi	r17,r17,-1
 80107bc:	817ffd04 	addi	r5,r16,-12
 80107c0:	b080052e 	bgeu	r22,r2,80107d8 <_fwalk_reent+0x7c>
 80107c4:	8080008f 	ldh	r2,2(r16)
 80107c8:	9809883a 	mov	r4,r19
 80107cc:	14800226 	beq	r2,r18,80107d8 <_fwalk_reent+0x7c>
 80107d0:	a83ee83a 	callr	r21
 80107d4:	b8aeb03a 	or	r23,r23,r2
 80107d8:	84001a04 	addi	r16,r16,104
 80107dc:	8cbff51e 	bne	r17,r18,80107b4 <__alt_data_end+0xfc0107b4>
 80107e0:	a5000017 	ldw	r20,0(r20)
 80107e4:	a03fee1e 	bne	r20,zero,80107a0 <__alt_data_end+0xfc0107a0>
 80107e8:	b805883a 	mov	r2,r23
 80107ec:	dfc00817 	ldw	ra,32(sp)
 80107f0:	ddc00717 	ldw	r23,28(sp)
 80107f4:	dd800617 	ldw	r22,24(sp)
 80107f8:	dd400517 	ldw	r21,20(sp)
 80107fc:	dd000417 	ldw	r20,16(sp)
 8010800:	dcc00317 	ldw	r19,12(sp)
 8010804:	dc800217 	ldw	r18,8(sp)
 8010808:	dc400117 	ldw	r17,4(sp)
 801080c:	dc000017 	ldw	r16,0(sp)
 8010810:	dec00904 	addi	sp,sp,36
 8010814:	f800283a 	ret
 8010818:	002f883a 	mov	r23,zero
 801081c:	003ff206 	br	80107e8 <__alt_data_end+0xfc0107e8>

08010820 <_setlocale_r>:
 8010820:	30001b26 	beq	r6,zero,8010890 <_setlocale_r+0x70>
 8010824:	014200b4 	movhi	r5,2050
 8010828:	defffe04 	addi	sp,sp,-8
 801082c:	296b4904 	addi	r5,r5,-21212
 8010830:	3009883a 	mov	r4,r6
 8010834:	dc000015 	stw	r16,0(sp)
 8010838:	dfc00115 	stw	ra,4(sp)
 801083c:	3021883a 	mov	r16,r6
 8010840:	8012f200 	call	8012f20 <strcmp>
 8010844:	1000061e 	bne	r2,zero,8010860 <_setlocale_r+0x40>
 8010848:	008200b4 	movhi	r2,2050
 801084c:	10ab2a04 	addi	r2,r2,-21336
 8010850:	dfc00117 	ldw	ra,4(sp)
 8010854:	dc000017 	ldw	r16,0(sp)
 8010858:	dec00204 	addi	sp,sp,8
 801085c:	f800283a 	ret
 8010860:	014200b4 	movhi	r5,2050
 8010864:	296b2a04 	addi	r5,r5,-21336
 8010868:	8009883a 	mov	r4,r16
 801086c:	8012f200 	call	8012f20 <strcmp>
 8010870:	103ff526 	beq	r2,zero,8010848 <__alt_data_end+0xfc010848>
 8010874:	014200b4 	movhi	r5,2050
 8010878:	296b3404 	addi	r5,r5,-21296
 801087c:	8009883a 	mov	r4,r16
 8010880:	8012f200 	call	8012f20 <strcmp>
 8010884:	103ff026 	beq	r2,zero,8010848 <__alt_data_end+0xfc010848>
 8010888:	0005883a 	mov	r2,zero
 801088c:	003ff006 	br	8010850 <__alt_data_end+0xfc010850>
 8010890:	008200b4 	movhi	r2,2050
 8010894:	10ab2a04 	addi	r2,r2,-21336
 8010898:	f800283a 	ret

0801089c <__locale_charset>:
 801089c:	008200b4 	movhi	r2,2050
 80108a0:	10ad2e04 	addi	r2,r2,-19272
 80108a4:	f800283a 	ret

080108a8 <__locale_mb_cur_max>:
 80108a8:	008200b4 	movhi	r2,2050
 80108ac:	10b2de04 	addi	r2,r2,-13448
 80108b0:	10800017 	ldw	r2,0(r2)
 80108b4:	f800283a 	ret

080108b8 <__locale_msgcharset>:
 80108b8:	008200b4 	movhi	r2,2050
 80108bc:	10ad2604 	addi	r2,r2,-19304
 80108c0:	f800283a 	ret

080108c4 <__locale_cjk_lang>:
 80108c4:	0005883a 	mov	r2,zero
 80108c8:	f800283a 	ret

080108cc <_localeconv_r>:
 80108cc:	008200b4 	movhi	r2,2050
 80108d0:	10ad3604 	addi	r2,r2,-19240
 80108d4:	f800283a 	ret

080108d8 <setlocale>:
 80108d8:	008200b4 	movhi	r2,2050
 80108dc:	10b2dd04 	addi	r2,r2,-13452
 80108e0:	280d883a 	mov	r6,r5
 80108e4:	200b883a 	mov	r5,r4
 80108e8:	11000017 	ldw	r4,0(r2)
 80108ec:	80108201 	jmpi	8010820 <_setlocale_r>

080108f0 <localeconv>:
 80108f0:	008200b4 	movhi	r2,2050
 80108f4:	10ad3604 	addi	r2,r2,-19240
 80108f8:	f800283a 	ret

080108fc <__smakebuf_r>:
 80108fc:	2880030b 	ldhu	r2,12(r5)
 8010900:	10c0008c 	andi	r3,r2,2
 8010904:	1800411e 	bne	r3,zero,8010a0c <__smakebuf_r+0x110>
 8010908:	deffec04 	addi	sp,sp,-80
 801090c:	dc000f15 	stw	r16,60(sp)
 8010910:	2821883a 	mov	r16,r5
 8010914:	2940038f 	ldh	r5,14(r5)
 8010918:	dc401015 	stw	r17,64(sp)
 801091c:	dfc01315 	stw	ra,76(sp)
 8010920:	dcc01215 	stw	r19,72(sp)
 8010924:	dc801115 	stw	r18,68(sp)
 8010928:	2023883a 	mov	r17,r4
 801092c:	28001c16 	blt	r5,zero,80109a0 <__smakebuf_r+0xa4>
 8010930:	d80d883a 	mov	r6,sp
 8010934:	8014b900 	call	8014b90 <_fstat_r>
 8010938:	10001816 	blt	r2,zero,801099c <__smakebuf_r+0xa0>
 801093c:	d8800117 	ldw	r2,4(sp)
 8010940:	00e00014 	movui	r3,32768
 8010944:	10bc000c 	andi	r2,r2,61440
 8010948:	14c80020 	cmpeqi	r19,r2,8192
 801094c:	10c03726 	beq	r2,r3,8010a2c <__smakebuf_r+0x130>
 8010950:	80c0030b 	ldhu	r3,12(r16)
 8010954:	18c20014 	ori	r3,r3,2048
 8010958:	80c0030d 	sth	r3,12(r16)
 801095c:	00c80004 	movi	r3,8192
 8010960:	10c0521e 	bne	r2,r3,8010aac <__smakebuf_r+0x1b0>
 8010964:	8140038f 	ldh	r5,14(r16)
 8010968:	8809883a 	mov	r4,r17
 801096c:	8014bec0 	call	8014bec <_isatty_r>
 8010970:	10004c26 	beq	r2,zero,8010aa4 <__smakebuf_r+0x1a8>
 8010974:	8080030b 	ldhu	r2,12(r16)
 8010978:	80c010c4 	addi	r3,r16,67
 801097c:	80c00015 	stw	r3,0(r16)
 8010980:	10800054 	ori	r2,r2,1
 8010984:	8080030d 	sth	r2,12(r16)
 8010988:	00800044 	movi	r2,1
 801098c:	80c00415 	stw	r3,16(r16)
 8010990:	80800515 	stw	r2,20(r16)
 8010994:	04810004 	movi	r18,1024
 8010998:	00000706 	br	80109b8 <__smakebuf_r+0xbc>
 801099c:	8080030b 	ldhu	r2,12(r16)
 80109a0:	10c0200c 	andi	r3,r2,128
 80109a4:	18001f1e 	bne	r3,zero,8010a24 <__smakebuf_r+0x128>
 80109a8:	04810004 	movi	r18,1024
 80109ac:	10820014 	ori	r2,r2,2048
 80109b0:	8080030d 	sth	r2,12(r16)
 80109b4:	0027883a 	mov	r19,zero
 80109b8:	900b883a 	mov	r5,r18
 80109bc:	8809883a 	mov	r4,r17
 80109c0:	8010ab80 	call	8010ab8 <_malloc_r>
 80109c4:	10002c26 	beq	r2,zero,8010a78 <__smakebuf_r+0x17c>
 80109c8:	80c0030b 	ldhu	r3,12(r16)
 80109cc:	01020074 	movhi	r4,2049
 80109d0:	213e7d04 	addi	r4,r4,-1548
 80109d4:	89000f15 	stw	r4,60(r17)
 80109d8:	18c02014 	ori	r3,r3,128
 80109dc:	80c0030d 	sth	r3,12(r16)
 80109e0:	80800015 	stw	r2,0(r16)
 80109e4:	80800415 	stw	r2,16(r16)
 80109e8:	84800515 	stw	r18,20(r16)
 80109ec:	98001a1e 	bne	r19,zero,8010a58 <__smakebuf_r+0x15c>
 80109f0:	dfc01317 	ldw	ra,76(sp)
 80109f4:	dcc01217 	ldw	r19,72(sp)
 80109f8:	dc801117 	ldw	r18,68(sp)
 80109fc:	dc401017 	ldw	r17,64(sp)
 8010a00:	dc000f17 	ldw	r16,60(sp)
 8010a04:	dec01404 	addi	sp,sp,80
 8010a08:	f800283a 	ret
 8010a0c:	288010c4 	addi	r2,r5,67
 8010a10:	28800015 	stw	r2,0(r5)
 8010a14:	28800415 	stw	r2,16(r5)
 8010a18:	00800044 	movi	r2,1
 8010a1c:	28800515 	stw	r2,20(r5)
 8010a20:	f800283a 	ret
 8010a24:	04801004 	movi	r18,64
 8010a28:	003fe006 	br	80109ac <__alt_data_end+0xfc0109ac>
 8010a2c:	81000a17 	ldw	r4,40(r16)
 8010a30:	00c20074 	movhi	r3,2049
 8010a34:	18cbaf04 	addi	r3,r3,11964
 8010a38:	20ffc51e 	bne	r4,r3,8010950 <__alt_data_end+0xfc010950>
 8010a3c:	8080030b 	ldhu	r2,12(r16)
 8010a40:	04810004 	movi	r18,1024
 8010a44:	84801315 	stw	r18,76(r16)
 8010a48:	1484b03a 	or	r2,r2,r18
 8010a4c:	8080030d 	sth	r2,12(r16)
 8010a50:	0027883a 	mov	r19,zero
 8010a54:	003fd806 	br	80109b8 <__alt_data_end+0xfc0109b8>
 8010a58:	8140038f 	ldh	r5,14(r16)
 8010a5c:	8809883a 	mov	r4,r17
 8010a60:	8014bec0 	call	8014bec <_isatty_r>
 8010a64:	103fe226 	beq	r2,zero,80109f0 <__alt_data_end+0xfc0109f0>
 8010a68:	8080030b 	ldhu	r2,12(r16)
 8010a6c:	10800054 	ori	r2,r2,1
 8010a70:	8080030d 	sth	r2,12(r16)
 8010a74:	003fde06 	br	80109f0 <__alt_data_end+0xfc0109f0>
 8010a78:	8080030b 	ldhu	r2,12(r16)
 8010a7c:	10c0800c 	andi	r3,r2,512
 8010a80:	183fdb1e 	bne	r3,zero,80109f0 <__alt_data_end+0xfc0109f0>
 8010a84:	10800094 	ori	r2,r2,2
 8010a88:	80c010c4 	addi	r3,r16,67
 8010a8c:	8080030d 	sth	r2,12(r16)
 8010a90:	00800044 	movi	r2,1
 8010a94:	80c00015 	stw	r3,0(r16)
 8010a98:	80c00415 	stw	r3,16(r16)
 8010a9c:	80800515 	stw	r2,20(r16)
 8010aa0:	003fd306 	br	80109f0 <__alt_data_end+0xfc0109f0>
 8010aa4:	04810004 	movi	r18,1024
 8010aa8:	003fc306 	br	80109b8 <__alt_data_end+0xfc0109b8>
 8010aac:	0027883a 	mov	r19,zero
 8010ab0:	04810004 	movi	r18,1024
 8010ab4:	003fc006 	br	80109b8 <__alt_data_end+0xfc0109b8>

08010ab8 <_malloc_r>:
 8010ab8:	defff504 	addi	sp,sp,-44
 8010abc:	dc800315 	stw	r18,12(sp)
 8010ac0:	dfc00a15 	stw	ra,40(sp)
 8010ac4:	df000915 	stw	fp,36(sp)
 8010ac8:	ddc00815 	stw	r23,32(sp)
 8010acc:	dd800715 	stw	r22,28(sp)
 8010ad0:	dd400615 	stw	r21,24(sp)
 8010ad4:	dd000515 	stw	r20,20(sp)
 8010ad8:	dcc00415 	stw	r19,16(sp)
 8010adc:	dc400215 	stw	r17,8(sp)
 8010ae0:	dc000115 	stw	r16,4(sp)
 8010ae4:	288002c4 	addi	r2,r5,11
 8010ae8:	00c00584 	movi	r3,22
 8010aec:	2025883a 	mov	r18,r4
 8010af0:	18807f2e 	bgeu	r3,r2,8010cf0 <_malloc_r+0x238>
 8010af4:	047ffe04 	movi	r17,-8
 8010af8:	1462703a 	and	r17,r2,r17
 8010afc:	8800a316 	blt	r17,zero,8010d8c <_malloc_r+0x2d4>
 8010b00:	8940a236 	bltu	r17,r5,8010d8c <_malloc_r+0x2d4>
 8010b04:	80162a80 	call	80162a8 <__malloc_lock>
 8010b08:	00807dc4 	movi	r2,503
 8010b0c:	1441e92e 	bgeu	r2,r17,80112b4 <_malloc_r+0x7fc>
 8010b10:	8804d27a 	srli	r2,r17,9
 8010b14:	1000a126 	beq	r2,zero,8010d9c <_malloc_r+0x2e4>
 8010b18:	00c00104 	movi	r3,4
 8010b1c:	18811e36 	bltu	r3,r2,8010f98 <_malloc_r+0x4e0>
 8010b20:	8804d1ba 	srli	r2,r17,6
 8010b24:	12000e44 	addi	r8,r2,57
 8010b28:	11c00e04 	addi	r7,r2,56
 8010b2c:	4209883a 	add	r4,r8,r8
 8010b30:	04c200b4 	movhi	r19,2050
 8010b34:	2109883a 	add	r4,r4,r4
 8010b38:	9ced4404 	addi	r19,r19,-19184
 8010b3c:	2109883a 	add	r4,r4,r4
 8010b40:	9909883a 	add	r4,r19,r4
 8010b44:	24000117 	ldw	r16,4(r4)
 8010b48:	213ffe04 	addi	r4,r4,-8
 8010b4c:	24009726 	beq	r4,r16,8010dac <_malloc_r+0x2f4>
 8010b50:	80800117 	ldw	r2,4(r16)
 8010b54:	01bfff04 	movi	r6,-4
 8010b58:	014003c4 	movi	r5,15
 8010b5c:	1184703a 	and	r2,r2,r6
 8010b60:	1447c83a 	sub	r3,r2,r17
 8010b64:	28c00716 	blt	r5,r3,8010b84 <_malloc_r+0xcc>
 8010b68:	1800920e 	bge	r3,zero,8010db4 <_malloc_r+0x2fc>
 8010b6c:	84000317 	ldw	r16,12(r16)
 8010b70:	24008e26 	beq	r4,r16,8010dac <_malloc_r+0x2f4>
 8010b74:	80800117 	ldw	r2,4(r16)
 8010b78:	1184703a 	and	r2,r2,r6
 8010b7c:	1447c83a 	sub	r3,r2,r17
 8010b80:	28fff90e 	bge	r5,r3,8010b68 <__alt_data_end+0xfc010b68>
 8010b84:	3809883a 	mov	r4,r7
 8010b88:	018200b4 	movhi	r6,2050
 8010b8c:	9c000417 	ldw	r16,16(r19)
 8010b90:	31ad4404 	addi	r6,r6,-19184
 8010b94:	32000204 	addi	r8,r6,8
 8010b98:	82013426 	beq	r16,r8,801106c <_malloc_r+0x5b4>
 8010b9c:	80c00117 	ldw	r3,4(r16)
 8010ba0:	00bfff04 	movi	r2,-4
 8010ba4:	188e703a 	and	r7,r3,r2
 8010ba8:	3c45c83a 	sub	r2,r7,r17
 8010bac:	00c003c4 	movi	r3,15
 8010bb0:	18811f16 	blt	r3,r2,8011030 <_malloc_r+0x578>
 8010bb4:	32000515 	stw	r8,20(r6)
 8010bb8:	32000415 	stw	r8,16(r6)
 8010bbc:	10007f0e 	bge	r2,zero,8010dbc <_malloc_r+0x304>
 8010bc0:	00807fc4 	movi	r2,511
 8010bc4:	11c0fd36 	bltu	r2,r7,8010fbc <_malloc_r+0x504>
 8010bc8:	3806d0fa 	srli	r3,r7,3
 8010bcc:	01c00044 	movi	r7,1
 8010bd0:	30800117 	ldw	r2,4(r6)
 8010bd4:	19400044 	addi	r5,r3,1
 8010bd8:	294b883a 	add	r5,r5,r5
 8010bdc:	1807d0ba 	srai	r3,r3,2
 8010be0:	294b883a 	add	r5,r5,r5
 8010be4:	294b883a 	add	r5,r5,r5
 8010be8:	298b883a 	add	r5,r5,r6
 8010bec:	38c6983a 	sll	r3,r7,r3
 8010bf0:	29c00017 	ldw	r7,0(r5)
 8010bf4:	2a7ffe04 	addi	r9,r5,-8
 8010bf8:	1886b03a 	or	r3,r3,r2
 8010bfc:	82400315 	stw	r9,12(r16)
 8010c00:	81c00215 	stw	r7,8(r16)
 8010c04:	30c00115 	stw	r3,4(r6)
 8010c08:	2c000015 	stw	r16,0(r5)
 8010c0c:	3c000315 	stw	r16,12(r7)
 8010c10:	2005d0ba 	srai	r2,r4,2
 8010c14:	01400044 	movi	r5,1
 8010c18:	288a983a 	sll	r5,r5,r2
 8010c1c:	19406f36 	bltu	r3,r5,8010ddc <_malloc_r+0x324>
 8010c20:	28c4703a 	and	r2,r5,r3
 8010c24:	10000a1e 	bne	r2,zero,8010c50 <_malloc_r+0x198>
 8010c28:	00bfff04 	movi	r2,-4
 8010c2c:	294b883a 	add	r5,r5,r5
 8010c30:	2088703a 	and	r4,r4,r2
 8010c34:	28c4703a 	and	r2,r5,r3
 8010c38:	21000104 	addi	r4,r4,4
 8010c3c:	1000041e 	bne	r2,zero,8010c50 <_malloc_r+0x198>
 8010c40:	294b883a 	add	r5,r5,r5
 8010c44:	28c4703a 	and	r2,r5,r3
 8010c48:	21000104 	addi	r4,r4,4
 8010c4c:	103ffc26 	beq	r2,zero,8010c40 <__alt_data_end+0xfc010c40>
 8010c50:	02bfff04 	movi	r10,-4
 8010c54:	024003c4 	movi	r9,15
 8010c58:	21800044 	addi	r6,r4,1
 8010c5c:	318d883a 	add	r6,r6,r6
 8010c60:	318d883a 	add	r6,r6,r6
 8010c64:	318d883a 	add	r6,r6,r6
 8010c68:	998d883a 	add	r6,r19,r6
 8010c6c:	333ffe04 	addi	r12,r6,-8
 8010c70:	2017883a 	mov	r11,r4
 8010c74:	31800104 	addi	r6,r6,4
 8010c78:	34000017 	ldw	r16,0(r6)
 8010c7c:	31fffd04 	addi	r7,r6,-12
 8010c80:	81c0041e 	bne	r16,r7,8010c94 <_malloc_r+0x1dc>
 8010c84:	0000fb06 	br	8011074 <_malloc_r+0x5bc>
 8010c88:	1801030e 	bge	r3,zero,8011098 <_malloc_r+0x5e0>
 8010c8c:	84000317 	ldw	r16,12(r16)
 8010c90:	81c0f826 	beq	r16,r7,8011074 <_malloc_r+0x5bc>
 8010c94:	80800117 	ldw	r2,4(r16)
 8010c98:	1284703a 	and	r2,r2,r10
 8010c9c:	1447c83a 	sub	r3,r2,r17
 8010ca0:	48fff90e 	bge	r9,r3,8010c88 <__alt_data_end+0xfc010c88>
 8010ca4:	80800317 	ldw	r2,12(r16)
 8010ca8:	81000217 	ldw	r4,8(r16)
 8010cac:	89400054 	ori	r5,r17,1
 8010cb0:	81400115 	stw	r5,4(r16)
 8010cb4:	20800315 	stw	r2,12(r4)
 8010cb8:	11000215 	stw	r4,8(r2)
 8010cbc:	8463883a 	add	r17,r16,r17
 8010cc0:	9c400515 	stw	r17,20(r19)
 8010cc4:	9c400415 	stw	r17,16(r19)
 8010cc8:	18800054 	ori	r2,r3,1
 8010ccc:	88800115 	stw	r2,4(r17)
 8010cd0:	8a000315 	stw	r8,12(r17)
 8010cd4:	8a000215 	stw	r8,8(r17)
 8010cd8:	88e3883a 	add	r17,r17,r3
 8010cdc:	88c00015 	stw	r3,0(r17)
 8010ce0:	9009883a 	mov	r4,r18
 8010ce4:	80162cc0 	call	80162cc <__malloc_unlock>
 8010ce8:	80800204 	addi	r2,r16,8
 8010cec:	00001b06 	br	8010d5c <_malloc_r+0x2a4>
 8010cf0:	04400404 	movi	r17,16
 8010cf4:	89402536 	bltu	r17,r5,8010d8c <_malloc_r+0x2d4>
 8010cf8:	80162a80 	call	80162a8 <__malloc_lock>
 8010cfc:	00800184 	movi	r2,6
 8010d00:	01000084 	movi	r4,2
 8010d04:	04c200b4 	movhi	r19,2050
 8010d08:	1085883a 	add	r2,r2,r2
 8010d0c:	9ced4404 	addi	r19,r19,-19184
 8010d10:	1085883a 	add	r2,r2,r2
 8010d14:	9885883a 	add	r2,r19,r2
 8010d18:	14000117 	ldw	r16,4(r2)
 8010d1c:	10fffe04 	addi	r3,r2,-8
 8010d20:	80c0d926 	beq	r16,r3,8011088 <_malloc_r+0x5d0>
 8010d24:	80c00117 	ldw	r3,4(r16)
 8010d28:	81000317 	ldw	r4,12(r16)
 8010d2c:	00bfff04 	movi	r2,-4
 8010d30:	1884703a 	and	r2,r3,r2
 8010d34:	81400217 	ldw	r5,8(r16)
 8010d38:	8085883a 	add	r2,r16,r2
 8010d3c:	10c00117 	ldw	r3,4(r2)
 8010d40:	29000315 	stw	r4,12(r5)
 8010d44:	21400215 	stw	r5,8(r4)
 8010d48:	18c00054 	ori	r3,r3,1
 8010d4c:	10c00115 	stw	r3,4(r2)
 8010d50:	9009883a 	mov	r4,r18
 8010d54:	80162cc0 	call	80162cc <__malloc_unlock>
 8010d58:	80800204 	addi	r2,r16,8
 8010d5c:	dfc00a17 	ldw	ra,40(sp)
 8010d60:	df000917 	ldw	fp,36(sp)
 8010d64:	ddc00817 	ldw	r23,32(sp)
 8010d68:	dd800717 	ldw	r22,28(sp)
 8010d6c:	dd400617 	ldw	r21,24(sp)
 8010d70:	dd000517 	ldw	r20,20(sp)
 8010d74:	dcc00417 	ldw	r19,16(sp)
 8010d78:	dc800317 	ldw	r18,12(sp)
 8010d7c:	dc400217 	ldw	r17,8(sp)
 8010d80:	dc000117 	ldw	r16,4(sp)
 8010d84:	dec00b04 	addi	sp,sp,44
 8010d88:	f800283a 	ret
 8010d8c:	00800304 	movi	r2,12
 8010d90:	90800015 	stw	r2,0(r18)
 8010d94:	0005883a 	mov	r2,zero
 8010d98:	003ff006 	br	8010d5c <__alt_data_end+0xfc010d5c>
 8010d9c:	01002004 	movi	r4,128
 8010da0:	02001004 	movi	r8,64
 8010da4:	01c00fc4 	movi	r7,63
 8010da8:	003f6106 	br	8010b30 <__alt_data_end+0xfc010b30>
 8010dac:	4009883a 	mov	r4,r8
 8010db0:	003f7506 	br	8010b88 <__alt_data_end+0xfc010b88>
 8010db4:	81000317 	ldw	r4,12(r16)
 8010db8:	003fde06 	br	8010d34 <__alt_data_end+0xfc010d34>
 8010dbc:	81c5883a 	add	r2,r16,r7
 8010dc0:	11400117 	ldw	r5,4(r2)
 8010dc4:	9009883a 	mov	r4,r18
 8010dc8:	29400054 	ori	r5,r5,1
 8010dcc:	11400115 	stw	r5,4(r2)
 8010dd0:	80162cc0 	call	80162cc <__malloc_unlock>
 8010dd4:	80800204 	addi	r2,r16,8
 8010dd8:	003fe006 	br	8010d5c <__alt_data_end+0xfc010d5c>
 8010ddc:	9c000217 	ldw	r16,8(r19)
 8010de0:	00bfff04 	movi	r2,-4
 8010de4:	85800117 	ldw	r22,4(r16)
 8010de8:	b0ac703a 	and	r22,r22,r2
 8010dec:	b4400336 	bltu	r22,r17,8010dfc <_malloc_r+0x344>
 8010df0:	b445c83a 	sub	r2,r22,r17
 8010df4:	00c003c4 	movi	r3,15
 8010df8:	18805d16 	blt	r3,r2,8010f70 <_malloc_r+0x4b8>
 8010dfc:	05c200b4 	movhi	r23,2050
 8010e00:	008200b4 	movhi	r2,2050
 8010e04:	10ba3704 	addi	r2,r2,-5924
 8010e08:	bdf2df04 	addi	r23,r23,-13444
 8010e0c:	15400017 	ldw	r21,0(r2)
 8010e10:	b8c00017 	ldw	r3,0(r23)
 8010e14:	00bfffc4 	movi	r2,-1
 8010e18:	858d883a 	add	r6,r16,r22
 8010e1c:	8d6b883a 	add	r21,r17,r21
 8010e20:	1880ea26 	beq	r3,r2,80111cc <_malloc_r+0x714>
 8010e24:	ad4403c4 	addi	r21,r21,4111
 8010e28:	00bc0004 	movi	r2,-4096
 8010e2c:	a8aa703a 	and	r21,r21,r2
 8010e30:	a80b883a 	mov	r5,r21
 8010e34:	9009883a 	mov	r4,r18
 8010e38:	d9800015 	stw	r6,0(sp)
 8010e3c:	8012d900 	call	8012d90 <_sbrk_r>
 8010e40:	1029883a 	mov	r20,r2
 8010e44:	00bfffc4 	movi	r2,-1
 8010e48:	d9800017 	ldw	r6,0(sp)
 8010e4c:	a080e826 	beq	r20,r2,80111f0 <_malloc_r+0x738>
 8010e50:	a180a636 	bltu	r20,r6,80110ec <_malloc_r+0x634>
 8010e54:	070200b4 	movhi	fp,2050
 8010e58:	e73a4a04 	addi	fp,fp,-5848
 8010e5c:	e0800017 	ldw	r2,0(fp)
 8010e60:	a887883a 	add	r3,r21,r2
 8010e64:	e0c00015 	stw	r3,0(fp)
 8010e68:	3500e626 	beq	r6,r20,8011204 <_malloc_r+0x74c>
 8010e6c:	b9000017 	ldw	r4,0(r23)
 8010e70:	00bfffc4 	movi	r2,-1
 8010e74:	2080ee26 	beq	r4,r2,8011230 <_malloc_r+0x778>
 8010e78:	a185c83a 	sub	r2,r20,r6
 8010e7c:	10c5883a 	add	r2,r2,r3
 8010e80:	e0800015 	stw	r2,0(fp)
 8010e84:	a0c001cc 	andi	r3,r20,7
 8010e88:	1800bc26 	beq	r3,zero,801117c <_malloc_r+0x6c4>
 8010e8c:	a0e9c83a 	sub	r20,r20,r3
 8010e90:	00840204 	movi	r2,4104
 8010e94:	a5000204 	addi	r20,r20,8
 8010e98:	10c7c83a 	sub	r3,r2,r3
 8010e9c:	a545883a 	add	r2,r20,r21
 8010ea0:	1083ffcc 	andi	r2,r2,4095
 8010ea4:	18abc83a 	sub	r21,r3,r2
 8010ea8:	a80b883a 	mov	r5,r21
 8010eac:	9009883a 	mov	r4,r18
 8010eb0:	8012d900 	call	8012d90 <_sbrk_r>
 8010eb4:	00ffffc4 	movi	r3,-1
 8010eb8:	10c0e126 	beq	r2,r3,8011240 <_malloc_r+0x788>
 8010ebc:	1505c83a 	sub	r2,r2,r20
 8010ec0:	1545883a 	add	r2,r2,r21
 8010ec4:	10800054 	ori	r2,r2,1
 8010ec8:	e0c00017 	ldw	r3,0(fp)
 8010ecc:	9d000215 	stw	r20,8(r19)
 8010ed0:	a0800115 	stw	r2,4(r20)
 8010ed4:	a8c7883a 	add	r3,r21,r3
 8010ed8:	e0c00015 	stw	r3,0(fp)
 8010edc:	84c00e26 	beq	r16,r19,8010f18 <_malloc_r+0x460>
 8010ee0:	018003c4 	movi	r6,15
 8010ee4:	3580a72e 	bgeu	r6,r22,8011184 <_malloc_r+0x6cc>
 8010ee8:	81400117 	ldw	r5,4(r16)
 8010eec:	013ffe04 	movi	r4,-8
 8010ef0:	b0bffd04 	addi	r2,r22,-12
 8010ef4:	1104703a 	and	r2,r2,r4
 8010ef8:	2900004c 	andi	r4,r5,1
 8010efc:	2088b03a 	or	r4,r4,r2
 8010f00:	81000115 	stw	r4,4(r16)
 8010f04:	01400144 	movi	r5,5
 8010f08:	8089883a 	add	r4,r16,r2
 8010f0c:	21400115 	stw	r5,4(r4)
 8010f10:	21400215 	stw	r5,8(r4)
 8010f14:	3080cd36 	bltu	r6,r2,801124c <_malloc_r+0x794>
 8010f18:	008200b4 	movhi	r2,2050
 8010f1c:	10ba3604 	addi	r2,r2,-5928
 8010f20:	11000017 	ldw	r4,0(r2)
 8010f24:	20c0012e 	bgeu	r4,r3,8010f2c <_malloc_r+0x474>
 8010f28:	10c00015 	stw	r3,0(r2)
 8010f2c:	008200b4 	movhi	r2,2050
 8010f30:	10ba3504 	addi	r2,r2,-5932
 8010f34:	11000017 	ldw	r4,0(r2)
 8010f38:	9c000217 	ldw	r16,8(r19)
 8010f3c:	20c0012e 	bgeu	r4,r3,8010f44 <_malloc_r+0x48c>
 8010f40:	10c00015 	stw	r3,0(r2)
 8010f44:	80c00117 	ldw	r3,4(r16)
 8010f48:	00bfff04 	movi	r2,-4
 8010f4c:	1886703a 	and	r3,r3,r2
 8010f50:	1c45c83a 	sub	r2,r3,r17
 8010f54:	1c400236 	bltu	r3,r17,8010f60 <_malloc_r+0x4a8>
 8010f58:	00c003c4 	movi	r3,15
 8010f5c:	18800416 	blt	r3,r2,8010f70 <_malloc_r+0x4b8>
 8010f60:	9009883a 	mov	r4,r18
 8010f64:	80162cc0 	call	80162cc <__malloc_unlock>
 8010f68:	0005883a 	mov	r2,zero
 8010f6c:	003f7b06 	br	8010d5c <__alt_data_end+0xfc010d5c>
 8010f70:	88c00054 	ori	r3,r17,1
 8010f74:	80c00115 	stw	r3,4(r16)
 8010f78:	8463883a 	add	r17,r16,r17
 8010f7c:	10800054 	ori	r2,r2,1
 8010f80:	9c400215 	stw	r17,8(r19)
 8010f84:	88800115 	stw	r2,4(r17)
 8010f88:	9009883a 	mov	r4,r18
 8010f8c:	80162cc0 	call	80162cc <__malloc_unlock>
 8010f90:	80800204 	addi	r2,r16,8
 8010f94:	003f7106 	br	8010d5c <__alt_data_end+0xfc010d5c>
 8010f98:	00c00504 	movi	r3,20
 8010f9c:	18804a2e 	bgeu	r3,r2,80110c8 <_malloc_r+0x610>
 8010fa0:	00c01504 	movi	r3,84
 8010fa4:	18806e36 	bltu	r3,r2,8011160 <_malloc_r+0x6a8>
 8010fa8:	8804d33a 	srli	r2,r17,12
 8010fac:	12001bc4 	addi	r8,r2,111
 8010fb0:	11c01b84 	addi	r7,r2,110
 8010fb4:	4209883a 	add	r4,r8,r8
 8010fb8:	003edd06 	br	8010b30 <__alt_data_end+0xfc010b30>
 8010fbc:	3804d27a 	srli	r2,r7,9
 8010fc0:	00c00104 	movi	r3,4
 8010fc4:	1880442e 	bgeu	r3,r2,80110d8 <_malloc_r+0x620>
 8010fc8:	00c00504 	movi	r3,20
 8010fcc:	18808136 	bltu	r3,r2,80111d4 <_malloc_r+0x71c>
 8010fd0:	11401704 	addi	r5,r2,92
 8010fd4:	10c016c4 	addi	r3,r2,91
 8010fd8:	294b883a 	add	r5,r5,r5
 8010fdc:	294b883a 	add	r5,r5,r5
 8010fe0:	294b883a 	add	r5,r5,r5
 8010fe4:	994b883a 	add	r5,r19,r5
 8010fe8:	28800017 	ldw	r2,0(r5)
 8010fec:	018200b4 	movhi	r6,2050
 8010ff0:	297ffe04 	addi	r5,r5,-8
 8010ff4:	31ad4404 	addi	r6,r6,-19184
 8010ff8:	28806526 	beq	r5,r2,8011190 <_malloc_r+0x6d8>
 8010ffc:	01bfff04 	movi	r6,-4
 8011000:	10c00117 	ldw	r3,4(r2)
 8011004:	1986703a 	and	r3,r3,r6
 8011008:	38c0022e 	bgeu	r7,r3,8011014 <_malloc_r+0x55c>
 801100c:	10800217 	ldw	r2,8(r2)
 8011010:	28bffb1e 	bne	r5,r2,8011000 <__alt_data_end+0xfc011000>
 8011014:	11400317 	ldw	r5,12(r2)
 8011018:	98c00117 	ldw	r3,4(r19)
 801101c:	81400315 	stw	r5,12(r16)
 8011020:	80800215 	stw	r2,8(r16)
 8011024:	2c000215 	stw	r16,8(r5)
 8011028:	14000315 	stw	r16,12(r2)
 801102c:	003ef806 	br	8010c10 <__alt_data_end+0xfc010c10>
 8011030:	88c00054 	ori	r3,r17,1
 8011034:	80c00115 	stw	r3,4(r16)
 8011038:	8463883a 	add	r17,r16,r17
 801103c:	34400515 	stw	r17,20(r6)
 8011040:	34400415 	stw	r17,16(r6)
 8011044:	10c00054 	ori	r3,r2,1
 8011048:	8a000315 	stw	r8,12(r17)
 801104c:	8a000215 	stw	r8,8(r17)
 8011050:	88c00115 	stw	r3,4(r17)
 8011054:	88a3883a 	add	r17,r17,r2
 8011058:	88800015 	stw	r2,0(r17)
 801105c:	9009883a 	mov	r4,r18
 8011060:	80162cc0 	call	80162cc <__malloc_unlock>
 8011064:	80800204 	addi	r2,r16,8
 8011068:	003f3c06 	br	8010d5c <__alt_data_end+0xfc010d5c>
 801106c:	30c00117 	ldw	r3,4(r6)
 8011070:	003ee706 	br	8010c10 <__alt_data_end+0xfc010c10>
 8011074:	5ac00044 	addi	r11,r11,1
 8011078:	588000cc 	andi	r2,r11,3
 801107c:	31800204 	addi	r6,r6,8
 8011080:	103efd1e 	bne	r2,zero,8010c78 <__alt_data_end+0xfc010c78>
 8011084:	00002406 	br	8011118 <_malloc_r+0x660>
 8011088:	14000317 	ldw	r16,12(r2)
 801108c:	143f251e 	bne	r2,r16,8010d24 <__alt_data_end+0xfc010d24>
 8011090:	21000084 	addi	r4,r4,2
 8011094:	003ebc06 	br	8010b88 <__alt_data_end+0xfc010b88>
 8011098:	8085883a 	add	r2,r16,r2
 801109c:	10c00117 	ldw	r3,4(r2)
 80110a0:	81000317 	ldw	r4,12(r16)
 80110a4:	81400217 	ldw	r5,8(r16)
 80110a8:	18c00054 	ori	r3,r3,1
 80110ac:	10c00115 	stw	r3,4(r2)
 80110b0:	29000315 	stw	r4,12(r5)
 80110b4:	21400215 	stw	r5,8(r4)
 80110b8:	9009883a 	mov	r4,r18
 80110bc:	80162cc0 	call	80162cc <__malloc_unlock>
 80110c0:	80800204 	addi	r2,r16,8
 80110c4:	003f2506 	br	8010d5c <__alt_data_end+0xfc010d5c>
 80110c8:	12001704 	addi	r8,r2,92
 80110cc:	11c016c4 	addi	r7,r2,91
 80110d0:	4209883a 	add	r4,r8,r8
 80110d4:	003e9606 	br	8010b30 <__alt_data_end+0xfc010b30>
 80110d8:	3804d1ba 	srli	r2,r7,6
 80110dc:	11400e44 	addi	r5,r2,57
 80110e0:	10c00e04 	addi	r3,r2,56
 80110e4:	294b883a 	add	r5,r5,r5
 80110e8:	003fbc06 	br	8010fdc <__alt_data_end+0xfc010fdc>
 80110ec:	84ff5926 	beq	r16,r19,8010e54 <__alt_data_end+0xfc010e54>
 80110f0:	008200b4 	movhi	r2,2050
 80110f4:	10ad4404 	addi	r2,r2,-19184
 80110f8:	14000217 	ldw	r16,8(r2)
 80110fc:	00bfff04 	movi	r2,-4
 8011100:	80c00117 	ldw	r3,4(r16)
 8011104:	1886703a 	and	r3,r3,r2
 8011108:	003f9106 	br	8010f50 <__alt_data_end+0xfc010f50>
 801110c:	60800217 	ldw	r2,8(r12)
 8011110:	213fffc4 	addi	r4,r4,-1
 8011114:	1300651e 	bne	r2,r12,80112ac <_malloc_r+0x7f4>
 8011118:	208000cc 	andi	r2,r4,3
 801111c:	633ffe04 	addi	r12,r12,-8
 8011120:	103ffa1e 	bne	r2,zero,801110c <__alt_data_end+0xfc01110c>
 8011124:	98800117 	ldw	r2,4(r19)
 8011128:	0146303a 	nor	r3,zero,r5
 801112c:	1884703a 	and	r2,r3,r2
 8011130:	98800115 	stw	r2,4(r19)
 8011134:	294b883a 	add	r5,r5,r5
 8011138:	117f2836 	bltu	r2,r5,8010ddc <__alt_data_end+0xfc010ddc>
 801113c:	283f2726 	beq	r5,zero,8010ddc <__alt_data_end+0xfc010ddc>
 8011140:	2886703a 	and	r3,r5,r2
 8011144:	5809883a 	mov	r4,r11
 8011148:	183ec31e 	bne	r3,zero,8010c58 <__alt_data_end+0xfc010c58>
 801114c:	294b883a 	add	r5,r5,r5
 8011150:	2886703a 	and	r3,r5,r2
 8011154:	21000104 	addi	r4,r4,4
 8011158:	183ffc26 	beq	r3,zero,801114c <__alt_data_end+0xfc01114c>
 801115c:	003ebe06 	br	8010c58 <__alt_data_end+0xfc010c58>
 8011160:	00c05504 	movi	r3,340
 8011164:	18801236 	bltu	r3,r2,80111b0 <_malloc_r+0x6f8>
 8011168:	8804d3fa 	srli	r2,r17,15
 801116c:	12001e04 	addi	r8,r2,120
 8011170:	11c01dc4 	addi	r7,r2,119
 8011174:	4209883a 	add	r4,r8,r8
 8011178:	003e6d06 	br	8010b30 <__alt_data_end+0xfc010b30>
 801117c:	00c40004 	movi	r3,4096
 8011180:	003f4606 	br	8010e9c <__alt_data_end+0xfc010e9c>
 8011184:	00800044 	movi	r2,1
 8011188:	a0800115 	stw	r2,4(r20)
 801118c:	003f7406 	br	8010f60 <__alt_data_end+0xfc010f60>
 8011190:	1805d0ba 	srai	r2,r3,2
 8011194:	01c00044 	movi	r7,1
 8011198:	30c00117 	ldw	r3,4(r6)
 801119c:	388e983a 	sll	r7,r7,r2
 80111a0:	2805883a 	mov	r2,r5
 80111a4:	38c6b03a 	or	r3,r7,r3
 80111a8:	30c00115 	stw	r3,4(r6)
 80111ac:	003f9b06 	br	801101c <__alt_data_end+0xfc01101c>
 80111b0:	00c15504 	movi	r3,1364
 80111b4:	18801a36 	bltu	r3,r2,8011220 <_malloc_r+0x768>
 80111b8:	8804d4ba 	srli	r2,r17,18
 80111bc:	12001f44 	addi	r8,r2,125
 80111c0:	11c01f04 	addi	r7,r2,124
 80111c4:	4209883a 	add	r4,r8,r8
 80111c8:	003e5906 	br	8010b30 <__alt_data_end+0xfc010b30>
 80111cc:	ad400404 	addi	r21,r21,16
 80111d0:	003f1706 	br	8010e30 <__alt_data_end+0xfc010e30>
 80111d4:	00c01504 	movi	r3,84
 80111d8:	18802336 	bltu	r3,r2,8011268 <_malloc_r+0x7b0>
 80111dc:	3804d33a 	srli	r2,r7,12
 80111e0:	11401bc4 	addi	r5,r2,111
 80111e4:	10c01b84 	addi	r3,r2,110
 80111e8:	294b883a 	add	r5,r5,r5
 80111ec:	003f7b06 	br	8010fdc <__alt_data_end+0xfc010fdc>
 80111f0:	9c000217 	ldw	r16,8(r19)
 80111f4:	00bfff04 	movi	r2,-4
 80111f8:	80c00117 	ldw	r3,4(r16)
 80111fc:	1886703a 	and	r3,r3,r2
 8011200:	003f5306 	br	8010f50 <__alt_data_end+0xfc010f50>
 8011204:	3083ffcc 	andi	r2,r6,4095
 8011208:	103f181e 	bne	r2,zero,8010e6c <__alt_data_end+0xfc010e6c>
 801120c:	99000217 	ldw	r4,8(r19)
 8011210:	b545883a 	add	r2,r22,r21
 8011214:	10800054 	ori	r2,r2,1
 8011218:	20800115 	stw	r2,4(r4)
 801121c:	003f3e06 	br	8010f18 <__alt_data_end+0xfc010f18>
 8011220:	01003f84 	movi	r4,254
 8011224:	02001fc4 	movi	r8,127
 8011228:	01c01f84 	movi	r7,126
 801122c:	003e4006 	br	8010b30 <__alt_data_end+0xfc010b30>
 8011230:	008200b4 	movhi	r2,2050
 8011234:	10b2df04 	addi	r2,r2,-13444
 8011238:	15000015 	stw	r20,0(r2)
 801123c:	003f1106 	br	8010e84 <__alt_data_end+0xfc010e84>
 8011240:	00800044 	movi	r2,1
 8011244:	002b883a 	mov	r21,zero
 8011248:	003f1f06 	br	8010ec8 <__alt_data_end+0xfc010ec8>
 801124c:	81400204 	addi	r5,r16,8
 8011250:	9009883a 	mov	r4,r18
 8011254:	800fec00 	call	800fec0 <_free_r>
 8011258:	008200b4 	movhi	r2,2050
 801125c:	10ba4a04 	addi	r2,r2,-5848
 8011260:	10c00017 	ldw	r3,0(r2)
 8011264:	003f2c06 	br	8010f18 <__alt_data_end+0xfc010f18>
 8011268:	00c05504 	movi	r3,340
 801126c:	18800536 	bltu	r3,r2,8011284 <_malloc_r+0x7cc>
 8011270:	3804d3fa 	srli	r2,r7,15
 8011274:	11401e04 	addi	r5,r2,120
 8011278:	10c01dc4 	addi	r3,r2,119
 801127c:	294b883a 	add	r5,r5,r5
 8011280:	003f5606 	br	8010fdc <__alt_data_end+0xfc010fdc>
 8011284:	00c15504 	movi	r3,1364
 8011288:	18800536 	bltu	r3,r2,80112a0 <_malloc_r+0x7e8>
 801128c:	3804d4ba 	srli	r2,r7,18
 8011290:	11401f44 	addi	r5,r2,125
 8011294:	10c01f04 	addi	r3,r2,124
 8011298:	294b883a 	add	r5,r5,r5
 801129c:	003f4f06 	br	8010fdc <__alt_data_end+0xfc010fdc>
 80112a0:	01403f84 	movi	r5,254
 80112a4:	00c01f84 	movi	r3,126
 80112a8:	003f4c06 	br	8010fdc <__alt_data_end+0xfc010fdc>
 80112ac:	98800117 	ldw	r2,4(r19)
 80112b0:	003fa006 	br	8011134 <__alt_data_end+0xfc011134>
 80112b4:	8808d0fa 	srli	r4,r17,3
 80112b8:	20800044 	addi	r2,r4,1
 80112bc:	1085883a 	add	r2,r2,r2
 80112c0:	003e9006 	br	8010d04 <__alt_data_end+0xfc010d04>

080112c4 <memchr>:
 80112c4:	208000cc 	andi	r2,r4,3
 80112c8:	280f883a 	mov	r7,r5
 80112cc:	10003426 	beq	r2,zero,80113a0 <memchr+0xdc>
 80112d0:	30bfffc4 	addi	r2,r6,-1
 80112d4:	30001a26 	beq	r6,zero,8011340 <memchr+0x7c>
 80112d8:	20c00003 	ldbu	r3,0(r4)
 80112dc:	29803fcc 	andi	r6,r5,255
 80112e0:	30c0051e 	bne	r6,r3,80112f8 <memchr+0x34>
 80112e4:	00001806 	br	8011348 <memchr+0x84>
 80112e8:	10001526 	beq	r2,zero,8011340 <memchr+0x7c>
 80112ec:	20c00003 	ldbu	r3,0(r4)
 80112f0:	10bfffc4 	addi	r2,r2,-1
 80112f4:	30c01426 	beq	r6,r3,8011348 <memchr+0x84>
 80112f8:	21000044 	addi	r4,r4,1
 80112fc:	20c000cc 	andi	r3,r4,3
 8011300:	183ff91e 	bne	r3,zero,80112e8 <__alt_data_end+0xfc0112e8>
 8011304:	020000c4 	movi	r8,3
 8011308:	40801136 	bltu	r8,r2,8011350 <memchr+0x8c>
 801130c:	10000c26 	beq	r2,zero,8011340 <memchr+0x7c>
 8011310:	20c00003 	ldbu	r3,0(r4)
 8011314:	29403fcc 	andi	r5,r5,255
 8011318:	28c00b26 	beq	r5,r3,8011348 <memchr+0x84>
 801131c:	20c00044 	addi	r3,r4,1
 8011320:	39803fcc 	andi	r6,r7,255
 8011324:	2089883a 	add	r4,r4,r2
 8011328:	00000306 	br	8011338 <memchr+0x74>
 801132c:	18c00044 	addi	r3,r3,1
 8011330:	197fffc3 	ldbu	r5,-1(r3)
 8011334:	31400526 	beq	r6,r5,801134c <memchr+0x88>
 8011338:	1805883a 	mov	r2,r3
 801133c:	20fffb1e 	bne	r4,r3,801132c <__alt_data_end+0xfc01132c>
 8011340:	0005883a 	mov	r2,zero
 8011344:	f800283a 	ret
 8011348:	2005883a 	mov	r2,r4
 801134c:	f800283a 	ret
 8011350:	28c03fcc 	andi	r3,r5,255
 8011354:	1812923a 	slli	r9,r3,8
 8011358:	02ffbff4 	movhi	r11,65279
 801135c:	02a02074 	movhi	r10,32897
 8011360:	48d2b03a 	or	r9,r9,r3
 8011364:	4806943a 	slli	r3,r9,16
 8011368:	5affbfc4 	addi	r11,r11,-257
 801136c:	52a02004 	addi	r10,r10,-32640
 8011370:	48d2b03a 	or	r9,r9,r3
 8011374:	20c00017 	ldw	r3,0(r4)
 8011378:	48c6f03a 	xor	r3,r9,r3
 801137c:	1acd883a 	add	r6,r3,r11
 8011380:	00c6303a 	nor	r3,zero,r3
 8011384:	30c6703a 	and	r3,r6,r3
 8011388:	1a86703a 	and	r3,r3,r10
 801138c:	183fe01e 	bne	r3,zero,8011310 <__alt_data_end+0xfc011310>
 8011390:	10bfff04 	addi	r2,r2,-4
 8011394:	21000104 	addi	r4,r4,4
 8011398:	40bff636 	bltu	r8,r2,8011374 <__alt_data_end+0xfc011374>
 801139c:	003fdb06 	br	801130c <__alt_data_end+0xfc01130c>
 80113a0:	3005883a 	mov	r2,r6
 80113a4:	003fd706 	br	8011304 <__alt_data_end+0xfc011304>

080113a8 <memcpy>:
 80113a8:	defffd04 	addi	sp,sp,-12
 80113ac:	dfc00215 	stw	ra,8(sp)
 80113b0:	dc400115 	stw	r17,4(sp)
 80113b4:	dc000015 	stw	r16,0(sp)
 80113b8:	00c003c4 	movi	r3,15
 80113bc:	2005883a 	mov	r2,r4
 80113c0:	1980452e 	bgeu	r3,r6,80114d8 <memcpy+0x130>
 80113c4:	2906b03a 	or	r3,r5,r4
 80113c8:	18c000cc 	andi	r3,r3,3
 80113cc:	1800441e 	bne	r3,zero,80114e0 <memcpy+0x138>
 80113d0:	347ffc04 	addi	r17,r6,-16
 80113d4:	8822d13a 	srli	r17,r17,4
 80113d8:	28c00104 	addi	r3,r5,4
 80113dc:	23400104 	addi	r13,r4,4
 80113e0:	8820913a 	slli	r16,r17,4
 80113e4:	2b000204 	addi	r12,r5,8
 80113e8:	22c00204 	addi	r11,r4,8
 80113ec:	84000504 	addi	r16,r16,20
 80113f0:	2a800304 	addi	r10,r5,12
 80113f4:	22400304 	addi	r9,r4,12
 80113f8:	2c21883a 	add	r16,r5,r16
 80113fc:	2811883a 	mov	r8,r5
 8011400:	200f883a 	mov	r7,r4
 8011404:	41000017 	ldw	r4,0(r8)
 8011408:	1fc00017 	ldw	ra,0(r3)
 801140c:	63c00017 	ldw	r15,0(r12)
 8011410:	39000015 	stw	r4,0(r7)
 8011414:	53800017 	ldw	r14,0(r10)
 8011418:	6fc00015 	stw	ra,0(r13)
 801141c:	5bc00015 	stw	r15,0(r11)
 8011420:	4b800015 	stw	r14,0(r9)
 8011424:	18c00404 	addi	r3,r3,16
 8011428:	39c00404 	addi	r7,r7,16
 801142c:	42000404 	addi	r8,r8,16
 8011430:	6b400404 	addi	r13,r13,16
 8011434:	63000404 	addi	r12,r12,16
 8011438:	5ac00404 	addi	r11,r11,16
 801143c:	52800404 	addi	r10,r10,16
 8011440:	4a400404 	addi	r9,r9,16
 8011444:	1c3fef1e 	bne	r3,r16,8011404 <__alt_data_end+0xfc011404>
 8011448:	89c00044 	addi	r7,r17,1
 801144c:	380e913a 	slli	r7,r7,4
 8011450:	310003cc 	andi	r4,r6,15
 8011454:	02c000c4 	movi	r11,3
 8011458:	11c7883a 	add	r3,r2,r7
 801145c:	29cb883a 	add	r5,r5,r7
 8011460:	5900212e 	bgeu	r11,r4,80114e8 <memcpy+0x140>
 8011464:	1813883a 	mov	r9,r3
 8011468:	2811883a 	mov	r8,r5
 801146c:	200f883a 	mov	r7,r4
 8011470:	42800017 	ldw	r10,0(r8)
 8011474:	4a400104 	addi	r9,r9,4
 8011478:	39ffff04 	addi	r7,r7,-4
 801147c:	4abfff15 	stw	r10,-4(r9)
 8011480:	42000104 	addi	r8,r8,4
 8011484:	59fffa36 	bltu	r11,r7,8011470 <__alt_data_end+0xfc011470>
 8011488:	213fff04 	addi	r4,r4,-4
 801148c:	2008d0ba 	srli	r4,r4,2
 8011490:	318000cc 	andi	r6,r6,3
 8011494:	21000044 	addi	r4,r4,1
 8011498:	2109883a 	add	r4,r4,r4
 801149c:	2109883a 	add	r4,r4,r4
 80114a0:	1907883a 	add	r3,r3,r4
 80114a4:	290b883a 	add	r5,r5,r4
 80114a8:	30000626 	beq	r6,zero,80114c4 <memcpy+0x11c>
 80114ac:	198d883a 	add	r6,r3,r6
 80114b0:	29c00003 	ldbu	r7,0(r5)
 80114b4:	18c00044 	addi	r3,r3,1
 80114b8:	29400044 	addi	r5,r5,1
 80114bc:	19ffffc5 	stb	r7,-1(r3)
 80114c0:	19bffb1e 	bne	r3,r6,80114b0 <__alt_data_end+0xfc0114b0>
 80114c4:	dfc00217 	ldw	ra,8(sp)
 80114c8:	dc400117 	ldw	r17,4(sp)
 80114cc:	dc000017 	ldw	r16,0(sp)
 80114d0:	dec00304 	addi	sp,sp,12
 80114d4:	f800283a 	ret
 80114d8:	2007883a 	mov	r3,r4
 80114dc:	003ff206 	br	80114a8 <__alt_data_end+0xfc0114a8>
 80114e0:	2007883a 	mov	r3,r4
 80114e4:	003ff106 	br	80114ac <__alt_data_end+0xfc0114ac>
 80114e8:	200d883a 	mov	r6,r4
 80114ec:	003fee06 	br	80114a8 <__alt_data_end+0xfc0114a8>

080114f0 <memmove>:
 80114f0:	2005883a 	mov	r2,r4
 80114f4:	29000b2e 	bgeu	r5,r4,8011524 <memmove+0x34>
 80114f8:	298f883a 	add	r7,r5,r6
 80114fc:	21c0092e 	bgeu	r4,r7,8011524 <memmove+0x34>
 8011500:	2187883a 	add	r3,r4,r6
 8011504:	198bc83a 	sub	r5,r3,r6
 8011508:	30004826 	beq	r6,zero,801162c <memmove+0x13c>
 801150c:	39ffffc4 	addi	r7,r7,-1
 8011510:	39000003 	ldbu	r4,0(r7)
 8011514:	18ffffc4 	addi	r3,r3,-1
 8011518:	19000005 	stb	r4,0(r3)
 801151c:	28fffb1e 	bne	r5,r3,801150c <__alt_data_end+0xfc01150c>
 8011520:	f800283a 	ret
 8011524:	00c003c4 	movi	r3,15
 8011528:	1980412e 	bgeu	r3,r6,8011630 <memmove+0x140>
 801152c:	2886b03a 	or	r3,r5,r2
 8011530:	18c000cc 	andi	r3,r3,3
 8011534:	1800401e 	bne	r3,zero,8011638 <memmove+0x148>
 8011538:	33fffc04 	addi	r15,r6,-16
 801153c:	781ed13a 	srli	r15,r15,4
 8011540:	28c00104 	addi	r3,r5,4
 8011544:	13400104 	addi	r13,r2,4
 8011548:	781c913a 	slli	r14,r15,4
 801154c:	2b000204 	addi	r12,r5,8
 8011550:	12c00204 	addi	r11,r2,8
 8011554:	73800504 	addi	r14,r14,20
 8011558:	2a800304 	addi	r10,r5,12
 801155c:	12400304 	addi	r9,r2,12
 8011560:	2b9d883a 	add	r14,r5,r14
 8011564:	2811883a 	mov	r8,r5
 8011568:	100f883a 	mov	r7,r2
 801156c:	41000017 	ldw	r4,0(r8)
 8011570:	39c00404 	addi	r7,r7,16
 8011574:	18c00404 	addi	r3,r3,16
 8011578:	393ffc15 	stw	r4,-16(r7)
 801157c:	193ffc17 	ldw	r4,-16(r3)
 8011580:	6b400404 	addi	r13,r13,16
 8011584:	5ac00404 	addi	r11,r11,16
 8011588:	693ffc15 	stw	r4,-16(r13)
 801158c:	61000017 	ldw	r4,0(r12)
 8011590:	4a400404 	addi	r9,r9,16
 8011594:	42000404 	addi	r8,r8,16
 8011598:	593ffc15 	stw	r4,-16(r11)
 801159c:	51000017 	ldw	r4,0(r10)
 80115a0:	63000404 	addi	r12,r12,16
 80115a4:	52800404 	addi	r10,r10,16
 80115a8:	493ffc15 	stw	r4,-16(r9)
 80115ac:	1bbfef1e 	bne	r3,r14,801156c <__alt_data_end+0xfc01156c>
 80115b0:	79000044 	addi	r4,r15,1
 80115b4:	2008913a 	slli	r4,r4,4
 80115b8:	328003cc 	andi	r10,r6,15
 80115bc:	02c000c4 	movi	r11,3
 80115c0:	1107883a 	add	r3,r2,r4
 80115c4:	290b883a 	add	r5,r5,r4
 80115c8:	5a801e2e 	bgeu	r11,r10,8011644 <memmove+0x154>
 80115cc:	1813883a 	mov	r9,r3
 80115d0:	2811883a 	mov	r8,r5
 80115d4:	500f883a 	mov	r7,r10
 80115d8:	41000017 	ldw	r4,0(r8)
 80115dc:	4a400104 	addi	r9,r9,4
 80115e0:	39ffff04 	addi	r7,r7,-4
 80115e4:	493fff15 	stw	r4,-4(r9)
 80115e8:	42000104 	addi	r8,r8,4
 80115ec:	59fffa36 	bltu	r11,r7,80115d8 <__alt_data_end+0xfc0115d8>
 80115f0:	513fff04 	addi	r4,r10,-4
 80115f4:	2008d0ba 	srli	r4,r4,2
 80115f8:	318000cc 	andi	r6,r6,3
 80115fc:	21000044 	addi	r4,r4,1
 8011600:	2109883a 	add	r4,r4,r4
 8011604:	2109883a 	add	r4,r4,r4
 8011608:	1907883a 	add	r3,r3,r4
 801160c:	290b883a 	add	r5,r5,r4
 8011610:	30000b26 	beq	r6,zero,8011640 <memmove+0x150>
 8011614:	198d883a 	add	r6,r3,r6
 8011618:	29c00003 	ldbu	r7,0(r5)
 801161c:	18c00044 	addi	r3,r3,1
 8011620:	29400044 	addi	r5,r5,1
 8011624:	19ffffc5 	stb	r7,-1(r3)
 8011628:	19bffb1e 	bne	r3,r6,8011618 <__alt_data_end+0xfc011618>
 801162c:	f800283a 	ret
 8011630:	1007883a 	mov	r3,r2
 8011634:	003ff606 	br	8011610 <__alt_data_end+0xfc011610>
 8011638:	1007883a 	mov	r3,r2
 801163c:	003ff506 	br	8011614 <__alt_data_end+0xfc011614>
 8011640:	f800283a 	ret
 8011644:	500d883a 	mov	r6,r10
 8011648:	003ff106 	br	8011610 <__alt_data_end+0xfc011610>

0801164c <memset>:
 801164c:	20c000cc 	andi	r3,r4,3
 8011650:	2005883a 	mov	r2,r4
 8011654:	18004426 	beq	r3,zero,8011768 <memset+0x11c>
 8011658:	31ffffc4 	addi	r7,r6,-1
 801165c:	30004026 	beq	r6,zero,8011760 <memset+0x114>
 8011660:	2813883a 	mov	r9,r5
 8011664:	200d883a 	mov	r6,r4
 8011668:	2007883a 	mov	r3,r4
 801166c:	00000406 	br	8011680 <memset+0x34>
 8011670:	3a3fffc4 	addi	r8,r7,-1
 8011674:	31800044 	addi	r6,r6,1
 8011678:	38003926 	beq	r7,zero,8011760 <memset+0x114>
 801167c:	400f883a 	mov	r7,r8
 8011680:	18c00044 	addi	r3,r3,1
 8011684:	32400005 	stb	r9,0(r6)
 8011688:	1a0000cc 	andi	r8,r3,3
 801168c:	403ff81e 	bne	r8,zero,8011670 <__alt_data_end+0xfc011670>
 8011690:	010000c4 	movi	r4,3
 8011694:	21c02d2e 	bgeu	r4,r7,801174c <memset+0x100>
 8011698:	29003fcc 	andi	r4,r5,255
 801169c:	200c923a 	slli	r6,r4,8
 80116a0:	3108b03a 	or	r4,r6,r4
 80116a4:	200c943a 	slli	r6,r4,16
 80116a8:	218cb03a 	or	r6,r4,r6
 80116ac:	010003c4 	movi	r4,15
 80116b0:	21c0182e 	bgeu	r4,r7,8011714 <memset+0xc8>
 80116b4:	3b3ffc04 	addi	r12,r7,-16
 80116b8:	6018d13a 	srli	r12,r12,4
 80116bc:	1a000104 	addi	r8,r3,4
 80116c0:	1ac00204 	addi	r11,r3,8
 80116c4:	6008913a 	slli	r4,r12,4
 80116c8:	1a800304 	addi	r10,r3,12
 80116cc:	1813883a 	mov	r9,r3
 80116d0:	21000504 	addi	r4,r4,20
 80116d4:	1909883a 	add	r4,r3,r4
 80116d8:	49800015 	stw	r6,0(r9)
 80116dc:	41800015 	stw	r6,0(r8)
 80116e0:	59800015 	stw	r6,0(r11)
 80116e4:	51800015 	stw	r6,0(r10)
 80116e8:	42000404 	addi	r8,r8,16
 80116ec:	4a400404 	addi	r9,r9,16
 80116f0:	5ac00404 	addi	r11,r11,16
 80116f4:	52800404 	addi	r10,r10,16
 80116f8:	413ff71e 	bne	r8,r4,80116d8 <__alt_data_end+0xfc0116d8>
 80116fc:	63000044 	addi	r12,r12,1
 8011700:	6018913a 	slli	r12,r12,4
 8011704:	39c003cc 	andi	r7,r7,15
 8011708:	010000c4 	movi	r4,3
 801170c:	1b07883a 	add	r3,r3,r12
 8011710:	21c00e2e 	bgeu	r4,r7,801174c <memset+0x100>
 8011714:	1813883a 	mov	r9,r3
 8011718:	3811883a 	mov	r8,r7
 801171c:	010000c4 	movi	r4,3
 8011720:	49800015 	stw	r6,0(r9)
 8011724:	423fff04 	addi	r8,r8,-4
 8011728:	4a400104 	addi	r9,r9,4
 801172c:	223ffc36 	bltu	r4,r8,8011720 <__alt_data_end+0xfc011720>
 8011730:	393fff04 	addi	r4,r7,-4
 8011734:	2008d0ba 	srli	r4,r4,2
 8011738:	39c000cc 	andi	r7,r7,3
 801173c:	21000044 	addi	r4,r4,1
 8011740:	2109883a 	add	r4,r4,r4
 8011744:	2109883a 	add	r4,r4,r4
 8011748:	1907883a 	add	r3,r3,r4
 801174c:	38000526 	beq	r7,zero,8011764 <memset+0x118>
 8011750:	19cf883a 	add	r7,r3,r7
 8011754:	19400005 	stb	r5,0(r3)
 8011758:	18c00044 	addi	r3,r3,1
 801175c:	38fffd1e 	bne	r7,r3,8011754 <__alt_data_end+0xfc011754>
 8011760:	f800283a 	ret
 8011764:	f800283a 	ret
 8011768:	2007883a 	mov	r3,r4
 801176c:	300f883a 	mov	r7,r6
 8011770:	003fc706 	br	8011690 <__alt_data_end+0xfc011690>

08011774 <_Balloc>:
 8011774:	20801317 	ldw	r2,76(r4)
 8011778:	defffc04 	addi	sp,sp,-16
 801177c:	dc400115 	stw	r17,4(sp)
 8011780:	dc000015 	stw	r16,0(sp)
 8011784:	dfc00315 	stw	ra,12(sp)
 8011788:	dc800215 	stw	r18,8(sp)
 801178c:	2023883a 	mov	r17,r4
 8011790:	2821883a 	mov	r16,r5
 8011794:	10000f26 	beq	r2,zero,80117d4 <_Balloc+0x60>
 8011798:	8407883a 	add	r3,r16,r16
 801179c:	18c7883a 	add	r3,r3,r3
 80117a0:	10c7883a 	add	r3,r2,r3
 80117a4:	18800017 	ldw	r2,0(r3)
 80117a8:	10001126 	beq	r2,zero,80117f0 <_Balloc+0x7c>
 80117ac:	11000017 	ldw	r4,0(r2)
 80117b0:	19000015 	stw	r4,0(r3)
 80117b4:	10000415 	stw	zero,16(r2)
 80117b8:	10000315 	stw	zero,12(r2)
 80117bc:	dfc00317 	ldw	ra,12(sp)
 80117c0:	dc800217 	ldw	r18,8(sp)
 80117c4:	dc400117 	ldw	r17,4(sp)
 80117c8:	dc000017 	ldw	r16,0(sp)
 80117cc:	dec00404 	addi	sp,sp,16
 80117d0:	f800283a 	ret
 80117d4:	01800844 	movi	r6,33
 80117d8:	01400104 	movi	r5,4
 80117dc:	80147a80 	call	80147a8 <_calloc_r>
 80117e0:	88801315 	stw	r2,76(r17)
 80117e4:	103fec1e 	bne	r2,zero,8011798 <__alt_data_end+0xfc011798>
 80117e8:	0005883a 	mov	r2,zero
 80117ec:	003ff306 	br	80117bc <__alt_data_end+0xfc0117bc>
 80117f0:	01400044 	movi	r5,1
 80117f4:	2c24983a 	sll	r18,r5,r16
 80117f8:	8809883a 	mov	r4,r17
 80117fc:	91800144 	addi	r6,r18,5
 8011800:	318d883a 	add	r6,r6,r6
 8011804:	318d883a 	add	r6,r6,r6
 8011808:	80147a80 	call	80147a8 <_calloc_r>
 801180c:	103ff626 	beq	r2,zero,80117e8 <__alt_data_end+0xfc0117e8>
 8011810:	14000115 	stw	r16,4(r2)
 8011814:	14800215 	stw	r18,8(r2)
 8011818:	003fe606 	br	80117b4 <__alt_data_end+0xfc0117b4>

0801181c <_Bfree>:
 801181c:	28000826 	beq	r5,zero,8011840 <_Bfree+0x24>
 8011820:	28c00117 	ldw	r3,4(r5)
 8011824:	20801317 	ldw	r2,76(r4)
 8011828:	18c7883a 	add	r3,r3,r3
 801182c:	18c7883a 	add	r3,r3,r3
 8011830:	10c5883a 	add	r2,r2,r3
 8011834:	10c00017 	ldw	r3,0(r2)
 8011838:	28c00015 	stw	r3,0(r5)
 801183c:	11400015 	stw	r5,0(r2)
 8011840:	f800283a 	ret

08011844 <__multadd>:
 8011844:	defff704 	addi	sp,sp,-36
 8011848:	dc800215 	stw	r18,8(sp)
 801184c:	2c800417 	ldw	r18,16(r5)
 8011850:	dd800615 	stw	r22,24(sp)
 8011854:	dd400515 	stw	r21,20(sp)
 8011858:	dd000415 	stw	r20,16(sp)
 801185c:	dcc00315 	stw	r19,12(sp)
 8011860:	dc400115 	stw	r17,4(sp)
 8011864:	dc000015 	stw	r16,0(sp)
 8011868:	dfc00815 	stw	ra,32(sp)
 801186c:	ddc00715 	stw	r23,28(sp)
 8011870:	2827883a 	mov	r19,r5
 8011874:	2029883a 	mov	r20,r4
 8011878:	3023883a 	mov	r17,r6
 801187c:	3821883a 	mov	r16,r7
 8011880:	2d400504 	addi	r21,r5,20
 8011884:	002d883a 	mov	r22,zero
 8011888:	adc00017 	ldw	r23,0(r21)
 801188c:	880b883a 	mov	r5,r17
 8011890:	ad400104 	addi	r21,r21,4
 8011894:	b93fffcc 	andi	r4,r23,65535
 8011898:	800832c0 	call	800832c <__mulsi3>
 801189c:	b808d43a 	srli	r4,r23,16
 80118a0:	880b883a 	mov	r5,r17
 80118a4:	1421883a 	add	r16,r2,r16
 80118a8:	800832c0 	call	800832c <__mulsi3>
 80118ac:	800ed43a 	srli	r7,r16,16
 80118b0:	80ffffcc 	andi	r3,r16,65535
 80118b4:	b5800044 	addi	r22,r22,1
 80118b8:	11c5883a 	add	r2,r2,r7
 80118bc:	100e943a 	slli	r7,r2,16
 80118c0:	1020d43a 	srli	r16,r2,16
 80118c4:	38c7883a 	add	r3,r7,r3
 80118c8:	a8ffff15 	stw	r3,-4(r21)
 80118cc:	b4bfee16 	blt	r22,r18,8011888 <__alt_data_end+0xfc011888>
 80118d0:	80000926 	beq	r16,zero,80118f8 <__multadd+0xb4>
 80118d4:	98800217 	ldw	r2,8(r19)
 80118d8:	9080130e 	bge	r18,r2,8011928 <__multadd+0xe4>
 80118dc:	90800144 	addi	r2,r18,5
 80118e0:	1085883a 	add	r2,r2,r2
 80118e4:	1085883a 	add	r2,r2,r2
 80118e8:	9885883a 	add	r2,r19,r2
 80118ec:	14000015 	stw	r16,0(r2)
 80118f0:	94800044 	addi	r18,r18,1
 80118f4:	9c800415 	stw	r18,16(r19)
 80118f8:	9805883a 	mov	r2,r19
 80118fc:	dfc00817 	ldw	ra,32(sp)
 8011900:	ddc00717 	ldw	r23,28(sp)
 8011904:	dd800617 	ldw	r22,24(sp)
 8011908:	dd400517 	ldw	r21,20(sp)
 801190c:	dd000417 	ldw	r20,16(sp)
 8011910:	dcc00317 	ldw	r19,12(sp)
 8011914:	dc800217 	ldw	r18,8(sp)
 8011918:	dc400117 	ldw	r17,4(sp)
 801191c:	dc000017 	ldw	r16,0(sp)
 8011920:	dec00904 	addi	sp,sp,36
 8011924:	f800283a 	ret
 8011928:	99400117 	ldw	r5,4(r19)
 801192c:	a009883a 	mov	r4,r20
 8011930:	29400044 	addi	r5,r5,1
 8011934:	80117740 	call	8011774 <_Balloc>
 8011938:	99800417 	ldw	r6,16(r19)
 801193c:	99400304 	addi	r5,r19,12
 8011940:	11000304 	addi	r4,r2,12
 8011944:	31800084 	addi	r6,r6,2
 8011948:	318d883a 	add	r6,r6,r6
 801194c:	318d883a 	add	r6,r6,r6
 8011950:	1023883a 	mov	r17,r2
 8011954:	80113a80 	call	80113a8 <memcpy>
 8011958:	98000a26 	beq	r19,zero,8011984 <__multadd+0x140>
 801195c:	98c00117 	ldw	r3,4(r19)
 8011960:	a0801317 	ldw	r2,76(r20)
 8011964:	18c7883a 	add	r3,r3,r3
 8011968:	18c7883a 	add	r3,r3,r3
 801196c:	10c5883a 	add	r2,r2,r3
 8011970:	10c00017 	ldw	r3,0(r2)
 8011974:	98c00015 	stw	r3,0(r19)
 8011978:	14c00015 	stw	r19,0(r2)
 801197c:	8827883a 	mov	r19,r17
 8011980:	003fd606 	br	80118dc <__alt_data_end+0xfc0118dc>
 8011984:	8827883a 	mov	r19,r17
 8011988:	003fd406 	br	80118dc <__alt_data_end+0xfc0118dc>

0801198c <__s2b>:
 801198c:	defff904 	addi	sp,sp,-28
 8011990:	dc400115 	stw	r17,4(sp)
 8011994:	dc000015 	stw	r16,0(sp)
 8011998:	2023883a 	mov	r17,r4
 801199c:	2821883a 	mov	r16,r5
 80119a0:	39000204 	addi	r4,r7,8
 80119a4:	01400244 	movi	r5,9
 80119a8:	dcc00315 	stw	r19,12(sp)
 80119ac:	dc800215 	stw	r18,8(sp)
 80119b0:	dfc00615 	stw	ra,24(sp)
 80119b4:	dd400515 	stw	r21,20(sp)
 80119b8:	dd000415 	stw	r20,16(sp)
 80119bc:	3825883a 	mov	r18,r7
 80119c0:	3027883a 	mov	r19,r6
 80119c4:	80081780 	call	8008178 <__divsi3>
 80119c8:	00c00044 	movi	r3,1
 80119cc:	000b883a 	mov	r5,zero
 80119d0:	1880030e 	bge	r3,r2,80119e0 <__s2b+0x54>
 80119d4:	18c7883a 	add	r3,r3,r3
 80119d8:	29400044 	addi	r5,r5,1
 80119dc:	18bffd16 	blt	r3,r2,80119d4 <__alt_data_end+0xfc0119d4>
 80119e0:	8809883a 	mov	r4,r17
 80119e4:	80117740 	call	8011774 <_Balloc>
 80119e8:	d8c00717 	ldw	r3,28(sp)
 80119ec:	10c00515 	stw	r3,20(r2)
 80119f0:	00c00044 	movi	r3,1
 80119f4:	10c00415 	stw	r3,16(r2)
 80119f8:	00c00244 	movi	r3,9
 80119fc:	1cc0210e 	bge	r3,r19,8011a84 <__s2b+0xf8>
 8011a00:	80eb883a 	add	r21,r16,r3
 8011a04:	a829883a 	mov	r20,r21
 8011a08:	84e1883a 	add	r16,r16,r19
 8011a0c:	a1c00007 	ldb	r7,0(r20)
 8011a10:	01800284 	movi	r6,10
 8011a14:	a5000044 	addi	r20,r20,1
 8011a18:	100b883a 	mov	r5,r2
 8011a1c:	39fff404 	addi	r7,r7,-48
 8011a20:	8809883a 	mov	r4,r17
 8011a24:	80118440 	call	8011844 <__multadd>
 8011a28:	a43ff81e 	bne	r20,r16,8011a0c <__alt_data_end+0xfc011a0c>
 8011a2c:	ace1883a 	add	r16,r21,r19
 8011a30:	843ffe04 	addi	r16,r16,-8
 8011a34:	9c800a0e 	bge	r19,r18,8011a60 <__s2b+0xd4>
 8011a38:	94e5c83a 	sub	r18,r18,r19
 8011a3c:	84a5883a 	add	r18,r16,r18
 8011a40:	81c00007 	ldb	r7,0(r16)
 8011a44:	01800284 	movi	r6,10
 8011a48:	84000044 	addi	r16,r16,1
 8011a4c:	100b883a 	mov	r5,r2
 8011a50:	39fff404 	addi	r7,r7,-48
 8011a54:	8809883a 	mov	r4,r17
 8011a58:	80118440 	call	8011844 <__multadd>
 8011a5c:	84bff81e 	bne	r16,r18,8011a40 <__alt_data_end+0xfc011a40>
 8011a60:	dfc00617 	ldw	ra,24(sp)
 8011a64:	dd400517 	ldw	r21,20(sp)
 8011a68:	dd000417 	ldw	r20,16(sp)
 8011a6c:	dcc00317 	ldw	r19,12(sp)
 8011a70:	dc800217 	ldw	r18,8(sp)
 8011a74:	dc400117 	ldw	r17,4(sp)
 8011a78:	dc000017 	ldw	r16,0(sp)
 8011a7c:	dec00704 	addi	sp,sp,28
 8011a80:	f800283a 	ret
 8011a84:	84000284 	addi	r16,r16,10
 8011a88:	1827883a 	mov	r19,r3
 8011a8c:	003fe906 	br	8011a34 <__alt_data_end+0xfc011a34>

08011a90 <__hi0bits>:
 8011a90:	20bfffec 	andhi	r2,r4,65535
 8011a94:	1000141e 	bne	r2,zero,8011ae8 <__hi0bits+0x58>
 8011a98:	2008943a 	slli	r4,r4,16
 8011a9c:	00800404 	movi	r2,16
 8011aa0:	20ffc02c 	andhi	r3,r4,65280
 8011aa4:	1800021e 	bne	r3,zero,8011ab0 <__hi0bits+0x20>
 8011aa8:	2008923a 	slli	r4,r4,8
 8011aac:	10800204 	addi	r2,r2,8
 8011ab0:	20fc002c 	andhi	r3,r4,61440
 8011ab4:	1800021e 	bne	r3,zero,8011ac0 <__hi0bits+0x30>
 8011ab8:	2008913a 	slli	r4,r4,4
 8011abc:	10800104 	addi	r2,r2,4
 8011ac0:	20f0002c 	andhi	r3,r4,49152
 8011ac4:	1800031e 	bne	r3,zero,8011ad4 <__hi0bits+0x44>
 8011ac8:	2109883a 	add	r4,r4,r4
 8011acc:	10800084 	addi	r2,r2,2
 8011ad0:	2109883a 	add	r4,r4,r4
 8011ad4:	20000316 	blt	r4,zero,8011ae4 <__hi0bits+0x54>
 8011ad8:	2110002c 	andhi	r4,r4,16384
 8011adc:	2000041e 	bne	r4,zero,8011af0 <__hi0bits+0x60>
 8011ae0:	00800804 	movi	r2,32
 8011ae4:	f800283a 	ret
 8011ae8:	0005883a 	mov	r2,zero
 8011aec:	003fec06 	br	8011aa0 <__alt_data_end+0xfc011aa0>
 8011af0:	10800044 	addi	r2,r2,1
 8011af4:	f800283a 	ret

08011af8 <__lo0bits>:
 8011af8:	20c00017 	ldw	r3,0(r4)
 8011afc:	188001cc 	andi	r2,r3,7
 8011b00:	10000826 	beq	r2,zero,8011b24 <__lo0bits+0x2c>
 8011b04:	1880004c 	andi	r2,r3,1
 8011b08:	1000211e 	bne	r2,zero,8011b90 <__lo0bits+0x98>
 8011b0c:	1880008c 	andi	r2,r3,2
 8011b10:	1000211e 	bne	r2,zero,8011b98 <__lo0bits+0xa0>
 8011b14:	1806d0ba 	srli	r3,r3,2
 8011b18:	00800084 	movi	r2,2
 8011b1c:	20c00015 	stw	r3,0(r4)
 8011b20:	f800283a 	ret
 8011b24:	18bfffcc 	andi	r2,r3,65535
 8011b28:	10001326 	beq	r2,zero,8011b78 <__lo0bits+0x80>
 8011b2c:	0005883a 	mov	r2,zero
 8011b30:	19403fcc 	andi	r5,r3,255
 8011b34:	2800021e 	bne	r5,zero,8011b40 <__lo0bits+0x48>
 8011b38:	1806d23a 	srli	r3,r3,8
 8011b3c:	10800204 	addi	r2,r2,8
 8011b40:	194003cc 	andi	r5,r3,15
 8011b44:	2800021e 	bne	r5,zero,8011b50 <__lo0bits+0x58>
 8011b48:	1806d13a 	srli	r3,r3,4
 8011b4c:	10800104 	addi	r2,r2,4
 8011b50:	194000cc 	andi	r5,r3,3
 8011b54:	2800021e 	bne	r5,zero,8011b60 <__lo0bits+0x68>
 8011b58:	1806d0ba 	srli	r3,r3,2
 8011b5c:	10800084 	addi	r2,r2,2
 8011b60:	1940004c 	andi	r5,r3,1
 8011b64:	2800081e 	bne	r5,zero,8011b88 <__lo0bits+0x90>
 8011b68:	1806d07a 	srli	r3,r3,1
 8011b6c:	1800051e 	bne	r3,zero,8011b84 <__lo0bits+0x8c>
 8011b70:	00800804 	movi	r2,32
 8011b74:	f800283a 	ret
 8011b78:	1806d43a 	srli	r3,r3,16
 8011b7c:	00800404 	movi	r2,16
 8011b80:	003feb06 	br	8011b30 <__alt_data_end+0xfc011b30>
 8011b84:	10800044 	addi	r2,r2,1
 8011b88:	20c00015 	stw	r3,0(r4)
 8011b8c:	f800283a 	ret
 8011b90:	0005883a 	mov	r2,zero
 8011b94:	f800283a 	ret
 8011b98:	1806d07a 	srli	r3,r3,1
 8011b9c:	00800044 	movi	r2,1
 8011ba0:	20c00015 	stw	r3,0(r4)
 8011ba4:	f800283a 	ret

08011ba8 <__i2b>:
 8011ba8:	defffd04 	addi	sp,sp,-12
 8011bac:	dc000015 	stw	r16,0(sp)
 8011bb0:	04000044 	movi	r16,1
 8011bb4:	dc400115 	stw	r17,4(sp)
 8011bb8:	2823883a 	mov	r17,r5
 8011bbc:	800b883a 	mov	r5,r16
 8011bc0:	dfc00215 	stw	ra,8(sp)
 8011bc4:	80117740 	call	8011774 <_Balloc>
 8011bc8:	14400515 	stw	r17,20(r2)
 8011bcc:	14000415 	stw	r16,16(r2)
 8011bd0:	dfc00217 	ldw	ra,8(sp)
 8011bd4:	dc400117 	ldw	r17,4(sp)
 8011bd8:	dc000017 	ldw	r16,0(sp)
 8011bdc:	dec00304 	addi	sp,sp,12
 8011be0:	f800283a 	ret

08011be4 <__multiply>:
 8011be4:	deffef04 	addi	sp,sp,-68
 8011be8:	dc400815 	stw	r17,32(sp)
 8011bec:	dc000715 	stw	r16,28(sp)
 8011bf0:	34400417 	ldw	r17,16(r6)
 8011bf4:	2c000417 	ldw	r16,16(r5)
 8011bf8:	dd800d15 	stw	r22,52(sp)
 8011bfc:	dc800915 	stw	r18,36(sp)
 8011c00:	dfc01015 	stw	ra,64(sp)
 8011c04:	df000f15 	stw	fp,60(sp)
 8011c08:	ddc00e15 	stw	r23,56(sp)
 8011c0c:	dd400c15 	stw	r21,48(sp)
 8011c10:	dd000b15 	stw	r20,44(sp)
 8011c14:	dcc00a15 	stw	r19,40(sp)
 8011c18:	2825883a 	mov	r18,r5
 8011c1c:	302d883a 	mov	r22,r6
 8011c20:	8440050e 	bge	r16,r17,8011c38 <__multiply+0x54>
 8011c24:	8007883a 	mov	r3,r16
 8011c28:	3025883a 	mov	r18,r6
 8011c2c:	8821883a 	mov	r16,r17
 8011c30:	282d883a 	mov	r22,r5
 8011c34:	1823883a 	mov	r17,r3
 8011c38:	90800217 	ldw	r2,8(r18)
 8011c3c:	8447883a 	add	r3,r16,r17
 8011c40:	d8c00215 	stw	r3,8(sp)
 8011c44:	91400117 	ldw	r5,4(r18)
 8011c48:	10c0010e 	bge	r2,r3,8011c50 <__multiply+0x6c>
 8011c4c:	29400044 	addi	r5,r5,1
 8011c50:	80117740 	call	8011774 <_Balloc>
 8011c54:	d8c00217 	ldw	r3,8(sp)
 8011c58:	d8800615 	stw	r2,24(sp)
 8011c5c:	18eb883a 	add	r21,r3,r3
 8011c60:	ad6b883a 	add	r21,r21,r21
 8011c64:	10c00504 	addi	r3,r2,20
 8011c68:	1d6b883a 	add	r21,r3,r21
 8011c6c:	d8c00115 	stw	r3,4(sp)
 8011c70:	dd400315 	stw	r21,12(sp)
 8011c74:	1805883a 	mov	r2,r3
 8011c78:	1d40042e 	bgeu	r3,r21,8011c8c <__multiply+0xa8>
 8011c7c:	d8c00317 	ldw	r3,12(sp)
 8011c80:	10000015 	stw	zero,0(r2)
 8011c84:	10800104 	addi	r2,r2,4
 8011c88:	10fffc36 	bltu	r2,r3,8011c7c <__alt_data_end+0xfc011c7c>
 8011c8c:	8c63883a 	add	r17,r17,r17
 8011c90:	b5800504 	addi	r22,r22,20
 8011c94:	8c63883a 	add	r17,r17,r17
 8011c98:	94800504 	addi	r18,r18,20
 8011c9c:	8421883a 	add	r16,r16,r16
 8011ca0:	b463883a 	add	r17,r22,r17
 8011ca4:	8421883a 	add	r16,r16,r16
 8011ca8:	dd800015 	stw	r22,0(sp)
 8011cac:	dc800415 	stw	r18,16(sp)
 8011cb0:	dc400515 	stw	r17,20(sp)
 8011cb4:	9429883a 	add	r20,r18,r16
 8011cb8:	b4404f2e 	bgeu	r22,r17,8011df8 <__multiply+0x214>
 8011cbc:	d8c00017 	ldw	r3,0(sp)
 8011cc0:	1c800017 	ldw	r18,0(r3)
 8011cc4:	947fffcc 	andi	r17,r18,65535
 8011cc8:	88001e26 	beq	r17,zero,8011d44 <__multiply+0x160>
 8011ccc:	dd800117 	ldw	r22,4(sp)
 8011cd0:	dd400417 	ldw	r21,16(sp)
 8011cd4:	0027883a 	mov	r19,zero
 8011cd8:	ac800017 	ldw	r18,0(r21)
 8011cdc:	b4000017 	ldw	r16,0(r22)
 8011ce0:	880b883a 	mov	r5,r17
 8011ce4:	913fffcc 	andi	r4,r18,65535
 8011ce8:	800832c0 	call	800832c <__mulsi3>
 8011cec:	9008d43a 	srli	r4,r18,16
 8011cf0:	84bfffcc 	andi	r18,r16,65535
 8011cf4:	1485883a 	add	r2,r2,r18
 8011cf8:	14e5883a 	add	r18,r2,r19
 8011cfc:	8020d43a 	srli	r16,r16,16
 8011d00:	9026d43a 	srli	r19,r18,16
 8011d04:	880b883a 	mov	r5,r17
 8011d08:	800832c0 	call	800832c <__mulsi3>
 8011d0c:	1405883a 	add	r2,r2,r16
 8011d10:	14e1883a 	add	r16,r2,r19
 8011d14:	90ffffcc 	andi	r3,r18,65535
 8011d18:	8024943a 	slli	r18,r16,16
 8011d1c:	ad400104 	addi	r21,r21,4
 8011d20:	b005883a 	mov	r2,r22
 8011d24:	90c6b03a 	or	r3,r18,r3
 8011d28:	b0c00015 	stw	r3,0(r22)
 8011d2c:	8026d43a 	srli	r19,r16,16
 8011d30:	b5800104 	addi	r22,r22,4
 8011d34:	ad3fe836 	bltu	r21,r20,8011cd8 <__alt_data_end+0xfc011cd8>
 8011d38:	d8c00017 	ldw	r3,0(sp)
 8011d3c:	14c00115 	stw	r19,4(r2)
 8011d40:	1c800017 	ldw	r18,0(r3)
 8011d44:	9024d43a 	srli	r18,r18,16
 8011d48:	90002226 	beq	r18,zero,8011dd4 <__multiply+0x1f0>
 8011d4c:	d8c00117 	ldw	r3,4(sp)
 8011d50:	dd800417 	ldw	r22,16(sp)
 8011d54:	002f883a 	mov	r23,zero
 8011d58:	1f000017 	ldw	fp,0(r3)
 8011d5c:	1823883a 	mov	r17,r3
 8011d60:	182b883a 	mov	r21,r3
 8011d64:	e021883a 	mov	r16,fp
 8011d68:	00000106 	br	8011d70 <__multiply+0x18c>
 8011d6c:	982b883a 	mov	r21,r19
 8011d70:	b100000b 	ldhu	r4,0(r22)
 8011d74:	8020d43a 	srli	r16,r16,16
 8011d78:	900b883a 	mov	r5,r18
 8011d7c:	800832c0 	call	800832c <__mulsi3>
 8011d80:	1405883a 	add	r2,r2,r16
 8011d84:	15ef883a 	add	r23,r2,r23
 8011d88:	b804943a 	slli	r2,r23,16
 8011d8c:	e0ffffcc 	andi	r3,fp,65535
 8011d90:	8c400104 	addi	r17,r17,4
 8011d94:	10c6b03a 	or	r3,r2,r3
 8011d98:	88ffff15 	stw	r3,-4(r17)
 8011d9c:	b5800104 	addi	r22,r22,4
 8011da0:	b13fff17 	ldw	r4,-4(r22)
 8011da4:	acc00104 	addi	r19,r21,4
 8011da8:	900b883a 	mov	r5,r18
 8011dac:	2008d43a 	srli	r4,r4,16
 8011db0:	9c000017 	ldw	r16,0(r19)
 8011db4:	800832c0 	call	800832c <__mulsi3>
 8011db8:	b806d43a 	srli	r3,r23,16
 8011dbc:	813fffcc 	andi	r4,r16,65535
 8011dc0:	1105883a 	add	r2,r2,r4
 8011dc4:	10f9883a 	add	fp,r2,r3
 8011dc8:	e02ed43a 	srli	r23,fp,16
 8011dcc:	b53fe736 	bltu	r22,r20,8011d6c <__alt_data_end+0xfc011d6c>
 8011dd0:	af000115 	stw	fp,4(r21)
 8011dd4:	d8c00017 	ldw	r3,0(sp)
 8011dd8:	d9000517 	ldw	r4,20(sp)
 8011ddc:	18c00104 	addi	r3,r3,4
 8011de0:	d8c00015 	stw	r3,0(sp)
 8011de4:	d8c00117 	ldw	r3,4(sp)
 8011de8:	18c00104 	addi	r3,r3,4
 8011dec:	d8c00115 	stw	r3,4(sp)
 8011df0:	d8c00017 	ldw	r3,0(sp)
 8011df4:	193fb136 	bltu	r3,r4,8011cbc <__alt_data_end+0xfc011cbc>
 8011df8:	d8c00217 	ldw	r3,8(sp)
 8011dfc:	00c00c0e 	bge	zero,r3,8011e30 <__multiply+0x24c>
 8011e00:	d8c00317 	ldw	r3,12(sp)
 8011e04:	18bfff17 	ldw	r2,-4(r3)
 8011e08:	1d7fff04 	addi	r21,r3,-4
 8011e0c:	10000326 	beq	r2,zero,8011e1c <__multiply+0x238>
 8011e10:	00000706 	br	8011e30 <__multiply+0x24c>
 8011e14:	a8800017 	ldw	r2,0(r21)
 8011e18:	1000051e 	bne	r2,zero,8011e30 <__multiply+0x24c>
 8011e1c:	d8c00217 	ldw	r3,8(sp)
 8011e20:	ad7fff04 	addi	r21,r21,-4
 8011e24:	18ffffc4 	addi	r3,r3,-1
 8011e28:	d8c00215 	stw	r3,8(sp)
 8011e2c:	183ff91e 	bne	r3,zero,8011e14 <__alt_data_end+0xfc011e14>
 8011e30:	d8c00617 	ldw	r3,24(sp)
 8011e34:	d9000217 	ldw	r4,8(sp)
 8011e38:	1805883a 	mov	r2,r3
 8011e3c:	19000415 	stw	r4,16(r3)
 8011e40:	dfc01017 	ldw	ra,64(sp)
 8011e44:	df000f17 	ldw	fp,60(sp)
 8011e48:	ddc00e17 	ldw	r23,56(sp)
 8011e4c:	dd800d17 	ldw	r22,52(sp)
 8011e50:	dd400c17 	ldw	r21,48(sp)
 8011e54:	dd000b17 	ldw	r20,44(sp)
 8011e58:	dcc00a17 	ldw	r19,40(sp)
 8011e5c:	dc800917 	ldw	r18,36(sp)
 8011e60:	dc400817 	ldw	r17,32(sp)
 8011e64:	dc000717 	ldw	r16,28(sp)
 8011e68:	dec01104 	addi	sp,sp,68
 8011e6c:	f800283a 	ret

08011e70 <__pow5mult>:
 8011e70:	defffa04 	addi	sp,sp,-24
 8011e74:	dcc00315 	stw	r19,12(sp)
 8011e78:	dc000015 	stw	r16,0(sp)
 8011e7c:	dfc00515 	stw	ra,20(sp)
 8011e80:	dd000415 	stw	r20,16(sp)
 8011e84:	dc800215 	stw	r18,8(sp)
 8011e88:	dc400115 	stw	r17,4(sp)
 8011e8c:	308000cc 	andi	r2,r6,3
 8011e90:	3021883a 	mov	r16,r6
 8011e94:	2027883a 	mov	r19,r4
 8011e98:	10002f1e 	bne	r2,zero,8011f58 <__pow5mult+0xe8>
 8011e9c:	2825883a 	mov	r18,r5
 8011ea0:	8021d0ba 	srai	r16,r16,2
 8011ea4:	80001a26 	beq	r16,zero,8011f10 <__pow5mult+0xa0>
 8011ea8:	9c401217 	ldw	r17,72(r19)
 8011eac:	8800061e 	bne	r17,zero,8011ec8 <__pow5mult+0x58>
 8011eb0:	00003406 	br	8011f84 <__pow5mult+0x114>
 8011eb4:	8021d07a 	srai	r16,r16,1
 8011eb8:	80001526 	beq	r16,zero,8011f10 <__pow5mult+0xa0>
 8011ebc:	88800017 	ldw	r2,0(r17)
 8011ec0:	10001c26 	beq	r2,zero,8011f34 <__pow5mult+0xc4>
 8011ec4:	1023883a 	mov	r17,r2
 8011ec8:	8080004c 	andi	r2,r16,1
 8011ecc:	103ff926 	beq	r2,zero,8011eb4 <__alt_data_end+0xfc011eb4>
 8011ed0:	880d883a 	mov	r6,r17
 8011ed4:	900b883a 	mov	r5,r18
 8011ed8:	9809883a 	mov	r4,r19
 8011edc:	8011be40 	call	8011be4 <__multiply>
 8011ee0:	90001b26 	beq	r18,zero,8011f50 <__pow5mult+0xe0>
 8011ee4:	91000117 	ldw	r4,4(r18)
 8011ee8:	98c01317 	ldw	r3,76(r19)
 8011eec:	8021d07a 	srai	r16,r16,1
 8011ef0:	2109883a 	add	r4,r4,r4
 8011ef4:	2109883a 	add	r4,r4,r4
 8011ef8:	1907883a 	add	r3,r3,r4
 8011efc:	19000017 	ldw	r4,0(r3)
 8011f00:	91000015 	stw	r4,0(r18)
 8011f04:	1c800015 	stw	r18,0(r3)
 8011f08:	1025883a 	mov	r18,r2
 8011f0c:	803feb1e 	bne	r16,zero,8011ebc <__alt_data_end+0xfc011ebc>
 8011f10:	9005883a 	mov	r2,r18
 8011f14:	dfc00517 	ldw	ra,20(sp)
 8011f18:	dd000417 	ldw	r20,16(sp)
 8011f1c:	dcc00317 	ldw	r19,12(sp)
 8011f20:	dc800217 	ldw	r18,8(sp)
 8011f24:	dc400117 	ldw	r17,4(sp)
 8011f28:	dc000017 	ldw	r16,0(sp)
 8011f2c:	dec00604 	addi	sp,sp,24
 8011f30:	f800283a 	ret
 8011f34:	880d883a 	mov	r6,r17
 8011f38:	880b883a 	mov	r5,r17
 8011f3c:	9809883a 	mov	r4,r19
 8011f40:	8011be40 	call	8011be4 <__multiply>
 8011f44:	88800015 	stw	r2,0(r17)
 8011f48:	10000015 	stw	zero,0(r2)
 8011f4c:	003fdd06 	br	8011ec4 <__alt_data_end+0xfc011ec4>
 8011f50:	1025883a 	mov	r18,r2
 8011f54:	003fd706 	br	8011eb4 <__alt_data_end+0xfc011eb4>
 8011f58:	10bfffc4 	addi	r2,r2,-1
 8011f5c:	1085883a 	add	r2,r2,r2
 8011f60:	00c200b4 	movhi	r3,2050
 8011f64:	18eb4c04 	addi	r3,r3,-21200
 8011f68:	1085883a 	add	r2,r2,r2
 8011f6c:	1885883a 	add	r2,r3,r2
 8011f70:	11800017 	ldw	r6,0(r2)
 8011f74:	000f883a 	mov	r7,zero
 8011f78:	80118440 	call	8011844 <__multadd>
 8011f7c:	1025883a 	mov	r18,r2
 8011f80:	003fc706 	br	8011ea0 <__alt_data_end+0xfc011ea0>
 8011f84:	05000044 	movi	r20,1
 8011f88:	a00b883a 	mov	r5,r20
 8011f8c:	9809883a 	mov	r4,r19
 8011f90:	80117740 	call	8011774 <_Balloc>
 8011f94:	1023883a 	mov	r17,r2
 8011f98:	00809c44 	movi	r2,625
 8011f9c:	88800515 	stw	r2,20(r17)
 8011fa0:	8d000415 	stw	r20,16(r17)
 8011fa4:	9c401215 	stw	r17,72(r19)
 8011fa8:	88000015 	stw	zero,0(r17)
 8011fac:	003fc606 	br	8011ec8 <__alt_data_end+0xfc011ec8>

08011fb0 <__lshift>:
 8011fb0:	defff904 	addi	sp,sp,-28
 8011fb4:	dd400515 	stw	r21,20(sp)
 8011fb8:	dcc00315 	stw	r19,12(sp)
 8011fbc:	302bd17a 	srai	r21,r6,5
 8011fc0:	2cc00417 	ldw	r19,16(r5)
 8011fc4:	28800217 	ldw	r2,8(r5)
 8011fc8:	dd000415 	stw	r20,16(sp)
 8011fcc:	ace7883a 	add	r19,r21,r19
 8011fd0:	dc800215 	stw	r18,8(sp)
 8011fd4:	dc400115 	stw	r17,4(sp)
 8011fd8:	dc000015 	stw	r16,0(sp)
 8011fdc:	dfc00615 	stw	ra,24(sp)
 8011fe0:	9c000044 	addi	r16,r19,1
 8011fe4:	2823883a 	mov	r17,r5
 8011fe8:	3029883a 	mov	r20,r6
 8011fec:	2025883a 	mov	r18,r4
 8011ff0:	29400117 	ldw	r5,4(r5)
 8011ff4:	1400030e 	bge	r2,r16,8012004 <__lshift+0x54>
 8011ff8:	1085883a 	add	r2,r2,r2
 8011ffc:	29400044 	addi	r5,r5,1
 8012000:	143ffd16 	blt	r2,r16,8011ff8 <__alt_data_end+0xfc011ff8>
 8012004:	9009883a 	mov	r4,r18
 8012008:	80117740 	call	8011774 <_Balloc>
 801200c:	10c00504 	addi	r3,r2,20
 8012010:	0540070e 	bge	zero,r21,8012030 <__lshift+0x80>
 8012014:	ad6b883a 	add	r21,r21,r21
 8012018:	ad6b883a 	add	r21,r21,r21
 801201c:	1809883a 	mov	r4,r3
 8012020:	1d47883a 	add	r3,r3,r21
 8012024:	20000015 	stw	zero,0(r4)
 8012028:	21000104 	addi	r4,r4,4
 801202c:	193ffd1e 	bne	r3,r4,8012024 <__alt_data_end+0xfc012024>
 8012030:	8a000417 	ldw	r8,16(r17)
 8012034:	89000504 	addi	r4,r17,20
 8012038:	a18007cc 	andi	r6,r20,31
 801203c:	4211883a 	add	r8,r8,r8
 8012040:	4211883a 	add	r8,r8,r8
 8012044:	2211883a 	add	r8,r4,r8
 8012048:	30002326 	beq	r6,zero,80120d8 <__lshift+0x128>
 801204c:	02400804 	movi	r9,32
 8012050:	4993c83a 	sub	r9,r9,r6
 8012054:	000b883a 	mov	r5,zero
 8012058:	21c00017 	ldw	r7,0(r4)
 801205c:	1815883a 	mov	r10,r3
 8012060:	18c00104 	addi	r3,r3,4
 8012064:	398e983a 	sll	r7,r7,r6
 8012068:	21000104 	addi	r4,r4,4
 801206c:	394ab03a 	or	r5,r7,r5
 8012070:	197fff15 	stw	r5,-4(r3)
 8012074:	217fff17 	ldw	r5,-4(r4)
 8012078:	2a4ad83a 	srl	r5,r5,r9
 801207c:	223ff636 	bltu	r4,r8,8012058 <__alt_data_end+0xfc012058>
 8012080:	51400115 	stw	r5,4(r10)
 8012084:	28001a1e 	bne	r5,zero,80120f0 <__lshift+0x140>
 8012088:	843fffc4 	addi	r16,r16,-1
 801208c:	14000415 	stw	r16,16(r2)
 8012090:	88000826 	beq	r17,zero,80120b4 <__lshift+0x104>
 8012094:	89000117 	ldw	r4,4(r17)
 8012098:	90c01317 	ldw	r3,76(r18)
 801209c:	2109883a 	add	r4,r4,r4
 80120a0:	2109883a 	add	r4,r4,r4
 80120a4:	1907883a 	add	r3,r3,r4
 80120a8:	19000017 	ldw	r4,0(r3)
 80120ac:	89000015 	stw	r4,0(r17)
 80120b0:	1c400015 	stw	r17,0(r3)
 80120b4:	dfc00617 	ldw	ra,24(sp)
 80120b8:	dd400517 	ldw	r21,20(sp)
 80120bc:	dd000417 	ldw	r20,16(sp)
 80120c0:	dcc00317 	ldw	r19,12(sp)
 80120c4:	dc800217 	ldw	r18,8(sp)
 80120c8:	dc400117 	ldw	r17,4(sp)
 80120cc:	dc000017 	ldw	r16,0(sp)
 80120d0:	dec00704 	addi	sp,sp,28
 80120d4:	f800283a 	ret
 80120d8:	21400017 	ldw	r5,0(r4)
 80120dc:	18c00104 	addi	r3,r3,4
 80120e0:	21000104 	addi	r4,r4,4
 80120e4:	197fff15 	stw	r5,-4(r3)
 80120e8:	223ffb36 	bltu	r4,r8,80120d8 <__alt_data_end+0xfc0120d8>
 80120ec:	003fe606 	br	8012088 <__alt_data_end+0xfc012088>
 80120f0:	9c000084 	addi	r16,r19,2
 80120f4:	003fe406 	br	8012088 <__alt_data_end+0xfc012088>

080120f8 <__mcmp>:
 80120f8:	20800417 	ldw	r2,16(r4)
 80120fc:	28c00417 	ldw	r3,16(r5)
 8012100:	10c5c83a 	sub	r2,r2,r3
 8012104:	1000111e 	bne	r2,zero,801214c <__mcmp+0x54>
 8012108:	18c7883a 	add	r3,r3,r3
 801210c:	18c7883a 	add	r3,r3,r3
 8012110:	21000504 	addi	r4,r4,20
 8012114:	29400504 	addi	r5,r5,20
 8012118:	20c5883a 	add	r2,r4,r3
 801211c:	28cb883a 	add	r5,r5,r3
 8012120:	00000106 	br	8012128 <__mcmp+0x30>
 8012124:	20800a2e 	bgeu	r4,r2,8012150 <__mcmp+0x58>
 8012128:	10bfff04 	addi	r2,r2,-4
 801212c:	297fff04 	addi	r5,r5,-4
 8012130:	11800017 	ldw	r6,0(r2)
 8012134:	28c00017 	ldw	r3,0(r5)
 8012138:	30fffa26 	beq	r6,r3,8012124 <__alt_data_end+0xfc012124>
 801213c:	30c00236 	bltu	r6,r3,8012148 <__mcmp+0x50>
 8012140:	00800044 	movi	r2,1
 8012144:	f800283a 	ret
 8012148:	00bfffc4 	movi	r2,-1
 801214c:	f800283a 	ret
 8012150:	0005883a 	mov	r2,zero
 8012154:	f800283a 	ret

08012158 <__mdiff>:
 8012158:	28c00417 	ldw	r3,16(r5)
 801215c:	30800417 	ldw	r2,16(r6)
 8012160:	defffa04 	addi	sp,sp,-24
 8012164:	dcc00315 	stw	r19,12(sp)
 8012168:	dc800215 	stw	r18,8(sp)
 801216c:	dfc00515 	stw	ra,20(sp)
 8012170:	dd000415 	stw	r20,16(sp)
 8012174:	dc400115 	stw	r17,4(sp)
 8012178:	dc000015 	stw	r16,0(sp)
 801217c:	1887c83a 	sub	r3,r3,r2
 8012180:	2825883a 	mov	r18,r5
 8012184:	3027883a 	mov	r19,r6
 8012188:	1800141e 	bne	r3,zero,80121dc <__mdiff+0x84>
 801218c:	1085883a 	add	r2,r2,r2
 8012190:	1085883a 	add	r2,r2,r2
 8012194:	2a000504 	addi	r8,r5,20
 8012198:	34000504 	addi	r16,r6,20
 801219c:	4087883a 	add	r3,r8,r2
 80121a0:	8085883a 	add	r2,r16,r2
 80121a4:	00000106 	br	80121ac <__mdiff+0x54>
 80121a8:	40c0592e 	bgeu	r8,r3,8012310 <__mdiff+0x1b8>
 80121ac:	18ffff04 	addi	r3,r3,-4
 80121b0:	10bfff04 	addi	r2,r2,-4
 80121b4:	19c00017 	ldw	r7,0(r3)
 80121b8:	11400017 	ldw	r5,0(r2)
 80121bc:	397ffa26 	beq	r7,r5,80121a8 <__alt_data_end+0xfc0121a8>
 80121c0:	3940592e 	bgeu	r7,r5,8012328 <__mdiff+0x1d0>
 80121c4:	9005883a 	mov	r2,r18
 80121c8:	4023883a 	mov	r17,r8
 80121cc:	9825883a 	mov	r18,r19
 80121d0:	05000044 	movi	r20,1
 80121d4:	1027883a 	mov	r19,r2
 80121d8:	00000406 	br	80121ec <__mdiff+0x94>
 80121dc:	18005616 	blt	r3,zero,8012338 <__mdiff+0x1e0>
 80121e0:	34400504 	addi	r17,r6,20
 80121e4:	2c000504 	addi	r16,r5,20
 80121e8:	0029883a 	mov	r20,zero
 80121ec:	91400117 	ldw	r5,4(r18)
 80121f0:	80117740 	call	8011774 <_Balloc>
 80121f4:	92400417 	ldw	r9,16(r18)
 80121f8:	9b000417 	ldw	r12,16(r19)
 80121fc:	12c00504 	addi	r11,r2,20
 8012200:	4a51883a 	add	r8,r9,r9
 8012204:	6319883a 	add	r12,r12,r12
 8012208:	4211883a 	add	r8,r8,r8
 801220c:	6319883a 	add	r12,r12,r12
 8012210:	15000315 	stw	r20,12(r2)
 8012214:	8211883a 	add	r8,r16,r8
 8012218:	8b19883a 	add	r12,r17,r12
 801221c:	0007883a 	mov	r3,zero
 8012220:	81400017 	ldw	r5,0(r16)
 8012224:	89c00017 	ldw	r7,0(r17)
 8012228:	59800104 	addi	r6,r11,4
 801222c:	293fffcc 	andi	r4,r5,65535
 8012230:	20c7883a 	add	r3,r4,r3
 8012234:	393fffcc 	andi	r4,r7,65535
 8012238:	1909c83a 	sub	r4,r3,r4
 801223c:	280ad43a 	srli	r5,r5,16
 8012240:	380ed43a 	srli	r7,r7,16
 8012244:	2007d43a 	srai	r3,r4,16
 8012248:	213fffcc 	andi	r4,r4,65535
 801224c:	29cbc83a 	sub	r5,r5,r7
 8012250:	28c7883a 	add	r3,r5,r3
 8012254:	180a943a 	slli	r5,r3,16
 8012258:	8c400104 	addi	r17,r17,4
 801225c:	84000104 	addi	r16,r16,4
 8012260:	2908b03a 	or	r4,r5,r4
 8012264:	59000015 	stw	r4,0(r11)
 8012268:	1807d43a 	srai	r3,r3,16
 801226c:	3015883a 	mov	r10,r6
 8012270:	3017883a 	mov	r11,r6
 8012274:	8b3fea36 	bltu	r17,r12,8012220 <__alt_data_end+0xfc012220>
 8012278:	8200162e 	bgeu	r16,r8,80122d4 <__mdiff+0x17c>
 801227c:	8017883a 	mov	r11,r16
 8012280:	59400017 	ldw	r5,0(r11)
 8012284:	31800104 	addi	r6,r6,4
 8012288:	5ac00104 	addi	r11,r11,4
 801228c:	293fffcc 	andi	r4,r5,65535
 8012290:	20c7883a 	add	r3,r4,r3
 8012294:	280ed43a 	srli	r7,r5,16
 8012298:	180bd43a 	srai	r5,r3,16
 801229c:	193fffcc 	andi	r4,r3,65535
 80122a0:	3947883a 	add	r3,r7,r5
 80122a4:	180a943a 	slli	r5,r3,16
 80122a8:	1807d43a 	srai	r3,r3,16
 80122ac:	2908b03a 	or	r4,r5,r4
 80122b0:	313fff15 	stw	r4,-4(r6)
 80122b4:	5a3ff236 	bltu	r11,r8,8012280 <__alt_data_end+0xfc012280>
 80122b8:	0406303a 	nor	r3,zero,r16
 80122bc:	1a07883a 	add	r3,r3,r8
 80122c0:	1806d0ba 	srli	r3,r3,2
 80122c4:	18c00044 	addi	r3,r3,1
 80122c8:	18c7883a 	add	r3,r3,r3
 80122cc:	18c7883a 	add	r3,r3,r3
 80122d0:	50d5883a 	add	r10,r10,r3
 80122d4:	50ffff04 	addi	r3,r10,-4
 80122d8:	2000041e 	bne	r4,zero,80122ec <__mdiff+0x194>
 80122dc:	18ffff04 	addi	r3,r3,-4
 80122e0:	19000017 	ldw	r4,0(r3)
 80122e4:	4a7fffc4 	addi	r9,r9,-1
 80122e8:	203ffc26 	beq	r4,zero,80122dc <__alt_data_end+0xfc0122dc>
 80122ec:	12400415 	stw	r9,16(r2)
 80122f0:	dfc00517 	ldw	ra,20(sp)
 80122f4:	dd000417 	ldw	r20,16(sp)
 80122f8:	dcc00317 	ldw	r19,12(sp)
 80122fc:	dc800217 	ldw	r18,8(sp)
 8012300:	dc400117 	ldw	r17,4(sp)
 8012304:	dc000017 	ldw	r16,0(sp)
 8012308:	dec00604 	addi	sp,sp,24
 801230c:	f800283a 	ret
 8012310:	000b883a 	mov	r5,zero
 8012314:	80117740 	call	8011774 <_Balloc>
 8012318:	00c00044 	movi	r3,1
 801231c:	10c00415 	stw	r3,16(r2)
 8012320:	10000515 	stw	zero,20(r2)
 8012324:	003ff206 	br	80122f0 <__alt_data_end+0xfc0122f0>
 8012328:	8023883a 	mov	r17,r16
 801232c:	0029883a 	mov	r20,zero
 8012330:	4021883a 	mov	r16,r8
 8012334:	003fad06 	br	80121ec <__alt_data_end+0xfc0121ec>
 8012338:	9005883a 	mov	r2,r18
 801233c:	94400504 	addi	r17,r18,20
 8012340:	9c000504 	addi	r16,r19,20
 8012344:	9825883a 	mov	r18,r19
 8012348:	05000044 	movi	r20,1
 801234c:	1027883a 	mov	r19,r2
 8012350:	003fa606 	br	80121ec <__alt_data_end+0xfc0121ec>

08012354 <__ulp>:
 8012354:	295ffc2c 	andhi	r5,r5,32752
 8012358:	00bf3034 	movhi	r2,64704
 801235c:	2887883a 	add	r3,r5,r2
 8012360:	00c0020e 	bge	zero,r3,801236c <__ulp+0x18>
 8012364:	0005883a 	mov	r2,zero
 8012368:	f800283a 	ret
 801236c:	00c7c83a 	sub	r3,zero,r3
 8012370:	1807d53a 	srai	r3,r3,20
 8012374:	008004c4 	movi	r2,19
 8012378:	10c00b0e 	bge	r2,r3,80123a8 <__ulp+0x54>
 801237c:	18bffb04 	addi	r2,r3,-20
 8012380:	01000784 	movi	r4,30
 8012384:	0007883a 	mov	r3,zero
 8012388:	20800516 	blt	r4,r2,80123a0 <__ulp+0x4c>
 801238c:	010007c4 	movi	r4,31
 8012390:	2089c83a 	sub	r4,r4,r2
 8012394:	00800044 	movi	r2,1
 8012398:	1104983a 	sll	r2,r2,r4
 801239c:	f800283a 	ret
 80123a0:	00800044 	movi	r2,1
 80123a4:	f800283a 	ret
 80123a8:	01400234 	movhi	r5,8
 80123ac:	28c7d83a 	sra	r3,r5,r3
 80123b0:	0005883a 	mov	r2,zero
 80123b4:	f800283a 	ret

080123b8 <__b2d>:
 80123b8:	defffa04 	addi	sp,sp,-24
 80123bc:	dc000015 	stw	r16,0(sp)
 80123c0:	24000417 	ldw	r16,16(r4)
 80123c4:	dc400115 	stw	r17,4(sp)
 80123c8:	24400504 	addi	r17,r4,20
 80123cc:	8421883a 	add	r16,r16,r16
 80123d0:	8421883a 	add	r16,r16,r16
 80123d4:	8c21883a 	add	r16,r17,r16
 80123d8:	dc800215 	stw	r18,8(sp)
 80123dc:	84bfff17 	ldw	r18,-4(r16)
 80123e0:	dd000415 	stw	r20,16(sp)
 80123e4:	dcc00315 	stw	r19,12(sp)
 80123e8:	9009883a 	mov	r4,r18
 80123ec:	2829883a 	mov	r20,r5
 80123f0:	dfc00515 	stw	ra,20(sp)
 80123f4:	8011a900 	call	8011a90 <__hi0bits>
 80123f8:	00c00804 	movi	r3,32
 80123fc:	1889c83a 	sub	r4,r3,r2
 8012400:	a1000015 	stw	r4,0(r20)
 8012404:	01000284 	movi	r4,10
 8012408:	84ffff04 	addi	r19,r16,-4
 801240c:	20801216 	blt	r4,r2,8012458 <__b2d+0xa0>
 8012410:	018002c4 	movi	r6,11
 8012414:	308dc83a 	sub	r6,r6,r2
 8012418:	9186d83a 	srl	r3,r18,r6
 801241c:	18cffc34 	orhi	r3,r3,16368
 8012420:	8cc0212e 	bgeu	r17,r19,80124a8 <__b2d+0xf0>
 8012424:	813ffe17 	ldw	r4,-8(r16)
 8012428:	218cd83a 	srl	r6,r4,r6
 801242c:	10800544 	addi	r2,r2,21
 8012430:	9084983a 	sll	r2,r18,r2
 8012434:	1184b03a 	or	r2,r2,r6
 8012438:	dfc00517 	ldw	ra,20(sp)
 801243c:	dd000417 	ldw	r20,16(sp)
 8012440:	dcc00317 	ldw	r19,12(sp)
 8012444:	dc800217 	ldw	r18,8(sp)
 8012448:	dc400117 	ldw	r17,4(sp)
 801244c:	dc000017 	ldw	r16,0(sp)
 8012450:	dec00604 	addi	sp,sp,24
 8012454:	f800283a 	ret
 8012458:	8cc00f2e 	bgeu	r17,r19,8012498 <__b2d+0xe0>
 801245c:	117ffd44 	addi	r5,r2,-11
 8012460:	80bffe17 	ldw	r2,-8(r16)
 8012464:	28000e26 	beq	r5,zero,80124a0 <__b2d+0xe8>
 8012468:	1949c83a 	sub	r4,r3,r5
 801246c:	9164983a 	sll	r18,r18,r5
 8012470:	1106d83a 	srl	r3,r2,r4
 8012474:	81bffe04 	addi	r6,r16,-8
 8012478:	948ffc34 	orhi	r18,r18,16368
 801247c:	90c6b03a 	or	r3,r18,r3
 8012480:	89800e2e 	bgeu	r17,r6,80124bc <__b2d+0x104>
 8012484:	81bffd17 	ldw	r6,-12(r16)
 8012488:	1144983a 	sll	r2,r2,r5
 801248c:	310ad83a 	srl	r5,r6,r4
 8012490:	2884b03a 	or	r2,r5,r2
 8012494:	003fe806 	br	8012438 <__alt_data_end+0xfc012438>
 8012498:	10bffd44 	addi	r2,r2,-11
 801249c:	1000041e 	bne	r2,zero,80124b0 <__b2d+0xf8>
 80124a0:	90cffc34 	orhi	r3,r18,16368
 80124a4:	003fe406 	br	8012438 <__alt_data_end+0xfc012438>
 80124a8:	000d883a 	mov	r6,zero
 80124ac:	003fdf06 	br	801242c <__alt_data_end+0xfc01242c>
 80124b0:	90a4983a 	sll	r18,r18,r2
 80124b4:	0005883a 	mov	r2,zero
 80124b8:	003ff906 	br	80124a0 <__alt_data_end+0xfc0124a0>
 80124bc:	1144983a 	sll	r2,r2,r5
 80124c0:	003fdd06 	br	8012438 <__alt_data_end+0xfc012438>

080124c4 <__d2b>:
 80124c4:	defff804 	addi	sp,sp,-32
 80124c8:	dc000215 	stw	r16,8(sp)
 80124cc:	3021883a 	mov	r16,r6
 80124d0:	dc400315 	stw	r17,12(sp)
 80124d4:	8022907a 	slli	r17,r16,1
 80124d8:	dd000615 	stw	r20,24(sp)
 80124dc:	2829883a 	mov	r20,r5
 80124e0:	01400044 	movi	r5,1
 80124e4:	dcc00515 	stw	r19,20(sp)
 80124e8:	dc800415 	stw	r18,16(sp)
 80124ec:	dfc00715 	stw	ra,28(sp)
 80124f0:	3825883a 	mov	r18,r7
 80124f4:	8822d57a 	srli	r17,r17,21
 80124f8:	80117740 	call	8011774 <_Balloc>
 80124fc:	1027883a 	mov	r19,r2
 8012500:	00800434 	movhi	r2,16
 8012504:	10bfffc4 	addi	r2,r2,-1
 8012508:	808c703a 	and	r6,r16,r2
 801250c:	88000126 	beq	r17,zero,8012514 <__d2b+0x50>
 8012510:	31800434 	orhi	r6,r6,16
 8012514:	d9800015 	stw	r6,0(sp)
 8012518:	a0002426 	beq	r20,zero,80125ac <__d2b+0xe8>
 801251c:	d9000104 	addi	r4,sp,4
 8012520:	dd000115 	stw	r20,4(sp)
 8012524:	8011af80 	call	8011af8 <__lo0bits>
 8012528:	d8c00017 	ldw	r3,0(sp)
 801252c:	10002f1e 	bne	r2,zero,80125ec <__d2b+0x128>
 8012530:	d9000117 	ldw	r4,4(sp)
 8012534:	99000515 	stw	r4,20(r19)
 8012538:	1821003a 	cmpeq	r16,r3,zero
 801253c:	01000084 	movi	r4,2
 8012540:	2421c83a 	sub	r16,r4,r16
 8012544:	98c00615 	stw	r3,24(r19)
 8012548:	9c000415 	stw	r16,16(r19)
 801254c:	88001f1e 	bne	r17,zero,80125cc <__d2b+0x108>
 8012550:	10bef384 	addi	r2,r2,-1074
 8012554:	90800015 	stw	r2,0(r18)
 8012558:	00900034 	movhi	r2,16384
 801255c:	10bfffc4 	addi	r2,r2,-1
 8012560:	8085883a 	add	r2,r16,r2
 8012564:	1085883a 	add	r2,r2,r2
 8012568:	1085883a 	add	r2,r2,r2
 801256c:	9885883a 	add	r2,r19,r2
 8012570:	11000517 	ldw	r4,20(r2)
 8012574:	8020917a 	slli	r16,r16,5
 8012578:	8011a900 	call	8011a90 <__hi0bits>
 801257c:	d8c00817 	ldw	r3,32(sp)
 8012580:	8085c83a 	sub	r2,r16,r2
 8012584:	18800015 	stw	r2,0(r3)
 8012588:	9805883a 	mov	r2,r19
 801258c:	dfc00717 	ldw	ra,28(sp)
 8012590:	dd000617 	ldw	r20,24(sp)
 8012594:	dcc00517 	ldw	r19,20(sp)
 8012598:	dc800417 	ldw	r18,16(sp)
 801259c:	dc400317 	ldw	r17,12(sp)
 80125a0:	dc000217 	ldw	r16,8(sp)
 80125a4:	dec00804 	addi	sp,sp,32
 80125a8:	f800283a 	ret
 80125ac:	d809883a 	mov	r4,sp
 80125b0:	8011af80 	call	8011af8 <__lo0bits>
 80125b4:	d8c00017 	ldw	r3,0(sp)
 80125b8:	04000044 	movi	r16,1
 80125bc:	9c000415 	stw	r16,16(r19)
 80125c0:	98c00515 	stw	r3,20(r19)
 80125c4:	10800804 	addi	r2,r2,32
 80125c8:	883fe126 	beq	r17,zero,8012550 <__alt_data_end+0xfc012550>
 80125cc:	00c00d44 	movi	r3,53
 80125d0:	8c7ef344 	addi	r17,r17,-1075
 80125d4:	88a3883a 	add	r17,r17,r2
 80125d8:	1885c83a 	sub	r2,r3,r2
 80125dc:	d8c00817 	ldw	r3,32(sp)
 80125e0:	94400015 	stw	r17,0(r18)
 80125e4:	18800015 	stw	r2,0(r3)
 80125e8:	003fe706 	br	8012588 <__alt_data_end+0xfc012588>
 80125ec:	01000804 	movi	r4,32
 80125f0:	2089c83a 	sub	r4,r4,r2
 80125f4:	1908983a 	sll	r4,r3,r4
 80125f8:	d9400117 	ldw	r5,4(sp)
 80125fc:	1886d83a 	srl	r3,r3,r2
 8012600:	2148b03a 	or	r4,r4,r5
 8012604:	99000515 	stw	r4,20(r19)
 8012608:	d8c00015 	stw	r3,0(sp)
 801260c:	003fca06 	br	8012538 <__alt_data_end+0xfc012538>

08012610 <__ratio>:
 8012610:	defff904 	addi	sp,sp,-28
 8012614:	dc400315 	stw	r17,12(sp)
 8012618:	2823883a 	mov	r17,r5
 801261c:	d9400104 	addi	r5,sp,4
 8012620:	dfc00615 	stw	ra,24(sp)
 8012624:	dcc00515 	stw	r19,20(sp)
 8012628:	dc800415 	stw	r18,16(sp)
 801262c:	2027883a 	mov	r19,r4
 8012630:	dc000215 	stw	r16,8(sp)
 8012634:	80123b80 	call	80123b8 <__b2d>
 8012638:	d80b883a 	mov	r5,sp
 801263c:	8809883a 	mov	r4,r17
 8012640:	1025883a 	mov	r18,r2
 8012644:	1821883a 	mov	r16,r3
 8012648:	80123b80 	call	80123b8 <__b2d>
 801264c:	8a000417 	ldw	r8,16(r17)
 8012650:	99000417 	ldw	r4,16(r19)
 8012654:	d9400117 	ldw	r5,4(sp)
 8012658:	2209c83a 	sub	r4,r4,r8
 801265c:	2010917a 	slli	r8,r4,5
 8012660:	d9000017 	ldw	r4,0(sp)
 8012664:	2909c83a 	sub	r4,r5,r4
 8012668:	4109883a 	add	r4,r8,r4
 801266c:	01000e0e 	bge	zero,r4,80126a8 <__ratio+0x98>
 8012670:	2008953a 	slli	r4,r4,20
 8012674:	2421883a 	add	r16,r4,r16
 8012678:	100d883a 	mov	r6,r2
 801267c:	180f883a 	mov	r7,r3
 8012680:	9009883a 	mov	r4,r18
 8012684:	800b883a 	mov	r5,r16
 8012688:	80097300 	call	8009730 <__divdf3>
 801268c:	dfc00617 	ldw	ra,24(sp)
 8012690:	dcc00517 	ldw	r19,20(sp)
 8012694:	dc800417 	ldw	r18,16(sp)
 8012698:	dc400317 	ldw	r17,12(sp)
 801269c:	dc000217 	ldw	r16,8(sp)
 80126a0:	dec00704 	addi	sp,sp,28
 80126a4:	f800283a 	ret
 80126a8:	2008953a 	slli	r4,r4,20
 80126ac:	1907c83a 	sub	r3,r3,r4
 80126b0:	003ff106 	br	8012678 <__alt_data_end+0xfc012678>

080126b4 <_mprec_log10>:
 80126b4:	defffe04 	addi	sp,sp,-8
 80126b8:	dc000015 	stw	r16,0(sp)
 80126bc:	dfc00115 	stw	ra,4(sp)
 80126c0:	008005c4 	movi	r2,23
 80126c4:	2021883a 	mov	r16,r4
 80126c8:	11000d0e 	bge	r2,r4,8012700 <_mprec_log10+0x4c>
 80126cc:	0005883a 	mov	r2,zero
 80126d0:	00cffc34 	movhi	r3,16368
 80126d4:	843fffc4 	addi	r16,r16,-1
 80126d8:	000d883a 	mov	r6,zero
 80126dc:	01d00934 	movhi	r7,16420
 80126e0:	1009883a 	mov	r4,r2
 80126e4:	180b883a 	mov	r5,r3
 80126e8:	800a3580 	call	800a358 <__muldf3>
 80126ec:	803ff91e 	bne	r16,zero,80126d4 <__alt_data_end+0xfc0126d4>
 80126f0:	dfc00117 	ldw	ra,4(sp)
 80126f4:	dc000017 	ldw	r16,0(sp)
 80126f8:	dec00204 	addi	sp,sp,8
 80126fc:	f800283a 	ret
 8012700:	202090fa 	slli	r16,r4,3
 8012704:	008200b4 	movhi	r2,2050
 8012708:	10ab6304 	addi	r2,r2,-21108
 801270c:	1421883a 	add	r16,r2,r16
 8012710:	80800017 	ldw	r2,0(r16)
 8012714:	80c00117 	ldw	r3,4(r16)
 8012718:	dfc00117 	ldw	ra,4(sp)
 801271c:	dc000017 	ldw	r16,0(sp)
 8012720:	dec00204 	addi	sp,sp,8
 8012724:	f800283a 	ret

08012728 <__copybits>:
 8012728:	297fffc4 	addi	r5,r5,-1
 801272c:	280fd17a 	srai	r7,r5,5
 8012730:	30c00417 	ldw	r3,16(r6)
 8012734:	30800504 	addi	r2,r6,20
 8012738:	39c00044 	addi	r7,r7,1
 801273c:	18c7883a 	add	r3,r3,r3
 8012740:	39cf883a 	add	r7,r7,r7
 8012744:	18c7883a 	add	r3,r3,r3
 8012748:	39cf883a 	add	r7,r7,r7
 801274c:	10c7883a 	add	r3,r2,r3
 8012750:	21cf883a 	add	r7,r4,r7
 8012754:	10c00d2e 	bgeu	r2,r3,801278c <__copybits+0x64>
 8012758:	200b883a 	mov	r5,r4
 801275c:	12000017 	ldw	r8,0(r2)
 8012760:	29400104 	addi	r5,r5,4
 8012764:	10800104 	addi	r2,r2,4
 8012768:	2a3fff15 	stw	r8,-4(r5)
 801276c:	10fffb36 	bltu	r2,r3,801275c <__alt_data_end+0xfc01275c>
 8012770:	1985c83a 	sub	r2,r3,r6
 8012774:	10bffac4 	addi	r2,r2,-21
 8012778:	1004d0ba 	srli	r2,r2,2
 801277c:	10800044 	addi	r2,r2,1
 8012780:	1085883a 	add	r2,r2,r2
 8012784:	1085883a 	add	r2,r2,r2
 8012788:	2089883a 	add	r4,r4,r2
 801278c:	21c0032e 	bgeu	r4,r7,801279c <__copybits+0x74>
 8012790:	20000015 	stw	zero,0(r4)
 8012794:	21000104 	addi	r4,r4,4
 8012798:	21fffd36 	bltu	r4,r7,8012790 <__alt_data_end+0xfc012790>
 801279c:	f800283a 	ret

080127a0 <__any_on>:
 80127a0:	20c00417 	ldw	r3,16(r4)
 80127a4:	2805d17a 	srai	r2,r5,5
 80127a8:	21000504 	addi	r4,r4,20
 80127ac:	18800d0e 	bge	r3,r2,80127e4 <__any_on+0x44>
 80127b0:	18c7883a 	add	r3,r3,r3
 80127b4:	18c7883a 	add	r3,r3,r3
 80127b8:	20c7883a 	add	r3,r4,r3
 80127bc:	20c0192e 	bgeu	r4,r3,8012824 <__any_on+0x84>
 80127c0:	18bfff17 	ldw	r2,-4(r3)
 80127c4:	18ffff04 	addi	r3,r3,-4
 80127c8:	1000041e 	bne	r2,zero,80127dc <__any_on+0x3c>
 80127cc:	20c0142e 	bgeu	r4,r3,8012820 <__any_on+0x80>
 80127d0:	18ffff04 	addi	r3,r3,-4
 80127d4:	19400017 	ldw	r5,0(r3)
 80127d8:	283ffc26 	beq	r5,zero,80127cc <__alt_data_end+0xfc0127cc>
 80127dc:	00800044 	movi	r2,1
 80127e0:	f800283a 	ret
 80127e4:	10c00a0e 	bge	r2,r3,8012810 <__any_on+0x70>
 80127e8:	1085883a 	add	r2,r2,r2
 80127ec:	1085883a 	add	r2,r2,r2
 80127f0:	294007cc 	andi	r5,r5,31
 80127f4:	2087883a 	add	r3,r4,r2
 80127f8:	283ff026 	beq	r5,zero,80127bc <__alt_data_end+0xfc0127bc>
 80127fc:	19800017 	ldw	r6,0(r3)
 8012800:	3144d83a 	srl	r2,r6,r5
 8012804:	114a983a 	sll	r5,r2,r5
 8012808:	317ff41e 	bne	r6,r5,80127dc <__alt_data_end+0xfc0127dc>
 801280c:	003feb06 	br	80127bc <__alt_data_end+0xfc0127bc>
 8012810:	1085883a 	add	r2,r2,r2
 8012814:	1085883a 	add	r2,r2,r2
 8012818:	2087883a 	add	r3,r4,r2
 801281c:	003fe706 	br	80127bc <__alt_data_end+0xfc0127bc>
 8012820:	f800283a 	ret
 8012824:	0005883a 	mov	r2,zero
 8012828:	f800283a 	ret

0801282c <_realloc_r>:
 801282c:	defff604 	addi	sp,sp,-40
 8012830:	dc800215 	stw	r18,8(sp)
 8012834:	dfc00915 	stw	ra,36(sp)
 8012838:	df000815 	stw	fp,32(sp)
 801283c:	ddc00715 	stw	r23,28(sp)
 8012840:	dd800615 	stw	r22,24(sp)
 8012844:	dd400515 	stw	r21,20(sp)
 8012848:	dd000415 	stw	r20,16(sp)
 801284c:	dcc00315 	stw	r19,12(sp)
 8012850:	dc400115 	stw	r17,4(sp)
 8012854:	dc000015 	stw	r16,0(sp)
 8012858:	3025883a 	mov	r18,r6
 801285c:	2800b726 	beq	r5,zero,8012b3c <_realloc_r+0x310>
 8012860:	282b883a 	mov	r21,r5
 8012864:	2029883a 	mov	r20,r4
 8012868:	80162a80 	call	80162a8 <__malloc_lock>
 801286c:	a8bfff17 	ldw	r2,-4(r21)
 8012870:	043fff04 	movi	r16,-4
 8012874:	90c002c4 	addi	r3,r18,11
 8012878:	01000584 	movi	r4,22
 801287c:	acfffe04 	addi	r19,r21,-8
 8012880:	1420703a 	and	r16,r2,r16
 8012884:	20c0332e 	bgeu	r4,r3,8012954 <_realloc_r+0x128>
 8012888:	047ffe04 	movi	r17,-8
 801288c:	1c62703a 	and	r17,r3,r17
 8012890:	8807883a 	mov	r3,r17
 8012894:	88005816 	blt	r17,zero,80129f8 <_realloc_r+0x1cc>
 8012898:	8c805736 	bltu	r17,r18,80129f8 <_realloc_r+0x1cc>
 801289c:	80c0300e 	bge	r16,r3,8012960 <_realloc_r+0x134>
 80128a0:	070200b4 	movhi	fp,2050
 80128a4:	e72d4404 	addi	fp,fp,-19184
 80128a8:	e1c00217 	ldw	r7,8(fp)
 80128ac:	9c09883a 	add	r4,r19,r16
 80128b0:	22000117 	ldw	r8,4(r4)
 80128b4:	21c06326 	beq	r4,r7,8012a44 <_realloc_r+0x218>
 80128b8:	017fff84 	movi	r5,-2
 80128bc:	414a703a 	and	r5,r8,r5
 80128c0:	214b883a 	add	r5,r4,r5
 80128c4:	29800117 	ldw	r6,4(r5)
 80128c8:	3180004c 	andi	r6,r6,1
 80128cc:	30003f26 	beq	r6,zero,80129cc <_realloc_r+0x1a0>
 80128d0:	1080004c 	andi	r2,r2,1
 80128d4:	10008326 	beq	r2,zero,8012ae4 <_realloc_r+0x2b8>
 80128d8:	900b883a 	mov	r5,r18
 80128dc:	a009883a 	mov	r4,r20
 80128e0:	8010ab80 	call	8010ab8 <_malloc_r>
 80128e4:	1025883a 	mov	r18,r2
 80128e8:	10011e26 	beq	r2,zero,8012d64 <_realloc_r+0x538>
 80128ec:	a93fff17 	ldw	r4,-4(r21)
 80128f0:	10fffe04 	addi	r3,r2,-8
 80128f4:	00bfff84 	movi	r2,-2
 80128f8:	2084703a 	and	r2,r4,r2
 80128fc:	9885883a 	add	r2,r19,r2
 8012900:	1880ee26 	beq	r3,r2,8012cbc <_realloc_r+0x490>
 8012904:	81bfff04 	addi	r6,r16,-4
 8012908:	00800904 	movi	r2,36
 801290c:	1180b836 	bltu	r2,r6,8012bf0 <_realloc_r+0x3c4>
 8012910:	00c004c4 	movi	r3,19
 8012914:	19809636 	bltu	r3,r6,8012b70 <_realloc_r+0x344>
 8012918:	9005883a 	mov	r2,r18
 801291c:	a807883a 	mov	r3,r21
 8012920:	19000017 	ldw	r4,0(r3)
 8012924:	11000015 	stw	r4,0(r2)
 8012928:	19000117 	ldw	r4,4(r3)
 801292c:	11000115 	stw	r4,4(r2)
 8012930:	18c00217 	ldw	r3,8(r3)
 8012934:	10c00215 	stw	r3,8(r2)
 8012938:	a80b883a 	mov	r5,r21
 801293c:	a009883a 	mov	r4,r20
 8012940:	800fec00 	call	800fec0 <_free_r>
 8012944:	a009883a 	mov	r4,r20
 8012948:	80162cc0 	call	80162cc <__malloc_unlock>
 801294c:	9005883a 	mov	r2,r18
 8012950:	00001206 	br	801299c <_realloc_r+0x170>
 8012954:	00c00404 	movi	r3,16
 8012958:	1823883a 	mov	r17,r3
 801295c:	003fce06 	br	8012898 <__alt_data_end+0xfc012898>
 8012960:	a825883a 	mov	r18,r21
 8012964:	8445c83a 	sub	r2,r16,r17
 8012968:	00c003c4 	movi	r3,15
 801296c:	18802636 	bltu	r3,r2,8012a08 <_realloc_r+0x1dc>
 8012970:	99800117 	ldw	r6,4(r19)
 8012974:	9c07883a 	add	r3,r19,r16
 8012978:	3180004c 	andi	r6,r6,1
 801297c:	3420b03a 	or	r16,r6,r16
 8012980:	9c000115 	stw	r16,4(r19)
 8012984:	18800117 	ldw	r2,4(r3)
 8012988:	10800054 	ori	r2,r2,1
 801298c:	18800115 	stw	r2,4(r3)
 8012990:	a009883a 	mov	r4,r20
 8012994:	80162cc0 	call	80162cc <__malloc_unlock>
 8012998:	9005883a 	mov	r2,r18
 801299c:	dfc00917 	ldw	ra,36(sp)
 80129a0:	df000817 	ldw	fp,32(sp)
 80129a4:	ddc00717 	ldw	r23,28(sp)
 80129a8:	dd800617 	ldw	r22,24(sp)
 80129ac:	dd400517 	ldw	r21,20(sp)
 80129b0:	dd000417 	ldw	r20,16(sp)
 80129b4:	dcc00317 	ldw	r19,12(sp)
 80129b8:	dc800217 	ldw	r18,8(sp)
 80129bc:	dc400117 	ldw	r17,4(sp)
 80129c0:	dc000017 	ldw	r16,0(sp)
 80129c4:	dec00a04 	addi	sp,sp,40
 80129c8:	f800283a 	ret
 80129cc:	017fff04 	movi	r5,-4
 80129d0:	414a703a 	and	r5,r8,r5
 80129d4:	814d883a 	add	r6,r16,r5
 80129d8:	30c01f16 	blt	r6,r3,8012a58 <_realloc_r+0x22c>
 80129dc:	20800317 	ldw	r2,12(r4)
 80129e0:	20c00217 	ldw	r3,8(r4)
 80129e4:	a825883a 	mov	r18,r21
 80129e8:	3021883a 	mov	r16,r6
 80129ec:	18800315 	stw	r2,12(r3)
 80129f0:	10c00215 	stw	r3,8(r2)
 80129f4:	003fdb06 	br	8012964 <__alt_data_end+0xfc012964>
 80129f8:	00800304 	movi	r2,12
 80129fc:	a0800015 	stw	r2,0(r20)
 8012a00:	0005883a 	mov	r2,zero
 8012a04:	003fe506 	br	801299c <__alt_data_end+0xfc01299c>
 8012a08:	98c00117 	ldw	r3,4(r19)
 8012a0c:	9c4b883a 	add	r5,r19,r17
 8012a10:	11000054 	ori	r4,r2,1
 8012a14:	18c0004c 	andi	r3,r3,1
 8012a18:	1c62b03a 	or	r17,r3,r17
 8012a1c:	9c400115 	stw	r17,4(r19)
 8012a20:	29000115 	stw	r4,4(r5)
 8012a24:	2885883a 	add	r2,r5,r2
 8012a28:	10c00117 	ldw	r3,4(r2)
 8012a2c:	29400204 	addi	r5,r5,8
 8012a30:	a009883a 	mov	r4,r20
 8012a34:	18c00054 	ori	r3,r3,1
 8012a38:	10c00115 	stw	r3,4(r2)
 8012a3c:	800fec00 	call	800fec0 <_free_r>
 8012a40:	003fd306 	br	8012990 <__alt_data_end+0xfc012990>
 8012a44:	017fff04 	movi	r5,-4
 8012a48:	414a703a 	and	r5,r8,r5
 8012a4c:	89800404 	addi	r6,r17,16
 8012a50:	8151883a 	add	r8,r16,r5
 8012a54:	4180590e 	bge	r8,r6,8012bbc <_realloc_r+0x390>
 8012a58:	1080004c 	andi	r2,r2,1
 8012a5c:	103f9e1e 	bne	r2,zero,80128d8 <__alt_data_end+0xfc0128d8>
 8012a60:	adbffe17 	ldw	r22,-8(r21)
 8012a64:	00bfff04 	movi	r2,-4
 8012a68:	9dadc83a 	sub	r22,r19,r22
 8012a6c:	b1800117 	ldw	r6,4(r22)
 8012a70:	3084703a 	and	r2,r6,r2
 8012a74:	20002026 	beq	r4,zero,8012af8 <_realloc_r+0x2cc>
 8012a78:	80af883a 	add	r23,r16,r2
 8012a7c:	b96f883a 	add	r23,r23,r5
 8012a80:	21c05f26 	beq	r4,r7,8012c00 <_realloc_r+0x3d4>
 8012a84:	b8c01c16 	blt	r23,r3,8012af8 <_realloc_r+0x2cc>
 8012a88:	20800317 	ldw	r2,12(r4)
 8012a8c:	20c00217 	ldw	r3,8(r4)
 8012a90:	81bfff04 	addi	r6,r16,-4
 8012a94:	01000904 	movi	r4,36
 8012a98:	18800315 	stw	r2,12(r3)
 8012a9c:	10c00215 	stw	r3,8(r2)
 8012aa0:	b0c00217 	ldw	r3,8(r22)
 8012aa4:	b0800317 	ldw	r2,12(r22)
 8012aa8:	b4800204 	addi	r18,r22,8
 8012aac:	18800315 	stw	r2,12(r3)
 8012ab0:	10c00215 	stw	r3,8(r2)
 8012ab4:	21801b36 	bltu	r4,r6,8012b24 <_realloc_r+0x2f8>
 8012ab8:	008004c4 	movi	r2,19
 8012abc:	1180352e 	bgeu	r2,r6,8012b94 <_realloc_r+0x368>
 8012ac0:	a8800017 	ldw	r2,0(r21)
 8012ac4:	b0800215 	stw	r2,8(r22)
 8012ac8:	a8800117 	ldw	r2,4(r21)
 8012acc:	b0800315 	stw	r2,12(r22)
 8012ad0:	008006c4 	movi	r2,27
 8012ad4:	11807f36 	bltu	r2,r6,8012cd4 <_realloc_r+0x4a8>
 8012ad8:	b0800404 	addi	r2,r22,16
 8012adc:	ad400204 	addi	r21,r21,8
 8012ae0:	00002d06 	br	8012b98 <_realloc_r+0x36c>
 8012ae4:	adbffe17 	ldw	r22,-8(r21)
 8012ae8:	00bfff04 	movi	r2,-4
 8012aec:	9dadc83a 	sub	r22,r19,r22
 8012af0:	b1000117 	ldw	r4,4(r22)
 8012af4:	2084703a 	and	r2,r4,r2
 8012af8:	b03f7726 	beq	r22,zero,80128d8 <__alt_data_end+0xfc0128d8>
 8012afc:	80af883a 	add	r23,r16,r2
 8012b00:	b8ff7516 	blt	r23,r3,80128d8 <__alt_data_end+0xfc0128d8>
 8012b04:	b0800317 	ldw	r2,12(r22)
 8012b08:	b0c00217 	ldw	r3,8(r22)
 8012b0c:	81bfff04 	addi	r6,r16,-4
 8012b10:	01000904 	movi	r4,36
 8012b14:	18800315 	stw	r2,12(r3)
 8012b18:	10c00215 	stw	r3,8(r2)
 8012b1c:	b4800204 	addi	r18,r22,8
 8012b20:	21bfe52e 	bgeu	r4,r6,8012ab8 <__alt_data_end+0xfc012ab8>
 8012b24:	a80b883a 	mov	r5,r21
 8012b28:	9009883a 	mov	r4,r18
 8012b2c:	80114f00 	call	80114f0 <memmove>
 8012b30:	b821883a 	mov	r16,r23
 8012b34:	b027883a 	mov	r19,r22
 8012b38:	003f8a06 	br	8012964 <__alt_data_end+0xfc012964>
 8012b3c:	300b883a 	mov	r5,r6
 8012b40:	dfc00917 	ldw	ra,36(sp)
 8012b44:	df000817 	ldw	fp,32(sp)
 8012b48:	ddc00717 	ldw	r23,28(sp)
 8012b4c:	dd800617 	ldw	r22,24(sp)
 8012b50:	dd400517 	ldw	r21,20(sp)
 8012b54:	dd000417 	ldw	r20,16(sp)
 8012b58:	dcc00317 	ldw	r19,12(sp)
 8012b5c:	dc800217 	ldw	r18,8(sp)
 8012b60:	dc400117 	ldw	r17,4(sp)
 8012b64:	dc000017 	ldw	r16,0(sp)
 8012b68:	dec00a04 	addi	sp,sp,40
 8012b6c:	8010ab81 	jmpi	8010ab8 <_malloc_r>
 8012b70:	a8c00017 	ldw	r3,0(r21)
 8012b74:	90c00015 	stw	r3,0(r18)
 8012b78:	a8c00117 	ldw	r3,4(r21)
 8012b7c:	90c00115 	stw	r3,4(r18)
 8012b80:	00c006c4 	movi	r3,27
 8012b84:	19804536 	bltu	r3,r6,8012c9c <_realloc_r+0x470>
 8012b88:	90800204 	addi	r2,r18,8
 8012b8c:	a8c00204 	addi	r3,r21,8
 8012b90:	003f6306 	br	8012920 <__alt_data_end+0xfc012920>
 8012b94:	9005883a 	mov	r2,r18
 8012b98:	a8c00017 	ldw	r3,0(r21)
 8012b9c:	b821883a 	mov	r16,r23
 8012ba0:	b027883a 	mov	r19,r22
 8012ba4:	10c00015 	stw	r3,0(r2)
 8012ba8:	a8c00117 	ldw	r3,4(r21)
 8012bac:	10c00115 	stw	r3,4(r2)
 8012bb0:	a8c00217 	ldw	r3,8(r21)
 8012bb4:	10c00215 	stw	r3,8(r2)
 8012bb8:	003f6a06 	br	8012964 <__alt_data_end+0xfc012964>
 8012bbc:	9c67883a 	add	r19,r19,r17
 8012bc0:	4445c83a 	sub	r2,r8,r17
 8012bc4:	e4c00215 	stw	r19,8(fp)
 8012bc8:	10800054 	ori	r2,r2,1
 8012bcc:	98800115 	stw	r2,4(r19)
 8012bd0:	a8bfff17 	ldw	r2,-4(r21)
 8012bd4:	a009883a 	mov	r4,r20
 8012bd8:	1080004c 	andi	r2,r2,1
 8012bdc:	1462b03a 	or	r17,r2,r17
 8012be0:	ac7fff15 	stw	r17,-4(r21)
 8012be4:	80162cc0 	call	80162cc <__malloc_unlock>
 8012be8:	a805883a 	mov	r2,r21
 8012bec:	003f6b06 	br	801299c <__alt_data_end+0xfc01299c>
 8012bf0:	a80b883a 	mov	r5,r21
 8012bf4:	9009883a 	mov	r4,r18
 8012bf8:	80114f00 	call	80114f0 <memmove>
 8012bfc:	003f4e06 	br	8012938 <__alt_data_end+0xfc012938>
 8012c00:	89000404 	addi	r4,r17,16
 8012c04:	b93fbc16 	blt	r23,r4,8012af8 <__alt_data_end+0xfc012af8>
 8012c08:	b0800317 	ldw	r2,12(r22)
 8012c0c:	b0c00217 	ldw	r3,8(r22)
 8012c10:	81bfff04 	addi	r6,r16,-4
 8012c14:	01000904 	movi	r4,36
 8012c18:	18800315 	stw	r2,12(r3)
 8012c1c:	10c00215 	stw	r3,8(r2)
 8012c20:	b4800204 	addi	r18,r22,8
 8012c24:	21804336 	bltu	r4,r6,8012d34 <_realloc_r+0x508>
 8012c28:	008004c4 	movi	r2,19
 8012c2c:	11803f2e 	bgeu	r2,r6,8012d2c <_realloc_r+0x500>
 8012c30:	a8800017 	ldw	r2,0(r21)
 8012c34:	b0800215 	stw	r2,8(r22)
 8012c38:	a8800117 	ldw	r2,4(r21)
 8012c3c:	b0800315 	stw	r2,12(r22)
 8012c40:	008006c4 	movi	r2,27
 8012c44:	11803f36 	bltu	r2,r6,8012d44 <_realloc_r+0x518>
 8012c48:	b0800404 	addi	r2,r22,16
 8012c4c:	ad400204 	addi	r21,r21,8
 8012c50:	a8c00017 	ldw	r3,0(r21)
 8012c54:	10c00015 	stw	r3,0(r2)
 8012c58:	a8c00117 	ldw	r3,4(r21)
 8012c5c:	10c00115 	stw	r3,4(r2)
 8012c60:	a8c00217 	ldw	r3,8(r21)
 8012c64:	10c00215 	stw	r3,8(r2)
 8012c68:	b447883a 	add	r3,r22,r17
 8012c6c:	bc45c83a 	sub	r2,r23,r17
 8012c70:	e0c00215 	stw	r3,8(fp)
 8012c74:	10800054 	ori	r2,r2,1
 8012c78:	18800115 	stw	r2,4(r3)
 8012c7c:	b0800117 	ldw	r2,4(r22)
 8012c80:	a009883a 	mov	r4,r20
 8012c84:	1080004c 	andi	r2,r2,1
 8012c88:	1462b03a 	or	r17,r2,r17
 8012c8c:	b4400115 	stw	r17,4(r22)
 8012c90:	80162cc0 	call	80162cc <__malloc_unlock>
 8012c94:	9005883a 	mov	r2,r18
 8012c98:	003f4006 	br	801299c <__alt_data_end+0xfc01299c>
 8012c9c:	a8c00217 	ldw	r3,8(r21)
 8012ca0:	90c00215 	stw	r3,8(r18)
 8012ca4:	a8c00317 	ldw	r3,12(r21)
 8012ca8:	90c00315 	stw	r3,12(r18)
 8012cac:	30801126 	beq	r6,r2,8012cf4 <_realloc_r+0x4c8>
 8012cb0:	90800404 	addi	r2,r18,16
 8012cb4:	a8c00404 	addi	r3,r21,16
 8012cb8:	003f1906 	br	8012920 <__alt_data_end+0xfc012920>
 8012cbc:	90ffff17 	ldw	r3,-4(r18)
 8012cc0:	00bfff04 	movi	r2,-4
 8012cc4:	a825883a 	mov	r18,r21
 8012cc8:	1884703a 	and	r2,r3,r2
 8012ccc:	80a1883a 	add	r16,r16,r2
 8012cd0:	003f2406 	br	8012964 <__alt_data_end+0xfc012964>
 8012cd4:	a8800217 	ldw	r2,8(r21)
 8012cd8:	b0800415 	stw	r2,16(r22)
 8012cdc:	a8800317 	ldw	r2,12(r21)
 8012ce0:	b0800515 	stw	r2,20(r22)
 8012ce4:	31000a26 	beq	r6,r4,8012d10 <_realloc_r+0x4e4>
 8012ce8:	b0800604 	addi	r2,r22,24
 8012cec:	ad400404 	addi	r21,r21,16
 8012cf0:	003fa906 	br	8012b98 <__alt_data_end+0xfc012b98>
 8012cf4:	a9000417 	ldw	r4,16(r21)
 8012cf8:	90800604 	addi	r2,r18,24
 8012cfc:	a8c00604 	addi	r3,r21,24
 8012d00:	91000415 	stw	r4,16(r18)
 8012d04:	a9000517 	ldw	r4,20(r21)
 8012d08:	91000515 	stw	r4,20(r18)
 8012d0c:	003f0406 	br	8012920 <__alt_data_end+0xfc012920>
 8012d10:	a8c00417 	ldw	r3,16(r21)
 8012d14:	ad400604 	addi	r21,r21,24
 8012d18:	b0800804 	addi	r2,r22,32
 8012d1c:	b0c00615 	stw	r3,24(r22)
 8012d20:	a8ffff17 	ldw	r3,-4(r21)
 8012d24:	b0c00715 	stw	r3,28(r22)
 8012d28:	003f9b06 	br	8012b98 <__alt_data_end+0xfc012b98>
 8012d2c:	9005883a 	mov	r2,r18
 8012d30:	003fc706 	br	8012c50 <__alt_data_end+0xfc012c50>
 8012d34:	a80b883a 	mov	r5,r21
 8012d38:	9009883a 	mov	r4,r18
 8012d3c:	80114f00 	call	80114f0 <memmove>
 8012d40:	003fc906 	br	8012c68 <__alt_data_end+0xfc012c68>
 8012d44:	a8800217 	ldw	r2,8(r21)
 8012d48:	b0800415 	stw	r2,16(r22)
 8012d4c:	a8800317 	ldw	r2,12(r21)
 8012d50:	b0800515 	stw	r2,20(r22)
 8012d54:	31000726 	beq	r6,r4,8012d74 <_realloc_r+0x548>
 8012d58:	b0800604 	addi	r2,r22,24
 8012d5c:	ad400404 	addi	r21,r21,16
 8012d60:	003fbb06 	br	8012c50 <__alt_data_end+0xfc012c50>
 8012d64:	a009883a 	mov	r4,r20
 8012d68:	80162cc0 	call	80162cc <__malloc_unlock>
 8012d6c:	0005883a 	mov	r2,zero
 8012d70:	003f0a06 	br	801299c <__alt_data_end+0xfc01299c>
 8012d74:	a8c00417 	ldw	r3,16(r21)
 8012d78:	ad400604 	addi	r21,r21,24
 8012d7c:	b0800804 	addi	r2,r22,32
 8012d80:	b0c00615 	stw	r3,24(r22)
 8012d84:	a8ffff17 	ldw	r3,-4(r21)
 8012d88:	b0c00715 	stw	r3,28(r22)
 8012d8c:	003fb006 	br	8012c50 <__alt_data_end+0xfc012c50>

08012d90 <_sbrk_r>:
 8012d90:	defffd04 	addi	sp,sp,-12
 8012d94:	dc000015 	stw	r16,0(sp)
 8012d98:	040200b4 	movhi	r16,2050
 8012d9c:	dc400115 	stw	r17,4(sp)
 8012da0:	843a3804 	addi	r16,r16,-5920
 8012da4:	2023883a 	mov	r17,r4
 8012da8:	2809883a 	mov	r4,r5
 8012dac:	dfc00215 	stw	ra,8(sp)
 8012db0:	80000015 	stw	zero,0(r16)
 8012db4:	80164b40 	call	80164b4 <sbrk>
 8012db8:	00ffffc4 	movi	r3,-1
 8012dbc:	10c00526 	beq	r2,r3,8012dd4 <_sbrk_r+0x44>
 8012dc0:	dfc00217 	ldw	ra,8(sp)
 8012dc4:	dc400117 	ldw	r17,4(sp)
 8012dc8:	dc000017 	ldw	r16,0(sp)
 8012dcc:	dec00304 	addi	sp,sp,12
 8012dd0:	f800283a 	ret
 8012dd4:	80c00017 	ldw	r3,0(r16)
 8012dd8:	183ff926 	beq	r3,zero,8012dc0 <__alt_data_end+0xfc012dc0>
 8012ddc:	88c00015 	stw	r3,0(r17)
 8012de0:	003ff706 	br	8012dc0 <__alt_data_end+0xfc012dc0>

08012de4 <__sread>:
 8012de4:	defffe04 	addi	sp,sp,-8
 8012de8:	dc000015 	stw	r16,0(sp)
 8012dec:	2821883a 	mov	r16,r5
 8012df0:	2940038f 	ldh	r5,14(r5)
 8012df4:	dfc00115 	stw	ra,4(sp)
 8012df8:	8014ca00 	call	8014ca0 <_read_r>
 8012dfc:	10000716 	blt	r2,zero,8012e1c <__sread+0x38>
 8012e00:	80c01417 	ldw	r3,80(r16)
 8012e04:	1887883a 	add	r3,r3,r2
 8012e08:	80c01415 	stw	r3,80(r16)
 8012e0c:	dfc00117 	ldw	ra,4(sp)
 8012e10:	dc000017 	ldw	r16,0(sp)
 8012e14:	dec00204 	addi	sp,sp,8
 8012e18:	f800283a 	ret
 8012e1c:	80c0030b 	ldhu	r3,12(r16)
 8012e20:	18fbffcc 	andi	r3,r3,61439
 8012e24:	80c0030d 	sth	r3,12(r16)
 8012e28:	dfc00117 	ldw	ra,4(sp)
 8012e2c:	dc000017 	ldw	r16,0(sp)
 8012e30:	dec00204 	addi	sp,sp,8
 8012e34:	f800283a 	ret

08012e38 <__seofread>:
 8012e38:	0005883a 	mov	r2,zero
 8012e3c:	f800283a 	ret

08012e40 <__swrite>:
 8012e40:	2880030b 	ldhu	r2,12(r5)
 8012e44:	defffb04 	addi	sp,sp,-20
 8012e48:	dcc00315 	stw	r19,12(sp)
 8012e4c:	dc800215 	stw	r18,8(sp)
 8012e50:	dc400115 	stw	r17,4(sp)
 8012e54:	dc000015 	stw	r16,0(sp)
 8012e58:	dfc00415 	stw	ra,16(sp)
 8012e5c:	10c0400c 	andi	r3,r2,256
 8012e60:	2821883a 	mov	r16,r5
 8012e64:	2023883a 	mov	r17,r4
 8012e68:	3025883a 	mov	r18,r6
 8012e6c:	3827883a 	mov	r19,r7
 8012e70:	18000526 	beq	r3,zero,8012e88 <__swrite+0x48>
 8012e74:	2940038f 	ldh	r5,14(r5)
 8012e78:	01c00084 	movi	r7,2
 8012e7c:	000d883a 	mov	r6,zero
 8012e80:	8014c400 	call	8014c40 <_lseek_r>
 8012e84:	8080030b 	ldhu	r2,12(r16)
 8012e88:	8140038f 	ldh	r5,14(r16)
 8012e8c:	10bbffcc 	andi	r2,r2,61439
 8012e90:	980f883a 	mov	r7,r19
 8012e94:	900d883a 	mov	r6,r18
 8012e98:	8809883a 	mov	r4,r17
 8012e9c:	8080030d 	sth	r2,12(r16)
 8012ea0:	dfc00417 	ldw	ra,16(sp)
 8012ea4:	dcc00317 	ldw	r19,12(sp)
 8012ea8:	dc800217 	ldw	r18,8(sp)
 8012eac:	dc400117 	ldw	r17,4(sp)
 8012eb0:	dc000017 	ldw	r16,0(sp)
 8012eb4:	dec00504 	addi	sp,sp,20
 8012eb8:	80146f41 	jmpi	80146f4 <_write_r>

08012ebc <__sseek>:
 8012ebc:	defffe04 	addi	sp,sp,-8
 8012ec0:	dc000015 	stw	r16,0(sp)
 8012ec4:	2821883a 	mov	r16,r5
 8012ec8:	2940038f 	ldh	r5,14(r5)
 8012ecc:	dfc00115 	stw	ra,4(sp)
 8012ed0:	8014c400 	call	8014c40 <_lseek_r>
 8012ed4:	00ffffc4 	movi	r3,-1
 8012ed8:	10c00826 	beq	r2,r3,8012efc <__sseek+0x40>
 8012edc:	80c0030b 	ldhu	r3,12(r16)
 8012ee0:	80801415 	stw	r2,80(r16)
 8012ee4:	18c40014 	ori	r3,r3,4096
 8012ee8:	80c0030d 	sth	r3,12(r16)
 8012eec:	dfc00117 	ldw	ra,4(sp)
 8012ef0:	dc000017 	ldw	r16,0(sp)
 8012ef4:	dec00204 	addi	sp,sp,8
 8012ef8:	f800283a 	ret
 8012efc:	80c0030b 	ldhu	r3,12(r16)
 8012f00:	18fbffcc 	andi	r3,r3,61439
 8012f04:	80c0030d 	sth	r3,12(r16)
 8012f08:	dfc00117 	ldw	ra,4(sp)
 8012f0c:	dc000017 	ldw	r16,0(sp)
 8012f10:	dec00204 	addi	sp,sp,8
 8012f14:	f800283a 	ret

08012f18 <__sclose>:
 8012f18:	2940038f 	ldh	r5,14(r5)
 8012f1c:	80147541 	jmpi	8014754 <_close_r>

08012f20 <strcmp>:
 8012f20:	2144b03a 	or	r2,r4,r5
 8012f24:	108000cc 	andi	r2,r2,3
 8012f28:	1000171e 	bne	r2,zero,8012f88 <strcmp+0x68>
 8012f2c:	20800017 	ldw	r2,0(r4)
 8012f30:	28c00017 	ldw	r3,0(r5)
 8012f34:	10c0141e 	bne	r2,r3,8012f88 <strcmp+0x68>
 8012f38:	027fbff4 	movhi	r9,65279
 8012f3c:	4a7fbfc4 	addi	r9,r9,-257
 8012f40:	0086303a 	nor	r3,zero,r2
 8012f44:	02202074 	movhi	r8,32897
 8012f48:	1245883a 	add	r2,r2,r9
 8012f4c:	42202004 	addi	r8,r8,-32640
 8012f50:	10c4703a 	and	r2,r2,r3
 8012f54:	1204703a 	and	r2,r2,r8
 8012f58:	10000226 	beq	r2,zero,8012f64 <strcmp+0x44>
 8012f5c:	00002306 	br	8012fec <strcmp+0xcc>
 8012f60:	1000221e 	bne	r2,zero,8012fec <strcmp+0xcc>
 8012f64:	21000104 	addi	r4,r4,4
 8012f68:	20c00017 	ldw	r3,0(r4)
 8012f6c:	29400104 	addi	r5,r5,4
 8012f70:	29800017 	ldw	r6,0(r5)
 8012f74:	1a4f883a 	add	r7,r3,r9
 8012f78:	00c4303a 	nor	r2,zero,r3
 8012f7c:	3884703a 	and	r2,r7,r2
 8012f80:	1204703a 	and	r2,r2,r8
 8012f84:	19bff626 	beq	r3,r6,8012f60 <__alt_data_end+0xfc012f60>
 8012f88:	20800003 	ldbu	r2,0(r4)
 8012f8c:	10c03fcc 	andi	r3,r2,255
 8012f90:	18c0201c 	xori	r3,r3,128
 8012f94:	18ffe004 	addi	r3,r3,-128
 8012f98:	18000c26 	beq	r3,zero,8012fcc <strcmp+0xac>
 8012f9c:	29800007 	ldb	r6,0(r5)
 8012fa0:	19800326 	beq	r3,r6,8012fb0 <strcmp+0x90>
 8012fa4:	00001306 	br	8012ff4 <strcmp+0xd4>
 8012fa8:	29800007 	ldb	r6,0(r5)
 8012fac:	11800b1e 	bne	r2,r6,8012fdc <strcmp+0xbc>
 8012fb0:	21000044 	addi	r4,r4,1
 8012fb4:	20c00003 	ldbu	r3,0(r4)
 8012fb8:	29400044 	addi	r5,r5,1
 8012fbc:	18803fcc 	andi	r2,r3,255
 8012fc0:	1080201c 	xori	r2,r2,128
 8012fc4:	10bfe004 	addi	r2,r2,-128
 8012fc8:	103ff71e 	bne	r2,zero,8012fa8 <__alt_data_end+0xfc012fa8>
 8012fcc:	0007883a 	mov	r3,zero
 8012fd0:	28800003 	ldbu	r2,0(r5)
 8012fd4:	1885c83a 	sub	r2,r3,r2
 8012fd8:	f800283a 	ret
 8012fdc:	28800003 	ldbu	r2,0(r5)
 8012fe0:	18c03fcc 	andi	r3,r3,255
 8012fe4:	1885c83a 	sub	r2,r3,r2
 8012fe8:	f800283a 	ret
 8012fec:	0005883a 	mov	r2,zero
 8012ff0:	f800283a 	ret
 8012ff4:	10c03fcc 	andi	r3,r2,255
 8012ff8:	003ff506 	br	8012fd0 <__alt_data_end+0xfc012fd0>

08012ffc <__sprint_r.part.0>:
 8012ffc:	28801917 	ldw	r2,100(r5)
 8013000:	defff604 	addi	sp,sp,-40
 8013004:	dd400515 	stw	r21,20(sp)
 8013008:	dfc00915 	stw	ra,36(sp)
 801300c:	df000815 	stw	fp,32(sp)
 8013010:	ddc00715 	stw	r23,28(sp)
 8013014:	dd800615 	stw	r22,24(sp)
 8013018:	dd000415 	stw	r20,16(sp)
 801301c:	dcc00315 	stw	r19,12(sp)
 8013020:	dc800215 	stw	r18,8(sp)
 8013024:	dc400115 	stw	r17,4(sp)
 8013028:	dc000015 	stw	r16,0(sp)
 801302c:	1088000c 	andi	r2,r2,8192
 8013030:	302b883a 	mov	r21,r6
 8013034:	10002e26 	beq	r2,zero,80130f0 <__sprint_r.part.0+0xf4>
 8013038:	30800217 	ldw	r2,8(r6)
 801303c:	35800017 	ldw	r22,0(r6)
 8013040:	10002926 	beq	r2,zero,80130e8 <__sprint_r.part.0+0xec>
 8013044:	2827883a 	mov	r19,r5
 8013048:	2029883a 	mov	r20,r4
 801304c:	b5c00104 	addi	r23,r22,4
 8013050:	04bfffc4 	movi	r18,-1
 8013054:	bc400017 	ldw	r17,0(r23)
 8013058:	b4000017 	ldw	r16,0(r22)
 801305c:	0039883a 	mov	fp,zero
 8013060:	8822d0ba 	srli	r17,r17,2
 8013064:	8800031e 	bne	r17,zero,8013074 <__sprint_r.part.0+0x78>
 8013068:	00001806 	br	80130cc <__sprint_r.part.0+0xd0>
 801306c:	84000104 	addi	r16,r16,4
 8013070:	8f001526 	beq	r17,fp,80130c8 <__sprint_r.part.0+0xcc>
 8013074:	81400017 	ldw	r5,0(r16)
 8013078:	980d883a 	mov	r6,r19
 801307c:	a009883a 	mov	r4,r20
 8013080:	8014aec0 	call	8014aec <_fputwc_r>
 8013084:	e7000044 	addi	fp,fp,1
 8013088:	14bff81e 	bne	r2,r18,801306c <__alt_data_end+0xfc01306c>
 801308c:	9005883a 	mov	r2,r18
 8013090:	a8000215 	stw	zero,8(r21)
 8013094:	a8000115 	stw	zero,4(r21)
 8013098:	dfc00917 	ldw	ra,36(sp)
 801309c:	df000817 	ldw	fp,32(sp)
 80130a0:	ddc00717 	ldw	r23,28(sp)
 80130a4:	dd800617 	ldw	r22,24(sp)
 80130a8:	dd400517 	ldw	r21,20(sp)
 80130ac:	dd000417 	ldw	r20,16(sp)
 80130b0:	dcc00317 	ldw	r19,12(sp)
 80130b4:	dc800217 	ldw	r18,8(sp)
 80130b8:	dc400117 	ldw	r17,4(sp)
 80130bc:	dc000017 	ldw	r16,0(sp)
 80130c0:	dec00a04 	addi	sp,sp,40
 80130c4:	f800283a 	ret
 80130c8:	a8800217 	ldw	r2,8(r21)
 80130cc:	8c63883a 	add	r17,r17,r17
 80130d0:	8c63883a 	add	r17,r17,r17
 80130d4:	1445c83a 	sub	r2,r2,r17
 80130d8:	a8800215 	stw	r2,8(r21)
 80130dc:	b5800204 	addi	r22,r22,8
 80130e0:	bdc00204 	addi	r23,r23,8
 80130e4:	103fdb1e 	bne	r2,zero,8013054 <__alt_data_end+0xfc013054>
 80130e8:	0005883a 	mov	r2,zero
 80130ec:	003fe806 	br	8013090 <__alt_data_end+0xfc013090>
 80130f0:	80101d00 	call	80101d0 <__sfvwrite_r>
 80130f4:	003fe606 	br	8013090 <__alt_data_end+0xfc013090>

080130f8 <__sprint_r>:
 80130f8:	30c00217 	ldw	r3,8(r6)
 80130fc:	18000126 	beq	r3,zero,8013104 <__sprint_r+0xc>
 8013100:	8012ffc1 	jmpi	8012ffc <__sprint_r.part.0>
 8013104:	30000115 	stw	zero,4(r6)
 8013108:	0005883a 	mov	r2,zero
 801310c:	f800283a 	ret

08013110 <___vfiprintf_internal_r>:
 8013110:	deffca04 	addi	sp,sp,-216
 8013114:	dd403115 	stw	r21,196(sp)
 8013118:	dfc03515 	stw	ra,212(sp)
 801311c:	df003415 	stw	fp,208(sp)
 8013120:	ddc03315 	stw	r23,204(sp)
 8013124:	dd803215 	stw	r22,200(sp)
 8013128:	dd003015 	stw	r20,192(sp)
 801312c:	dcc02f15 	stw	r19,188(sp)
 8013130:	dc802e15 	stw	r18,184(sp)
 8013134:	dc402d15 	stw	r17,180(sp)
 8013138:	dc002c15 	stw	r16,176(sp)
 801313c:	d9002115 	stw	r4,132(sp)
 8013140:	d9402015 	stw	r5,128(sp)
 8013144:	d9c02215 	stw	r7,136(sp)
 8013148:	302b883a 	mov	r21,r6
 801314c:	20000226 	beq	r4,zero,8013158 <___vfiprintf_internal_r+0x48>
 8013150:	20800e17 	ldw	r2,56(r4)
 8013154:	1000cf26 	beq	r2,zero,8013494 <___vfiprintf_internal_r+0x384>
 8013158:	d8c02017 	ldw	r3,128(sp)
 801315c:	1880030b 	ldhu	r2,12(r3)
 8013160:	10c8000c 	andi	r3,r2,8192
 8013164:	1800071e 	bne	r3,zero,8013184 <___vfiprintf_internal_r+0x74>
 8013168:	d9402017 	ldw	r5,128(sp)
 801316c:	00f7ffc4 	movi	r3,-8193
 8013170:	10880014 	ori	r2,r2,8192
 8013174:	29001917 	ldw	r4,100(r5)
 8013178:	2880030d 	sth	r2,12(r5)
 801317c:	20c6703a 	and	r3,r4,r3
 8013180:	28c01915 	stw	r3,100(r5)
 8013184:	10c0020c 	andi	r3,r2,8
 8013188:	1800a526 	beq	r3,zero,8013420 <___vfiprintf_internal_r+0x310>
 801318c:	d9002017 	ldw	r4,128(sp)
 8013190:	20c00417 	ldw	r3,16(r4)
 8013194:	1800a226 	beq	r3,zero,8013420 <___vfiprintf_internal_r+0x310>
 8013198:	1080068c 	andi	r2,r2,26
 801319c:	00c00284 	movi	r3,10
 80131a0:	10c0a826 	beq	r2,r3,8013444 <___vfiprintf_internal_r+0x334>
 80131a4:	d9001a04 	addi	r4,sp,104
 80131a8:	d94019c4 	addi	r5,sp,103
 80131ac:	048200b4 	movhi	r18,2050
 80131b0:	2145c83a 	sub	r2,r4,r5
 80131b4:	94ab9504 	addi	r18,r18,-20908
 80131b8:	d9001e15 	stw	r4,120(sp)
 80131bc:	d9401f15 	stw	r5,124(sp)
 80131c0:	dec01a15 	stw	sp,104(sp)
 80131c4:	d8001c15 	stw	zero,112(sp)
 80131c8:	d8001b15 	stw	zero,108(sp)
 80131cc:	d811883a 	mov	r8,sp
 80131d0:	d8002615 	stw	zero,152(sp)
 80131d4:	d8002415 	stw	zero,144(sp)
 80131d8:	d8802815 	stw	r2,160(sp)
 80131dc:	a82d883a 	mov	r22,r21
 80131e0:	b0800007 	ldb	r2,0(r22)
 80131e4:	10040d26 	beq	r2,zero,801421c <___vfiprintf_internal_r+0x110c>
 80131e8:	00c00944 	movi	r3,37
 80131ec:	b029883a 	mov	r20,r22
 80131f0:	10c0021e 	bne	r2,r3,80131fc <___vfiprintf_internal_r+0xec>
 80131f4:	00001606 	br	8013250 <___vfiprintf_internal_r+0x140>
 80131f8:	10c00326 	beq	r2,r3,8013208 <___vfiprintf_internal_r+0xf8>
 80131fc:	a5000044 	addi	r20,r20,1
 8013200:	a0800007 	ldb	r2,0(r20)
 8013204:	103ffc1e 	bne	r2,zero,80131f8 <__alt_data_end+0xfc0131f8>
 8013208:	a5a1c83a 	sub	r16,r20,r22
 801320c:	80001026 	beq	r16,zero,8013250 <___vfiprintf_internal_r+0x140>
 8013210:	d8c01c17 	ldw	r3,112(sp)
 8013214:	d8801b17 	ldw	r2,108(sp)
 8013218:	45800015 	stw	r22,0(r8)
 801321c:	80c7883a 	add	r3,r16,r3
 8013220:	10800044 	addi	r2,r2,1
 8013224:	44000115 	stw	r16,4(r8)
 8013228:	d8c01c15 	stw	r3,112(sp)
 801322c:	d8801b15 	stw	r2,108(sp)
 8013230:	010001c4 	movi	r4,7
 8013234:	2080750e 	bge	r4,r2,801340c <___vfiprintf_internal_r+0x2fc>
 8013238:	1803951e 	bne	r3,zero,8014090 <___vfiprintf_internal_r+0xf80>
 801323c:	d8c02417 	ldw	r3,144(sp)
 8013240:	d8001b15 	stw	zero,108(sp)
 8013244:	d811883a 	mov	r8,sp
 8013248:	1c07883a 	add	r3,r3,r16
 801324c:	d8c02415 	stw	r3,144(sp)
 8013250:	a0800007 	ldb	r2,0(r20)
 8013254:	1002e026 	beq	r2,zero,8013dd8 <___vfiprintf_internal_r+0xcc8>
 8013258:	a5800044 	addi	r22,r20,1
 801325c:	a0c00047 	ldb	r3,1(r20)
 8013260:	d8001d85 	stb	zero,118(sp)
 8013264:	0027883a 	mov	r19,zero
 8013268:	d8002305 	stb	zero,140(sp)
 801326c:	043fffc4 	movi	r16,-1
 8013270:	d8002515 	stw	zero,148(sp)
 8013274:	0023883a 	mov	r17,zero
 8013278:	05001604 	movi	r20,88
 801327c:	05400244 	movi	r21,9
 8013280:	402f883a 	mov	r23,r8
 8013284:	b5800044 	addi	r22,r22,1
 8013288:	18bff804 	addi	r2,r3,-32
 801328c:	a0827736 	bltu	r20,r2,8013c6c <___vfiprintf_internal_r+0xb5c>
 8013290:	100490ba 	slli	r2,r2,2
 8013294:	01020074 	movhi	r4,2049
 8013298:	210caa04 	addi	r4,r4,12968
 801329c:	1105883a 	add	r2,r2,r4
 80132a0:	10800017 	ldw	r2,0(r2)
 80132a4:	1000683a 	jmp	r2
 80132a8:	0801396c 	andhi	zero,at,1253
 80132ac:	08013c6c 	andhi	zero,at,1265
 80132b0:	08013c6c 	andhi	zero,at,1265
 80132b4:	08013988 	cmpgei	zero,at,1254
 80132b8:	08013c6c 	andhi	zero,at,1265
 80132bc:	08013c6c 	andhi	zero,at,1265
 80132c0:	08013c6c 	andhi	zero,at,1265
 80132c4:	08013c6c 	andhi	zero,at,1265
 80132c8:	08013c6c 	andhi	zero,at,1265
 80132cc:	08013c6c 	andhi	zero,at,1265
 80132d0:	08013b90 	cmplti	zero,at,1262
 80132d4:	08013bb4 	orhi	zero,at,1262
 80132d8:	08013c6c 	andhi	zero,at,1265
 80132dc:	080134ac 	andhi	zero,at,1234
 80132e0:	08013bc8 	cmpgei	zero,at,1263
 80132e4:	08013c6c 	andhi	zero,at,1265
 80132e8:	08013994 	ori	zero,at,1254
 80132ec:	080139a0 	cmpeqi	zero,at,1254
 80132f0:	080139a0 	cmpeqi	zero,at,1254
 80132f4:	080139a0 	cmpeqi	zero,at,1254
 80132f8:	080139a0 	cmpeqi	zero,at,1254
 80132fc:	080139a0 	cmpeqi	zero,at,1254
 8013300:	080139a0 	cmpeqi	zero,at,1254
 8013304:	080139a0 	cmpeqi	zero,at,1254
 8013308:	080139a0 	cmpeqi	zero,at,1254
 801330c:	080139a0 	cmpeqi	zero,at,1254
 8013310:	08013c6c 	andhi	zero,at,1265
 8013314:	08013c6c 	andhi	zero,at,1265
 8013318:	08013c6c 	andhi	zero,at,1265
 801331c:	08013c6c 	andhi	zero,at,1265
 8013320:	08013c6c 	andhi	zero,at,1265
 8013324:	08013c6c 	andhi	zero,at,1265
 8013328:	08013c6c 	andhi	zero,at,1265
 801332c:	08013c6c 	andhi	zero,at,1265
 8013330:	08013c6c 	andhi	zero,at,1265
 8013334:	08013c6c 	andhi	zero,at,1265
 8013338:	080139e0 	cmpeqi	zero,at,1255
 801333c:	08013c6c 	andhi	zero,at,1265
 8013340:	08013c6c 	andhi	zero,at,1265
 8013344:	08013c6c 	andhi	zero,at,1265
 8013348:	08013c6c 	andhi	zero,at,1265
 801334c:	08013c6c 	andhi	zero,at,1265
 8013350:	08013c6c 	andhi	zero,at,1265
 8013354:	08013c6c 	andhi	zero,at,1265
 8013358:	08013c6c 	andhi	zero,at,1265
 801335c:	08013c6c 	andhi	zero,at,1265
 8013360:	08013c6c 	andhi	zero,at,1265
 8013364:	08013a1c 	xori	zero,at,1256
 8013368:	08013c6c 	andhi	zero,at,1265
 801336c:	08013c6c 	andhi	zero,at,1265
 8013370:	08013c6c 	andhi	zero,at,1265
 8013374:	08013c6c 	andhi	zero,at,1265
 8013378:	08013c6c 	andhi	zero,at,1265
 801337c:	08013a78 	rdprs	zero,at,1257
 8013380:	08013c6c 	andhi	zero,at,1265
 8013384:	08013c6c 	andhi	zero,at,1265
 8013388:	08013aec 	andhi	zero,at,1259
 801338c:	08013c6c 	andhi	zero,at,1265
 8013390:	08013c6c 	andhi	zero,at,1265
 8013394:	08013c6c 	andhi	zero,at,1265
 8013398:	08013c6c 	andhi	zero,at,1265
 801339c:	08013c6c 	andhi	zero,at,1265
 80133a0:	08013c6c 	andhi	zero,at,1265
 80133a4:	08013c6c 	andhi	zero,at,1265
 80133a8:	08013c6c 	andhi	zero,at,1265
 80133ac:	08013c6c 	andhi	zero,at,1265
 80133b0:	08013c6c 	andhi	zero,at,1265
 80133b4:	08013894 	ori	zero,at,1250
 80133b8:	080138c4 	addi	zero,at,1251
 80133bc:	08013c6c 	andhi	zero,at,1265
 80133c0:	08013c6c 	andhi	zero,at,1265
 80133c4:	08013c6c 	andhi	zero,at,1265
 80133c8:	08013c14 	ori	zero,at,1264
 80133cc:	080138c4 	addi	zero,at,1251
 80133d0:	08013c6c 	andhi	zero,at,1265
 80133d4:	08013c6c 	andhi	zero,at,1265
 80133d8:	0801376c 	andhi	zero,at,1245
 80133dc:	08013c6c 	andhi	zero,at,1265
 80133e0:	08013780 	call	801378 <__alt_mem_onchip_memory2_0+0x801378>
 80133e4:	080137b8 	rdprs	zero,at,1246
 80133e8:	080134b8 	rdprs	zero,at,1234
 80133ec:	08013760 	cmpeqi	zero,at,1245
 80133f0:	08013c6c 	andhi	zero,at,1265
 80133f4:	08013b2c 	andhi	zero,at,1260
 80133f8:	08013c6c 	andhi	zero,at,1265
 80133fc:	08013b78 	rdprs	zero,at,1261
 8013400:	08013c6c 	andhi	zero,at,1265
 8013404:	08013c6c 	andhi	zero,at,1265
 8013408:	0801383c 	xorhi	zero,at,1248
 801340c:	42000204 	addi	r8,r8,8
 8013410:	d8c02417 	ldw	r3,144(sp)
 8013414:	1c07883a 	add	r3,r3,r16
 8013418:	d8c02415 	stw	r3,144(sp)
 801341c:	003f8c06 	br	8013250 <__alt_data_end+0xfc013250>
 8013420:	d9402017 	ldw	r5,128(sp)
 8013424:	d9002117 	ldw	r4,132(sp)
 8013428:	800dd400 	call	800dd40 <__swsetup_r>
 801342c:	1003c11e 	bne	r2,zero,8014334 <___vfiprintf_internal_r+0x1224>
 8013430:	d9402017 	ldw	r5,128(sp)
 8013434:	00c00284 	movi	r3,10
 8013438:	2880030b 	ldhu	r2,12(r5)
 801343c:	1080068c 	andi	r2,r2,26
 8013440:	10ff581e 	bne	r2,r3,80131a4 <__alt_data_end+0xfc0131a4>
 8013444:	d8c02017 	ldw	r3,128(sp)
 8013448:	1880038f 	ldh	r2,14(r3)
 801344c:	103f5516 	blt	r2,zero,80131a4 <__alt_data_end+0xfc0131a4>
 8013450:	d9c02217 	ldw	r7,136(sp)
 8013454:	d9002117 	ldw	r4,132(sp)
 8013458:	a80d883a 	mov	r6,r21
 801345c:	180b883a 	mov	r5,r3
 8013460:	80146380 	call	8014638 <__sbprintf>
 8013464:	dfc03517 	ldw	ra,212(sp)
 8013468:	df003417 	ldw	fp,208(sp)
 801346c:	ddc03317 	ldw	r23,204(sp)
 8013470:	dd803217 	ldw	r22,200(sp)
 8013474:	dd403117 	ldw	r21,196(sp)
 8013478:	dd003017 	ldw	r20,192(sp)
 801347c:	dcc02f17 	ldw	r19,188(sp)
 8013480:	dc802e17 	ldw	r18,184(sp)
 8013484:	dc402d17 	ldw	r17,180(sp)
 8013488:	dc002c17 	ldw	r16,176(sp)
 801348c:	dec03604 	addi	sp,sp,216
 8013490:	f800283a 	ret
 8013494:	800fd4c0 	call	800fd4c <__sinit>
 8013498:	003f2f06 	br	8013158 <__alt_data_end+0xfc013158>
 801349c:	d8c02517 	ldw	r3,148(sp)
 80134a0:	d8802215 	stw	r2,136(sp)
 80134a4:	00c7c83a 	sub	r3,zero,r3
 80134a8:	d8c02515 	stw	r3,148(sp)
 80134ac:	8c400114 	ori	r17,r17,4
 80134b0:	b0c00007 	ldb	r3,0(r22)
 80134b4:	003f7306 	br	8013284 <__alt_data_end+0xfc013284>
 80134b8:	00800c04 	movi	r2,48
 80134bc:	d9402217 	ldw	r5,136(sp)
 80134c0:	d8801d05 	stb	r2,116(sp)
 80134c4:	00801e04 	movi	r2,120
 80134c8:	d8801d45 	stb	r2,117(sp)
 80134cc:	d8001d85 	stb	zero,118(sp)
 80134d0:	b811883a 	mov	r8,r23
 80134d4:	28c00104 	addi	r3,r5,4
 80134d8:	2cc00017 	ldw	r19,0(r5)
 80134dc:	0029883a 	mov	r20,zero
 80134e0:	88800094 	ori	r2,r17,2
 80134e4:	80032516 	blt	r16,zero,801417c <___vfiprintf_internal_r+0x106c>
 80134e8:	00bfdfc4 	movi	r2,-129
 80134ec:	88a2703a 	and	r17,r17,r2
 80134f0:	d8c02215 	stw	r3,136(sp)
 80134f4:	8c400094 	ori	r17,r17,2
 80134f8:	98032a1e 	bne	r19,zero,80141a4 <___vfiprintf_internal_r+0x1094>
 80134fc:	008200b4 	movhi	r2,2050
 8013500:	10ab3504 	addi	r2,r2,-21292
 8013504:	d8802615 	stw	r2,152(sp)
 8013508:	002b883a 	mov	r21,zero
 801350c:	8001741e 	bne	r16,zero,8013ae0 <___vfiprintf_internal_r+0x9d0>
 8013510:	0021883a 	mov	r16,zero
 8013514:	0029883a 	mov	r20,zero
 8013518:	ddc01a04 	addi	r23,sp,104
 801351c:	8027883a 	mov	r19,r16
 8013520:	8500010e 	bge	r16,r20,8013528 <___vfiprintf_internal_r+0x418>
 8013524:	a027883a 	mov	r19,r20
 8013528:	ad403fcc 	andi	r21,r21,255
 801352c:	ad40201c 	xori	r21,r21,128
 8013530:	ad7fe004 	addi	r21,r21,-128
 8013534:	a8000126 	beq	r21,zero,801353c <___vfiprintf_internal_r+0x42c>
 8013538:	9cc00044 	addi	r19,r19,1
 801353c:	89c0008c 	andi	r7,r17,2
 8013540:	38000126 	beq	r7,zero,8013548 <___vfiprintf_internal_r+0x438>
 8013544:	9cc00084 	addi	r19,r19,2
 8013548:	88c0210c 	andi	r3,r17,132
 801354c:	1801dd1e 	bne	r3,zero,8013cc4 <___vfiprintf_internal_r+0xbb4>
 8013550:	d9402517 	ldw	r5,148(sp)
 8013554:	2cebc83a 	sub	r21,r5,r19
 8013558:	0541da0e 	bge	zero,r21,8013cc4 <___vfiprintf_internal_r+0xbb4>
 801355c:	07000404 	movi	fp,16
 8013560:	d8801c17 	ldw	r2,112(sp)
 8013564:	e543be0e 	bge	fp,r21,8014460 <___vfiprintf_internal_r+0x1350>
 8013568:	014200b4 	movhi	r5,2050
 801356c:	296b9904 	addi	r5,r5,-20892
 8013570:	dc002715 	stw	r16,156(sp)
 8013574:	d9801b17 	ldw	r6,108(sp)
 8013578:	a821883a 	mov	r16,r21
 801357c:	d9402315 	stw	r5,140(sp)
 8013580:	028001c4 	movi	r10,7
 8013584:	d9c02915 	stw	r7,164(sp)
 8013588:	182b883a 	mov	r21,r3
 801358c:	00000506 	br	80135a4 <___vfiprintf_internal_r+0x494>
 8013590:	31000084 	addi	r4,r6,2
 8013594:	42000204 	addi	r8,r8,8
 8013598:	180d883a 	mov	r6,r3
 801359c:	843ffc04 	addi	r16,r16,-16
 80135a0:	e4000f0e 	bge	fp,r16,80135e0 <___vfiprintf_internal_r+0x4d0>
 80135a4:	010200b4 	movhi	r4,2050
 80135a8:	10800404 	addi	r2,r2,16
 80135ac:	30c00044 	addi	r3,r6,1
 80135b0:	212b9904 	addi	r4,r4,-20892
 80135b4:	41000015 	stw	r4,0(r8)
 80135b8:	47000115 	stw	fp,4(r8)
 80135bc:	d8801c15 	stw	r2,112(sp)
 80135c0:	d8c01b15 	stw	r3,108(sp)
 80135c4:	50fff20e 	bge	r10,r3,8013590 <__alt_data_end+0xfc013590>
 80135c8:	1001b21e 	bne	r2,zero,8013c94 <___vfiprintf_internal_r+0xb84>
 80135cc:	843ffc04 	addi	r16,r16,-16
 80135d0:	000d883a 	mov	r6,zero
 80135d4:	01000044 	movi	r4,1
 80135d8:	d811883a 	mov	r8,sp
 80135dc:	e43ff116 	blt	fp,r16,80135a4 <__alt_data_end+0xfc0135a4>
 80135e0:	a807883a 	mov	r3,r21
 80135e4:	d9c02917 	ldw	r7,164(sp)
 80135e8:	802b883a 	mov	r21,r16
 80135ec:	dc002717 	ldw	r16,156(sp)
 80135f0:	d9402317 	ldw	r5,140(sp)
 80135f4:	a885883a 	add	r2,r21,r2
 80135f8:	45400115 	stw	r21,4(r8)
 80135fc:	41400015 	stw	r5,0(r8)
 8013600:	d8801c15 	stw	r2,112(sp)
 8013604:	d9001b15 	stw	r4,108(sp)
 8013608:	014001c4 	movi	r5,7
 801360c:	29026216 	blt	r5,r4,8013f98 <___vfiprintf_internal_r+0xe88>
 8013610:	d9801d87 	ldb	r6,118(sp)
 8013614:	42000204 	addi	r8,r8,8
 8013618:	21400044 	addi	r5,r4,1
 801361c:	3001ae1e 	bne	r6,zero,8013cd8 <___vfiprintf_internal_r+0xbc8>
 8013620:	3801bb26 	beq	r7,zero,8013d10 <___vfiprintf_internal_r+0xc00>
 8013624:	d9001d04 	addi	r4,sp,116
 8013628:	10800084 	addi	r2,r2,2
 801362c:	41000015 	stw	r4,0(r8)
 8013630:	01000084 	movi	r4,2
 8013634:	41000115 	stw	r4,4(r8)
 8013638:	d8801c15 	stw	r2,112(sp)
 801363c:	d9401b15 	stw	r5,108(sp)
 8013640:	010001c4 	movi	r4,7
 8013644:	2142680e 	bge	r4,r5,8013fe8 <___vfiprintf_internal_r+0xed8>
 8013648:	1002b11e 	bne	r2,zero,8014110 <___vfiprintf_internal_r+0x1000>
 801364c:	01802004 	movi	r6,128
 8013650:	01400044 	movi	r5,1
 8013654:	0009883a 	mov	r4,zero
 8013658:	d811883a 	mov	r8,sp
 801365c:	1981ae1e 	bne	r3,r6,8013d18 <___vfiprintf_internal_r+0xc08>
 8013660:	d8c02517 	ldw	r3,148(sp)
 8013664:	1cf9c83a 	sub	fp,r3,r19
 8013668:	0701ab0e 	bge	zero,fp,8013d18 <___vfiprintf_internal_r+0xc08>
 801366c:	05400404 	movi	r21,16
 8013670:	af03a90e 	bge	r21,fp,8014518 <___vfiprintf_internal_r+0x1408>
 8013674:	014200b4 	movhi	r5,2050
 8013678:	296b9504 	addi	r5,r5,-20908
 801367c:	d9402315 	stw	r5,140(sp)
 8013680:	01c001c4 	movi	r7,7
 8013684:	00000506 	br	801369c <___vfiprintf_internal_r+0x58c>
 8013688:	21800084 	addi	r6,r4,2
 801368c:	42000204 	addi	r8,r8,8
 8013690:	1809883a 	mov	r4,r3
 8013694:	e73ffc04 	addi	fp,fp,-16
 8013698:	af000d0e 	bge	r21,fp,80136d0 <___vfiprintf_internal_r+0x5c0>
 801369c:	10800404 	addi	r2,r2,16
 80136a0:	20c00044 	addi	r3,r4,1
 80136a4:	44800015 	stw	r18,0(r8)
 80136a8:	45400115 	stw	r21,4(r8)
 80136ac:	d8801c15 	stw	r2,112(sp)
 80136b0:	d8c01b15 	stw	r3,108(sp)
 80136b4:	38fff40e 	bge	r7,r3,8013688 <__alt_data_end+0xfc013688>
 80136b8:	10022b1e 	bne	r2,zero,8013f68 <___vfiprintf_internal_r+0xe58>
 80136bc:	e73ffc04 	addi	fp,fp,-16
 80136c0:	01800044 	movi	r6,1
 80136c4:	0009883a 	mov	r4,zero
 80136c8:	d811883a 	mov	r8,sp
 80136cc:	af3ff316 	blt	r21,fp,801369c <__alt_data_end+0xfc01369c>
 80136d0:	d8c02317 	ldw	r3,140(sp)
 80136d4:	1705883a 	add	r2,r2,fp
 80136d8:	47000115 	stw	fp,4(r8)
 80136dc:	40c00015 	stw	r3,0(r8)
 80136e0:	d8801c15 	stw	r2,112(sp)
 80136e4:	d9801b15 	stw	r6,108(sp)
 80136e8:	00c001c4 	movi	r3,7
 80136ec:	19829416 	blt	r3,r6,8014140 <___vfiprintf_internal_r+0x1030>
 80136f0:	8521c83a 	sub	r16,r16,r20
 80136f4:	42000204 	addi	r8,r8,8
 80136f8:	31400044 	addi	r5,r6,1
 80136fc:	3009883a 	mov	r4,r6
 8013700:	04018716 	blt	zero,r16,8013d20 <___vfiprintf_internal_r+0xc10>
 8013704:	a085883a 	add	r2,r20,r2
 8013708:	45c00015 	stw	r23,0(r8)
 801370c:	45000115 	stw	r20,4(r8)
 8013710:	d8801c15 	stw	r2,112(sp)
 8013714:	d9401b15 	stw	r5,108(sp)
 8013718:	00c001c4 	movi	r3,7
 801371c:	1941c20e 	bge	r3,r5,8013e28 <___vfiprintf_internal_r+0xd18>
 8013720:	1002531e 	bne	r2,zero,8014070 <___vfiprintf_internal_r+0xf60>
 8013724:	d8001b15 	stw	zero,108(sp)
 8013728:	8c40010c 	andi	r17,r17,4
 801372c:	88023226 	beq	r17,zero,8013ff8 <___vfiprintf_internal_r+0xee8>
 8013730:	d9002517 	ldw	r4,148(sp)
 8013734:	24e3c83a 	sub	r17,r4,r19
 8013738:	04432916 	blt	zero,r17,80143e0 <___vfiprintf_internal_r+0x12d0>
 801373c:	d8802517 	ldw	r2,148(sp)
 8013740:	14c0010e 	bge	r2,r19,8013748 <___vfiprintf_internal_r+0x638>
 8013744:	9805883a 	mov	r2,r19
 8013748:	d8c02417 	ldw	r3,144(sp)
 801374c:	1887883a 	add	r3,r3,r2
 8013750:	d8c02415 	stw	r3,144(sp)
 8013754:	d8001b15 	stw	zero,108(sp)
 8013758:	d811883a 	mov	r8,sp
 801375c:	003ea006 	br	80131e0 <__alt_data_end+0xfc0131e0>
 8013760:	8c400814 	ori	r17,r17,32
 8013764:	b0c00007 	ldb	r3,0(r22)
 8013768:	003ec606 	br	8013284 <__alt_data_end+0xfc013284>
 801376c:	b0c00007 	ldb	r3,0(r22)
 8013770:	00801b04 	movi	r2,108
 8013774:	18832026 	beq	r3,r2,80143f8 <___vfiprintf_internal_r+0x12e8>
 8013778:	8c400414 	ori	r17,r17,16
 801377c:	003ec106 	br	8013284 <__alt_data_end+0xfc013284>
 8013780:	9cc03fcc 	andi	r19,r19,255
 8013784:	b811883a 	mov	r8,r23
 8013788:	9803981e 	bne	r19,zero,80145ec <___vfiprintf_internal_r+0x14dc>
 801378c:	8880080c 	andi	r2,r17,32
 8013790:	1002be26 	beq	r2,zero,801428c <___vfiprintf_internal_r+0x117c>
 8013794:	d9002217 	ldw	r4,136(sp)
 8013798:	d9402417 	ldw	r5,144(sp)
 801379c:	20800017 	ldw	r2,0(r4)
 80137a0:	2807d7fa 	srai	r3,r5,31
 80137a4:	21000104 	addi	r4,r4,4
 80137a8:	d9002215 	stw	r4,136(sp)
 80137ac:	11400015 	stw	r5,0(r2)
 80137b0:	10c00115 	stw	r3,4(r2)
 80137b4:	003e8a06 	br	80131e0 <__alt_data_end+0xfc0131e0>
 80137b8:	9cc03fcc 	andi	r19,r19,255
 80137bc:	b811883a 	mov	r8,r23
 80137c0:	9803871e 	bne	r19,zero,80145e0 <___vfiprintf_internal_r+0x14d0>
 80137c4:	8880080c 	andi	r2,r17,32
 80137c8:	10009a26 	beq	r2,zero,8013a34 <___vfiprintf_internal_r+0x924>
 80137cc:	d9002217 	ldw	r4,136(sp)
 80137d0:	d8001d85 	stb	zero,118(sp)
 80137d4:	20800204 	addi	r2,r4,8
 80137d8:	24c00017 	ldw	r19,0(r4)
 80137dc:	25000117 	ldw	r20,4(r4)
 80137e0:	8002a416 	blt	r16,zero,8014274 <___vfiprintf_internal_r+0x1164>
 80137e4:	013fdfc4 	movi	r4,-129
 80137e8:	9d06b03a 	or	r3,r19,r20
 80137ec:	d8802215 	stw	r2,136(sp)
 80137f0:	8922703a 	and	r17,r17,r4
 80137f4:	18009b26 	beq	r3,zero,8013a64 <___vfiprintf_internal_r+0x954>
 80137f8:	002b883a 	mov	r21,zero
 80137fc:	ddc01a04 	addi	r23,sp,104
 8013800:	9806d0fa 	srli	r3,r19,3
 8013804:	a008977a 	slli	r4,r20,29
 8013808:	a028d0fa 	srli	r20,r20,3
 801380c:	9cc001cc 	andi	r19,r19,7
 8013810:	98800c04 	addi	r2,r19,48
 8013814:	bdffffc4 	addi	r23,r23,-1
 8013818:	20e6b03a 	or	r19,r4,r3
 801381c:	b8800005 	stb	r2,0(r23)
 8013820:	9d06b03a 	or	r3,r19,r20
 8013824:	183ff61e 	bne	r3,zero,8013800 <__alt_data_end+0xfc013800>
 8013828:	88c0004c 	andi	r3,r17,1
 801382c:	18021f1e 	bne	r3,zero,80140ac <___vfiprintf_internal_r+0xf9c>
 8013830:	d9401e17 	ldw	r5,120(sp)
 8013834:	2de9c83a 	sub	r20,r5,r23
 8013838:	003f3806 	br	801351c <__alt_data_end+0xfc01351c>
 801383c:	9cc03fcc 	andi	r19,r19,255
 8013840:	b811883a 	mov	r8,r23
 8013844:	98034f1e 	bne	r19,zero,8014584 <___vfiprintf_internal_r+0x1474>
 8013848:	008200b4 	movhi	r2,2050
 801384c:	10ab3504 	addi	r2,r2,-21292
 8013850:	d8802615 	stw	r2,152(sp)
 8013854:	8880080c 	andi	r2,r17,32
 8013858:	1000ac26 	beq	r2,zero,8013b0c <___vfiprintf_internal_r+0x9fc>
 801385c:	d9002217 	ldw	r4,136(sp)
 8013860:	24c00017 	ldw	r19,0(r4)
 8013864:	25000117 	ldw	r20,4(r4)
 8013868:	21000204 	addi	r4,r4,8
 801386c:	d9002215 	stw	r4,136(sp)
 8013870:	8880004c 	andi	r2,r17,1
 8013874:	1001e726 	beq	r2,zero,8014014 <___vfiprintf_internal_r+0xf04>
 8013878:	9d04b03a 	or	r2,r19,r20
 801387c:	10025c1e 	bne	r2,zero,80141f0 <___vfiprintf_internal_r+0x10e0>
 8013880:	d8001d85 	stb	zero,118(sp)
 8013884:	80024416 	blt	r16,zero,8014198 <___vfiprintf_internal_r+0x1088>
 8013888:	00bfdfc4 	movi	r2,-129
 801388c:	88a2703a 	and	r17,r17,r2
 8013890:	003f1d06 	br	8013508 <__alt_data_end+0xfc013508>
 8013894:	d8c02217 	ldw	r3,136(sp)
 8013898:	04c00044 	movi	r19,1
 801389c:	b811883a 	mov	r8,r23
 80138a0:	18800017 	ldw	r2,0(r3)
 80138a4:	18c00104 	addi	r3,r3,4
 80138a8:	d8001d85 	stb	zero,118(sp)
 80138ac:	d8801005 	stb	r2,64(sp)
 80138b0:	d8c02215 	stw	r3,136(sp)
 80138b4:	9829883a 	mov	r20,r19
 80138b8:	ddc01004 	addi	r23,sp,64
 80138bc:	0021883a 	mov	r16,zero
 80138c0:	003f1e06 	br	801353c <__alt_data_end+0xfc01353c>
 80138c4:	9cc03fcc 	andi	r19,r19,255
 80138c8:	b811883a 	mov	r8,r23
 80138cc:	9803331e 	bne	r19,zero,801459c <___vfiprintf_internal_r+0x148c>
 80138d0:	8880080c 	andi	r2,r17,32
 80138d4:	10004826 	beq	r2,zero,80139f8 <___vfiprintf_internal_r+0x8e8>
 80138d8:	d9002217 	ldw	r4,136(sp)
 80138dc:	20800117 	ldw	r2,4(r4)
 80138e0:	24c00017 	ldw	r19,0(r4)
 80138e4:	21000204 	addi	r4,r4,8
 80138e8:	d9002215 	stw	r4,136(sp)
 80138ec:	1029883a 	mov	r20,r2
 80138f0:	10024c16 	blt	r2,zero,8014224 <___vfiprintf_internal_r+0x1114>
 80138f4:	dd401d83 	ldbu	r21,118(sp)
 80138f8:	80007116 	blt	r16,zero,8013ac0 <___vfiprintf_internal_r+0x9b0>
 80138fc:	00ffdfc4 	movi	r3,-129
 8013900:	9d04b03a 	or	r2,r19,r20
 8013904:	88e2703a 	and	r17,r17,r3
 8013908:	1000d126 	beq	r2,zero,8013c50 <___vfiprintf_internal_r+0xb40>
 801390c:	a0023526 	beq	r20,zero,80141e4 <___vfiprintf_internal_r+0x10d4>
 8013910:	ddc01a04 	addi	r23,sp,104
 8013914:	4039883a 	mov	fp,r8
 8013918:	9809883a 	mov	r4,r19
 801391c:	a00b883a 	mov	r5,r20
 8013920:	01800284 	movi	r6,10
 8013924:	000f883a 	mov	r7,zero
 8013928:	80157480 	call	8015748 <__umoddi3>
 801392c:	10800c04 	addi	r2,r2,48
 8013930:	bdffffc4 	addi	r23,r23,-1
 8013934:	9809883a 	mov	r4,r19
 8013938:	a00b883a 	mov	r5,r20
 801393c:	b8800005 	stb	r2,0(r23)
 8013940:	01800284 	movi	r6,10
 8013944:	000f883a 	mov	r7,zero
 8013948:	801514c0 	call	801514c <__udivdi3>
 801394c:	1027883a 	mov	r19,r2
 8013950:	10c4b03a 	or	r2,r2,r3
 8013954:	1829883a 	mov	r20,r3
 8013958:	103fef1e 	bne	r2,zero,8013918 <__alt_data_end+0xfc013918>
 801395c:	d9001e17 	ldw	r4,120(sp)
 8013960:	e011883a 	mov	r8,fp
 8013964:	25e9c83a 	sub	r20,r4,r23
 8013968:	003eec06 	br	801351c <__alt_data_end+0xfc01351c>
 801396c:	d8802307 	ldb	r2,140(sp)
 8013970:	1002361e 	bne	r2,zero,801424c <___vfiprintf_internal_r+0x113c>
 8013974:	00c00804 	movi	r3,32
 8013978:	d8c02305 	stb	r3,140(sp)
 801397c:	04c00044 	movi	r19,1
 8013980:	b0c00007 	ldb	r3,0(r22)
 8013984:	003e3f06 	br	8013284 <__alt_data_end+0xfc013284>
 8013988:	8c400054 	ori	r17,r17,1
 801398c:	b0c00007 	ldb	r3,0(r22)
 8013990:	003e3c06 	br	8013284 <__alt_data_end+0xfc013284>
 8013994:	8c402014 	ori	r17,r17,128
 8013998:	b0c00007 	ldb	r3,0(r22)
 801399c:	003e3906 	br	8013284 <__alt_data_end+0xfc013284>
 80139a0:	dc002715 	stw	r16,156(sp)
 80139a4:	d8002515 	stw	zero,148(sp)
 80139a8:	1f3ff404 	addi	fp,r3,-48
 80139ac:	0009883a 	mov	r4,zero
 80139b0:	b021883a 	mov	r16,r22
 80139b4:	01400284 	movi	r5,10
 80139b8:	800832c0 	call	800832c <__mulsi3>
 80139bc:	80c00007 	ldb	r3,0(r16)
 80139c0:	e089883a 	add	r4,fp,r2
 80139c4:	b5800044 	addi	r22,r22,1
 80139c8:	1f3ff404 	addi	fp,r3,-48
 80139cc:	b021883a 	mov	r16,r22
 80139d0:	af3ff82e 	bgeu	r21,fp,80139b4 <__alt_data_end+0xfc0139b4>
 80139d4:	d9002515 	stw	r4,148(sp)
 80139d8:	dc002717 	ldw	r16,156(sp)
 80139dc:	003e2a06 	br	8013288 <__alt_data_end+0xfc013288>
 80139e0:	9cc03fcc 	andi	r19,r19,255
 80139e4:	b811883a 	mov	r8,r23
 80139e8:	9802e91e 	bne	r19,zero,8014590 <___vfiprintf_internal_r+0x1480>
 80139ec:	8c400414 	ori	r17,r17,16
 80139f0:	8880080c 	andi	r2,r17,32
 80139f4:	103fb81e 	bne	r2,zero,80138d8 <__alt_data_end+0xfc0138d8>
 80139f8:	8880040c 	andi	r2,r17,16
 80139fc:	10022e26 	beq	r2,zero,80142b8 <___vfiprintf_internal_r+0x11a8>
 8013a00:	d9402217 	ldw	r5,136(sp)
 8013a04:	2cc00017 	ldw	r19,0(r5)
 8013a08:	29400104 	addi	r5,r5,4
 8013a0c:	d9402215 	stw	r5,136(sp)
 8013a10:	9829d7fa 	srai	r20,r19,31
 8013a14:	a005883a 	mov	r2,r20
 8013a18:	003fb506 	br	80138f0 <__alt_data_end+0xfc0138f0>
 8013a1c:	9cc03fcc 	andi	r19,r19,255
 8013a20:	b811883a 	mov	r8,r23
 8013a24:	9802fa1e 	bne	r19,zero,8014610 <___vfiprintf_internal_r+0x1500>
 8013a28:	8c400414 	ori	r17,r17,16
 8013a2c:	8880080c 	andi	r2,r17,32
 8013a30:	103f661e 	bne	r2,zero,80137cc <__alt_data_end+0xfc0137cc>
 8013a34:	8880040c 	andi	r2,r17,16
 8013a38:	10020626 	beq	r2,zero,8014254 <___vfiprintf_internal_r+0x1144>
 8013a3c:	d9402217 	ldw	r5,136(sp)
 8013a40:	d8001d85 	stb	zero,118(sp)
 8013a44:	0029883a 	mov	r20,zero
 8013a48:	28800104 	addi	r2,r5,4
 8013a4c:	2cc00017 	ldw	r19,0(r5)
 8013a50:	80020816 	blt	r16,zero,8014274 <___vfiprintf_internal_r+0x1164>
 8013a54:	00ffdfc4 	movi	r3,-129
 8013a58:	d8802215 	stw	r2,136(sp)
 8013a5c:	88e2703a 	and	r17,r17,r3
 8013a60:	983f651e 	bne	r19,zero,80137f8 <__alt_data_end+0xfc0137f8>
 8013a64:	002b883a 	mov	r21,zero
 8013a68:	8002cf26 	beq	r16,zero,80145a8 <___vfiprintf_internal_r+0x1498>
 8013a6c:	0027883a 	mov	r19,zero
 8013a70:	0029883a 	mov	r20,zero
 8013a74:	003f6106 	br	80137fc <__alt_data_end+0xfc0137fc>
 8013a78:	9cc03fcc 	andi	r19,r19,255
 8013a7c:	b811883a 	mov	r8,r23
 8013a80:	9802e01e 	bne	r19,zero,8014604 <___vfiprintf_internal_r+0x14f4>
 8013a84:	8c400414 	ori	r17,r17,16
 8013a88:	8880080c 	andi	r2,r17,32
 8013a8c:	1000641e 	bne	r2,zero,8013c20 <___vfiprintf_internal_r+0xb10>
 8013a90:	8880040c 	andi	r2,r17,16
 8013a94:	1001c81e 	bne	r2,zero,80141b8 <___vfiprintf_internal_r+0x10a8>
 8013a98:	8880100c 	andi	r2,r17,64
 8013a9c:	d8001d85 	stb	zero,118(sp)
 8013aa0:	1002281e 	bne	r2,zero,8014344 <___vfiprintf_internal_r+0x1234>
 8013aa4:	d9002217 	ldw	r4,136(sp)
 8013aa8:	0029883a 	mov	r20,zero
 8013aac:	20800104 	addi	r2,r4,4
 8013ab0:	24c00017 	ldw	r19,0(r4)
 8013ab4:	8001c60e 	bge	r16,zero,80141d0 <___vfiprintf_internal_r+0x10c0>
 8013ab8:	d8802215 	stw	r2,136(sp)
 8013abc:	002b883a 	mov	r21,zero
 8013ac0:	9d04b03a 	or	r2,r19,r20
 8013ac4:	103f911e 	bne	r2,zero,801390c <__alt_data_end+0xfc01390c>
 8013ac8:	00800044 	movi	r2,1
 8013acc:	10803fcc 	andi	r2,r2,255
 8013ad0:	00c00044 	movi	r3,1
 8013ad4:	10c05f26 	beq	r2,r3,8013c54 <___vfiprintf_internal_r+0xb44>
 8013ad8:	00c00084 	movi	r3,2
 8013adc:	10ffe31e 	bne	r2,r3,8013a6c <__alt_data_end+0xfc013a6c>
 8013ae0:	0027883a 	mov	r19,zero
 8013ae4:	0029883a 	mov	r20,zero
 8013ae8:	00015106 	br	8014030 <___vfiprintf_internal_r+0xf20>
 8013aec:	9cc03fcc 	andi	r19,r19,255
 8013af0:	b811883a 	mov	r8,r23
 8013af4:	9802c01e 	bne	r19,zero,80145f8 <___vfiprintf_internal_r+0x14e8>
 8013af8:	014200b4 	movhi	r5,2050
 8013afc:	296b3004 	addi	r5,r5,-21312
 8013b00:	d9402615 	stw	r5,152(sp)
 8013b04:	8880080c 	andi	r2,r17,32
 8013b08:	103f541e 	bne	r2,zero,801385c <__alt_data_end+0xfc01385c>
 8013b0c:	8880040c 	andi	r2,r17,16
 8013b10:	1001f226 	beq	r2,zero,80142dc <___vfiprintf_internal_r+0x11cc>
 8013b14:	d9402217 	ldw	r5,136(sp)
 8013b18:	0029883a 	mov	r20,zero
 8013b1c:	2cc00017 	ldw	r19,0(r5)
 8013b20:	29400104 	addi	r5,r5,4
 8013b24:	d9402215 	stw	r5,136(sp)
 8013b28:	003f5106 	br	8013870 <__alt_data_end+0xfc013870>
 8013b2c:	d8c02217 	ldw	r3,136(sp)
 8013b30:	b811883a 	mov	r8,r23
 8013b34:	d8001d85 	stb	zero,118(sp)
 8013b38:	1dc00017 	ldw	r23,0(r3)
 8013b3c:	1f000104 	addi	fp,r3,4
 8013b40:	b8025926 	beq	r23,zero,80144a8 <___vfiprintf_internal_r+0x1398>
 8013b44:	80023316 	blt	r16,zero,8014414 <___vfiprintf_internal_r+0x1304>
 8013b48:	800d883a 	mov	r6,r16
 8013b4c:	000b883a 	mov	r5,zero
 8013b50:	b809883a 	mov	r4,r23
 8013b54:	da002a15 	stw	r8,168(sp)
 8013b58:	80112c40 	call	80112c4 <memchr>
 8013b5c:	da002a17 	ldw	r8,168(sp)
 8013b60:	10026826 	beq	r2,zero,8014504 <___vfiprintf_internal_r+0x13f4>
 8013b64:	15e9c83a 	sub	r20,r2,r23
 8013b68:	dd401d83 	ldbu	r21,118(sp)
 8013b6c:	df002215 	stw	fp,136(sp)
 8013b70:	0021883a 	mov	r16,zero
 8013b74:	003e6906 	br	801351c <__alt_data_end+0xfc01351c>
 8013b78:	9cc03fcc 	andi	r19,r19,255
 8013b7c:	b811883a 	mov	r8,r23
 8013b80:	983fc126 	beq	r19,zero,8013a88 <__alt_data_end+0xfc013a88>
 8013b84:	d8c02303 	ldbu	r3,140(sp)
 8013b88:	d8c01d85 	stb	r3,118(sp)
 8013b8c:	003fbe06 	br	8013a88 <__alt_data_end+0xfc013a88>
 8013b90:	d9002217 	ldw	r4,136(sp)
 8013b94:	d9402217 	ldw	r5,136(sp)
 8013b98:	21000017 	ldw	r4,0(r4)
 8013b9c:	28800104 	addi	r2,r5,4
 8013ba0:	d9002515 	stw	r4,148(sp)
 8013ba4:	203e3d16 	blt	r4,zero,801349c <__alt_data_end+0xfc01349c>
 8013ba8:	d8802215 	stw	r2,136(sp)
 8013bac:	b0c00007 	ldb	r3,0(r22)
 8013bb0:	003db406 	br	8013284 <__alt_data_end+0xfc013284>
 8013bb4:	00c00ac4 	movi	r3,43
 8013bb8:	d8c02305 	stb	r3,140(sp)
 8013bbc:	04c00044 	movi	r19,1
 8013bc0:	b0c00007 	ldb	r3,0(r22)
 8013bc4:	003daf06 	br	8013284 <__alt_data_end+0xfc013284>
 8013bc8:	b0c00007 	ldb	r3,0(r22)
 8013bcc:	01000a84 	movi	r4,42
 8013bd0:	b4000044 	addi	r16,r22,1
 8013bd4:	19025e26 	beq	r3,r4,8014550 <___vfiprintf_internal_r+0x1440>
 8013bd8:	1f3ff404 	addi	fp,r3,-48
 8013bdc:	0009883a 	mov	r4,zero
 8013be0:	af025236 	bltu	r21,fp,801452c <___vfiprintf_internal_r+0x141c>
 8013be4:	01400284 	movi	r5,10
 8013be8:	800832c0 	call	800832c <__mulsi3>
 8013bec:	80c00007 	ldb	r3,0(r16)
 8013bf0:	1709883a 	add	r4,r2,fp
 8013bf4:	85800044 	addi	r22,r16,1
 8013bf8:	1f3ff404 	addi	fp,r3,-48
 8013bfc:	b021883a 	mov	r16,r22
 8013c00:	af3ff82e 	bgeu	r21,fp,8013be4 <__alt_data_end+0xfc013be4>
 8013c04:	2021883a 	mov	r16,r4
 8013c08:	203d9f0e 	bge	r4,zero,8013288 <__alt_data_end+0xfc013288>
 8013c0c:	043fffc4 	movi	r16,-1
 8013c10:	003d9d06 	br	8013288 <__alt_data_end+0xfc013288>
 8013c14:	8c401014 	ori	r17,r17,64
 8013c18:	b0c00007 	ldb	r3,0(r22)
 8013c1c:	003d9906 	br	8013284 <__alt_data_end+0xfc013284>
 8013c20:	d9002217 	ldw	r4,136(sp)
 8013c24:	d8001d85 	stb	zero,118(sp)
 8013c28:	20c00204 	addi	r3,r4,8
 8013c2c:	24c00017 	ldw	r19,0(r4)
 8013c30:	25000117 	ldw	r20,4(r4)
 8013c34:	8001e716 	blt	r16,zero,80143d4 <___vfiprintf_internal_r+0x12c4>
 8013c38:	013fdfc4 	movi	r4,-129
 8013c3c:	9d04b03a 	or	r2,r19,r20
 8013c40:	d8c02215 	stw	r3,136(sp)
 8013c44:	8922703a 	and	r17,r17,r4
 8013c48:	002b883a 	mov	r21,zero
 8013c4c:	103f2f1e 	bne	r2,zero,801390c <__alt_data_end+0xfc01390c>
 8013c50:	803e2f26 	beq	r16,zero,8013510 <__alt_data_end+0xfc013510>
 8013c54:	0027883a 	mov	r19,zero
 8013c58:	9cc00c04 	addi	r19,r19,48
 8013c5c:	dcc019c5 	stb	r19,103(sp)
 8013c60:	dd002817 	ldw	r20,160(sp)
 8013c64:	ddc019c4 	addi	r23,sp,103
 8013c68:	003e2c06 	br	801351c <__alt_data_end+0xfc01351c>
 8013c6c:	9cc03fcc 	andi	r19,r19,255
 8013c70:	b811883a 	mov	r8,r23
 8013c74:	9802571e 	bne	r19,zero,80145d4 <___vfiprintf_internal_r+0x14c4>
 8013c78:	18005726 	beq	r3,zero,8013dd8 <___vfiprintf_internal_r+0xcc8>
 8013c7c:	04c00044 	movi	r19,1
 8013c80:	d8c01005 	stb	r3,64(sp)
 8013c84:	d8001d85 	stb	zero,118(sp)
 8013c88:	9829883a 	mov	r20,r19
 8013c8c:	ddc01004 	addi	r23,sp,64
 8013c90:	003f0a06 	br	80138bc <__alt_data_end+0xfc0138bc>
 8013c94:	d9402017 	ldw	r5,128(sp)
 8013c98:	d9002117 	ldw	r4,132(sp)
 8013c9c:	d9801a04 	addi	r6,sp,104
 8013ca0:	da802a15 	stw	r10,168(sp)
 8013ca4:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013ca8:	da802a17 	ldw	r10,168(sp)
 8013cac:	1000501e 	bne	r2,zero,8013df0 <___vfiprintf_internal_r+0xce0>
 8013cb0:	d9801b17 	ldw	r6,108(sp)
 8013cb4:	d8801c17 	ldw	r2,112(sp)
 8013cb8:	d811883a 	mov	r8,sp
 8013cbc:	31000044 	addi	r4,r6,1
 8013cc0:	003e3606 	br	801359c <__alt_data_end+0xfc01359c>
 8013cc4:	d9001b17 	ldw	r4,108(sp)
 8013cc8:	d8801c17 	ldw	r2,112(sp)
 8013ccc:	21400044 	addi	r5,r4,1
 8013cd0:	d9801d87 	ldb	r6,118(sp)
 8013cd4:	303e5226 	beq	r6,zero,8013620 <__alt_data_end+0xfc013620>
 8013cd8:	01800044 	movi	r6,1
 8013cdc:	d9001d84 	addi	r4,sp,118
 8013ce0:	1185883a 	add	r2,r2,r6
 8013ce4:	41000015 	stw	r4,0(r8)
 8013ce8:	41800115 	stw	r6,4(r8)
 8013cec:	d8801c15 	stw	r2,112(sp)
 8013cf0:	d9401b15 	stw	r5,108(sp)
 8013cf4:	010001c4 	movi	r4,7
 8013cf8:	2140b00e 	bge	r4,r5,8013fbc <___vfiprintf_internal_r+0xeac>
 8013cfc:	1000f61e 	bne	r2,zero,80140d8 <___vfiprintf_internal_r+0xfc8>
 8013d00:	3800b31e 	bne	r7,zero,8013fd0 <___vfiprintf_internal_r+0xec0>
 8013d04:	0009883a 	mov	r4,zero
 8013d08:	300b883a 	mov	r5,r6
 8013d0c:	d811883a 	mov	r8,sp
 8013d10:	01802004 	movi	r6,128
 8013d14:	19be5226 	beq	r3,r6,8013660 <__alt_data_end+0xfc013660>
 8013d18:	8521c83a 	sub	r16,r16,r20
 8013d1c:	043e790e 	bge	zero,r16,8013704 <__alt_data_end+0xfc013704>
 8013d20:	05400404 	movi	r21,16
 8013d24:	ac01b00e 	bge	r21,r16,80143e8 <___vfiprintf_internal_r+0x12d8>
 8013d28:	014200b4 	movhi	r5,2050
 8013d2c:	296b9504 	addi	r5,r5,-20908
 8013d30:	d9402315 	stw	r5,140(sp)
 8013d34:	070001c4 	movi	fp,7
 8013d38:	00000506 	br	8013d50 <___vfiprintf_internal_r+0xc40>
 8013d3c:	21400084 	addi	r5,r4,2
 8013d40:	42000204 	addi	r8,r8,8
 8013d44:	1809883a 	mov	r4,r3
 8013d48:	843ffc04 	addi	r16,r16,-16
 8013d4c:	ac000d0e 	bge	r21,r16,8013d84 <___vfiprintf_internal_r+0xc74>
 8013d50:	10800404 	addi	r2,r2,16
 8013d54:	20c00044 	addi	r3,r4,1
 8013d58:	44800015 	stw	r18,0(r8)
 8013d5c:	45400115 	stw	r21,4(r8)
 8013d60:	d8801c15 	stw	r2,112(sp)
 8013d64:	d8c01b15 	stw	r3,108(sp)
 8013d68:	e0fff40e 	bge	fp,r3,8013d3c <__alt_data_end+0xfc013d3c>
 8013d6c:	1000101e 	bne	r2,zero,8013db0 <___vfiprintf_internal_r+0xca0>
 8013d70:	843ffc04 	addi	r16,r16,-16
 8013d74:	01400044 	movi	r5,1
 8013d78:	0009883a 	mov	r4,zero
 8013d7c:	d811883a 	mov	r8,sp
 8013d80:	ac3ff316 	blt	r21,r16,8013d50 <__alt_data_end+0xfc013d50>
 8013d84:	d8c02317 	ldw	r3,140(sp)
 8013d88:	1405883a 	add	r2,r2,r16
 8013d8c:	44000115 	stw	r16,4(r8)
 8013d90:	40c00015 	stw	r3,0(r8)
 8013d94:	d8801c15 	stw	r2,112(sp)
 8013d98:	d9401b15 	stw	r5,108(sp)
 8013d9c:	00c001c4 	movi	r3,7
 8013da0:	19401916 	blt	r3,r5,8013e08 <___vfiprintf_internal_r+0xcf8>
 8013da4:	42000204 	addi	r8,r8,8
 8013da8:	29400044 	addi	r5,r5,1
 8013dac:	003e5506 	br	8013704 <__alt_data_end+0xfc013704>
 8013db0:	d9402017 	ldw	r5,128(sp)
 8013db4:	d9002117 	ldw	r4,132(sp)
 8013db8:	d9801a04 	addi	r6,sp,104
 8013dbc:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013dc0:	10000b1e 	bne	r2,zero,8013df0 <___vfiprintf_internal_r+0xce0>
 8013dc4:	d9001b17 	ldw	r4,108(sp)
 8013dc8:	d8801c17 	ldw	r2,112(sp)
 8013dcc:	d811883a 	mov	r8,sp
 8013dd0:	21400044 	addi	r5,r4,1
 8013dd4:	003fdc06 	br	8013d48 <__alt_data_end+0xfc013d48>
 8013dd8:	d8801c17 	ldw	r2,112(sp)
 8013ddc:	10000426 	beq	r2,zero,8013df0 <___vfiprintf_internal_r+0xce0>
 8013de0:	d9402017 	ldw	r5,128(sp)
 8013de4:	d9002117 	ldw	r4,132(sp)
 8013de8:	d9801a04 	addi	r6,sp,104
 8013dec:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013df0:	d9402017 	ldw	r5,128(sp)
 8013df4:	2880030b 	ldhu	r2,12(r5)
 8013df8:	1080100c 	andi	r2,r2,64
 8013dfc:	10014d1e 	bne	r2,zero,8014334 <___vfiprintf_internal_r+0x1224>
 8013e00:	d8802417 	ldw	r2,144(sp)
 8013e04:	003d9706 	br	8013464 <__alt_data_end+0xfc013464>
 8013e08:	1000d21e 	bne	r2,zero,8014154 <___vfiprintf_internal_r+0x1044>
 8013e0c:	00c00044 	movi	r3,1
 8013e10:	a005883a 	mov	r2,r20
 8013e14:	ddc00015 	stw	r23,0(sp)
 8013e18:	dd000115 	stw	r20,4(sp)
 8013e1c:	dd001c15 	stw	r20,112(sp)
 8013e20:	d8c01b15 	stw	r3,108(sp)
 8013e24:	d811883a 	mov	r8,sp
 8013e28:	42000204 	addi	r8,r8,8
 8013e2c:	8c40010c 	andi	r17,r17,4
 8013e30:	88004026 	beq	r17,zero,8013f34 <___vfiprintf_internal_r+0xe24>
 8013e34:	d9002517 	ldw	r4,148(sp)
 8013e38:	24e3c83a 	sub	r17,r4,r19
 8013e3c:	04403d0e 	bge	zero,r17,8013f34 <___vfiprintf_internal_r+0xe24>
 8013e40:	04000404 	movi	r16,16
 8013e44:	8441a90e 	bge	r16,r17,80144ec <___vfiprintf_internal_r+0x13dc>
 8013e48:	00c200b4 	movhi	r3,2050
 8013e4c:	18eb9904 	addi	r3,r3,-20892
 8013e50:	d9001b17 	ldw	r4,108(sp)
 8013e54:	d8c02315 	stw	r3,140(sp)
 8013e58:	050001c4 	movi	r20,7
 8013e5c:	dd402117 	ldw	r21,132(sp)
 8013e60:	ddc02017 	ldw	r23,128(sp)
 8013e64:	00000506 	br	8013e7c <___vfiprintf_internal_r+0xd6c>
 8013e68:	21400084 	addi	r5,r4,2
 8013e6c:	42000204 	addi	r8,r8,8
 8013e70:	1809883a 	mov	r4,r3
 8013e74:	8c7ffc04 	addi	r17,r17,-16
 8013e78:	84400f0e 	bge	r16,r17,8013eb8 <___vfiprintf_internal_r+0xda8>
 8013e7c:	014200b4 	movhi	r5,2050
 8013e80:	10800404 	addi	r2,r2,16
 8013e84:	20c00044 	addi	r3,r4,1
 8013e88:	296b9904 	addi	r5,r5,-20892
 8013e8c:	41400015 	stw	r5,0(r8)
 8013e90:	44000115 	stw	r16,4(r8)
 8013e94:	d8801c15 	stw	r2,112(sp)
 8013e98:	d8c01b15 	stw	r3,108(sp)
 8013e9c:	a0fff20e 	bge	r20,r3,8013e68 <__alt_data_end+0xfc013e68>
 8013ea0:	1000141e 	bne	r2,zero,8013ef4 <___vfiprintf_internal_r+0xde4>
 8013ea4:	8c7ffc04 	addi	r17,r17,-16
 8013ea8:	01400044 	movi	r5,1
 8013eac:	0009883a 	mov	r4,zero
 8013eb0:	d811883a 	mov	r8,sp
 8013eb4:	847ff116 	blt	r16,r17,8013e7c <__alt_data_end+0xfc013e7c>
 8013eb8:	d8c02317 	ldw	r3,140(sp)
 8013ebc:	1445883a 	add	r2,r2,r17
 8013ec0:	44400115 	stw	r17,4(r8)
 8013ec4:	40c00015 	stw	r3,0(r8)
 8013ec8:	d8801c15 	stw	r2,112(sp)
 8013ecc:	d9401b15 	stw	r5,108(sp)
 8013ed0:	00c001c4 	movi	r3,7
 8013ed4:	1940170e 	bge	r3,r5,8013f34 <___vfiprintf_internal_r+0xe24>
 8013ed8:	1000101e 	bne	r2,zero,8013f1c <___vfiprintf_internal_r+0xe0c>
 8013edc:	d8802517 	ldw	r2,148(sp)
 8013ee0:	14c11616 	blt	r2,r19,801433c <___vfiprintf_internal_r+0x122c>
 8013ee4:	d9002417 	ldw	r4,144(sp)
 8013ee8:	2089883a 	add	r4,r4,r2
 8013eec:	d9002415 	stw	r4,144(sp)
 8013ef0:	003e1806 	br	8013754 <__alt_data_end+0xfc013754>
 8013ef4:	d9801a04 	addi	r6,sp,104
 8013ef8:	b80b883a 	mov	r5,r23
 8013efc:	a809883a 	mov	r4,r21
 8013f00:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013f04:	103fba1e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8013f08:	d9001b17 	ldw	r4,108(sp)
 8013f0c:	d8801c17 	ldw	r2,112(sp)
 8013f10:	d811883a 	mov	r8,sp
 8013f14:	21400044 	addi	r5,r4,1
 8013f18:	003fd606 	br	8013e74 <__alt_data_end+0xfc013e74>
 8013f1c:	d9402017 	ldw	r5,128(sp)
 8013f20:	d9002117 	ldw	r4,132(sp)
 8013f24:	d9801a04 	addi	r6,sp,104
 8013f28:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013f2c:	103fb01e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8013f30:	d8801c17 	ldw	r2,112(sp)
 8013f34:	d8c02517 	ldw	r3,148(sp)
 8013f38:	1cc0010e 	bge	r3,r19,8013f40 <___vfiprintf_internal_r+0xe30>
 8013f3c:	9807883a 	mov	r3,r19
 8013f40:	d9002417 	ldw	r4,144(sp)
 8013f44:	20c9883a 	add	r4,r4,r3
 8013f48:	d9002415 	stw	r4,144(sp)
 8013f4c:	103e0126 	beq	r2,zero,8013754 <__alt_data_end+0xfc013754>
 8013f50:	d9402017 	ldw	r5,128(sp)
 8013f54:	d9002117 	ldw	r4,132(sp)
 8013f58:	d9801a04 	addi	r6,sp,104
 8013f5c:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013f60:	103dfc26 	beq	r2,zero,8013754 <__alt_data_end+0xfc013754>
 8013f64:	003fa206 	br	8013df0 <__alt_data_end+0xfc013df0>
 8013f68:	d9402017 	ldw	r5,128(sp)
 8013f6c:	d9002117 	ldw	r4,132(sp)
 8013f70:	d9801a04 	addi	r6,sp,104
 8013f74:	d9c02b15 	stw	r7,172(sp)
 8013f78:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8013f7c:	d9c02b17 	ldw	r7,172(sp)
 8013f80:	103f9b1e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8013f84:	d9001b17 	ldw	r4,108(sp)
 8013f88:	d8801c17 	ldw	r2,112(sp)
 8013f8c:	d811883a 	mov	r8,sp
 8013f90:	21800044 	addi	r6,r4,1
 8013f94:	003dbf06 	br	8013694 <__alt_data_end+0xfc013694>
 8013f98:	1000d81e 	bne	r2,zero,80142fc <___vfiprintf_internal_r+0x11ec>
 8013f9c:	d9001d87 	ldb	r4,118(sp)
 8013fa0:	20000a26 	beq	r4,zero,8013fcc <___vfiprintf_internal_r+0xebc>
 8013fa4:	00800044 	movi	r2,1
 8013fa8:	d9001d84 	addi	r4,sp,118
 8013fac:	100b883a 	mov	r5,r2
 8013fb0:	d9000015 	stw	r4,0(sp)
 8013fb4:	d8800115 	stw	r2,4(sp)
 8013fb8:	d811883a 	mov	r8,sp
 8013fbc:	2809883a 	mov	r4,r5
 8013fc0:	42000204 	addi	r8,r8,8
 8013fc4:	29400044 	addi	r5,r5,1
 8013fc8:	003d9506 	br	8013620 <__alt_data_end+0xfc013620>
 8013fcc:	3800fd26 	beq	r7,zero,80143c4 <___vfiprintf_internal_r+0x12b4>
 8013fd0:	00800084 	movi	r2,2
 8013fd4:	d9001d04 	addi	r4,sp,116
 8013fd8:	d9000015 	stw	r4,0(sp)
 8013fdc:	d8800115 	stw	r2,4(sp)
 8013fe0:	01400044 	movi	r5,1
 8013fe4:	d811883a 	mov	r8,sp
 8013fe8:	2809883a 	mov	r4,r5
 8013fec:	42000204 	addi	r8,r8,8
 8013ff0:	29400044 	addi	r5,r5,1
 8013ff4:	003f4606 	br	8013d10 <__alt_data_end+0xfc013d10>
 8013ff8:	d8802517 	ldw	r2,148(sp)
 8013ffc:	14c0010e 	bge	r2,r19,8014004 <___vfiprintf_internal_r+0xef4>
 8014000:	9805883a 	mov	r2,r19
 8014004:	d9402417 	ldw	r5,144(sp)
 8014008:	288b883a 	add	r5,r5,r2
 801400c:	d9402415 	stw	r5,144(sp)
 8014010:	003dd006 	br	8013754 <__alt_data_end+0xfc013754>
 8014014:	d8001d85 	stb	zero,118(sp)
 8014018:	80005d16 	blt	r16,zero,8014190 <___vfiprintf_internal_r+0x1080>
 801401c:	00ffdfc4 	movi	r3,-129
 8014020:	9d04b03a 	or	r2,r19,r20
 8014024:	88e2703a 	and	r17,r17,r3
 8014028:	103d3726 	beq	r2,zero,8013508 <__alt_data_end+0xfc013508>
 801402c:	002b883a 	mov	r21,zero
 8014030:	d9002617 	ldw	r4,152(sp)
 8014034:	ddc01a04 	addi	r23,sp,104
 8014038:	988003cc 	andi	r2,r19,15
 801403c:	a006973a 	slli	r3,r20,28
 8014040:	2085883a 	add	r2,r4,r2
 8014044:	9826d13a 	srli	r19,r19,4
 8014048:	10800003 	ldbu	r2,0(r2)
 801404c:	a028d13a 	srli	r20,r20,4
 8014050:	bdffffc4 	addi	r23,r23,-1
 8014054:	1ce6b03a 	or	r19,r3,r19
 8014058:	b8800005 	stb	r2,0(r23)
 801405c:	9d04b03a 	or	r2,r19,r20
 8014060:	103ff51e 	bne	r2,zero,8014038 <__alt_data_end+0xfc014038>
 8014064:	d8801e17 	ldw	r2,120(sp)
 8014068:	15e9c83a 	sub	r20,r2,r23
 801406c:	003d2b06 	br	801351c <__alt_data_end+0xfc01351c>
 8014070:	d9402017 	ldw	r5,128(sp)
 8014074:	d9002117 	ldw	r4,132(sp)
 8014078:	d9801a04 	addi	r6,sp,104
 801407c:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8014080:	103f5b1e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8014084:	d8801c17 	ldw	r2,112(sp)
 8014088:	d811883a 	mov	r8,sp
 801408c:	003f6706 	br	8013e2c <__alt_data_end+0xfc013e2c>
 8014090:	d9402017 	ldw	r5,128(sp)
 8014094:	d9002117 	ldw	r4,132(sp)
 8014098:	d9801a04 	addi	r6,sp,104
 801409c:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 80140a0:	103f531e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 80140a4:	d811883a 	mov	r8,sp
 80140a8:	003cd906 	br	8013410 <__alt_data_end+0xfc013410>
 80140ac:	10803fcc 	andi	r2,r2,255
 80140b0:	1080201c 	xori	r2,r2,128
 80140b4:	10bfe004 	addi	r2,r2,-128
 80140b8:	00c00c04 	movi	r3,48
 80140bc:	10ffe926 	beq	r2,r3,8014064 <__alt_data_end+0xfc014064>
 80140c0:	b8ffffc5 	stb	r3,-1(r23)
 80140c4:	d8c01e17 	ldw	r3,120(sp)
 80140c8:	b8bfffc4 	addi	r2,r23,-1
 80140cc:	102f883a 	mov	r23,r2
 80140d0:	18a9c83a 	sub	r20,r3,r2
 80140d4:	003d1106 	br	801351c <__alt_data_end+0xfc01351c>
 80140d8:	d9402017 	ldw	r5,128(sp)
 80140dc:	d9002117 	ldw	r4,132(sp)
 80140e0:	d9801a04 	addi	r6,sp,104
 80140e4:	d8c02a15 	stw	r3,168(sp)
 80140e8:	d9c02b15 	stw	r7,172(sp)
 80140ec:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 80140f0:	d8c02a17 	ldw	r3,168(sp)
 80140f4:	d9c02b17 	ldw	r7,172(sp)
 80140f8:	103f3d1e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 80140fc:	d9001b17 	ldw	r4,108(sp)
 8014100:	d8801c17 	ldw	r2,112(sp)
 8014104:	d811883a 	mov	r8,sp
 8014108:	21400044 	addi	r5,r4,1
 801410c:	003d4406 	br	8013620 <__alt_data_end+0xfc013620>
 8014110:	d9402017 	ldw	r5,128(sp)
 8014114:	d9002117 	ldw	r4,132(sp)
 8014118:	d9801a04 	addi	r6,sp,104
 801411c:	d8c02a15 	stw	r3,168(sp)
 8014120:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8014124:	d8c02a17 	ldw	r3,168(sp)
 8014128:	103f311e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 801412c:	d9001b17 	ldw	r4,108(sp)
 8014130:	d8801c17 	ldw	r2,112(sp)
 8014134:	d811883a 	mov	r8,sp
 8014138:	21400044 	addi	r5,r4,1
 801413c:	003ef406 	br	8013d10 <__alt_data_end+0xfc013d10>
 8014140:	1000bd1e 	bne	r2,zero,8014438 <___vfiprintf_internal_r+0x1328>
 8014144:	01400044 	movi	r5,1
 8014148:	0009883a 	mov	r4,zero
 801414c:	d811883a 	mov	r8,sp
 8014150:	003ef106 	br	8013d18 <__alt_data_end+0xfc013d18>
 8014154:	d9402017 	ldw	r5,128(sp)
 8014158:	d9002117 	ldw	r4,132(sp)
 801415c:	d9801a04 	addi	r6,sp,104
 8014160:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8014164:	103f221e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8014168:	d9401b17 	ldw	r5,108(sp)
 801416c:	d8801c17 	ldw	r2,112(sp)
 8014170:	d811883a 	mov	r8,sp
 8014174:	29400044 	addi	r5,r5,1
 8014178:	003d6206 	br	8013704 <__alt_data_end+0xfc013704>
 801417c:	014200b4 	movhi	r5,2050
 8014180:	296b3504 	addi	r5,r5,-21292
 8014184:	d9402615 	stw	r5,152(sp)
 8014188:	d8c02215 	stw	r3,136(sp)
 801418c:	1023883a 	mov	r17,r2
 8014190:	9d04b03a 	or	r2,r19,r20
 8014194:	103fa51e 	bne	r2,zero,801402c <__alt_data_end+0xfc01402c>
 8014198:	002b883a 	mov	r21,zero
 801419c:	00800084 	movi	r2,2
 80141a0:	003e4a06 	br	8013acc <__alt_data_end+0xfc013acc>
 80141a4:	014200b4 	movhi	r5,2050
 80141a8:	296b3504 	addi	r5,r5,-21292
 80141ac:	002b883a 	mov	r21,zero
 80141b0:	d9402615 	stw	r5,152(sp)
 80141b4:	003f9e06 	br	8014030 <__alt_data_end+0xfc014030>
 80141b8:	d9402217 	ldw	r5,136(sp)
 80141bc:	d8001d85 	stb	zero,118(sp)
 80141c0:	0029883a 	mov	r20,zero
 80141c4:	28800104 	addi	r2,r5,4
 80141c8:	2cc00017 	ldw	r19,0(r5)
 80141cc:	803e3a16 	blt	r16,zero,8013ab8 <__alt_data_end+0xfc013ab8>
 80141d0:	00ffdfc4 	movi	r3,-129
 80141d4:	d8802215 	stw	r2,136(sp)
 80141d8:	88e2703a 	and	r17,r17,r3
 80141dc:	002b883a 	mov	r21,zero
 80141e0:	983e9b26 	beq	r19,zero,8013c50 <__alt_data_end+0xfc013c50>
 80141e4:	00800244 	movi	r2,9
 80141e8:	14fdc936 	bltu	r2,r19,8013910 <__alt_data_end+0xfc013910>
 80141ec:	003e9a06 	br	8013c58 <__alt_data_end+0xfc013c58>
 80141f0:	00800c04 	movi	r2,48
 80141f4:	d8c01d45 	stb	r3,117(sp)
 80141f8:	d8801d05 	stb	r2,116(sp)
 80141fc:	d8001d85 	stb	zero,118(sp)
 8014200:	88c00094 	ori	r3,r17,2
 8014204:	80009c16 	blt	r16,zero,8014478 <___vfiprintf_internal_r+0x1368>
 8014208:	00bfdfc4 	movi	r2,-129
 801420c:	88a2703a 	and	r17,r17,r2
 8014210:	8c400094 	ori	r17,r17,2
 8014214:	002b883a 	mov	r21,zero
 8014218:	003f8506 	br	8014030 <__alt_data_end+0xfc014030>
 801421c:	b029883a 	mov	r20,r22
 8014220:	003c0b06 	br	8013250 <__alt_data_end+0xfc013250>
 8014224:	04e7c83a 	sub	r19,zero,r19
 8014228:	05400b44 	movi	r21,45
 801422c:	9804c03a 	cmpne	r2,r19,zero
 8014230:	0529c83a 	sub	r20,zero,r20
 8014234:	dd401d85 	stb	r21,118(sp)
 8014238:	a0a9c83a 	sub	r20,r20,r2
 801423c:	80009716 	blt	r16,zero,801449c <___vfiprintf_internal_r+0x138c>
 8014240:	00bfdfc4 	movi	r2,-129
 8014244:	88a2703a 	and	r17,r17,r2
 8014248:	003db006 	br	801390c <__alt_data_end+0xfc01390c>
 801424c:	b0c00007 	ldb	r3,0(r22)
 8014250:	003c0c06 	br	8013284 <__alt_data_end+0xfc013284>
 8014254:	8880100c 	andi	r2,r17,64
 8014258:	d8001d85 	stb	zero,118(sp)
 801425c:	1000461e 	bne	r2,zero,8014378 <___vfiprintf_internal_r+0x1268>
 8014260:	d9002217 	ldw	r4,136(sp)
 8014264:	0029883a 	mov	r20,zero
 8014268:	20800104 	addi	r2,r4,4
 801426c:	24c00017 	ldw	r19,0(r4)
 8014270:	803df80e 	bge	r16,zero,8013a54 <__alt_data_end+0xfc013a54>
 8014274:	9d06b03a 	or	r3,r19,r20
 8014278:	d8802215 	stw	r2,136(sp)
 801427c:	183d5e1e 	bne	r3,zero,80137f8 <__alt_data_end+0xfc0137f8>
 8014280:	002b883a 	mov	r21,zero
 8014284:	0005883a 	mov	r2,zero
 8014288:	003e1006 	br	8013acc <__alt_data_end+0xfc013acc>
 801428c:	8880040c 	andi	r2,r17,16
 8014290:	1000321e 	bne	r2,zero,801435c <___vfiprintf_internal_r+0x124c>
 8014294:	8c40100c 	andi	r17,r17,64
 8014298:	88008d26 	beq	r17,zero,80144d0 <___vfiprintf_internal_r+0x13c0>
 801429c:	d9402217 	ldw	r5,136(sp)
 80142a0:	d8c02417 	ldw	r3,144(sp)
 80142a4:	28800017 	ldw	r2,0(r5)
 80142a8:	29400104 	addi	r5,r5,4
 80142ac:	d9402215 	stw	r5,136(sp)
 80142b0:	10c0000d 	sth	r3,0(r2)
 80142b4:	003bca06 	br	80131e0 <__alt_data_end+0xfc0131e0>
 80142b8:	8880100c 	andi	r2,r17,64
 80142bc:	10003a26 	beq	r2,zero,80143a8 <___vfiprintf_internal_r+0x1298>
 80142c0:	d8802217 	ldw	r2,136(sp)
 80142c4:	14c0000f 	ldh	r19,0(r2)
 80142c8:	10800104 	addi	r2,r2,4
 80142cc:	d8802215 	stw	r2,136(sp)
 80142d0:	9829d7fa 	srai	r20,r19,31
 80142d4:	a005883a 	mov	r2,r20
 80142d8:	003d8506 	br	80138f0 <__alt_data_end+0xfc0138f0>
 80142dc:	8880100c 	andi	r2,r17,64
 80142e0:	10002b26 	beq	r2,zero,8014390 <___vfiprintf_internal_r+0x1280>
 80142e4:	d8802217 	ldw	r2,136(sp)
 80142e8:	0029883a 	mov	r20,zero
 80142ec:	14c0000b 	ldhu	r19,0(r2)
 80142f0:	10800104 	addi	r2,r2,4
 80142f4:	d8802215 	stw	r2,136(sp)
 80142f8:	003d5d06 	br	8013870 <__alt_data_end+0xfc013870>
 80142fc:	d9402017 	ldw	r5,128(sp)
 8014300:	d9002117 	ldw	r4,132(sp)
 8014304:	d9801a04 	addi	r6,sp,104
 8014308:	d8c02a15 	stw	r3,168(sp)
 801430c:	d9c02b15 	stw	r7,172(sp)
 8014310:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8014314:	d8c02a17 	ldw	r3,168(sp)
 8014318:	d9c02b17 	ldw	r7,172(sp)
 801431c:	103eb41e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 8014320:	d9001b17 	ldw	r4,108(sp)
 8014324:	d8801c17 	ldw	r2,112(sp)
 8014328:	d811883a 	mov	r8,sp
 801432c:	21400044 	addi	r5,r4,1
 8014330:	003e6706 	br	8013cd0 <__alt_data_end+0xfc013cd0>
 8014334:	00bfffc4 	movi	r2,-1
 8014338:	003c4a06 	br	8013464 <__alt_data_end+0xfc013464>
 801433c:	9805883a 	mov	r2,r19
 8014340:	003ee806 	br	8013ee4 <__alt_data_end+0xfc013ee4>
 8014344:	d8c02217 	ldw	r3,136(sp)
 8014348:	0029883a 	mov	r20,zero
 801434c:	18800104 	addi	r2,r3,4
 8014350:	1cc0000b 	ldhu	r19,0(r3)
 8014354:	803f9e0e 	bge	r16,zero,80141d0 <__alt_data_end+0xfc0141d0>
 8014358:	003dd706 	br	8013ab8 <__alt_data_end+0xfc013ab8>
 801435c:	d8c02217 	ldw	r3,136(sp)
 8014360:	d9002417 	ldw	r4,144(sp)
 8014364:	18800017 	ldw	r2,0(r3)
 8014368:	18c00104 	addi	r3,r3,4
 801436c:	d8c02215 	stw	r3,136(sp)
 8014370:	11000015 	stw	r4,0(r2)
 8014374:	003b9a06 	br	80131e0 <__alt_data_end+0xfc0131e0>
 8014378:	d8c02217 	ldw	r3,136(sp)
 801437c:	0029883a 	mov	r20,zero
 8014380:	18800104 	addi	r2,r3,4
 8014384:	1cc0000b 	ldhu	r19,0(r3)
 8014388:	803db20e 	bge	r16,zero,8013a54 <__alt_data_end+0xfc013a54>
 801438c:	003fb906 	br	8014274 <__alt_data_end+0xfc014274>
 8014390:	d9002217 	ldw	r4,136(sp)
 8014394:	0029883a 	mov	r20,zero
 8014398:	24c00017 	ldw	r19,0(r4)
 801439c:	21000104 	addi	r4,r4,4
 80143a0:	d9002215 	stw	r4,136(sp)
 80143a4:	003d3206 	br	8013870 <__alt_data_end+0xfc013870>
 80143a8:	d8c02217 	ldw	r3,136(sp)
 80143ac:	1cc00017 	ldw	r19,0(r3)
 80143b0:	18c00104 	addi	r3,r3,4
 80143b4:	d8c02215 	stw	r3,136(sp)
 80143b8:	9829d7fa 	srai	r20,r19,31
 80143bc:	a005883a 	mov	r2,r20
 80143c0:	003d4b06 	br	80138f0 <__alt_data_end+0xfc0138f0>
 80143c4:	0009883a 	mov	r4,zero
 80143c8:	01400044 	movi	r5,1
 80143cc:	d811883a 	mov	r8,sp
 80143d0:	003e4f06 	br	8013d10 <__alt_data_end+0xfc013d10>
 80143d4:	d8c02215 	stw	r3,136(sp)
 80143d8:	002b883a 	mov	r21,zero
 80143dc:	003db806 	br	8013ac0 <__alt_data_end+0xfc013ac0>
 80143e0:	d811883a 	mov	r8,sp
 80143e4:	003e9606 	br	8013e40 <__alt_data_end+0xfc013e40>
 80143e8:	010200b4 	movhi	r4,2050
 80143ec:	212b9504 	addi	r4,r4,-20908
 80143f0:	d9002315 	stw	r4,140(sp)
 80143f4:	003e6306 	br	8013d84 <__alt_data_end+0xfc013d84>
 80143f8:	b0c00043 	ldbu	r3,1(r22)
 80143fc:	8c400814 	ori	r17,r17,32
 8014400:	b5800044 	addi	r22,r22,1
 8014404:	18c03fcc 	andi	r3,r3,255
 8014408:	18c0201c 	xori	r3,r3,128
 801440c:	18ffe004 	addi	r3,r3,-128
 8014410:	003b9c06 	br	8013284 <__alt_data_end+0xfc013284>
 8014414:	b809883a 	mov	r4,r23
 8014418:	da002a15 	stw	r8,168(sp)
 801441c:	800b8f40 	call	800b8f4 <strlen>
 8014420:	1029883a 	mov	r20,r2
 8014424:	dd401d83 	ldbu	r21,118(sp)
 8014428:	df002215 	stw	fp,136(sp)
 801442c:	0021883a 	mov	r16,zero
 8014430:	da002a17 	ldw	r8,168(sp)
 8014434:	003c3906 	br	801351c <__alt_data_end+0xfc01351c>
 8014438:	d9402017 	ldw	r5,128(sp)
 801443c:	d9002117 	ldw	r4,132(sp)
 8014440:	d9801a04 	addi	r6,sp,104
 8014444:	8012ffc0 	call	8012ffc <__sprint_r.part.0>
 8014448:	103e691e 	bne	r2,zero,8013df0 <__alt_data_end+0xfc013df0>
 801444c:	d9001b17 	ldw	r4,108(sp)
 8014450:	d8801c17 	ldw	r2,112(sp)
 8014454:	d811883a 	mov	r8,sp
 8014458:	21400044 	addi	r5,r4,1
 801445c:	003e2e06 	br	8013d18 <__alt_data_end+0xfc013d18>
 8014460:	010200b4 	movhi	r4,2050
 8014464:	212b9904 	addi	r4,r4,-20892
 8014468:	d9002315 	stw	r4,140(sp)
 801446c:	d9001b17 	ldw	r4,108(sp)
 8014470:	21000044 	addi	r4,r4,1
 8014474:	003c5e06 	br	80135f0 <__alt_data_end+0xfc0135f0>
 8014478:	002b883a 	mov	r21,zero
 801447c:	00800084 	movi	r2,2
 8014480:	10803fcc 	andi	r2,r2,255
 8014484:	01000044 	movi	r4,1
 8014488:	11002b26 	beq	r2,r4,8014538 <___vfiprintf_internal_r+0x1428>
 801448c:	01000084 	movi	r4,2
 8014490:	11002b1e 	bne	r2,r4,8014540 <___vfiprintf_internal_r+0x1430>
 8014494:	1823883a 	mov	r17,r3
 8014498:	003ee506 	br	8014030 <__alt_data_end+0xfc014030>
 801449c:	8807883a 	mov	r3,r17
 80144a0:	00800044 	movi	r2,1
 80144a4:	003ff606 	br	8014480 <__alt_data_end+0xfc014480>
 80144a8:	00800184 	movi	r2,6
 80144ac:	1400012e 	bgeu	r2,r16,80144b4 <___vfiprintf_internal_r+0x13a4>
 80144b0:	1021883a 	mov	r16,r2
 80144b4:	8029883a 	mov	r20,r16
 80144b8:	8027883a 	mov	r19,r16
 80144bc:	80002216 	blt	r16,zero,8014548 <___vfiprintf_internal_r+0x1438>
 80144c0:	05c200b4 	movhi	r23,2050
 80144c4:	df002215 	stw	fp,136(sp)
 80144c8:	bdeb3a04 	addi	r23,r23,-21272
 80144cc:	003cfb06 	br	80138bc <__alt_data_end+0xfc0138bc>
 80144d0:	d9002217 	ldw	r4,136(sp)
 80144d4:	d9402417 	ldw	r5,144(sp)
 80144d8:	20800017 	ldw	r2,0(r4)
 80144dc:	21000104 	addi	r4,r4,4
 80144e0:	d9002215 	stw	r4,136(sp)
 80144e4:	11400015 	stw	r5,0(r2)
 80144e8:	003b3d06 	br	80131e0 <__alt_data_end+0xfc0131e0>
 80144ec:	014200b4 	movhi	r5,2050
 80144f0:	296b9904 	addi	r5,r5,-20892
 80144f4:	d9402315 	stw	r5,140(sp)
 80144f8:	d9401b17 	ldw	r5,108(sp)
 80144fc:	29400044 	addi	r5,r5,1
 8014500:	003e6d06 	br	8013eb8 <__alt_data_end+0xfc013eb8>
 8014504:	8029883a 	mov	r20,r16
 8014508:	dd401d83 	ldbu	r21,118(sp)
 801450c:	df002215 	stw	fp,136(sp)
 8014510:	0021883a 	mov	r16,zero
 8014514:	003c0106 	br	801351c <__alt_data_end+0xfc01351c>
 8014518:	00c200b4 	movhi	r3,2050
 801451c:	18eb9504 	addi	r3,r3,-20908
 8014520:	d8c02315 	stw	r3,140(sp)
 8014524:	280d883a 	mov	r6,r5
 8014528:	003c6906 	br	80136d0 <__alt_data_end+0xfc0136d0>
 801452c:	802d883a 	mov	r22,r16
 8014530:	0021883a 	mov	r16,zero
 8014534:	003b5406 	br	8013288 <__alt_data_end+0xfc013288>
 8014538:	1823883a 	mov	r17,r3
 801453c:	003cf306 	br	801390c <__alt_data_end+0xfc01390c>
 8014540:	1823883a 	mov	r17,r3
 8014544:	003cad06 	br	80137fc <__alt_data_end+0xfc0137fc>
 8014548:	0027883a 	mov	r19,zero
 801454c:	003fdc06 	br	80144c0 <__alt_data_end+0xfc0144c0>
 8014550:	d9402217 	ldw	r5,136(sp)
 8014554:	8005883a 	mov	r2,r16
 8014558:	b0c00043 	ldbu	r3,1(r22)
 801455c:	2c000017 	ldw	r16,0(r5)
 8014560:	29000104 	addi	r4,r5,4
 8014564:	d9002215 	stw	r4,136(sp)
 8014568:	102d883a 	mov	r22,r2
 801456c:	803fa50e 	bge	r16,zero,8014404 <__alt_data_end+0xfc014404>
 8014570:	18c03fcc 	andi	r3,r3,255
 8014574:	18c0201c 	xori	r3,r3,128
 8014578:	043fffc4 	movi	r16,-1
 801457c:	18ffe004 	addi	r3,r3,-128
 8014580:	003b4006 	br	8013284 <__alt_data_end+0xfc013284>
 8014584:	d9402303 	ldbu	r5,140(sp)
 8014588:	d9401d85 	stb	r5,118(sp)
 801458c:	003cae06 	br	8013848 <__alt_data_end+0xfc013848>
 8014590:	d8c02303 	ldbu	r3,140(sp)
 8014594:	d8c01d85 	stb	r3,118(sp)
 8014598:	003d1406 	br	80139ec <__alt_data_end+0xfc0139ec>
 801459c:	d8c02303 	ldbu	r3,140(sp)
 80145a0:	d8c01d85 	stb	r3,118(sp)
 80145a4:	003cca06 	br	80138d0 <__alt_data_end+0xfc0138d0>
 80145a8:	8880004c 	andi	r2,r17,1
 80145ac:	002b883a 	mov	r21,zero
 80145b0:	10000526 	beq	r2,zero,80145c8 <___vfiprintf_internal_r+0x14b8>
 80145b4:	00800c04 	movi	r2,48
 80145b8:	d88019c5 	stb	r2,103(sp)
 80145bc:	dd002817 	ldw	r20,160(sp)
 80145c0:	ddc019c4 	addi	r23,sp,103
 80145c4:	003bd506 	br	801351c <__alt_data_end+0xfc01351c>
 80145c8:	0029883a 	mov	r20,zero
 80145cc:	ddc01a04 	addi	r23,sp,104
 80145d0:	003bd206 	br	801351c <__alt_data_end+0xfc01351c>
 80145d4:	d9002303 	ldbu	r4,140(sp)
 80145d8:	d9001d85 	stb	r4,118(sp)
 80145dc:	003da606 	br	8013c78 <__alt_data_end+0xfc013c78>
 80145e0:	d8c02303 	ldbu	r3,140(sp)
 80145e4:	d8c01d85 	stb	r3,118(sp)
 80145e8:	003c7606 	br	80137c4 <__alt_data_end+0xfc0137c4>
 80145ec:	d8c02303 	ldbu	r3,140(sp)
 80145f0:	d8c01d85 	stb	r3,118(sp)
 80145f4:	003c6506 	br	801378c <__alt_data_end+0xfc01378c>
 80145f8:	d9002303 	ldbu	r4,140(sp)
 80145fc:	d9001d85 	stb	r4,118(sp)
 8014600:	003d3d06 	br	8013af8 <__alt_data_end+0xfc013af8>
 8014604:	d8c02303 	ldbu	r3,140(sp)
 8014608:	d8c01d85 	stb	r3,118(sp)
 801460c:	003d1d06 	br	8013a84 <__alt_data_end+0xfc013a84>
 8014610:	d8c02303 	ldbu	r3,140(sp)
 8014614:	d8c01d85 	stb	r3,118(sp)
 8014618:	003d0306 	br	8013a28 <__alt_data_end+0xfc013a28>

0801461c <__vfiprintf_internal>:
 801461c:	008200b4 	movhi	r2,2050
 8014620:	10b2dd04 	addi	r2,r2,-13452
 8014624:	300f883a 	mov	r7,r6
 8014628:	280d883a 	mov	r6,r5
 801462c:	200b883a 	mov	r5,r4
 8014630:	11000017 	ldw	r4,0(r2)
 8014634:	80131101 	jmpi	8013110 <___vfiprintf_internal_r>

08014638 <__sbprintf>:
 8014638:	2880030b 	ldhu	r2,12(r5)
 801463c:	2ac01917 	ldw	r11,100(r5)
 8014640:	2a80038b 	ldhu	r10,14(r5)
 8014644:	2a400717 	ldw	r9,28(r5)
 8014648:	2a000917 	ldw	r8,36(r5)
 801464c:	defee204 	addi	sp,sp,-1144
 8014650:	00c10004 	movi	r3,1024
 8014654:	dc011a15 	stw	r16,1128(sp)
 8014658:	10bfff4c 	andi	r2,r2,65533
 801465c:	2821883a 	mov	r16,r5
 8014660:	d8cb883a 	add	r5,sp,r3
 8014664:	dc811c15 	stw	r18,1136(sp)
 8014668:	dc411b15 	stw	r17,1132(sp)
 801466c:	dfc11d15 	stw	ra,1140(sp)
 8014670:	2025883a 	mov	r18,r4
 8014674:	d881030d 	sth	r2,1036(sp)
 8014678:	dac11915 	stw	r11,1124(sp)
 801467c:	da81038d 	sth	r10,1038(sp)
 8014680:	da410715 	stw	r9,1052(sp)
 8014684:	da010915 	stw	r8,1060(sp)
 8014688:	dec10015 	stw	sp,1024(sp)
 801468c:	dec10415 	stw	sp,1040(sp)
 8014690:	d8c10215 	stw	r3,1032(sp)
 8014694:	d8c10515 	stw	r3,1044(sp)
 8014698:	d8010615 	stw	zero,1048(sp)
 801469c:	80131100 	call	8013110 <___vfiprintf_internal_r>
 80146a0:	1023883a 	mov	r17,r2
 80146a4:	10000416 	blt	r2,zero,80146b8 <__sbprintf+0x80>
 80146a8:	d9410004 	addi	r5,sp,1024
 80146ac:	9009883a 	mov	r4,r18
 80146b0:	800f9600 	call	800f960 <_fflush_r>
 80146b4:	10000d1e 	bne	r2,zero,80146ec <__sbprintf+0xb4>
 80146b8:	d881030b 	ldhu	r2,1036(sp)
 80146bc:	1080100c 	andi	r2,r2,64
 80146c0:	10000326 	beq	r2,zero,80146d0 <__sbprintf+0x98>
 80146c4:	8080030b 	ldhu	r2,12(r16)
 80146c8:	10801014 	ori	r2,r2,64
 80146cc:	8080030d 	sth	r2,12(r16)
 80146d0:	8805883a 	mov	r2,r17
 80146d4:	dfc11d17 	ldw	ra,1140(sp)
 80146d8:	dc811c17 	ldw	r18,1136(sp)
 80146dc:	dc411b17 	ldw	r17,1132(sp)
 80146e0:	dc011a17 	ldw	r16,1128(sp)
 80146e4:	dec11e04 	addi	sp,sp,1144
 80146e8:	f800283a 	ret
 80146ec:	047fffc4 	movi	r17,-1
 80146f0:	003ff106 	br	80146b8 <__alt_data_end+0xfc0146b8>

080146f4 <_write_r>:
 80146f4:	defffd04 	addi	sp,sp,-12
 80146f8:	2805883a 	mov	r2,r5
 80146fc:	dc000015 	stw	r16,0(sp)
 8014700:	040200b4 	movhi	r16,2050
 8014704:	dc400115 	stw	r17,4(sp)
 8014708:	300b883a 	mov	r5,r6
 801470c:	843a3804 	addi	r16,r16,-5920
 8014710:	2023883a 	mov	r17,r4
 8014714:	380d883a 	mov	r6,r7
 8014718:	1009883a 	mov	r4,r2
 801471c:	dfc00215 	stw	ra,8(sp)
 8014720:	80000015 	stw	zero,0(r16)
 8014724:	80167740 	call	8016774 <write>
 8014728:	00ffffc4 	movi	r3,-1
 801472c:	10c00526 	beq	r2,r3,8014744 <_write_r+0x50>
 8014730:	dfc00217 	ldw	ra,8(sp)
 8014734:	dc400117 	ldw	r17,4(sp)
 8014738:	dc000017 	ldw	r16,0(sp)
 801473c:	dec00304 	addi	sp,sp,12
 8014740:	f800283a 	ret
 8014744:	80c00017 	ldw	r3,0(r16)
 8014748:	183ff926 	beq	r3,zero,8014730 <__alt_data_end+0xfc014730>
 801474c:	88c00015 	stw	r3,0(r17)
 8014750:	003ff706 	br	8014730 <__alt_data_end+0xfc014730>

08014754 <_close_r>:
 8014754:	defffd04 	addi	sp,sp,-12
 8014758:	dc000015 	stw	r16,0(sp)
 801475c:	040200b4 	movhi	r16,2050
 8014760:	dc400115 	stw	r17,4(sp)
 8014764:	843a3804 	addi	r16,r16,-5920
 8014768:	2023883a 	mov	r17,r4
 801476c:	2809883a 	mov	r4,r5
 8014770:	dfc00215 	stw	ra,8(sp)
 8014774:	80000015 	stw	zero,0(r16)
 8014778:	8015d480 	call	8015d48 <close>
 801477c:	00ffffc4 	movi	r3,-1
 8014780:	10c00526 	beq	r2,r3,8014798 <_close_r+0x44>
 8014784:	dfc00217 	ldw	ra,8(sp)
 8014788:	dc400117 	ldw	r17,4(sp)
 801478c:	dc000017 	ldw	r16,0(sp)
 8014790:	dec00304 	addi	sp,sp,12
 8014794:	f800283a 	ret
 8014798:	80c00017 	ldw	r3,0(r16)
 801479c:	183ff926 	beq	r3,zero,8014784 <__alt_data_end+0xfc014784>
 80147a0:	88c00015 	stw	r3,0(r17)
 80147a4:	003ff706 	br	8014784 <__alt_data_end+0xfc014784>

080147a8 <_calloc_r>:
 80147a8:	defffe04 	addi	sp,sp,-8
 80147ac:	2805883a 	mov	r2,r5
 80147b0:	dc000015 	stw	r16,0(sp)
 80147b4:	300b883a 	mov	r5,r6
 80147b8:	2021883a 	mov	r16,r4
 80147bc:	1009883a 	mov	r4,r2
 80147c0:	dfc00115 	stw	ra,4(sp)
 80147c4:	800832c0 	call	800832c <__mulsi3>
 80147c8:	100b883a 	mov	r5,r2
 80147cc:	8009883a 	mov	r4,r16
 80147d0:	8010ab80 	call	8010ab8 <_malloc_r>
 80147d4:	10002926 	beq	r2,zero,801487c <_calloc_r+0xd4>
 80147d8:	11bfff17 	ldw	r6,-4(r2)
 80147dc:	1021883a 	mov	r16,r2
 80147e0:	00bfff04 	movi	r2,-4
 80147e4:	308c703a 	and	r6,r6,r2
 80147e8:	00c00904 	movi	r3,36
 80147ec:	308d883a 	add	r6,r6,r2
 80147f0:	19801636 	bltu	r3,r6,801484c <_calloc_r+0xa4>
 80147f4:	008004c4 	movi	r2,19
 80147f8:	11800b2e 	bgeu	r2,r6,8014828 <_calloc_r+0x80>
 80147fc:	80000015 	stw	zero,0(r16)
 8014800:	80000115 	stw	zero,4(r16)
 8014804:	008006c4 	movi	r2,27
 8014808:	11801a2e 	bgeu	r2,r6,8014874 <_calloc_r+0xcc>
 801480c:	80000215 	stw	zero,8(r16)
 8014810:	80000315 	stw	zero,12(r16)
 8014814:	30c0151e 	bne	r6,r3,801486c <_calloc_r+0xc4>
 8014818:	80000415 	stw	zero,16(r16)
 801481c:	80800604 	addi	r2,r16,24
 8014820:	80000515 	stw	zero,20(r16)
 8014824:	00000106 	br	801482c <_calloc_r+0x84>
 8014828:	8005883a 	mov	r2,r16
 801482c:	10000015 	stw	zero,0(r2)
 8014830:	10000115 	stw	zero,4(r2)
 8014834:	10000215 	stw	zero,8(r2)
 8014838:	8005883a 	mov	r2,r16
 801483c:	dfc00117 	ldw	ra,4(sp)
 8014840:	dc000017 	ldw	r16,0(sp)
 8014844:	dec00204 	addi	sp,sp,8
 8014848:	f800283a 	ret
 801484c:	000b883a 	mov	r5,zero
 8014850:	8009883a 	mov	r4,r16
 8014854:	801164c0 	call	801164c <memset>
 8014858:	8005883a 	mov	r2,r16
 801485c:	dfc00117 	ldw	ra,4(sp)
 8014860:	dc000017 	ldw	r16,0(sp)
 8014864:	dec00204 	addi	sp,sp,8
 8014868:	f800283a 	ret
 801486c:	80800404 	addi	r2,r16,16
 8014870:	003fee06 	br	801482c <__alt_data_end+0xfc01482c>
 8014874:	80800204 	addi	r2,r16,8
 8014878:	003fec06 	br	801482c <__alt_data_end+0xfc01482c>
 801487c:	0005883a 	mov	r2,zero
 8014880:	003fee06 	br	801483c <__alt_data_end+0xfc01483c>

08014884 <_fclose_r>:
 8014884:	28003926 	beq	r5,zero,801496c <_fclose_r+0xe8>
 8014888:	defffc04 	addi	sp,sp,-16
 801488c:	dc400115 	stw	r17,4(sp)
 8014890:	dc000015 	stw	r16,0(sp)
 8014894:	dfc00315 	stw	ra,12(sp)
 8014898:	dc800215 	stw	r18,8(sp)
 801489c:	2023883a 	mov	r17,r4
 80148a0:	2821883a 	mov	r16,r5
 80148a4:	20000226 	beq	r4,zero,80148b0 <_fclose_r+0x2c>
 80148a8:	20800e17 	ldw	r2,56(r4)
 80148ac:	10002726 	beq	r2,zero,801494c <_fclose_r+0xc8>
 80148b0:	8080030f 	ldh	r2,12(r16)
 80148b4:	1000071e 	bne	r2,zero,80148d4 <_fclose_r+0x50>
 80148b8:	0005883a 	mov	r2,zero
 80148bc:	dfc00317 	ldw	ra,12(sp)
 80148c0:	dc800217 	ldw	r18,8(sp)
 80148c4:	dc400117 	ldw	r17,4(sp)
 80148c8:	dc000017 	ldw	r16,0(sp)
 80148cc:	dec00404 	addi	sp,sp,16
 80148d0:	f800283a 	ret
 80148d4:	800b883a 	mov	r5,r16
 80148d8:	8809883a 	mov	r4,r17
 80148dc:	800f7440 	call	800f744 <__sflush_r>
 80148e0:	1025883a 	mov	r18,r2
 80148e4:	80800b17 	ldw	r2,44(r16)
 80148e8:	10000426 	beq	r2,zero,80148fc <_fclose_r+0x78>
 80148ec:	81400717 	ldw	r5,28(r16)
 80148f0:	8809883a 	mov	r4,r17
 80148f4:	103ee83a 	callr	r2
 80148f8:	10001616 	blt	r2,zero,8014954 <_fclose_r+0xd0>
 80148fc:	8080030b 	ldhu	r2,12(r16)
 8014900:	1080200c 	andi	r2,r2,128
 8014904:	1000151e 	bne	r2,zero,801495c <_fclose_r+0xd8>
 8014908:	81400c17 	ldw	r5,48(r16)
 801490c:	28000526 	beq	r5,zero,8014924 <_fclose_r+0xa0>
 8014910:	80801004 	addi	r2,r16,64
 8014914:	28800226 	beq	r5,r2,8014920 <_fclose_r+0x9c>
 8014918:	8809883a 	mov	r4,r17
 801491c:	800fec00 	call	800fec0 <_free_r>
 8014920:	80000c15 	stw	zero,48(r16)
 8014924:	81401117 	ldw	r5,68(r16)
 8014928:	28000326 	beq	r5,zero,8014938 <_fclose_r+0xb4>
 801492c:	8809883a 	mov	r4,r17
 8014930:	800fec00 	call	800fec0 <_free_r>
 8014934:	80001115 	stw	zero,68(r16)
 8014938:	800fd5c0 	call	800fd5c <__sfp_lock_acquire>
 801493c:	8000030d 	sth	zero,12(r16)
 8014940:	800fd600 	call	800fd60 <__sfp_lock_release>
 8014944:	9005883a 	mov	r2,r18
 8014948:	003fdc06 	br	80148bc <__alt_data_end+0xfc0148bc>
 801494c:	800fd4c0 	call	800fd4c <__sinit>
 8014950:	003fd706 	br	80148b0 <__alt_data_end+0xfc0148b0>
 8014954:	04bfffc4 	movi	r18,-1
 8014958:	003fe806 	br	80148fc <__alt_data_end+0xfc0148fc>
 801495c:	81400417 	ldw	r5,16(r16)
 8014960:	8809883a 	mov	r4,r17
 8014964:	800fec00 	call	800fec0 <_free_r>
 8014968:	003fe706 	br	8014908 <__alt_data_end+0xfc014908>
 801496c:	0005883a 	mov	r2,zero
 8014970:	f800283a 	ret

08014974 <fclose>:
 8014974:	008200b4 	movhi	r2,2050
 8014978:	10b2dd04 	addi	r2,r2,-13452
 801497c:	200b883a 	mov	r5,r4
 8014980:	11000017 	ldw	r4,0(r2)
 8014984:	80148841 	jmpi	8014884 <_fclose_r>

08014988 <__fputwc>:
 8014988:	defff804 	addi	sp,sp,-32
 801498c:	dcc00415 	stw	r19,16(sp)
 8014990:	dc800315 	stw	r18,12(sp)
 8014994:	dc000115 	stw	r16,4(sp)
 8014998:	dfc00715 	stw	ra,28(sp)
 801499c:	dd400615 	stw	r21,24(sp)
 80149a0:	dd000515 	stw	r20,20(sp)
 80149a4:	dc400215 	stw	r17,8(sp)
 80149a8:	2027883a 	mov	r19,r4
 80149ac:	2825883a 	mov	r18,r5
 80149b0:	3021883a 	mov	r16,r6
 80149b4:	80108a80 	call	80108a8 <__locale_mb_cur_max>
 80149b8:	00c00044 	movi	r3,1
 80149bc:	10c03e26 	beq	r2,r3,8014ab8 <__fputwc+0x130>
 80149c0:	81c01704 	addi	r7,r16,92
 80149c4:	900d883a 	mov	r6,r18
 80149c8:	d80b883a 	mov	r5,sp
 80149cc:	9809883a 	mov	r4,r19
 80149d0:	8014e580 	call	8014e58 <_wcrtomb_r>
 80149d4:	1029883a 	mov	r20,r2
 80149d8:	00bfffc4 	movi	r2,-1
 80149dc:	a0802026 	beq	r20,r2,8014a60 <__fputwc+0xd8>
 80149e0:	d9400003 	ldbu	r5,0(sp)
 80149e4:	a0001c26 	beq	r20,zero,8014a58 <__fputwc+0xd0>
 80149e8:	0023883a 	mov	r17,zero
 80149ec:	05400284 	movi	r21,10
 80149f0:	00000906 	br	8014a18 <__fputwc+0x90>
 80149f4:	80800017 	ldw	r2,0(r16)
 80149f8:	11400005 	stb	r5,0(r2)
 80149fc:	80c00017 	ldw	r3,0(r16)
 8014a00:	18c00044 	addi	r3,r3,1
 8014a04:	80c00015 	stw	r3,0(r16)
 8014a08:	8c400044 	addi	r17,r17,1
 8014a0c:	dc45883a 	add	r2,sp,r17
 8014a10:	8d00112e 	bgeu	r17,r20,8014a58 <__fputwc+0xd0>
 8014a14:	11400003 	ldbu	r5,0(r2)
 8014a18:	80c00217 	ldw	r3,8(r16)
 8014a1c:	18ffffc4 	addi	r3,r3,-1
 8014a20:	80c00215 	stw	r3,8(r16)
 8014a24:	183ff30e 	bge	r3,zero,80149f4 <__alt_data_end+0xfc0149f4>
 8014a28:	80800617 	ldw	r2,24(r16)
 8014a2c:	18801916 	blt	r3,r2,8014a94 <__fputwc+0x10c>
 8014a30:	80800017 	ldw	r2,0(r16)
 8014a34:	11400005 	stb	r5,0(r2)
 8014a38:	80800017 	ldw	r2,0(r16)
 8014a3c:	10c00003 	ldbu	r3,0(r2)
 8014a40:	10800044 	addi	r2,r2,1
 8014a44:	1d402326 	beq	r3,r21,8014ad4 <__fputwc+0x14c>
 8014a48:	80800015 	stw	r2,0(r16)
 8014a4c:	8c400044 	addi	r17,r17,1
 8014a50:	dc45883a 	add	r2,sp,r17
 8014a54:	8d3fef36 	bltu	r17,r20,8014a14 <__alt_data_end+0xfc014a14>
 8014a58:	9005883a 	mov	r2,r18
 8014a5c:	00000406 	br	8014a70 <__fputwc+0xe8>
 8014a60:	80c0030b 	ldhu	r3,12(r16)
 8014a64:	a005883a 	mov	r2,r20
 8014a68:	18c01014 	ori	r3,r3,64
 8014a6c:	80c0030d 	sth	r3,12(r16)
 8014a70:	dfc00717 	ldw	ra,28(sp)
 8014a74:	dd400617 	ldw	r21,24(sp)
 8014a78:	dd000517 	ldw	r20,20(sp)
 8014a7c:	dcc00417 	ldw	r19,16(sp)
 8014a80:	dc800317 	ldw	r18,12(sp)
 8014a84:	dc400217 	ldw	r17,8(sp)
 8014a88:	dc000117 	ldw	r16,4(sp)
 8014a8c:	dec00804 	addi	sp,sp,32
 8014a90:	f800283a 	ret
 8014a94:	800d883a 	mov	r6,r16
 8014a98:	29403fcc 	andi	r5,r5,255
 8014a9c:	9809883a 	mov	r4,r19
 8014aa0:	8014d000 	call	8014d00 <__swbuf_r>
 8014aa4:	10bfffe0 	cmpeqi	r2,r2,-1
 8014aa8:	10803fcc 	andi	r2,r2,255
 8014aac:	103fd626 	beq	r2,zero,8014a08 <__alt_data_end+0xfc014a08>
 8014ab0:	00bfffc4 	movi	r2,-1
 8014ab4:	003fee06 	br	8014a70 <__alt_data_end+0xfc014a70>
 8014ab8:	90ffffc4 	addi	r3,r18,-1
 8014abc:	01003f84 	movi	r4,254
 8014ac0:	20ffbf36 	bltu	r4,r3,80149c0 <__alt_data_end+0xfc0149c0>
 8014ac4:	900b883a 	mov	r5,r18
 8014ac8:	dc800005 	stb	r18,0(sp)
 8014acc:	1029883a 	mov	r20,r2
 8014ad0:	003fc506 	br	80149e8 <__alt_data_end+0xfc0149e8>
 8014ad4:	800d883a 	mov	r6,r16
 8014ad8:	a80b883a 	mov	r5,r21
 8014adc:	9809883a 	mov	r4,r19
 8014ae0:	8014d000 	call	8014d00 <__swbuf_r>
 8014ae4:	10bfffe0 	cmpeqi	r2,r2,-1
 8014ae8:	003fef06 	br	8014aa8 <__alt_data_end+0xfc014aa8>

08014aec <_fputwc_r>:
 8014aec:	3080030b 	ldhu	r2,12(r6)
 8014af0:	10c8000c 	andi	r3,r2,8192
 8014af4:	1800051e 	bne	r3,zero,8014b0c <_fputwc_r+0x20>
 8014af8:	30c01917 	ldw	r3,100(r6)
 8014afc:	10880014 	ori	r2,r2,8192
 8014b00:	3080030d 	sth	r2,12(r6)
 8014b04:	18880014 	ori	r2,r3,8192
 8014b08:	30801915 	stw	r2,100(r6)
 8014b0c:	80149881 	jmpi	8014988 <__fputwc>

08014b10 <fputwc>:
 8014b10:	008200b4 	movhi	r2,2050
 8014b14:	defffc04 	addi	sp,sp,-16
 8014b18:	10b2dd04 	addi	r2,r2,-13452
 8014b1c:	dc000115 	stw	r16,4(sp)
 8014b20:	14000017 	ldw	r16,0(r2)
 8014b24:	dc400215 	stw	r17,8(sp)
 8014b28:	dfc00315 	stw	ra,12(sp)
 8014b2c:	2023883a 	mov	r17,r4
 8014b30:	80000226 	beq	r16,zero,8014b3c <fputwc+0x2c>
 8014b34:	80800e17 	ldw	r2,56(r16)
 8014b38:	10001026 	beq	r2,zero,8014b7c <fputwc+0x6c>
 8014b3c:	2880030b 	ldhu	r2,12(r5)
 8014b40:	10c8000c 	andi	r3,r2,8192
 8014b44:	1800051e 	bne	r3,zero,8014b5c <fputwc+0x4c>
 8014b48:	28c01917 	ldw	r3,100(r5)
 8014b4c:	10880014 	ori	r2,r2,8192
 8014b50:	2880030d 	sth	r2,12(r5)
 8014b54:	18880014 	ori	r2,r3,8192
 8014b58:	28801915 	stw	r2,100(r5)
 8014b5c:	280d883a 	mov	r6,r5
 8014b60:	8009883a 	mov	r4,r16
 8014b64:	880b883a 	mov	r5,r17
 8014b68:	dfc00317 	ldw	ra,12(sp)
 8014b6c:	dc400217 	ldw	r17,8(sp)
 8014b70:	dc000117 	ldw	r16,4(sp)
 8014b74:	dec00404 	addi	sp,sp,16
 8014b78:	80149881 	jmpi	8014988 <__fputwc>
 8014b7c:	8009883a 	mov	r4,r16
 8014b80:	d9400015 	stw	r5,0(sp)
 8014b84:	800fd4c0 	call	800fd4c <__sinit>
 8014b88:	d9400017 	ldw	r5,0(sp)
 8014b8c:	003feb06 	br	8014b3c <__alt_data_end+0xfc014b3c>

08014b90 <_fstat_r>:
 8014b90:	defffd04 	addi	sp,sp,-12
 8014b94:	2805883a 	mov	r2,r5
 8014b98:	dc000015 	stw	r16,0(sp)
 8014b9c:	040200b4 	movhi	r16,2050
 8014ba0:	dc400115 	stw	r17,4(sp)
 8014ba4:	843a3804 	addi	r16,r16,-5920
 8014ba8:	2023883a 	mov	r17,r4
 8014bac:	300b883a 	mov	r5,r6
 8014bb0:	1009883a 	mov	r4,r2
 8014bb4:	dfc00215 	stw	ra,8(sp)
 8014bb8:	80000015 	stw	zero,0(r16)
 8014bbc:	8015e880 	call	8015e88 <fstat>
 8014bc0:	00ffffc4 	movi	r3,-1
 8014bc4:	10c00526 	beq	r2,r3,8014bdc <_fstat_r+0x4c>
 8014bc8:	dfc00217 	ldw	ra,8(sp)
 8014bcc:	dc400117 	ldw	r17,4(sp)
 8014bd0:	dc000017 	ldw	r16,0(sp)
 8014bd4:	dec00304 	addi	sp,sp,12
 8014bd8:	f800283a 	ret
 8014bdc:	80c00017 	ldw	r3,0(r16)
 8014be0:	183ff926 	beq	r3,zero,8014bc8 <__alt_data_end+0xfc014bc8>
 8014be4:	88c00015 	stw	r3,0(r17)
 8014be8:	003ff706 	br	8014bc8 <__alt_data_end+0xfc014bc8>

08014bec <_isatty_r>:
 8014bec:	defffd04 	addi	sp,sp,-12
 8014bf0:	dc000015 	stw	r16,0(sp)
 8014bf4:	040200b4 	movhi	r16,2050
 8014bf8:	dc400115 	stw	r17,4(sp)
 8014bfc:	843a3804 	addi	r16,r16,-5920
 8014c00:	2023883a 	mov	r17,r4
 8014c04:	2809883a 	mov	r4,r5
 8014c08:	dfc00215 	stw	ra,8(sp)
 8014c0c:	80000015 	stw	zero,0(r16)
 8014c10:	8015f7c0 	call	8015f7c <isatty>
 8014c14:	00ffffc4 	movi	r3,-1
 8014c18:	10c00526 	beq	r2,r3,8014c30 <_isatty_r+0x44>
 8014c1c:	dfc00217 	ldw	ra,8(sp)
 8014c20:	dc400117 	ldw	r17,4(sp)
 8014c24:	dc000017 	ldw	r16,0(sp)
 8014c28:	dec00304 	addi	sp,sp,12
 8014c2c:	f800283a 	ret
 8014c30:	80c00017 	ldw	r3,0(r16)
 8014c34:	183ff926 	beq	r3,zero,8014c1c <__alt_data_end+0xfc014c1c>
 8014c38:	88c00015 	stw	r3,0(r17)
 8014c3c:	003ff706 	br	8014c1c <__alt_data_end+0xfc014c1c>

08014c40 <_lseek_r>:
 8014c40:	defffd04 	addi	sp,sp,-12
 8014c44:	2805883a 	mov	r2,r5
 8014c48:	dc000015 	stw	r16,0(sp)
 8014c4c:	040200b4 	movhi	r16,2050
 8014c50:	dc400115 	stw	r17,4(sp)
 8014c54:	300b883a 	mov	r5,r6
 8014c58:	843a3804 	addi	r16,r16,-5920
 8014c5c:	2023883a 	mov	r17,r4
 8014c60:	380d883a 	mov	r6,r7
 8014c64:	1009883a 	mov	r4,r2
 8014c68:	dfc00215 	stw	ra,8(sp)
 8014c6c:	80000015 	stw	zero,0(r16)
 8014c70:	80161500 	call	8016150 <lseek>
 8014c74:	00ffffc4 	movi	r3,-1
 8014c78:	10c00526 	beq	r2,r3,8014c90 <_lseek_r+0x50>
 8014c7c:	dfc00217 	ldw	ra,8(sp)
 8014c80:	dc400117 	ldw	r17,4(sp)
 8014c84:	dc000017 	ldw	r16,0(sp)
 8014c88:	dec00304 	addi	sp,sp,12
 8014c8c:	f800283a 	ret
 8014c90:	80c00017 	ldw	r3,0(r16)
 8014c94:	183ff926 	beq	r3,zero,8014c7c <__alt_data_end+0xfc014c7c>
 8014c98:	88c00015 	stw	r3,0(r17)
 8014c9c:	003ff706 	br	8014c7c <__alt_data_end+0xfc014c7c>

08014ca0 <_read_r>:
 8014ca0:	defffd04 	addi	sp,sp,-12
 8014ca4:	2805883a 	mov	r2,r5
 8014ca8:	dc000015 	stw	r16,0(sp)
 8014cac:	040200b4 	movhi	r16,2050
 8014cb0:	dc400115 	stw	r17,4(sp)
 8014cb4:	300b883a 	mov	r5,r6
 8014cb8:	843a3804 	addi	r16,r16,-5920
 8014cbc:	2023883a 	mov	r17,r4
 8014cc0:	380d883a 	mov	r6,r7
 8014cc4:	1009883a 	mov	r4,r2
 8014cc8:	dfc00215 	stw	ra,8(sp)
 8014ccc:	80000015 	stw	zero,0(r16)
 8014cd0:	801632c0 	call	801632c <read>
 8014cd4:	00ffffc4 	movi	r3,-1
 8014cd8:	10c00526 	beq	r2,r3,8014cf0 <_read_r+0x50>
 8014cdc:	dfc00217 	ldw	ra,8(sp)
 8014ce0:	dc400117 	ldw	r17,4(sp)
 8014ce4:	dc000017 	ldw	r16,0(sp)
 8014ce8:	dec00304 	addi	sp,sp,12
 8014cec:	f800283a 	ret
 8014cf0:	80c00017 	ldw	r3,0(r16)
 8014cf4:	183ff926 	beq	r3,zero,8014cdc <__alt_data_end+0xfc014cdc>
 8014cf8:	88c00015 	stw	r3,0(r17)
 8014cfc:	003ff706 	br	8014cdc <__alt_data_end+0xfc014cdc>

08014d00 <__swbuf_r>:
 8014d00:	defffb04 	addi	sp,sp,-20
 8014d04:	dcc00315 	stw	r19,12(sp)
 8014d08:	dc800215 	stw	r18,8(sp)
 8014d0c:	dc000015 	stw	r16,0(sp)
 8014d10:	dfc00415 	stw	ra,16(sp)
 8014d14:	dc400115 	stw	r17,4(sp)
 8014d18:	2025883a 	mov	r18,r4
 8014d1c:	2827883a 	mov	r19,r5
 8014d20:	3021883a 	mov	r16,r6
 8014d24:	20000226 	beq	r4,zero,8014d30 <__swbuf_r+0x30>
 8014d28:	20800e17 	ldw	r2,56(r4)
 8014d2c:	10004226 	beq	r2,zero,8014e38 <__swbuf_r+0x138>
 8014d30:	80800617 	ldw	r2,24(r16)
 8014d34:	8100030b 	ldhu	r4,12(r16)
 8014d38:	80800215 	stw	r2,8(r16)
 8014d3c:	2080020c 	andi	r2,r4,8
 8014d40:	10003626 	beq	r2,zero,8014e1c <__swbuf_r+0x11c>
 8014d44:	80c00417 	ldw	r3,16(r16)
 8014d48:	18003426 	beq	r3,zero,8014e1c <__swbuf_r+0x11c>
 8014d4c:	2088000c 	andi	r2,r4,8192
 8014d50:	9c403fcc 	andi	r17,r19,255
 8014d54:	10001a26 	beq	r2,zero,8014dc0 <__swbuf_r+0xc0>
 8014d58:	80800017 	ldw	r2,0(r16)
 8014d5c:	81000517 	ldw	r4,20(r16)
 8014d60:	10c7c83a 	sub	r3,r2,r3
 8014d64:	1900200e 	bge	r3,r4,8014de8 <__swbuf_r+0xe8>
 8014d68:	18c00044 	addi	r3,r3,1
 8014d6c:	81000217 	ldw	r4,8(r16)
 8014d70:	11400044 	addi	r5,r2,1
 8014d74:	81400015 	stw	r5,0(r16)
 8014d78:	213fffc4 	addi	r4,r4,-1
 8014d7c:	81000215 	stw	r4,8(r16)
 8014d80:	14c00005 	stb	r19,0(r2)
 8014d84:	80800517 	ldw	r2,20(r16)
 8014d88:	10c01e26 	beq	r2,r3,8014e04 <__swbuf_r+0x104>
 8014d8c:	8080030b 	ldhu	r2,12(r16)
 8014d90:	1080004c 	andi	r2,r2,1
 8014d94:	10000226 	beq	r2,zero,8014da0 <__swbuf_r+0xa0>
 8014d98:	00800284 	movi	r2,10
 8014d9c:	88801926 	beq	r17,r2,8014e04 <__swbuf_r+0x104>
 8014da0:	8805883a 	mov	r2,r17
 8014da4:	dfc00417 	ldw	ra,16(sp)
 8014da8:	dcc00317 	ldw	r19,12(sp)
 8014dac:	dc800217 	ldw	r18,8(sp)
 8014db0:	dc400117 	ldw	r17,4(sp)
 8014db4:	dc000017 	ldw	r16,0(sp)
 8014db8:	dec00504 	addi	sp,sp,20
 8014dbc:	f800283a 	ret
 8014dc0:	81401917 	ldw	r5,100(r16)
 8014dc4:	00b7ffc4 	movi	r2,-8193
 8014dc8:	21080014 	ori	r4,r4,8192
 8014dcc:	2884703a 	and	r2,r5,r2
 8014dd0:	80801915 	stw	r2,100(r16)
 8014dd4:	80800017 	ldw	r2,0(r16)
 8014dd8:	8100030d 	sth	r4,12(r16)
 8014ddc:	81000517 	ldw	r4,20(r16)
 8014de0:	10c7c83a 	sub	r3,r2,r3
 8014de4:	193fe016 	blt	r3,r4,8014d68 <__alt_data_end+0xfc014d68>
 8014de8:	800b883a 	mov	r5,r16
 8014dec:	9009883a 	mov	r4,r18
 8014df0:	800f9600 	call	800f960 <_fflush_r>
 8014df4:	1000071e 	bne	r2,zero,8014e14 <__swbuf_r+0x114>
 8014df8:	80800017 	ldw	r2,0(r16)
 8014dfc:	00c00044 	movi	r3,1
 8014e00:	003fda06 	br	8014d6c <__alt_data_end+0xfc014d6c>
 8014e04:	800b883a 	mov	r5,r16
 8014e08:	9009883a 	mov	r4,r18
 8014e0c:	800f9600 	call	800f960 <_fflush_r>
 8014e10:	103fe326 	beq	r2,zero,8014da0 <__alt_data_end+0xfc014da0>
 8014e14:	00bfffc4 	movi	r2,-1
 8014e18:	003fe206 	br	8014da4 <__alt_data_end+0xfc014da4>
 8014e1c:	800b883a 	mov	r5,r16
 8014e20:	9009883a 	mov	r4,r18
 8014e24:	800dd400 	call	800dd40 <__swsetup_r>
 8014e28:	103ffa1e 	bne	r2,zero,8014e14 <__alt_data_end+0xfc014e14>
 8014e2c:	8100030b 	ldhu	r4,12(r16)
 8014e30:	80c00417 	ldw	r3,16(r16)
 8014e34:	003fc506 	br	8014d4c <__alt_data_end+0xfc014d4c>
 8014e38:	800fd4c0 	call	800fd4c <__sinit>
 8014e3c:	003fbc06 	br	8014d30 <__alt_data_end+0xfc014d30>

08014e40 <__swbuf>:
 8014e40:	008200b4 	movhi	r2,2050
 8014e44:	10b2dd04 	addi	r2,r2,-13452
 8014e48:	280d883a 	mov	r6,r5
 8014e4c:	200b883a 	mov	r5,r4
 8014e50:	11000017 	ldw	r4,0(r2)
 8014e54:	8014d001 	jmpi	8014d00 <__swbuf_r>

08014e58 <_wcrtomb_r>:
 8014e58:	defff604 	addi	sp,sp,-40
 8014e5c:	008200b4 	movhi	r2,2050
 8014e60:	dc800815 	stw	r18,32(sp)
 8014e64:	dc400715 	stw	r17,28(sp)
 8014e68:	dc000615 	stw	r16,24(sp)
 8014e6c:	10b2e104 	addi	r2,r2,-13436
 8014e70:	dfc00915 	stw	ra,36(sp)
 8014e74:	2021883a 	mov	r16,r4
 8014e78:	3823883a 	mov	r17,r7
 8014e7c:	14800017 	ldw	r18,0(r2)
 8014e80:	28001426 	beq	r5,zero,8014ed4 <_wcrtomb_r+0x7c>
 8014e84:	d9400415 	stw	r5,16(sp)
 8014e88:	d9800515 	stw	r6,20(sp)
 8014e8c:	801089c0 	call	801089c <__locale_charset>
 8014e90:	d9800517 	ldw	r6,20(sp)
 8014e94:	d9400417 	ldw	r5,16(sp)
 8014e98:	100f883a 	mov	r7,r2
 8014e9c:	dc400015 	stw	r17,0(sp)
 8014ea0:	8009883a 	mov	r4,r16
 8014ea4:	903ee83a 	callr	r18
 8014ea8:	00ffffc4 	movi	r3,-1
 8014eac:	10c0031e 	bne	r2,r3,8014ebc <_wcrtomb_r+0x64>
 8014eb0:	88000015 	stw	zero,0(r17)
 8014eb4:	00c02284 	movi	r3,138
 8014eb8:	80c00015 	stw	r3,0(r16)
 8014ebc:	dfc00917 	ldw	ra,36(sp)
 8014ec0:	dc800817 	ldw	r18,32(sp)
 8014ec4:	dc400717 	ldw	r17,28(sp)
 8014ec8:	dc000617 	ldw	r16,24(sp)
 8014ecc:	dec00a04 	addi	sp,sp,40
 8014ed0:	f800283a 	ret
 8014ed4:	801089c0 	call	801089c <__locale_charset>
 8014ed8:	100f883a 	mov	r7,r2
 8014edc:	dc400015 	stw	r17,0(sp)
 8014ee0:	000d883a 	mov	r6,zero
 8014ee4:	d9400104 	addi	r5,sp,4
 8014ee8:	8009883a 	mov	r4,r16
 8014eec:	903ee83a 	callr	r18
 8014ef0:	003fed06 	br	8014ea8 <__alt_data_end+0xfc014ea8>

08014ef4 <wcrtomb>:
 8014ef4:	defff604 	addi	sp,sp,-40
 8014ef8:	008200b4 	movhi	r2,2050
 8014efc:	dc800615 	stw	r18,24(sp)
 8014f00:	dc400515 	stw	r17,20(sp)
 8014f04:	10b2dd04 	addi	r2,r2,-13452
 8014f08:	dfc00915 	stw	ra,36(sp)
 8014f0c:	dd000815 	stw	r20,32(sp)
 8014f10:	dcc00715 	stw	r19,28(sp)
 8014f14:	dc000415 	stw	r16,16(sp)
 8014f18:	3025883a 	mov	r18,r6
 8014f1c:	14400017 	ldw	r17,0(r2)
 8014f20:	20001926 	beq	r4,zero,8014f88 <wcrtomb+0x94>
 8014f24:	008200b4 	movhi	r2,2050
 8014f28:	10b2e104 	addi	r2,r2,-13436
 8014f2c:	15000017 	ldw	r20,0(r2)
 8014f30:	2021883a 	mov	r16,r4
 8014f34:	2827883a 	mov	r19,r5
 8014f38:	801089c0 	call	801089c <__locale_charset>
 8014f3c:	100f883a 	mov	r7,r2
 8014f40:	dc800015 	stw	r18,0(sp)
 8014f44:	980d883a 	mov	r6,r19
 8014f48:	800b883a 	mov	r5,r16
 8014f4c:	8809883a 	mov	r4,r17
 8014f50:	a03ee83a 	callr	r20
 8014f54:	00ffffc4 	movi	r3,-1
 8014f58:	10c0031e 	bne	r2,r3,8014f68 <wcrtomb+0x74>
 8014f5c:	90000015 	stw	zero,0(r18)
 8014f60:	00c02284 	movi	r3,138
 8014f64:	88c00015 	stw	r3,0(r17)
 8014f68:	dfc00917 	ldw	ra,36(sp)
 8014f6c:	dd000817 	ldw	r20,32(sp)
 8014f70:	dcc00717 	ldw	r19,28(sp)
 8014f74:	dc800617 	ldw	r18,24(sp)
 8014f78:	dc400517 	ldw	r17,20(sp)
 8014f7c:	dc000417 	ldw	r16,16(sp)
 8014f80:	dec00a04 	addi	sp,sp,40
 8014f84:	f800283a 	ret
 8014f88:	008200b4 	movhi	r2,2050
 8014f8c:	10b2e104 	addi	r2,r2,-13436
 8014f90:	14000017 	ldw	r16,0(r2)
 8014f94:	801089c0 	call	801089c <__locale_charset>
 8014f98:	100f883a 	mov	r7,r2
 8014f9c:	dc800015 	stw	r18,0(sp)
 8014fa0:	000d883a 	mov	r6,zero
 8014fa4:	d9400104 	addi	r5,sp,4
 8014fa8:	8809883a 	mov	r4,r17
 8014fac:	803ee83a 	callr	r16
 8014fb0:	003fe806 	br	8014f54 <__alt_data_end+0xfc014f54>

08014fb4 <__ascii_wctomb>:
 8014fb4:	28000526 	beq	r5,zero,8014fcc <__ascii_wctomb+0x18>
 8014fb8:	00803fc4 	movi	r2,255
 8014fbc:	11800536 	bltu	r2,r6,8014fd4 <__ascii_wctomb+0x20>
 8014fc0:	29800005 	stb	r6,0(r5)
 8014fc4:	00800044 	movi	r2,1
 8014fc8:	f800283a 	ret
 8014fcc:	0005883a 	mov	r2,zero
 8014fd0:	f800283a 	ret
 8014fd4:	00802284 	movi	r2,138
 8014fd8:	20800015 	stw	r2,0(r4)
 8014fdc:	00bfffc4 	movi	r2,-1
 8014fe0:	f800283a 	ret

08014fe4 <_wctomb_r>:
 8014fe4:	008200b4 	movhi	r2,2050
 8014fe8:	defff904 	addi	sp,sp,-28
 8014fec:	10b2e104 	addi	r2,r2,-13436
 8014ff0:	dfc00615 	stw	ra,24(sp)
 8014ff4:	dc400515 	stw	r17,20(sp)
 8014ff8:	dc000415 	stw	r16,16(sp)
 8014ffc:	3823883a 	mov	r17,r7
 8015000:	14000017 	ldw	r16,0(r2)
 8015004:	d9000115 	stw	r4,4(sp)
 8015008:	d9400215 	stw	r5,8(sp)
 801500c:	d9800315 	stw	r6,12(sp)
 8015010:	801089c0 	call	801089c <__locale_charset>
 8015014:	d9800317 	ldw	r6,12(sp)
 8015018:	d9400217 	ldw	r5,8(sp)
 801501c:	d9000117 	ldw	r4,4(sp)
 8015020:	100f883a 	mov	r7,r2
 8015024:	dc400015 	stw	r17,0(sp)
 8015028:	803ee83a 	callr	r16
 801502c:	dfc00617 	ldw	ra,24(sp)
 8015030:	dc400517 	ldw	r17,20(sp)
 8015034:	dc000417 	ldw	r16,16(sp)
 8015038:	dec00704 	addi	sp,sp,28
 801503c:	f800283a 	ret

08015040 <__muldi3>:
 8015040:	defff604 	addi	sp,sp,-40
 8015044:	dd800615 	stw	r22,24(sp)
 8015048:	dd400515 	stw	r21,20(sp)
 801504c:	dc400115 	stw	r17,4(sp)
 8015050:	357fffcc 	andi	r21,r6,65535
 8015054:	2022d43a 	srli	r17,r4,16
 8015058:	25bfffcc 	andi	r22,r4,65535
 801505c:	dcc00315 	stw	r19,12(sp)
 8015060:	dc800215 	stw	r18,8(sp)
 8015064:	2027883a 	mov	r19,r4
 8015068:	2825883a 	mov	r18,r5
 801506c:	b009883a 	mov	r4,r22
 8015070:	a80b883a 	mov	r5,r21
 8015074:	dfc00915 	stw	ra,36(sp)
 8015078:	df000815 	stw	fp,32(sp)
 801507c:	ddc00715 	stw	r23,28(sp)
 8015080:	3839883a 	mov	fp,r7
 8015084:	302ed43a 	srli	r23,r6,16
 8015088:	dd000415 	stw	r20,16(sp)
 801508c:	dc000015 	stw	r16,0(sp)
 8015090:	3029883a 	mov	r20,r6
 8015094:	800832c0 	call	800832c <__mulsi3>
 8015098:	a80b883a 	mov	r5,r21
 801509c:	8809883a 	mov	r4,r17
 80150a0:	1021883a 	mov	r16,r2
 80150a4:	800832c0 	call	800832c <__mulsi3>
 80150a8:	8809883a 	mov	r4,r17
 80150ac:	b80b883a 	mov	r5,r23
 80150b0:	102b883a 	mov	r21,r2
 80150b4:	800832c0 	call	800832c <__mulsi3>
 80150b8:	b80b883a 	mov	r5,r23
 80150bc:	b009883a 	mov	r4,r22
 80150c0:	1023883a 	mov	r17,r2
 80150c4:	800832c0 	call	800832c <__mulsi3>
 80150c8:	8006d43a 	srli	r3,r16,16
 80150cc:	1545883a 	add	r2,r2,r21
 80150d0:	1885883a 	add	r2,r3,r2
 80150d4:	1540022e 	bgeu	r2,r21,80150e0 <__muldi3+0xa0>
 80150d8:	00c00074 	movhi	r3,1
 80150dc:	88e3883a 	add	r17,r17,r3
 80150e0:	1006d43a 	srli	r3,r2,16
 80150e4:	1004943a 	slli	r2,r2,16
 80150e8:	e00b883a 	mov	r5,fp
 80150ec:	9809883a 	mov	r4,r19
 80150f0:	843fffcc 	andi	r16,r16,65535
 80150f4:	1c63883a 	add	r17,r3,r17
 80150f8:	1421883a 	add	r16,r2,r16
 80150fc:	800832c0 	call	800832c <__mulsi3>
 8015100:	900b883a 	mov	r5,r18
 8015104:	a009883a 	mov	r4,r20
 8015108:	1027883a 	mov	r19,r2
 801510c:	800832c0 	call	800832c <__mulsi3>
 8015110:	9885883a 	add	r2,r19,r2
 8015114:	1447883a 	add	r3,r2,r17
 8015118:	8005883a 	mov	r2,r16
 801511c:	dfc00917 	ldw	ra,36(sp)
 8015120:	df000817 	ldw	fp,32(sp)
 8015124:	ddc00717 	ldw	r23,28(sp)
 8015128:	dd800617 	ldw	r22,24(sp)
 801512c:	dd400517 	ldw	r21,20(sp)
 8015130:	dd000417 	ldw	r20,16(sp)
 8015134:	dcc00317 	ldw	r19,12(sp)
 8015138:	dc800217 	ldw	r18,8(sp)
 801513c:	dc400117 	ldw	r17,4(sp)
 8015140:	dc000017 	ldw	r16,0(sp)
 8015144:	dec00a04 	addi	sp,sp,40
 8015148:	f800283a 	ret

0801514c <__udivdi3>:
 801514c:	defff404 	addi	sp,sp,-48
 8015150:	dcc00515 	stw	r19,20(sp)
 8015154:	dc000215 	stw	r16,8(sp)
 8015158:	dfc00b15 	stw	ra,44(sp)
 801515c:	df000a15 	stw	fp,40(sp)
 8015160:	ddc00915 	stw	r23,36(sp)
 8015164:	dd800815 	stw	r22,32(sp)
 8015168:	dd400715 	stw	r21,28(sp)
 801516c:	dd000615 	stw	r20,24(sp)
 8015170:	dc800415 	stw	r18,16(sp)
 8015174:	dc400315 	stw	r17,12(sp)
 8015178:	2027883a 	mov	r19,r4
 801517c:	2821883a 	mov	r16,r5
 8015180:	3800461e 	bne	r7,zero,801529c <__udivdi3+0x150>
 8015184:	3023883a 	mov	r17,r6
 8015188:	2025883a 	mov	r18,r4
 801518c:	2980572e 	bgeu	r5,r6,80152ec <__udivdi3+0x1a0>
 8015190:	00bfffd4 	movui	r2,65535
 8015194:	282d883a 	mov	r22,r5
 8015198:	1180b236 	bltu	r2,r6,8015464 <__udivdi3+0x318>
 801519c:	00803fc4 	movi	r2,255
 80151a0:	1185803a 	cmpltu	r2,r2,r6
 80151a4:	100490fa 	slli	r2,r2,3
 80151a8:	3086d83a 	srl	r3,r6,r2
 80151ac:	010200b4 	movhi	r4,2050
 80151b0:	212aea04 	addi	r4,r4,-21592
 80151b4:	20c7883a 	add	r3,r4,r3
 80151b8:	18c00003 	ldbu	r3,0(r3)
 80151bc:	1885883a 	add	r2,r3,r2
 80151c0:	00c00804 	movi	r3,32
 80151c4:	1887c83a 	sub	r3,r3,r2
 80151c8:	18000526 	beq	r3,zero,80151e0 <__udivdi3+0x94>
 80151cc:	80e0983a 	sll	r16,r16,r3
 80151d0:	9884d83a 	srl	r2,r19,r2
 80151d4:	30e2983a 	sll	r17,r6,r3
 80151d8:	98e4983a 	sll	r18,r19,r3
 80151dc:	142cb03a 	or	r22,r2,r16
 80151e0:	882ad43a 	srli	r21,r17,16
 80151e4:	b009883a 	mov	r4,r22
 80151e8:	8d3fffcc 	andi	r20,r17,65535
 80151ec:	a80b883a 	mov	r5,r21
 80151f0:	80082d40 	call	80082d4 <__umodsi3>
 80151f4:	b009883a 	mov	r4,r22
 80151f8:	a80b883a 	mov	r5,r21
 80151fc:	1027883a 	mov	r19,r2
 8015200:	80082700 	call	8008270 <__udivsi3>
 8015204:	100b883a 	mov	r5,r2
 8015208:	a009883a 	mov	r4,r20
 801520c:	102d883a 	mov	r22,r2
 8015210:	800832c0 	call	800832c <__mulsi3>
 8015214:	9826943a 	slli	r19,r19,16
 8015218:	9006d43a 	srli	r3,r18,16
 801521c:	1cc6b03a 	or	r3,r3,r19
 8015220:	1880052e 	bgeu	r3,r2,8015238 <__udivdi3+0xec>
 8015224:	1c47883a 	add	r3,r3,r17
 8015228:	b13fffc4 	addi	r4,r22,-1
 801522c:	1c400136 	bltu	r3,r17,8015234 <__udivdi3+0xe8>
 8015230:	18814236 	bltu	r3,r2,801573c <__udivdi3+0x5f0>
 8015234:	202d883a 	mov	r22,r4
 8015238:	18a1c83a 	sub	r16,r3,r2
 801523c:	8009883a 	mov	r4,r16
 8015240:	a80b883a 	mov	r5,r21
 8015244:	80082d40 	call	80082d4 <__umodsi3>
 8015248:	1027883a 	mov	r19,r2
 801524c:	8009883a 	mov	r4,r16
 8015250:	a80b883a 	mov	r5,r21
 8015254:	9826943a 	slli	r19,r19,16
 8015258:	80082700 	call	8008270 <__udivsi3>
 801525c:	100b883a 	mov	r5,r2
 8015260:	a009883a 	mov	r4,r20
 8015264:	94bfffcc 	andi	r18,r18,65535
 8015268:	1021883a 	mov	r16,r2
 801526c:	94e4b03a 	or	r18,r18,r19
 8015270:	800832c0 	call	800832c <__mulsi3>
 8015274:	9080052e 	bgeu	r18,r2,801528c <__udivdi3+0x140>
 8015278:	8ca5883a 	add	r18,r17,r18
 801527c:	80ffffc4 	addi	r3,r16,-1
 8015280:	94410c36 	bltu	r18,r17,80156b4 <__udivdi3+0x568>
 8015284:	90810b2e 	bgeu	r18,r2,80156b4 <__udivdi3+0x568>
 8015288:	843fff84 	addi	r16,r16,-2
 801528c:	b004943a 	slli	r2,r22,16
 8015290:	0007883a 	mov	r3,zero
 8015294:	1404b03a 	or	r2,r2,r16
 8015298:	00005e06 	br	8015414 <__udivdi3+0x2c8>
 801529c:	29c05b36 	bltu	r5,r7,801540c <__udivdi3+0x2c0>
 80152a0:	00bfffd4 	movui	r2,65535
 80152a4:	11c0672e 	bgeu	r2,r7,8015444 <__udivdi3+0x2f8>
 80152a8:	00804034 	movhi	r2,256
 80152ac:	10bfffc4 	addi	r2,r2,-1
 80152b0:	11c10a36 	bltu	r2,r7,80156dc <__udivdi3+0x590>
 80152b4:	00800404 	movi	r2,16
 80152b8:	3886d83a 	srl	r3,r7,r2
 80152bc:	010200b4 	movhi	r4,2050
 80152c0:	212aea04 	addi	r4,r4,-21592
 80152c4:	20c7883a 	add	r3,r4,r3
 80152c8:	18c00003 	ldbu	r3,0(r3)
 80152cc:	05c00804 	movi	r23,32
 80152d0:	1885883a 	add	r2,r3,r2
 80152d4:	b8afc83a 	sub	r23,r23,r2
 80152d8:	b800671e 	bne	r23,zero,8015478 <__udivdi3+0x32c>
 80152dc:	3c010536 	bltu	r7,r16,80156f4 <__udivdi3+0x5a8>
 80152e0:	9985403a 	cmpgeu	r2,r19,r6
 80152e4:	0007883a 	mov	r3,zero
 80152e8:	00004a06 	br	8015414 <__udivdi3+0x2c8>
 80152ec:	3000041e 	bne	r6,zero,8015300 <__udivdi3+0x1b4>
 80152f0:	000b883a 	mov	r5,zero
 80152f4:	01000044 	movi	r4,1
 80152f8:	80082700 	call	8008270 <__udivsi3>
 80152fc:	1023883a 	mov	r17,r2
 8015300:	00bfffd4 	movui	r2,65535
 8015304:	1440532e 	bgeu	r2,r17,8015454 <__udivdi3+0x308>
 8015308:	00804034 	movhi	r2,256
 801530c:	10bfffc4 	addi	r2,r2,-1
 8015310:	1440f436 	bltu	r2,r17,80156e4 <__udivdi3+0x598>
 8015314:	00800404 	movi	r2,16
 8015318:	8886d83a 	srl	r3,r17,r2
 801531c:	010200b4 	movhi	r4,2050
 8015320:	212aea04 	addi	r4,r4,-21592
 8015324:	20c7883a 	add	r3,r4,r3
 8015328:	18c00003 	ldbu	r3,0(r3)
 801532c:	1885883a 	add	r2,r3,r2
 8015330:	00c00804 	movi	r3,32
 8015334:	1887c83a 	sub	r3,r3,r2
 8015338:	1800a51e 	bne	r3,zero,80155d0 <__udivdi3+0x484>
 801533c:	882ad43a 	srli	r21,r17,16
 8015340:	8461c83a 	sub	r16,r16,r17
 8015344:	8d3fffcc 	andi	r20,r17,65535
 8015348:	00c00044 	movi	r3,1
 801534c:	a80b883a 	mov	r5,r21
 8015350:	8009883a 	mov	r4,r16
 8015354:	d8c00115 	stw	r3,4(sp)
 8015358:	80082d40 	call	80082d4 <__umodsi3>
 801535c:	a80b883a 	mov	r5,r21
 8015360:	8009883a 	mov	r4,r16
 8015364:	1027883a 	mov	r19,r2
 8015368:	80082700 	call	8008270 <__udivsi3>
 801536c:	a00b883a 	mov	r5,r20
 8015370:	1009883a 	mov	r4,r2
 8015374:	102d883a 	mov	r22,r2
 8015378:	800832c0 	call	800832c <__mulsi3>
 801537c:	9826943a 	slli	r19,r19,16
 8015380:	900ed43a 	srli	r7,r18,16
 8015384:	d8c00117 	ldw	r3,4(sp)
 8015388:	3cceb03a 	or	r7,r7,r19
 801538c:	3880052e 	bgeu	r7,r2,80153a4 <__udivdi3+0x258>
 8015390:	3c4f883a 	add	r7,r7,r17
 8015394:	b13fffc4 	addi	r4,r22,-1
 8015398:	3c400136 	bltu	r7,r17,80153a0 <__udivdi3+0x254>
 801539c:	3880e436 	bltu	r7,r2,8015730 <__udivdi3+0x5e4>
 80153a0:	202d883a 	mov	r22,r4
 80153a4:	38a1c83a 	sub	r16,r7,r2
 80153a8:	8009883a 	mov	r4,r16
 80153ac:	a80b883a 	mov	r5,r21
 80153b0:	d8c00115 	stw	r3,4(sp)
 80153b4:	80082d40 	call	80082d4 <__umodsi3>
 80153b8:	1027883a 	mov	r19,r2
 80153bc:	8009883a 	mov	r4,r16
 80153c0:	a80b883a 	mov	r5,r21
 80153c4:	9826943a 	slli	r19,r19,16
 80153c8:	80082700 	call	8008270 <__udivsi3>
 80153cc:	a00b883a 	mov	r5,r20
 80153d0:	1009883a 	mov	r4,r2
 80153d4:	94bfffcc 	andi	r18,r18,65535
 80153d8:	1021883a 	mov	r16,r2
 80153dc:	94e4b03a 	or	r18,r18,r19
 80153e0:	800832c0 	call	800832c <__mulsi3>
 80153e4:	d8c00117 	ldw	r3,4(sp)
 80153e8:	9080052e 	bgeu	r18,r2,8015400 <__udivdi3+0x2b4>
 80153ec:	8ca5883a 	add	r18,r17,r18
 80153f0:	813fffc4 	addi	r4,r16,-1
 80153f4:	9440ad36 	bltu	r18,r17,80156ac <__udivdi3+0x560>
 80153f8:	9080ac2e 	bgeu	r18,r2,80156ac <__udivdi3+0x560>
 80153fc:	843fff84 	addi	r16,r16,-2
 8015400:	b004943a 	slli	r2,r22,16
 8015404:	1404b03a 	or	r2,r2,r16
 8015408:	00000206 	br	8015414 <__udivdi3+0x2c8>
 801540c:	0007883a 	mov	r3,zero
 8015410:	0005883a 	mov	r2,zero
 8015414:	dfc00b17 	ldw	ra,44(sp)
 8015418:	df000a17 	ldw	fp,40(sp)
 801541c:	ddc00917 	ldw	r23,36(sp)
 8015420:	dd800817 	ldw	r22,32(sp)
 8015424:	dd400717 	ldw	r21,28(sp)
 8015428:	dd000617 	ldw	r20,24(sp)
 801542c:	dcc00517 	ldw	r19,20(sp)
 8015430:	dc800417 	ldw	r18,16(sp)
 8015434:	dc400317 	ldw	r17,12(sp)
 8015438:	dc000217 	ldw	r16,8(sp)
 801543c:	dec00c04 	addi	sp,sp,48
 8015440:	f800283a 	ret
 8015444:	00803fc4 	movi	r2,255
 8015448:	11c5803a 	cmpltu	r2,r2,r7
 801544c:	100490fa 	slli	r2,r2,3
 8015450:	003f9906 	br	80152b8 <__alt_data_end+0xfc0152b8>
 8015454:	00803fc4 	movi	r2,255
 8015458:	1445803a 	cmpltu	r2,r2,r17
 801545c:	100490fa 	slli	r2,r2,3
 8015460:	003fad06 	br	8015318 <__alt_data_end+0xfc015318>
 8015464:	00804034 	movhi	r2,256
 8015468:	10bfffc4 	addi	r2,r2,-1
 801546c:	11809f36 	bltu	r2,r6,80156ec <__udivdi3+0x5a0>
 8015470:	00800404 	movi	r2,16
 8015474:	003f4c06 	br	80151a8 <__alt_data_end+0xfc0151a8>
 8015478:	3dce983a 	sll	r7,r7,r23
 801547c:	30b8d83a 	srl	fp,r6,r2
 8015480:	80a2d83a 	srl	r17,r16,r2
 8015484:	35cc983a 	sll	r6,r6,r23
 8015488:	3f38b03a 	or	fp,r7,fp
 801548c:	e024d43a 	srli	r18,fp,16
 8015490:	9884d83a 	srl	r2,r19,r2
 8015494:	85e0983a 	sll	r16,r16,r23
 8015498:	8809883a 	mov	r4,r17
 801549c:	900b883a 	mov	r5,r18
 80154a0:	d9800015 	stw	r6,0(sp)
 80154a4:	1420b03a 	or	r16,r2,r16
 80154a8:	80082d40 	call	80082d4 <__umodsi3>
 80154ac:	900b883a 	mov	r5,r18
 80154b0:	8809883a 	mov	r4,r17
 80154b4:	1029883a 	mov	r20,r2
 80154b8:	e5bfffcc 	andi	r22,fp,65535
 80154bc:	80082700 	call	8008270 <__udivsi3>
 80154c0:	100b883a 	mov	r5,r2
 80154c4:	b009883a 	mov	r4,r22
 80154c8:	102b883a 	mov	r21,r2
 80154cc:	800832c0 	call	800832c <__mulsi3>
 80154d0:	a028943a 	slli	r20,r20,16
 80154d4:	8006d43a 	srli	r3,r16,16
 80154d8:	1d06b03a 	or	r3,r3,r20
 80154dc:	1880042e 	bgeu	r3,r2,80154f0 <__udivdi3+0x3a4>
 80154e0:	1f07883a 	add	r3,r3,fp
 80154e4:	a93fffc4 	addi	r4,r21,-1
 80154e8:	1f00892e 	bgeu	r3,fp,8015710 <__udivdi3+0x5c4>
 80154ec:	202b883a 	mov	r21,r4
 80154f0:	18a3c83a 	sub	r17,r3,r2
 80154f4:	8809883a 	mov	r4,r17
 80154f8:	900b883a 	mov	r5,r18
 80154fc:	80082d40 	call	80082d4 <__umodsi3>
 8015500:	1029883a 	mov	r20,r2
 8015504:	8809883a 	mov	r4,r17
 8015508:	900b883a 	mov	r5,r18
 801550c:	a028943a 	slli	r20,r20,16
 8015510:	80082700 	call	8008270 <__udivsi3>
 8015514:	100b883a 	mov	r5,r2
 8015518:	b009883a 	mov	r4,r22
 801551c:	843fffcc 	andi	r16,r16,65535
 8015520:	1023883a 	mov	r17,r2
 8015524:	8520b03a 	or	r16,r16,r20
 8015528:	800832c0 	call	800832c <__mulsi3>
 801552c:	8080042e 	bgeu	r16,r2,8015540 <__udivdi3+0x3f4>
 8015530:	8721883a 	add	r16,r16,fp
 8015534:	88ffffc4 	addi	r3,r17,-1
 8015538:	8700712e 	bgeu	r16,fp,8015700 <__udivdi3+0x5b4>
 801553c:	1823883a 	mov	r17,r3
 8015540:	a80e943a 	slli	r7,r21,16
 8015544:	d8c00017 	ldw	r3,0(sp)
 8015548:	80a1c83a 	sub	r16,r16,r2
 801554c:	3c64b03a 	or	r18,r7,r17
 8015550:	1d3fffcc 	andi	r20,r3,65535
 8015554:	9022d43a 	srli	r17,r18,16
 8015558:	95bfffcc 	andi	r22,r18,65535
 801555c:	a00b883a 	mov	r5,r20
 8015560:	b009883a 	mov	r4,r22
 8015564:	182ad43a 	srli	r21,r3,16
 8015568:	800832c0 	call	800832c <__mulsi3>
 801556c:	a00b883a 	mov	r5,r20
 8015570:	8809883a 	mov	r4,r17
 8015574:	1039883a 	mov	fp,r2
 8015578:	800832c0 	call	800832c <__mulsi3>
 801557c:	8809883a 	mov	r4,r17
 8015580:	a80b883a 	mov	r5,r21
 8015584:	1029883a 	mov	r20,r2
 8015588:	800832c0 	call	800832c <__mulsi3>
 801558c:	a80b883a 	mov	r5,r21
 8015590:	b009883a 	mov	r4,r22
 8015594:	1023883a 	mov	r17,r2
 8015598:	800832c0 	call	800832c <__mulsi3>
 801559c:	e006d43a 	srli	r3,fp,16
 80155a0:	1505883a 	add	r2,r2,r20
 80155a4:	1887883a 	add	r3,r3,r2
 80155a8:	1d00022e 	bgeu	r3,r20,80155b4 <__udivdi3+0x468>
 80155ac:	00800074 	movhi	r2,1
 80155b0:	88a3883a 	add	r17,r17,r2
 80155b4:	1804d43a 	srli	r2,r3,16
 80155b8:	1463883a 	add	r17,r2,r17
 80155bc:	84404436 	bltu	r16,r17,80156d0 <__udivdi3+0x584>
 80155c0:	84403e26 	beq	r16,r17,80156bc <__udivdi3+0x570>
 80155c4:	9005883a 	mov	r2,r18
 80155c8:	0007883a 	mov	r3,zero
 80155cc:	003f9106 	br	8015414 <__alt_data_end+0xfc015414>
 80155d0:	88e2983a 	sll	r17,r17,r3
 80155d4:	80aed83a 	srl	r23,r16,r2
 80155d8:	80e0983a 	sll	r16,r16,r3
 80155dc:	882ad43a 	srli	r21,r17,16
 80155e0:	9884d83a 	srl	r2,r19,r2
 80155e4:	b809883a 	mov	r4,r23
 80155e8:	a80b883a 	mov	r5,r21
 80155ec:	98e4983a 	sll	r18,r19,r3
 80155f0:	142cb03a 	or	r22,r2,r16
 80155f4:	80082d40 	call	80082d4 <__umodsi3>
 80155f8:	b809883a 	mov	r4,r23
 80155fc:	a80b883a 	mov	r5,r21
 8015600:	1027883a 	mov	r19,r2
 8015604:	8d3fffcc 	andi	r20,r17,65535
 8015608:	80082700 	call	8008270 <__udivsi3>
 801560c:	a009883a 	mov	r4,r20
 8015610:	100b883a 	mov	r5,r2
 8015614:	102f883a 	mov	r23,r2
 8015618:	800832c0 	call	800832c <__mulsi3>
 801561c:	9826943a 	slli	r19,r19,16
 8015620:	b008d43a 	srli	r4,r22,16
 8015624:	24c8b03a 	or	r4,r4,r19
 8015628:	2080062e 	bgeu	r4,r2,8015644 <__udivdi3+0x4f8>
 801562c:	2449883a 	add	r4,r4,r17
 8015630:	b8ffffc4 	addi	r3,r23,-1
 8015634:	24403c36 	bltu	r4,r17,8015728 <__udivdi3+0x5dc>
 8015638:	20803b2e 	bgeu	r4,r2,8015728 <__udivdi3+0x5dc>
 801563c:	bdffff84 	addi	r23,r23,-2
 8015640:	2449883a 	add	r4,r4,r17
 8015644:	20a1c83a 	sub	r16,r4,r2
 8015648:	a80b883a 	mov	r5,r21
 801564c:	8009883a 	mov	r4,r16
 8015650:	80082d40 	call	80082d4 <__umodsi3>
 8015654:	a80b883a 	mov	r5,r21
 8015658:	8009883a 	mov	r4,r16
 801565c:	1027883a 	mov	r19,r2
 8015660:	80082700 	call	8008270 <__udivsi3>
 8015664:	a009883a 	mov	r4,r20
 8015668:	100b883a 	mov	r5,r2
 801566c:	9826943a 	slli	r19,r19,16
 8015670:	1039883a 	mov	fp,r2
 8015674:	800832c0 	call	800832c <__mulsi3>
 8015678:	b13fffcc 	andi	r4,r22,65535
 801567c:	24c8b03a 	or	r4,r4,r19
 8015680:	2080062e 	bgeu	r4,r2,801569c <__udivdi3+0x550>
 8015684:	2449883a 	add	r4,r4,r17
 8015688:	e0ffffc4 	addi	r3,fp,-1
 801568c:	24402436 	bltu	r4,r17,8015720 <__udivdi3+0x5d4>
 8015690:	2080232e 	bgeu	r4,r2,8015720 <__udivdi3+0x5d4>
 8015694:	e73fff84 	addi	fp,fp,-2
 8015698:	2449883a 	add	r4,r4,r17
 801569c:	b82e943a 	slli	r23,r23,16
 80156a0:	20a1c83a 	sub	r16,r4,r2
 80156a4:	bf06b03a 	or	r3,r23,fp
 80156a8:	003f2806 	br	801534c <__alt_data_end+0xfc01534c>
 80156ac:	2021883a 	mov	r16,r4
 80156b0:	003f5306 	br	8015400 <__alt_data_end+0xfc015400>
 80156b4:	1821883a 	mov	r16,r3
 80156b8:	003ef406 	br	801528c <__alt_data_end+0xfc01528c>
 80156bc:	1806943a 	slli	r3,r3,16
 80156c0:	9de6983a 	sll	r19,r19,r23
 80156c4:	e73fffcc 	andi	fp,fp,65535
 80156c8:	1f07883a 	add	r3,r3,fp
 80156cc:	98ffbd2e 	bgeu	r19,r3,80155c4 <__alt_data_end+0xfc0155c4>
 80156d0:	90bfffc4 	addi	r2,r18,-1
 80156d4:	0007883a 	mov	r3,zero
 80156d8:	003f4e06 	br	8015414 <__alt_data_end+0xfc015414>
 80156dc:	00800604 	movi	r2,24
 80156e0:	003ef506 	br	80152b8 <__alt_data_end+0xfc0152b8>
 80156e4:	00800604 	movi	r2,24
 80156e8:	003f0b06 	br	8015318 <__alt_data_end+0xfc015318>
 80156ec:	00800604 	movi	r2,24
 80156f0:	003ead06 	br	80151a8 <__alt_data_end+0xfc0151a8>
 80156f4:	0007883a 	mov	r3,zero
 80156f8:	00800044 	movi	r2,1
 80156fc:	003f4506 	br	8015414 <__alt_data_end+0xfc015414>
 8015700:	80bf8e2e 	bgeu	r16,r2,801553c <__alt_data_end+0xfc01553c>
 8015704:	8c7fff84 	addi	r17,r17,-2
 8015708:	8721883a 	add	r16,r16,fp
 801570c:	003f8c06 	br	8015540 <__alt_data_end+0xfc015540>
 8015710:	18bf762e 	bgeu	r3,r2,80154ec <__alt_data_end+0xfc0154ec>
 8015714:	ad7fff84 	addi	r21,r21,-2
 8015718:	1f07883a 	add	r3,r3,fp
 801571c:	003f7406 	br	80154f0 <__alt_data_end+0xfc0154f0>
 8015720:	1839883a 	mov	fp,r3
 8015724:	003fdd06 	br	801569c <__alt_data_end+0xfc01569c>
 8015728:	182f883a 	mov	r23,r3
 801572c:	003fc506 	br	8015644 <__alt_data_end+0xfc015644>
 8015730:	b5bfff84 	addi	r22,r22,-2
 8015734:	3c4f883a 	add	r7,r7,r17
 8015738:	003f1a06 	br	80153a4 <__alt_data_end+0xfc0153a4>
 801573c:	b5bfff84 	addi	r22,r22,-2
 8015740:	1c47883a 	add	r3,r3,r17
 8015744:	003ebc06 	br	8015238 <__alt_data_end+0xfc015238>

08015748 <__umoddi3>:
 8015748:	defff304 	addi	sp,sp,-52
 801574c:	df000b15 	stw	fp,44(sp)
 8015750:	dc400415 	stw	r17,16(sp)
 8015754:	dc000315 	stw	r16,12(sp)
 8015758:	dfc00c15 	stw	ra,48(sp)
 801575c:	ddc00a15 	stw	r23,40(sp)
 8015760:	dd800915 	stw	r22,36(sp)
 8015764:	dd400815 	stw	r21,32(sp)
 8015768:	dd000715 	stw	r20,28(sp)
 801576c:	dcc00615 	stw	r19,24(sp)
 8015770:	dc800515 	stw	r18,20(sp)
 8015774:	2021883a 	mov	r16,r4
 8015778:	2823883a 	mov	r17,r5
 801577c:	2839883a 	mov	fp,r5
 8015780:	3800401e 	bne	r7,zero,8015884 <__umoddi3+0x13c>
 8015784:	3027883a 	mov	r19,r6
 8015788:	2029883a 	mov	r20,r4
 801578c:	2980552e 	bgeu	r5,r6,80158e4 <__umoddi3+0x19c>
 8015790:	00bfffd4 	movui	r2,65535
 8015794:	1180a236 	bltu	r2,r6,8015a20 <__umoddi3+0x2d8>
 8015798:	01003fc4 	movi	r4,255
 801579c:	2189803a 	cmpltu	r4,r4,r6
 80157a0:	200890fa 	slli	r4,r4,3
 80157a4:	3104d83a 	srl	r2,r6,r4
 80157a8:	00c200b4 	movhi	r3,2050
 80157ac:	18eaea04 	addi	r3,r3,-21592
 80157b0:	1885883a 	add	r2,r3,r2
 80157b4:	10c00003 	ldbu	r3,0(r2)
 80157b8:	00800804 	movi	r2,32
 80157bc:	1909883a 	add	r4,r3,r4
 80157c0:	1125c83a 	sub	r18,r2,r4
 80157c4:	90000526 	beq	r18,zero,80157dc <__umoddi3+0x94>
 80157c8:	8ca2983a 	sll	r17,r17,r18
 80157cc:	8108d83a 	srl	r4,r16,r4
 80157d0:	34a6983a 	sll	r19,r6,r18
 80157d4:	84a8983a 	sll	r20,r16,r18
 80157d8:	2478b03a 	or	fp,r4,r17
 80157dc:	982cd43a 	srli	r22,r19,16
 80157e0:	e009883a 	mov	r4,fp
 80157e4:	9dffffcc 	andi	r23,r19,65535
 80157e8:	b00b883a 	mov	r5,r22
 80157ec:	80082d40 	call	80082d4 <__umodsi3>
 80157f0:	b00b883a 	mov	r5,r22
 80157f4:	e009883a 	mov	r4,fp
 80157f8:	102b883a 	mov	r21,r2
 80157fc:	80082700 	call	8008270 <__udivsi3>
 8015800:	100b883a 	mov	r5,r2
 8015804:	b809883a 	mov	r4,r23
 8015808:	800832c0 	call	800832c <__mulsi3>
 801580c:	a82a943a 	slli	r21,r21,16
 8015810:	a006d43a 	srli	r3,r20,16
 8015814:	1d46b03a 	or	r3,r3,r21
 8015818:	1880032e 	bgeu	r3,r2,8015828 <__umoddi3+0xe0>
 801581c:	1cc7883a 	add	r3,r3,r19
 8015820:	1cc00136 	bltu	r3,r19,8015828 <__umoddi3+0xe0>
 8015824:	18813136 	bltu	r3,r2,8015cec <__umoddi3+0x5a4>
 8015828:	18a1c83a 	sub	r16,r3,r2
 801582c:	b00b883a 	mov	r5,r22
 8015830:	8009883a 	mov	r4,r16
 8015834:	80082d40 	call	80082d4 <__umodsi3>
 8015838:	b00b883a 	mov	r5,r22
 801583c:	8009883a 	mov	r4,r16
 8015840:	1023883a 	mov	r17,r2
 8015844:	80082700 	call	8008270 <__udivsi3>
 8015848:	100b883a 	mov	r5,r2
 801584c:	b809883a 	mov	r4,r23
 8015850:	8822943a 	slli	r17,r17,16
 8015854:	800832c0 	call	800832c <__mulsi3>
 8015858:	a0ffffcc 	andi	r3,r20,65535
 801585c:	1c46b03a 	or	r3,r3,r17
 8015860:	1880042e 	bgeu	r3,r2,8015874 <__umoddi3+0x12c>
 8015864:	1cc7883a 	add	r3,r3,r19
 8015868:	1cc00236 	bltu	r3,r19,8015874 <__umoddi3+0x12c>
 801586c:	1880012e 	bgeu	r3,r2,8015874 <__umoddi3+0x12c>
 8015870:	1cc7883a 	add	r3,r3,r19
 8015874:	1885c83a 	sub	r2,r3,r2
 8015878:	1484d83a 	srl	r2,r2,r18
 801587c:	0007883a 	mov	r3,zero
 8015880:	00005306 	br	80159d0 <__umoddi3+0x288>
 8015884:	29c05036 	bltu	r5,r7,80159c8 <__umoddi3+0x280>
 8015888:	00bfffd4 	movui	r2,65535
 801588c:	11c05c2e 	bgeu	r2,r7,8015a00 <__umoddi3+0x2b8>
 8015890:	00804034 	movhi	r2,256
 8015894:	10bfffc4 	addi	r2,r2,-1
 8015898:	11c10636 	bltu	r2,r7,8015cb4 <__umoddi3+0x56c>
 801589c:	01000404 	movi	r4,16
 80158a0:	3904d83a 	srl	r2,r7,r4
 80158a4:	00c200b4 	movhi	r3,2050
 80158a8:	18eaea04 	addi	r3,r3,-21592
 80158ac:	1885883a 	add	r2,r3,r2
 80158b0:	14c00003 	ldbu	r19,0(r2)
 80158b4:	00c00804 	movi	r3,32
 80158b8:	9927883a 	add	r19,r19,r4
 80158bc:	1ce9c83a 	sub	r20,r3,r19
 80158c0:	a0005c1e 	bne	r20,zero,8015a34 <__umoddi3+0x2ec>
 80158c4:	3c400136 	bltu	r7,r17,80158cc <__umoddi3+0x184>
 80158c8:	81810a36 	bltu	r16,r6,8015cf4 <__umoddi3+0x5ac>
 80158cc:	8185c83a 	sub	r2,r16,r6
 80158d0:	89e3c83a 	sub	r17,r17,r7
 80158d4:	8089803a 	cmpltu	r4,r16,r2
 80158d8:	8939c83a 	sub	fp,r17,r4
 80158dc:	e007883a 	mov	r3,fp
 80158e0:	00003b06 	br	80159d0 <__umoddi3+0x288>
 80158e4:	3000041e 	bne	r6,zero,80158f8 <__umoddi3+0x1b0>
 80158e8:	000b883a 	mov	r5,zero
 80158ec:	01000044 	movi	r4,1
 80158f0:	80082700 	call	8008270 <__udivsi3>
 80158f4:	1027883a 	mov	r19,r2
 80158f8:	00bfffd4 	movui	r2,65535
 80158fc:	14c0442e 	bgeu	r2,r19,8015a10 <__umoddi3+0x2c8>
 8015900:	00804034 	movhi	r2,256
 8015904:	10bfffc4 	addi	r2,r2,-1
 8015908:	14c0ec36 	bltu	r2,r19,8015cbc <__umoddi3+0x574>
 801590c:	00800404 	movi	r2,16
 8015910:	9886d83a 	srl	r3,r19,r2
 8015914:	010200b4 	movhi	r4,2050
 8015918:	212aea04 	addi	r4,r4,-21592
 801591c:	20c7883a 	add	r3,r4,r3
 8015920:	18c00003 	ldbu	r3,0(r3)
 8015924:	1887883a 	add	r3,r3,r2
 8015928:	00800804 	movi	r2,32
 801592c:	10e5c83a 	sub	r18,r2,r3
 8015930:	9000ab1e 	bne	r18,zero,8015be0 <__umoddi3+0x498>
 8015934:	982cd43a 	srli	r22,r19,16
 8015938:	8ce3c83a 	sub	r17,r17,r19
 801593c:	9dffffcc 	andi	r23,r19,65535
 8015940:	b00b883a 	mov	r5,r22
 8015944:	8809883a 	mov	r4,r17
 8015948:	80082d40 	call	80082d4 <__umodsi3>
 801594c:	b00b883a 	mov	r5,r22
 8015950:	8809883a 	mov	r4,r17
 8015954:	102b883a 	mov	r21,r2
 8015958:	80082700 	call	8008270 <__udivsi3>
 801595c:	b80b883a 	mov	r5,r23
 8015960:	1009883a 	mov	r4,r2
 8015964:	800832c0 	call	800832c <__mulsi3>
 8015968:	a82a943a 	slli	r21,r21,16
 801596c:	a006d43a 	srli	r3,r20,16
 8015970:	1d46b03a 	or	r3,r3,r21
 8015974:	1880042e 	bgeu	r3,r2,8015988 <__umoddi3+0x240>
 8015978:	1cc7883a 	add	r3,r3,r19
 801597c:	1cc00236 	bltu	r3,r19,8015988 <__umoddi3+0x240>
 8015980:	1880012e 	bgeu	r3,r2,8015988 <__umoddi3+0x240>
 8015984:	1cc7883a 	add	r3,r3,r19
 8015988:	18a1c83a 	sub	r16,r3,r2
 801598c:	b00b883a 	mov	r5,r22
 8015990:	8009883a 	mov	r4,r16
 8015994:	80082d40 	call	80082d4 <__umodsi3>
 8015998:	1023883a 	mov	r17,r2
 801599c:	b00b883a 	mov	r5,r22
 80159a0:	8009883a 	mov	r4,r16
 80159a4:	80082700 	call	8008270 <__udivsi3>
 80159a8:	8822943a 	slli	r17,r17,16
 80159ac:	b80b883a 	mov	r5,r23
 80159b0:	1009883a 	mov	r4,r2
 80159b4:	800832c0 	call	800832c <__mulsi3>
 80159b8:	a53fffcc 	andi	r20,r20,65535
 80159bc:	a446b03a 	or	r3,r20,r17
 80159c0:	18bfac2e 	bgeu	r3,r2,8015874 <__alt_data_end+0xfc015874>
 80159c4:	003fa706 	br	8015864 <__alt_data_end+0xfc015864>
 80159c8:	2005883a 	mov	r2,r4
 80159cc:	2807883a 	mov	r3,r5
 80159d0:	dfc00c17 	ldw	ra,48(sp)
 80159d4:	df000b17 	ldw	fp,44(sp)
 80159d8:	ddc00a17 	ldw	r23,40(sp)
 80159dc:	dd800917 	ldw	r22,36(sp)
 80159e0:	dd400817 	ldw	r21,32(sp)
 80159e4:	dd000717 	ldw	r20,28(sp)
 80159e8:	dcc00617 	ldw	r19,24(sp)
 80159ec:	dc800517 	ldw	r18,20(sp)
 80159f0:	dc400417 	ldw	r17,16(sp)
 80159f4:	dc000317 	ldw	r16,12(sp)
 80159f8:	dec00d04 	addi	sp,sp,52
 80159fc:	f800283a 	ret
 8015a00:	04c03fc4 	movi	r19,255
 8015a04:	99c9803a 	cmpltu	r4,r19,r7
 8015a08:	200890fa 	slli	r4,r4,3
 8015a0c:	003fa406 	br	80158a0 <__alt_data_end+0xfc0158a0>
 8015a10:	00803fc4 	movi	r2,255
 8015a14:	14c5803a 	cmpltu	r2,r2,r19
 8015a18:	100490fa 	slli	r2,r2,3
 8015a1c:	003fbc06 	br	8015910 <__alt_data_end+0xfc015910>
 8015a20:	00804034 	movhi	r2,256
 8015a24:	10bfffc4 	addi	r2,r2,-1
 8015a28:	1180a636 	bltu	r2,r6,8015cc4 <__umoddi3+0x57c>
 8015a2c:	01000404 	movi	r4,16
 8015a30:	003f5c06 	br	80157a4 <__alt_data_end+0xfc0157a4>
 8015a34:	3d0e983a 	sll	r7,r7,r20
 8015a38:	34ead83a 	srl	r21,r6,r19
 8015a3c:	8cc6d83a 	srl	r3,r17,r19
 8015a40:	8d10983a 	sll	r8,r17,r20
 8015a44:	3d6ab03a 	or	r21,r7,r21
 8015a48:	a82cd43a 	srli	r22,r21,16
 8015a4c:	84e2d83a 	srl	r17,r16,r19
 8015a50:	1809883a 	mov	r4,r3
 8015a54:	b00b883a 	mov	r5,r22
 8015a58:	8a22b03a 	or	r17,r17,r8
 8015a5c:	3524983a 	sll	r18,r6,r20
 8015a60:	dc400015 	stw	r17,0(sp)
 8015a64:	d8c00115 	stw	r3,4(sp)
 8015a68:	80082d40 	call	80082d4 <__umodsi3>
 8015a6c:	d8c00117 	ldw	r3,4(sp)
 8015a70:	b00b883a 	mov	r5,r22
 8015a74:	1039883a 	mov	fp,r2
 8015a78:	1809883a 	mov	r4,r3
 8015a7c:	80082700 	call	8008270 <__udivsi3>
 8015a80:	adffffcc 	andi	r23,r21,65535
 8015a84:	100b883a 	mov	r5,r2
 8015a88:	b809883a 	mov	r4,r23
 8015a8c:	1023883a 	mov	r17,r2
 8015a90:	800832c0 	call	800832c <__mulsi3>
 8015a94:	d9400017 	ldw	r5,0(sp)
 8015a98:	e008943a 	slli	r4,fp,16
 8015a9c:	8520983a 	sll	r16,r16,r20
 8015aa0:	2806d43a 	srli	r3,r5,16
 8015aa4:	1906b03a 	or	r3,r3,r4
 8015aa8:	1880042e 	bgeu	r3,r2,8015abc <__umoddi3+0x374>
 8015aac:	1d47883a 	add	r3,r3,r21
 8015ab0:	893fffc4 	addi	r4,r17,-1
 8015ab4:	1d40892e 	bgeu	r3,r21,8015cdc <__umoddi3+0x594>
 8015ab8:	2023883a 	mov	r17,r4
 8015abc:	18b9c83a 	sub	fp,r3,r2
 8015ac0:	b00b883a 	mov	r5,r22
 8015ac4:	e009883a 	mov	r4,fp
 8015ac8:	80082d40 	call	80082d4 <__umodsi3>
 8015acc:	b00b883a 	mov	r5,r22
 8015ad0:	e009883a 	mov	r4,fp
 8015ad4:	d8800215 	stw	r2,8(sp)
 8015ad8:	80082700 	call	8008270 <__udivsi3>
 8015adc:	100b883a 	mov	r5,r2
 8015ae0:	b809883a 	mov	r4,r23
 8015ae4:	102d883a 	mov	r22,r2
 8015ae8:	800832c0 	call	800832c <__mulsi3>
 8015aec:	d9800217 	ldw	r6,8(sp)
 8015af0:	d8c00017 	ldw	r3,0(sp)
 8015af4:	300c943a 	slli	r6,r6,16
 8015af8:	1a3fffcc 	andi	r8,r3,65535
 8015afc:	4190b03a 	or	r8,r8,r6
 8015b00:	4080042e 	bgeu	r8,r2,8015b14 <__umoddi3+0x3cc>
 8015b04:	4551883a 	add	r8,r8,r21
 8015b08:	b0ffffc4 	addi	r3,r22,-1
 8015b0c:	45406f2e 	bgeu	r8,r21,8015ccc <__umoddi3+0x584>
 8015b10:	182d883a 	mov	r22,r3
 8015b14:	880e943a 	slli	r7,r17,16
 8015b18:	9006d43a 	srli	r3,r18,16
 8015b1c:	91bfffcc 	andi	r6,r18,65535
 8015b20:	3dacb03a 	or	r22,r7,r22
 8015b24:	b02ed43a 	srli	r23,r22,16
 8015b28:	b5bfffcc 	andi	r22,r22,65535
 8015b2c:	300b883a 	mov	r5,r6
 8015b30:	b009883a 	mov	r4,r22
 8015b34:	40a3c83a 	sub	r17,r8,r2
 8015b38:	d8c00115 	stw	r3,4(sp)
 8015b3c:	d9800215 	stw	r6,8(sp)
 8015b40:	800832c0 	call	800832c <__mulsi3>
 8015b44:	d9800217 	ldw	r6,8(sp)
 8015b48:	b809883a 	mov	r4,r23
 8015b4c:	1039883a 	mov	fp,r2
 8015b50:	300b883a 	mov	r5,r6
 8015b54:	800832c0 	call	800832c <__mulsi3>
 8015b58:	d8c00117 	ldw	r3,4(sp)
 8015b5c:	b809883a 	mov	r4,r23
 8015b60:	d8800215 	stw	r2,8(sp)
 8015b64:	180b883a 	mov	r5,r3
 8015b68:	800832c0 	call	800832c <__mulsi3>
 8015b6c:	d8c00117 	ldw	r3,4(sp)
 8015b70:	b009883a 	mov	r4,r22
 8015b74:	102f883a 	mov	r23,r2
 8015b78:	180b883a 	mov	r5,r3
 8015b7c:	800832c0 	call	800832c <__mulsi3>
 8015b80:	d9800217 	ldw	r6,8(sp)
 8015b84:	e006d43a 	srli	r3,fp,16
 8015b88:	1185883a 	add	r2,r2,r6
 8015b8c:	1885883a 	add	r2,r3,r2
 8015b90:	1180022e 	bgeu	r2,r6,8015b9c <__umoddi3+0x454>
 8015b94:	00c00074 	movhi	r3,1
 8015b98:	b8ef883a 	add	r23,r23,r3
 8015b9c:	1006d43a 	srli	r3,r2,16
 8015ba0:	1004943a 	slli	r2,r2,16
 8015ba4:	e73fffcc 	andi	fp,fp,65535
 8015ba8:	1dc7883a 	add	r3,r3,r23
 8015bac:	1739883a 	add	fp,r2,fp
 8015bb0:	88c03a36 	bltu	r17,r3,8015c9c <__umoddi3+0x554>
 8015bb4:	88c05126 	beq	r17,r3,8015cfc <__umoddi3+0x5b4>
 8015bb8:	88c9c83a 	sub	r4,r17,r3
 8015bbc:	e00f883a 	mov	r7,fp
 8015bc0:	81cfc83a 	sub	r7,r16,r7
 8015bc4:	81c7803a 	cmpltu	r3,r16,r7
 8015bc8:	20c7c83a 	sub	r3,r4,r3
 8015bcc:	1cc4983a 	sll	r2,r3,r19
 8015bd0:	3d0ed83a 	srl	r7,r7,r20
 8015bd4:	1d06d83a 	srl	r3,r3,r20
 8015bd8:	11c4b03a 	or	r2,r2,r7
 8015bdc:	003f7c06 	br	80159d0 <__alt_data_end+0xfc0159d0>
 8015be0:	9ca6983a 	sll	r19,r19,r18
 8015be4:	88f8d83a 	srl	fp,r17,r3
 8015be8:	80c4d83a 	srl	r2,r16,r3
 8015bec:	982cd43a 	srli	r22,r19,16
 8015bf0:	8ca2983a 	sll	r17,r17,r18
 8015bf4:	e009883a 	mov	r4,fp
 8015bf8:	b00b883a 	mov	r5,r22
 8015bfc:	146ab03a 	or	r21,r2,r17
 8015c00:	80082d40 	call	80082d4 <__umodsi3>
 8015c04:	b00b883a 	mov	r5,r22
 8015c08:	e009883a 	mov	r4,fp
 8015c0c:	1029883a 	mov	r20,r2
 8015c10:	9dffffcc 	andi	r23,r19,65535
 8015c14:	80082700 	call	8008270 <__udivsi3>
 8015c18:	b809883a 	mov	r4,r23
 8015c1c:	100b883a 	mov	r5,r2
 8015c20:	800832c0 	call	800832c <__mulsi3>
 8015c24:	a008943a 	slli	r4,r20,16
 8015c28:	a806d43a 	srli	r3,r21,16
 8015c2c:	84a8983a 	sll	r20,r16,r18
 8015c30:	1906b03a 	or	r3,r3,r4
 8015c34:	1880042e 	bgeu	r3,r2,8015c48 <__umoddi3+0x500>
 8015c38:	1cc7883a 	add	r3,r3,r19
 8015c3c:	1cc00236 	bltu	r3,r19,8015c48 <__umoddi3+0x500>
 8015c40:	1880012e 	bgeu	r3,r2,8015c48 <__umoddi3+0x500>
 8015c44:	1cc7883a 	add	r3,r3,r19
 8015c48:	18a3c83a 	sub	r17,r3,r2
 8015c4c:	b00b883a 	mov	r5,r22
 8015c50:	8809883a 	mov	r4,r17
 8015c54:	80082d40 	call	80082d4 <__umodsi3>
 8015c58:	b00b883a 	mov	r5,r22
 8015c5c:	8809883a 	mov	r4,r17
 8015c60:	1021883a 	mov	r16,r2
 8015c64:	80082700 	call	8008270 <__udivsi3>
 8015c68:	100b883a 	mov	r5,r2
 8015c6c:	b809883a 	mov	r4,r23
 8015c70:	8020943a 	slli	r16,r16,16
 8015c74:	800832c0 	call	800832c <__mulsi3>
 8015c78:	a8ffffcc 	andi	r3,r21,65535
 8015c7c:	1c06b03a 	or	r3,r3,r16
 8015c80:	1880042e 	bgeu	r3,r2,8015c94 <__umoddi3+0x54c>
 8015c84:	1cc7883a 	add	r3,r3,r19
 8015c88:	1cc00236 	bltu	r3,r19,8015c94 <__umoddi3+0x54c>
 8015c8c:	1880012e 	bgeu	r3,r2,8015c94 <__umoddi3+0x54c>
 8015c90:	1cc7883a 	add	r3,r3,r19
 8015c94:	18a3c83a 	sub	r17,r3,r2
 8015c98:	003f2906 	br	8015940 <__alt_data_end+0xfc015940>
 8015c9c:	e48fc83a 	sub	r7,fp,r18
 8015ca0:	1d49c83a 	sub	r4,r3,r21
 8015ca4:	e1f9803a 	cmpltu	fp,fp,r7
 8015ca8:	2739c83a 	sub	fp,r4,fp
 8015cac:	8f09c83a 	sub	r4,r17,fp
 8015cb0:	003fc306 	br	8015bc0 <__alt_data_end+0xfc015bc0>
 8015cb4:	01000604 	movi	r4,24
 8015cb8:	003ef906 	br	80158a0 <__alt_data_end+0xfc0158a0>
 8015cbc:	00800604 	movi	r2,24
 8015cc0:	003f1306 	br	8015910 <__alt_data_end+0xfc015910>
 8015cc4:	01000604 	movi	r4,24
 8015cc8:	003eb606 	br	80157a4 <__alt_data_end+0xfc0157a4>
 8015ccc:	40bf902e 	bgeu	r8,r2,8015b10 <__alt_data_end+0xfc015b10>
 8015cd0:	b5bfff84 	addi	r22,r22,-2
 8015cd4:	4551883a 	add	r8,r8,r21
 8015cd8:	003f8e06 	br	8015b14 <__alt_data_end+0xfc015b14>
 8015cdc:	18bf762e 	bgeu	r3,r2,8015ab8 <__alt_data_end+0xfc015ab8>
 8015ce0:	8c7fff84 	addi	r17,r17,-2
 8015ce4:	1d47883a 	add	r3,r3,r21
 8015ce8:	003f7406 	br	8015abc <__alt_data_end+0xfc015abc>
 8015cec:	1cc7883a 	add	r3,r3,r19
 8015cf0:	003ecd06 	br	8015828 <__alt_data_end+0xfc015828>
 8015cf4:	8005883a 	mov	r2,r16
 8015cf8:	003ef806 	br	80158dc <__alt_data_end+0xfc0158dc>
 8015cfc:	873fe736 	bltu	r16,fp,8015c9c <__alt_data_end+0xfc015c9c>
 8015d00:	e00f883a 	mov	r7,fp
 8015d04:	0009883a 	mov	r4,zero
 8015d08:	003fad06 	br	8015bc0 <__alt_data_end+0xfc015bc0>

08015d0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015d0c:	defffe04 	addi	sp,sp,-8
 8015d10:	dfc00115 	stw	ra,4(sp)
 8015d14:	df000015 	stw	fp,0(sp)
 8015d18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015d1c:	d0a01117 	ldw	r2,-32700(gp)
 8015d20:	10000326 	beq	r2,zero,8015d30 <alt_get_errno+0x24>
 8015d24:	d0a01117 	ldw	r2,-32700(gp)
 8015d28:	103ee83a 	callr	r2
 8015d2c:	00000106 	br	8015d34 <alt_get_errno+0x28>
 8015d30:	d0a76204 	addi	r2,gp,-25208
}
 8015d34:	e037883a 	mov	sp,fp
 8015d38:	dfc00117 	ldw	ra,4(sp)
 8015d3c:	df000017 	ldw	fp,0(sp)
 8015d40:	dec00204 	addi	sp,sp,8
 8015d44:	f800283a 	ret

08015d48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015d48:	defffb04 	addi	sp,sp,-20
 8015d4c:	dfc00415 	stw	ra,16(sp)
 8015d50:	df000315 	stw	fp,12(sp)
 8015d54:	df000304 	addi	fp,sp,12
 8015d58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8015d5c:	e0bfff17 	ldw	r2,-4(fp)
 8015d60:	10000816 	blt	r2,zero,8015d84 <close+0x3c>
 8015d64:	01400304 	movi	r5,12
 8015d68:	e13fff17 	ldw	r4,-4(fp)
 8015d6c:	800832c0 	call	800832c <__mulsi3>
 8015d70:	1007883a 	mov	r3,r2
 8015d74:	008200b4 	movhi	r2,2050
 8015d78:	10ae5004 	addi	r2,r2,-18112
 8015d7c:	1885883a 	add	r2,r3,r2
 8015d80:	00000106 	br	8015d88 <close+0x40>
 8015d84:	0005883a 	mov	r2,zero
 8015d88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8015d8c:	e0bffd17 	ldw	r2,-12(fp)
 8015d90:	10001926 	beq	r2,zero,8015df8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8015d94:	e0bffd17 	ldw	r2,-12(fp)
 8015d98:	10800017 	ldw	r2,0(r2)
 8015d9c:	10800417 	ldw	r2,16(r2)
 8015da0:	10000626 	beq	r2,zero,8015dbc <close+0x74>
 8015da4:	e0bffd17 	ldw	r2,-12(fp)
 8015da8:	10800017 	ldw	r2,0(r2)
 8015dac:	10800417 	ldw	r2,16(r2)
 8015db0:	e13ffd17 	ldw	r4,-12(fp)
 8015db4:	103ee83a 	callr	r2
 8015db8:	00000106 	br	8015dc0 <close+0x78>
 8015dbc:	0005883a 	mov	r2,zero
 8015dc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015dc4:	e13fff17 	ldw	r4,-4(fp)
 8015dc8:	80164300 	call	8016430 <alt_release_fd>
    if (rval < 0)
 8015dcc:	e0bffe17 	ldw	r2,-8(fp)
 8015dd0:	1000070e 	bge	r2,zero,8015df0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015dd4:	8015d0c0 	call	8015d0c <alt_get_errno>
 8015dd8:	1007883a 	mov	r3,r2
 8015ddc:	e0bffe17 	ldw	r2,-8(fp)
 8015de0:	0085c83a 	sub	r2,zero,r2
 8015de4:	18800015 	stw	r2,0(r3)
      return -1;
 8015de8:	00bfffc4 	movi	r2,-1
 8015dec:	00000706 	br	8015e0c <close+0xc4>
    }
    return 0;
 8015df0:	0005883a 	mov	r2,zero
 8015df4:	00000506 	br	8015e0c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015df8:	8015d0c0 	call	8015d0c <alt_get_errno>
 8015dfc:	1007883a 	mov	r3,r2
 8015e00:	00801444 	movi	r2,81
 8015e04:	18800015 	stw	r2,0(r3)
    return -1;
 8015e08:	00bfffc4 	movi	r2,-1
  }
}
 8015e0c:	e037883a 	mov	sp,fp
 8015e10:	dfc00117 	ldw	ra,4(sp)
 8015e14:	df000017 	ldw	fp,0(sp)
 8015e18:	dec00204 	addi	sp,sp,8
 8015e1c:	f800283a 	ret

08015e20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015e20:	defffc04 	addi	sp,sp,-16
 8015e24:	df000315 	stw	fp,12(sp)
 8015e28:	df000304 	addi	fp,sp,12
 8015e2c:	e13ffd15 	stw	r4,-12(fp)
 8015e30:	e17ffe15 	stw	r5,-8(fp)
 8015e34:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015e38:	e0bfff17 	ldw	r2,-4(fp)
}
 8015e3c:	e037883a 	mov	sp,fp
 8015e40:	df000017 	ldw	fp,0(sp)
 8015e44:	dec00104 	addi	sp,sp,4
 8015e48:	f800283a 	ret

08015e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015e4c:	defffe04 	addi	sp,sp,-8
 8015e50:	dfc00115 	stw	ra,4(sp)
 8015e54:	df000015 	stw	fp,0(sp)
 8015e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015e5c:	d0a01117 	ldw	r2,-32700(gp)
 8015e60:	10000326 	beq	r2,zero,8015e70 <alt_get_errno+0x24>
 8015e64:	d0a01117 	ldw	r2,-32700(gp)
 8015e68:	103ee83a 	callr	r2
 8015e6c:	00000106 	br	8015e74 <alt_get_errno+0x28>
 8015e70:	d0a76204 	addi	r2,gp,-25208
}
 8015e74:	e037883a 	mov	sp,fp
 8015e78:	dfc00117 	ldw	ra,4(sp)
 8015e7c:	df000017 	ldw	fp,0(sp)
 8015e80:	dec00204 	addi	sp,sp,8
 8015e84:	f800283a 	ret

08015e88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8015e88:	defffb04 	addi	sp,sp,-20
 8015e8c:	dfc00415 	stw	ra,16(sp)
 8015e90:	df000315 	stw	fp,12(sp)
 8015e94:	df000304 	addi	fp,sp,12
 8015e98:	e13ffe15 	stw	r4,-8(fp)
 8015e9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015ea0:	e0bffe17 	ldw	r2,-8(fp)
 8015ea4:	10000816 	blt	r2,zero,8015ec8 <fstat+0x40>
 8015ea8:	01400304 	movi	r5,12
 8015eac:	e13ffe17 	ldw	r4,-8(fp)
 8015eb0:	800832c0 	call	800832c <__mulsi3>
 8015eb4:	1007883a 	mov	r3,r2
 8015eb8:	008200b4 	movhi	r2,2050
 8015ebc:	10ae5004 	addi	r2,r2,-18112
 8015ec0:	1885883a 	add	r2,r3,r2
 8015ec4:	00000106 	br	8015ecc <fstat+0x44>
 8015ec8:	0005883a 	mov	r2,zero
 8015ecc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015ed0:	e0bffd17 	ldw	r2,-12(fp)
 8015ed4:	10001026 	beq	r2,zero,8015f18 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015ed8:	e0bffd17 	ldw	r2,-12(fp)
 8015edc:	10800017 	ldw	r2,0(r2)
 8015ee0:	10800817 	ldw	r2,32(r2)
 8015ee4:	10000726 	beq	r2,zero,8015f04 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015ee8:	e0bffd17 	ldw	r2,-12(fp)
 8015eec:	10800017 	ldw	r2,0(r2)
 8015ef0:	10800817 	ldw	r2,32(r2)
 8015ef4:	e17fff17 	ldw	r5,-4(fp)
 8015ef8:	e13ffd17 	ldw	r4,-12(fp)
 8015efc:	103ee83a 	callr	r2
 8015f00:	00000a06 	br	8015f2c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8015f04:	e0bfff17 	ldw	r2,-4(fp)
 8015f08:	00c80004 	movi	r3,8192
 8015f0c:	10c00115 	stw	r3,4(r2)
      return 0;
 8015f10:	0005883a 	mov	r2,zero
 8015f14:	00000506 	br	8015f2c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015f18:	8015e4c0 	call	8015e4c <alt_get_errno>
 8015f1c:	1007883a 	mov	r3,r2
 8015f20:	00801444 	movi	r2,81
 8015f24:	18800015 	stw	r2,0(r3)
    return -1;
 8015f28:	00bfffc4 	movi	r2,-1
  }
}
 8015f2c:	e037883a 	mov	sp,fp
 8015f30:	dfc00117 	ldw	ra,4(sp)
 8015f34:	df000017 	ldw	fp,0(sp)
 8015f38:	dec00204 	addi	sp,sp,8
 8015f3c:	f800283a 	ret

08015f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015f40:	defffe04 	addi	sp,sp,-8
 8015f44:	dfc00115 	stw	ra,4(sp)
 8015f48:	df000015 	stw	fp,0(sp)
 8015f4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015f50:	d0a01117 	ldw	r2,-32700(gp)
 8015f54:	10000326 	beq	r2,zero,8015f64 <alt_get_errno+0x24>
 8015f58:	d0a01117 	ldw	r2,-32700(gp)
 8015f5c:	103ee83a 	callr	r2
 8015f60:	00000106 	br	8015f68 <alt_get_errno+0x28>
 8015f64:	d0a76204 	addi	r2,gp,-25208
}
 8015f68:	e037883a 	mov	sp,fp
 8015f6c:	dfc00117 	ldw	ra,4(sp)
 8015f70:	df000017 	ldw	fp,0(sp)
 8015f74:	dec00204 	addi	sp,sp,8
 8015f78:	f800283a 	ret

08015f7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8015f7c:	deffed04 	addi	sp,sp,-76
 8015f80:	dfc01215 	stw	ra,72(sp)
 8015f84:	df001115 	stw	fp,68(sp)
 8015f88:	df001104 	addi	fp,sp,68
 8015f8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015f90:	e0bfff17 	ldw	r2,-4(fp)
 8015f94:	10000816 	blt	r2,zero,8015fb8 <isatty+0x3c>
 8015f98:	01400304 	movi	r5,12
 8015f9c:	e13fff17 	ldw	r4,-4(fp)
 8015fa0:	800832c0 	call	800832c <__mulsi3>
 8015fa4:	1007883a 	mov	r3,r2
 8015fa8:	008200b4 	movhi	r2,2050
 8015fac:	10ae5004 	addi	r2,r2,-18112
 8015fb0:	1885883a 	add	r2,r3,r2
 8015fb4:	00000106 	br	8015fbc <isatty+0x40>
 8015fb8:	0005883a 	mov	r2,zero
 8015fbc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8015fc0:	e0bfef17 	ldw	r2,-68(fp)
 8015fc4:	10000e26 	beq	r2,zero,8016000 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015fc8:	e0bfef17 	ldw	r2,-68(fp)
 8015fcc:	10800017 	ldw	r2,0(r2)
 8015fd0:	10800817 	ldw	r2,32(r2)
 8015fd4:	1000021e 	bne	r2,zero,8015fe0 <isatty+0x64>
    {
      return 1;
 8015fd8:	00800044 	movi	r2,1
 8015fdc:	00000d06 	br	8016014 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8015fe0:	e0bff004 	addi	r2,fp,-64
 8015fe4:	100b883a 	mov	r5,r2
 8015fe8:	e13fff17 	ldw	r4,-4(fp)
 8015fec:	8015e880 	call	8015e88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8015ff0:	e0bff117 	ldw	r2,-60(fp)
 8015ff4:	10880020 	cmpeqi	r2,r2,8192
 8015ff8:	10803fcc 	andi	r2,r2,255
 8015ffc:	00000506 	br	8016014 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8016000:	8015f400 	call	8015f40 <alt_get_errno>
 8016004:	1007883a 	mov	r3,r2
 8016008:	00801444 	movi	r2,81
 801600c:	18800015 	stw	r2,0(r3)
    return 0;
 8016010:	0005883a 	mov	r2,zero
  }
}
 8016014:	e037883a 	mov	sp,fp
 8016018:	dfc00117 	ldw	ra,4(sp)
 801601c:	df000017 	ldw	fp,0(sp)
 8016020:	dec00204 	addi	sp,sp,8
 8016024:	f800283a 	ret

08016028 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8016028:	defffc04 	addi	sp,sp,-16
 801602c:	df000315 	stw	fp,12(sp)
 8016030:	df000304 	addi	fp,sp,12
 8016034:	e13ffd15 	stw	r4,-12(fp)
 8016038:	e17ffe15 	stw	r5,-8(fp)
 801603c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8016040:	e0fffe17 	ldw	r3,-8(fp)
 8016044:	e0bffd17 	ldw	r2,-12(fp)
 8016048:	18800c26 	beq	r3,r2,801607c <alt_load_section+0x54>
  {
    while( to != end )
 801604c:	00000806 	br	8016070 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8016050:	e0bffe17 	ldw	r2,-8(fp)
 8016054:	10c00104 	addi	r3,r2,4
 8016058:	e0fffe15 	stw	r3,-8(fp)
 801605c:	e0fffd17 	ldw	r3,-12(fp)
 8016060:	19000104 	addi	r4,r3,4
 8016064:	e13ffd15 	stw	r4,-12(fp)
 8016068:	18c00017 	ldw	r3,0(r3)
 801606c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8016070:	e0fffe17 	ldw	r3,-8(fp)
 8016074:	e0bfff17 	ldw	r2,-4(fp)
 8016078:	18bff51e 	bne	r3,r2,8016050 <__alt_data_end+0xfc016050>
    {
      *to++ = *from++;
    }
  }
}
 801607c:	0001883a 	nop
 8016080:	e037883a 	mov	sp,fp
 8016084:	df000017 	ldw	fp,0(sp)
 8016088:	dec00104 	addi	sp,sp,4
 801608c:	f800283a 	ret

08016090 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8016090:	defffe04 	addi	sp,sp,-8
 8016094:	dfc00115 	stw	ra,4(sp)
 8016098:	df000015 	stw	fp,0(sp)
 801609c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80160a0:	018200b4 	movhi	r6,2050
 80160a4:	31b2ee04 	addi	r6,r6,-13384
 80160a8:	014200b4 	movhi	r5,2050
 80160ac:	296bb504 	addi	r5,r5,-20780
 80160b0:	010200b4 	movhi	r4,2050
 80160b4:	2132ee04 	addi	r4,r4,-13384
 80160b8:	80160280 	call	8016028 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80160bc:	01820034 	movhi	r6,2048
 80160c0:	31808c04 	addi	r6,r6,560
 80160c4:	01420034 	movhi	r5,2048
 80160c8:	29400804 	addi	r5,r5,32
 80160cc:	01020034 	movhi	r4,2048
 80160d0:	21000804 	addi	r4,r4,32
 80160d4:	80160280 	call	8016028 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80160d8:	018200b4 	movhi	r6,2050
 80160dc:	31abb504 	addi	r6,r6,-20780
 80160e0:	014200b4 	movhi	r5,2050
 80160e4:	296a0a04 	addi	r5,r5,-22488
 80160e8:	010200b4 	movhi	r4,2050
 80160ec:	212a0a04 	addi	r4,r4,-22488
 80160f0:	80160280 	call	8016028 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80160f4:	80195440 	call	8019544 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80160f8:	80197940 	call	8019794 <alt_icache_flush_all>
}
 80160fc:	0001883a 	nop
 8016100:	e037883a 	mov	sp,fp
 8016104:	dfc00117 	ldw	ra,4(sp)
 8016108:	df000017 	ldw	fp,0(sp)
 801610c:	dec00204 	addi	sp,sp,8
 8016110:	f800283a 	ret

08016114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016114:	defffe04 	addi	sp,sp,-8
 8016118:	dfc00115 	stw	ra,4(sp)
 801611c:	df000015 	stw	fp,0(sp)
 8016120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016124:	d0a01117 	ldw	r2,-32700(gp)
 8016128:	10000326 	beq	r2,zero,8016138 <alt_get_errno+0x24>
 801612c:	d0a01117 	ldw	r2,-32700(gp)
 8016130:	103ee83a 	callr	r2
 8016134:	00000106 	br	801613c <alt_get_errno+0x28>
 8016138:	d0a76204 	addi	r2,gp,-25208
}
 801613c:	e037883a 	mov	sp,fp
 8016140:	dfc00117 	ldw	ra,4(sp)
 8016144:	df000017 	ldw	fp,0(sp)
 8016148:	dec00204 	addi	sp,sp,8
 801614c:	f800283a 	ret

08016150 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8016150:	defff904 	addi	sp,sp,-28
 8016154:	dfc00615 	stw	ra,24(sp)
 8016158:	df000515 	stw	fp,20(sp)
 801615c:	df000504 	addi	fp,sp,20
 8016160:	e13ffd15 	stw	r4,-12(fp)
 8016164:	e17ffe15 	stw	r5,-8(fp)
 8016168:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 801616c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016170:	e0bffd17 	ldw	r2,-12(fp)
 8016174:	10000816 	blt	r2,zero,8016198 <lseek+0x48>
 8016178:	01400304 	movi	r5,12
 801617c:	e13ffd17 	ldw	r4,-12(fp)
 8016180:	800832c0 	call	800832c <__mulsi3>
 8016184:	1007883a 	mov	r3,r2
 8016188:	008200b4 	movhi	r2,2050
 801618c:	10ae5004 	addi	r2,r2,-18112
 8016190:	1885883a 	add	r2,r3,r2
 8016194:	00000106 	br	801619c <lseek+0x4c>
 8016198:	0005883a 	mov	r2,zero
 801619c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80161a0:	e0bffc17 	ldw	r2,-16(fp)
 80161a4:	10001026 	beq	r2,zero,80161e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80161a8:	e0bffc17 	ldw	r2,-16(fp)
 80161ac:	10800017 	ldw	r2,0(r2)
 80161b0:	10800717 	ldw	r2,28(r2)
 80161b4:	10000926 	beq	r2,zero,80161dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80161b8:	e0bffc17 	ldw	r2,-16(fp)
 80161bc:	10800017 	ldw	r2,0(r2)
 80161c0:	10800717 	ldw	r2,28(r2)
 80161c4:	e1bfff17 	ldw	r6,-4(fp)
 80161c8:	e17ffe17 	ldw	r5,-8(fp)
 80161cc:	e13ffc17 	ldw	r4,-16(fp)
 80161d0:	103ee83a 	callr	r2
 80161d4:	e0bffb15 	stw	r2,-20(fp)
 80161d8:	00000506 	br	80161f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80161dc:	00bfde84 	movi	r2,-134
 80161e0:	e0bffb15 	stw	r2,-20(fp)
 80161e4:	00000206 	br	80161f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80161e8:	00bfebc4 	movi	r2,-81
 80161ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80161f0:	e0bffb17 	ldw	r2,-20(fp)
 80161f4:	1000070e 	bge	r2,zero,8016214 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80161f8:	80161140 	call	8016114 <alt_get_errno>
 80161fc:	1007883a 	mov	r3,r2
 8016200:	e0bffb17 	ldw	r2,-20(fp)
 8016204:	0085c83a 	sub	r2,zero,r2
 8016208:	18800015 	stw	r2,0(r3)
    rc = -1;
 801620c:	00bfffc4 	movi	r2,-1
 8016210:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8016214:	e0bffb17 	ldw	r2,-20(fp)
}
 8016218:	e037883a 	mov	sp,fp
 801621c:	dfc00117 	ldw	ra,4(sp)
 8016220:	df000017 	ldw	fp,0(sp)
 8016224:	dec00204 	addi	sp,sp,8
 8016228:	f800283a 	ret

0801622c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801622c:	defffd04 	addi	sp,sp,-12
 8016230:	dfc00215 	stw	ra,8(sp)
 8016234:	df000115 	stw	fp,4(sp)
 8016238:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801623c:	0009883a 	mov	r4,zero
 8016240:	80168a80 	call	80168a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8016244:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8016248:	80168e00 	call	80168e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801624c:	018200b4 	movhi	r6,2050
 8016250:	31aba004 	addi	r6,r6,-20864
 8016254:	014200b4 	movhi	r5,2050
 8016258:	296ba004 	addi	r5,r5,-20864
 801625c:	010200b4 	movhi	r4,2050
 8016260:	212ba004 	addi	r4,r4,-20864
 8016264:	8019b380 	call	8019b38 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8016268:	80196440 	call	8019644 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801626c:	010200b4 	movhi	r4,2050
 8016270:	2125a904 	addi	r4,r4,-26972
 8016274:	801a32c0 	call	801a32c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8016278:	d0a76317 	ldw	r2,-25204(gp)
 801627c:	d0e76417 	ldw	r3,-25200(gp)
 8016280:	d1276517 	ldw	r4,-25196(gp)
 8016284:	200d883a 	mov	r6,r4
 8016288:	180b883a 	mov	r5,r3
 801628c:	1009883a 	mov	r4,r2
 8016290:	80060600 	call	8006060 <main>
 8016294:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8016298:	01000044 	movi	r4,1
 801629c:	8015d480 	call	8015d48 <close>
  exit (result);
 80162a0:	e13fff17 	ldw	r4,-4(fp)
 80162a4:	801a3400 	call	801a340 <exit>

080162a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80162a8:	defffe04 	addi	sp,sp,-8
 80162ac:	df000115 	stw	fp,4(sp)
 80162b0:	df000104 	addi	fp,sp,4
 80162b4:	e13fff15 	stw	r4,-4(fp)
}
 80162b8:	0001883a 	nop
 80162bc:	e037883a 	mov	sp,fp
 80162c0:	df000017 	ldw	fp,0(sp)
 80162c4:	dec00104 	addi	sp,sp,4
 80162c8:	f800283a 	ret

080162cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80162cc:	defffe04 	addi	sp,sp,-8
 80162d0:	df000115 	stw	fp,4(sp)
 80162d4:	df000104 	addi	fp,sp,4
 80162d8:	e13fff15 	stw	r4,-4(fp)
}
 80162dc:	0001883a 	nop
 80162e0:	e037883a 	mov	sp,fp
 80162e4:	df000017 	ldw	fp,0(sp)
 80162e8:	dec00104 	addi	sp,sp,4
 80162ec:	f800283a 	ret

080162f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80162f0:	defffe04 	addi	sp,sp,-8
 80162f4:	dfc00115 	stw	ra,4(sp)
 80162f8:	df000015 	stw	fp,0(sp)
 80162fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016300:	d0a01117 	ldw	r2,-32700(gp)
 8016304:	10000326 	beq	r2,zero,8016314 <alt_get_errno+0x24>
 8016308:	d0a01117 	ldw	r2,-32700(gp)
 801630c:	103ee83a 	callr	r2
 8016310:	00000106 	br	8016318 <alt_get_errno+0x28>
 8016314:	d0a76204 	addi	r2,gp,-25208
}
 8016318:	e037883a 	mov	sp,fp
 801631c:	dfc00117 	ldw	ra,4(sp)
 8016320:	df000017 	ldw	fp,0(sp)
 8016324:	dec00204 	addi	sp,sp,8
 8016328:	f800283a 	ret

0801632c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 801632c:	defff904 	addi	sp,sp,-28
 8016330:	dfc00615 	stw	ra,24(sp)
 8016334:	df000515 	stw	fp,20(sp)
 8016338:	df000504 	addi	fp,sp,20
 801633c:	e13ffd15 	stw	r4,-12(fp)
 8016340:	e17ffe15 	stw	r5,-8(fp)
 8016344:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016348:	e0bffd17 	ldw	r2,-12(fp)
 801634c:	10000816 	blt	r2,zero,8016370 <read+0x44>
 8016350:	01400304 	movi	r5,12
 8016354:	e13ffd17 	ldw	r4,-12(fp)
 8016358:	800832c0 	call	800832c <__mulsi3>
 801635c:	1007883a 	mov	r3,r2
 8016360:	008200b4 	movhi	r2,2050
 8016364:	10ae5004 	addi	r2,r2,-18112
 8016368:	1885883a 	add	r2,r3,r2
 801636c:	00000106 	br	8016374 <read+0x48>
 8016370:	0005883a 	mov	r2,zero
 8016374:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016378:	e0bffb17 	ldw	r2,-20(fp)
 801637c:	10002226 	beq	r2,zero,8016408 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016380:	e0bffb17 	ldw	r2,-20(fp)
 8016384:	10800217 	ldw	r2,8(r2)
 8016388:	108000cc 	andi	r2,r2,3
 801638c:	10800060 	cmpeqi	r2,r2,1
 8016390:	1000181e 	bne	r2,zero,80163f4 <read+0xc8>
        (fd->dev->read))
 8016394:	e0bffb17 	ldw	r2,-20(fp)
 8016398:	10800017 	ldw	r2,0(r2)
 801639c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80163a0:	10001426 	beq	r2,zero,80163f4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80163a4:	e0bffb17 	ldw	r2,-20(fp)
 80163a8:	10800017 	ldw	r2,0(r2)
 80163ac:	10800517 	ldw	r2,20(r2)
 80163b0:	e0ffff17 	ldw	r3,-4(fp)
 80163b4:	180d883a 	mov	r6,r3
 80163b8:	e17ffe17 	ldw	r5,-8(fp)
 80163bc:	e13ffb17 	ldw	r4,-20(fp)
 80163c0:	103ee83a 	callr	r2
 80163c4:	e0bffc15 	stw	r2,-16(fp)
 80163c8:	e0bffc17 	ldw	r2,-16(fp)
 80163cc:	1000070e 	bge	r2,zero,80163ec <read+0xc0>
        {
          ALT_ERRNO = -rval;
 80163d0:	80162f00 	call	80162f0 <alt_get_errno>
 80163d4:	1007883a 	mov	r3,r2
 80163d8:	e0bffc17 	ldw	r2,-16(fp)
 80163dc:	0085c83a 	sub	r2,zero,r2
 80163e0:	18800015 	stw	r2,0(r3)
          return -1;
 80163e4:	00bfffc4 	movi	r2,-1
 80163e8:	00000c06 	br	801641c <read+0xf0>
        }
        return rval;
 80163ec:	e0bffc17 	ldw	r2,-16(fp)
 80163f0:	00000a06 	br	801641c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80163f4:	80162f00 	call	80162f0 <alt_get_errno>
 80163f8:	1007883a 	mov	r3,r2
 80163fc:	00800344 	movi	r2,13
 8016400:	18800015 	stw	r2,0(r3)
 8016404:	00000406 	br	8016418 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8016408:	80162f00 	call	80162f0 <alt_get_errno>
 801640c:	1007883a 	mov	r3,r2
 8016410:	00801444 	movi	r2,81
 8016414:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016418:	00bfffc4 	movi	r2,-1
}
 801641c:	e037883a 	mov	sp,fp
 8016420:	dfc00117 	ldw	ra,4(sp)
 8016424:	df000017 	ldw	fp,0(sp)
 8016428:	dec00204 	addi	sp,sp,8
 801642c:	f800283a 	ret

08016430 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8016430:	defffc04 	addi	sp,sp,-16
 8016434:	dfc00315 	stw	ra,12(sp)
 8016438:	df000215 	stw	fp,8(sp)
 801643c:	dc000115 	stw	r16,4(sp)
 8016440:	df000204 	addi	fp,sp,8
 8016444:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8016448:	e0bffe17 	ldw	r2,-8(fp)
 801644c:	108000d0 	cmplti	r2,r2,3
 8016450:	1000111e 	bne	r2,zero,8016498 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8016454:	040200b4 	movhi	r16,2050
 8016458:	842e5004 	addi	r16,r16,-18112
 801645c:	e0bffe17 	ldw	r2,-8(fp)
 8016460:	01400304 	movi	r5,12
 8016464:	1009883a 	mov	r4,r2
 8016468:	800832c0 	call	800832c <__mulsi3>
 801646c:	8085883a 	add	r2,r16,r2
 8016470:	10800204 	addi	r2,r2,8
 8016474:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8016478:	040200b4 	movhi	r16,2050
 801647c:	842e5004 	addi	r16,r16,-18112
 8016480:	e0bffe17 	ldw	r2,-8(fp)
 8016484:	01400304 	movi	r5,12
 8016488:	1009883a 	mov	r4,r2
 801648c:	800832c0 	call	800832c <__mulsi3>
 8016490:	8085883a 	add	r2,r16,r2
 8016494:	10000015 	stw	zero,0(r2)
  }
}
 8016498:	0001883a 	nop
 801649c:	e6ffff04 	addi	sp,fp,-4
 80164a0:	dfc00217 	ldw	ra,8(sp)
 80164a4:	df000117 	ldw	fp,4(sp)
 80164a8:	dc000017 	ldw	r16,0(sp)
 80164ac:	dec00304 	addi	sp,sp,12
 80164b0:	f800283a 	ret

080164b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80164b4:	defff904 	addi	sp,sp,-28
 80164b8:	df000615 	stw	fp,24(sp)
 80164bc:	df000604 	addi	fp,sp,24
 80164c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80164c4:	0005303a 	rdctl	r2,status
 80164c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80164cc:	e0fffe17 	ldw	r3,-8(fp)
 80164d0:	00bfff84 	movi	r2,-2
 80164d4:	1884703a 	and	r2,r3,r2
 80164d8:	1001703a 	wrctl	status,r2
  
  return context;
 80164dc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80164e0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80164e4:	d0a01217 	ldw	r2,-32696(gp)
 80164e8:	10c000c4 	addi	r3,r2,3
 80164ec:	00bfff04 	movi	r2,-4
 80164f0:	1884703a 	and	r2,r3,r2
 80164f4:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 80164f8:	d0e01217 	ldw	r3,-32696(gp)
 80164fc:	e0bfff17 	ldw	r2,-4(fp)
 8016500:	1887883a 	add	r3,r3,r2
 8016504:	00830034 	movhi	r2,3072
 8016508:	10800004 	addi	r2,r2,0
 801650c:	10c0062e 	bgeu	r2,r3,8016528 <sbrk+0x74>
 8016510:	e0bffb17 	ldw	r2,-20(fp)
 8016514:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016518:	e0bffa17 	ldw	r2,-24(fp)
 801651c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8016520:	00bfffc4 	movi	r2,-1
 8016524:	00000b06 	br	8016554 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8016528:	d0a01217 	ldw	r2,-32696(gp)
 801652c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8016530:	d0e01217 	ldw	r3,-32696(gp)
 8016534:	e0bfff17 	ldw	r2,-4(fp)
 8016538:	1885883a 	add	r2,r3,r2
 801653c:	d0a01215 	stw	r2,-32696(gp)
 8016540:	e0bffb17 	ldw	r2,-20(fp)
 8016544:	e0bffc15 	stw	r2,-16(fp)
 8016548:	e0bffc17 	ldw	r2,-16(fp)
 801654c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8016550:	e0bffd17 	ldw	r2,-12(fp)
} 
 8016554:	e037883a 	mov	sp,fp
 8016558:	df000017 	ldw	fp,0(sp)
 801655c:	dec00104 	addi	sp,sp,4
 8016560:	f800283a 	ret

08016564 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8016564:	defffa04 	addi	sp,sp,-24
 8016568:	df000515 	stw	fp,20(sp)
 801656c:	df000504 	addi	fp,sp,20
 8016570:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016574:	0005303a 	rdctl	r2,status
 8016578:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801657c:	e0fffc17 	ldw	r3,-16(fp)
 8016580:	00bfff84 	movi	r2,-2
 8016584:	1884703a 	and	r2,r3,r2
 8016588:	1001703a 	wrctl	status,r2
  
  return context;
 801658c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8016590:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8016594:	e0bfff17 	ldw	r2,-4(fp)
 8016598:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801659c:	e0bffd17 	ldw	r2,-12(fp)
 80165a0:	10800017 	ldw	r2,0(r2)
 80165a4:	e0fffd17 	ldw	r3,-12(fp)
 80165a8:	18c00117 	ldw	r3,4(r3)
 80165ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80165b0:	e0bffd17 	ldw	r2,-12(fp)
 80165b4:	10800117 	ldw	r2,4(r2)
 80165b8:	e0fffd17 	ldw	r3,-12(fp)
 80165bc:	18c00017 	ldw	r3,0(r3)
 80165c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80165c4:	e0bffd17 	ldw	r2,-12(fp)
 80165c8:	e0fffd17 	ldw	r3,-12(fp)
 80165cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80165d0:	e0bffd17 	ldw	r2,-12(fp)
 80165d4:	e0fffd17 	ldw	r3,-12(fp)
 80165d8:	10c00015 	stw	r3,0(r2)
 80165dc:	e0bffb17 	ldw	r2,-20(fp)
 80165e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80165e4:	e0bffe17 	ldw	r2,-8(fp)
 80165e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80165ec:	0001883a 	nop
 80165f0:	e037883a 	mov	sp,fp
 80165f4:	df000017 	ldw	fp,0(sp)
 80165f8:	dec00104 	addi	sp,sp,4
 80165fc:	f800283a 	ret

08016600 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8016600:	defffb04 	addi	sp,sp,-20
 8016604:	dfc00415 	stw	ra,16(sp)
 8016608:	df000315 	stw	fp,12(sp)
 801660c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8016610:	d0a01317 	ldw	r2,-32692(gp)
 8016614:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8016618:	d0a76717 	ldw	r2,-25188(gp)
 801661c:	10800044 	addi	r2,r2,1
 8016620:	d0a76715 	stw	r2,-25188(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016624:	00002e06 	br	80166e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8016628:	e0bffd17 	ldw	r2,-12(fp)
 801662c:	10800017 	ldw	r2,0(r2)
 8016630:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8016634:	e0bffd17 	ldw	r2,-12(fp)
 8016638:	10800403 	ldbu	r2,16(r2)
 801663c:	10803fcc 	andi	r2,r2,255
 8016640:	10000426 	beq	r2,zero,8016654 <alt_tick+0x54>
 8016644:	d0a76717 	ldw	r2,-25188(gp)
 8016648:	1000021e 	bne	r2,zero,8016654 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801664c:	e0bffd17 	ldw	r2,-12(fp)
 8016650:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8016654:	e0bffd17 	ldw	r2,-12(fp)
 8016658:	10800217 	ldw	r2,8(r2)
 801665c:	d0e76717 	ldw	r3,-25188(gp)
 8016660:	18801d36 	bltu	r3,r2,80166d8 <alt_tick+0xd8>
 8016664:	e0bffd17 	ldw	r2,-12(fp)
 8016668:	10800403 	ldbu	r2,16(r2)
 801666c:	10803fcc 	andi	r2,r2,255
 8016670:	1000191e 	bne	r2,zero,80166d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8016674:	e0bffd17 	ldw	r2,-12(fp)
 8016678:	10800317 	ldw	r2,12(r2)
 801667c:	e0fffd17 	ldw	r3,-12(fp)
 8016680:	18c00517 	ldw	r3,20(r3)
 8016684:	1809883a 	mov	r4,r3
 8016688:	103ee83a 	callr	r2
 801668c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8016690:	e0bfff17 	ldw	r2,-4(fp)
 8016694:	1000031e 	bne	r2,zero,80166a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8016698:	e13ffd17 	ldw	r4,-12(fp)
 801669c:	80165640 	call	8016564 <alt_alarm_stop>
 80166a0:	00000d06 	br	80166d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80166a4:	e0bffd17 	ldw	r2,-12(fp)
 80166a8:	10c00217 	ldw	r3,8(r2)
 80166ac:	e0bfff17 	ldw	r2,-4(fp)
 80166b0:	1887883a 	add	r3,r3,r2
 80166b4:	e0bffd17 	ldw	r2,-12(fp)
 80166b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80166bc:	e0bffd17 	ldw	r2,-12(fp)
 80166c0:	10c00217 	ldw	r3,8(r2)
 80166c4:	d0a76717 	ldw	r2,-25188(gp)
 80166c8:	1880032e 	bgeu	r3,r2,80166d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80166cc:	e0bffd17 	ldw	r2,-12(fp)
 80166d0:	00c00044 	movi	r3,1
 80166d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80166d8:	e0bffe17 	ldw	r2,-8(fp)
 80166dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80166e0:	e0fffd17 	ldw	r3,-12(fp)
 80166e4:	d0a01304 	addi	r2,gp,-32692
 80166e8:	18bfcf1e 	bne	r3,r2,8016628 <__alt_data_end+0xfc016628>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80166ec:	0001883a 	nop
}
 80166f0:	0001883a 	nop
 80166f4:	e037883a 	mov	sp,fp
 80166f8:	dfc00117 	ldw	ra,4(sp)
 80166fc:	df000017 	ldw	fp,0(sp)
 8016700:	dec00204 	addi	sp,sp,8
 8016704:	f800283a 	ret

08016708 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8016708:	defffd04 	addi	sp,sp,-12
 801670c:	dfc00215 	stw	ra,8(sp)
 8016710:	df000115 	stw	fp,4(sp)
 8016714:	df000104 	addi	fp,sp,4
 8016718:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 801671c:	e13fff17 	ldw	r4,-4(fp)
 8016720:	80193ec0 	call	80193ec <alt_busy_sleep>
}
 8016724:	e037883a 	mov	sp,fp
 8016728:	dfc00117 	ldw	ra,4(sp)
 801672c:	df000017 	ldw	fp,0(sp)
 8016730:	dec00204 	addi	sp,sp,8
 8016734:	f800283a 	ret

08016738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016738:	defffe04 	addi	sp,sp,-8
 801673c:	dfc00115 	stw	ra,4(sp)
 8016740:	df000015 	stw	fp,0(sp)
 8016744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016748:	d0a01117 	ldw	r2,-32700(gp)
 801674c:	10000326 	beq	r2,zero,801675c <alt_get_errno+0x24>
 8016750:	d0a01117 	ldw	r2,-32700(gp)
 8016754:	103ee83a 	callr	r2
 8016758:	00000106 	br	8016760 <alt_get_errno+0x28>
 801675c:	d0a76204 	addi	r2,gp,-25208
}
 8016760:	e037883a 	mov	sp,fp
 8016764:	dfc00117 	ldw	ra,4(sp)
 8016768:	df000017 	ldw	fp,0(sp)
 801676c:	dec00204 	addi	sp,sp,8
 8016770:	f800283a 	ret

08016774 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8016774:	defff904 	addi	sp,sp,-28
 8016778:	dfc00615 	stw	ra,24(sp)
 801677c:	df000515 	stw	fp,20(sp)
 8016780:	df000504 	addi	fp,sp,20
 8016784:	e13ffd15 	stw	r4,-12(fp)
 8016788:	e17ffe15 	stw	r5,-8(fp)
 801678c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016790:	e0bffd17 	ldw	r2,-12(fp)
 8016794:	10000816 	blt	r2,zero,80167b8 <write+0x44>
 8016798:	01400304 	movi	r5,12
 801679c:	e13ffd17 	ldw	r4,-12(fp)
 80167a0:	800832c0 	call	800832c <__mulsi3>
 80167a4:	1007883a 	mov	r3,r2
 80167a8:	008200b4 	movhi	r2,2050
 80167ac:	10ae5004 	addi	r2,r2,-18112
 80167b0:	1885883a 	add	r2,r3,r2
 80167b4:	00000106 	br	80167bc <write+0x48>
 80167b8:	0005883a 	mov	r2,zero
 80167bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80167c0:	e0bffb17 	ldw	r2,-20(fp)
 80167c4:	10002126 	beq	r2,zero,801684c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80167c8:	e0bffb17 	ldw	r2,-20(fp)
 80167cc:	10800217 	ldw	r2,8(r2)
 80167d0:	108000cc 	andi	r2,r2,3
 80167d4:	10001826 	beq	r2,zero,8016838 <write+0xc4>
 80167d8:	e0bffb17 	ldw	r2,-20(fp)
 80167dc:	10800017 	ldw	r2,0(r2)
 80167e0:	10800617 	ldw	r2,24(r2)
 80167e4:	10001426 	beq	r2,zero,8016838 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80167e8:	e0bffb17 	ldw	r2,-20(fp)
 80167ec:	10800017 	ldw	r2,0(r2)
 80167f0:	10800617 	ldw	r2,24(r2)
 80167f4:	e0ffff17 	ldw	r3,-4(fp)
 80167f8:	180d883a 	mov	r6,r3
 80167fc:	e17ffe17 	ldw	r5,-8(fp)
 8016800:	e13ffb17 	ldw	r4,-20(fp)
 8016804:	103ee83a 	callr	r2
 8016808:	e0bffc15 	stw	r2,-16(fp)
 801680c:	e0bffc17 	ldw	r2,-16(fp)
 8016810:	1000070e 	bge	r2,zero,8016830 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8016814:	80167380 	call	8016738 <alt_get_errno>
 8016818:	1007883a 	mov	r3,r2
 801681c:	e0bffc17 	ldw	r2,-16(fp)
 8016820:	0085c83a 	sub	r2,zero,r2
 8016824:	18800015 	stw	r2,0(r3)
        return -1;
 8016828:	00bfffc4 	movi	r2,-1
 801682c:	00000c06 	br	8016860 <write+0xec>
      }
      return rval;
 8016830:	e0bffc17 	ldw	r2,-16(fp)
 8016834:	00000a06 	br	8016860 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8016838:	80167380 	call	8016738 <alt_get_errno>
 801683c:	1007883a 	mov	r3,r2
 8016840:	00800344 	movi	r2,13
 8016844:	18800015 	stw	r2,0(r3)
 8016848:	00000406 	br	801685c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 801684c:	80167380 	call	8016738 <alt_get_errno>
 8016850:	1007883a 	mov	r3,r2
 8016854:	00801444 	movi	r2,81
 8016858:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801685c:	00bfffc4 	movi	r2,-1
}
 8016860:	e037883a 	mov	sp,fp
 8016864:	dfc00117 	ldw	ra,4(sp)
 8016868:	df000017 	ldw	fp,0(sp)
 801686c:	dec00204 	addi	sp,sp,8
 8016870:	f800283a 	ret

08016874 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8016874:	defffd04 	addi	sp,sp,-12
 8016878:	dfc00215 	stw	ra,8(sp)
 801687c:	df000115 	stw	fp,4(sp)
 8016880:	df000104 	addi	fp,sp,4
 8016884:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8016888:	d1600e04 	addi	r5,gp,-32712
 801688c:	e13fff17 	ldw	r4,-4(fp)
 8016890:	80195a00 	call	80195a0 <alt_dev_llist_insert>
}
 8016894:	e037883a 	mov	sp,fp
 8016898:	dfc00117 	ldw	ra,4(sp)
 801689c:	df000017 	ldw	fp,0(sp)
 80168a0:	dec00204 	addi	sp,sp,8
 80168a4:	f800283a 	ret

080168a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80168a8:	defffd04 	addi	sp,sp,-12
 80168ac:	dfc00215 	stw	ra,8(sp)
 80168b0:	df000115 	stw	fp,4(sp)
 80168b4:	df000104 	addi	fp,sp,4
 80168b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80168bc:	801a0a00 	call	801a0a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80168c0:	00800044 	movi	r2,1
 80168c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80168c8:	0001883a 	nop
 80168cc:	e037883a 	mov	sp,fp
 80168d0:	dfc00117 	ldw	ra,4(sp)
 80168d4:	df000017 	ldw	fp,0(sp)
 80168d8:	dec00204 	addi	sp,sp,8
 80168dc:	f800283a 	ret

080168e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80168e0:	defffe04 	addi	sp,sp,-8
 80168e4:	dfc00115 	stw	ra,4(sp)
 80168e8:	df000015 	stw	fp,0(sp)
 80168ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80168f0:	01c0fa04 	movi	r7,1000
 80168f4:	01800084 	movi	r6,2
 80168f8:	000b883a 	mov	r5,zero
 80168fc:	01004004 	movi	r4,256
 8016900:	80192440 	call	8019244 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 8016904:	010200b4 	movhi	r4,2050
 8016908:	212eb004 	addi	r4,r4,-17728
 801690c:	8016ba00 	call	8016ba0 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8016910:	01800044 	movi	r6,1
 8016914:	000b883a 	mov	r5,zero
 8016918:	010200b4 	movhi	r4,2050
 801691c:	212ec804 	addi	r4,r4,-17632
 8016920:	80186cc0 	call	80186cc <altera_avalon_jtag_uart_init>
 8016924:	010200b4 	movhi	r4,2050
 8016928:	212ebe04 	addi	r4,r4,-17672
 801692c:	80168740 	call	8016874 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8016930:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8016934:	0001883a 	nop
}
 8016938:	0001883a 	nop
 801693c:	e037883a 	mov	sp,fp
 8016940:	dfc00117 	ldw	ra,4(sp)
 8016944:	df000017 	ldw	fp,0(sp)
 8016948:	dec00204 	addi	sp,sp,8
 801694c:	f800283a 	ret

08016950 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 8016950:	defff904 	addi	sp,sp,-28
 8016954:	dfc00615 	stw	ra,24(sp)
 8016958:	df000515 	stw	fp,20(sp)
 801695c:	df000504 	addi	fp,sp,20
 8016960:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 8016964:	008000b4 	movhi	r2,2
 8016968:	10a1a804 	addi	r2,r2,-31072
 801696c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 8016970:	e0bfff17 	ldw	r2,-4(fp)
 8016974:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8016978:	e0bffc17 	ldw	r2,-16(fp)
 801697c:	10800717 	ldw	r2,28(r2)
 8016980:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8016984:	e0bffd17 	ldw	r2,-12(fp)
 8016988:	10800217 	ldw	r2,8(r2)
 801698c:	10800098 	cmpnei	r2,r2,2
 8016990:	1000251e 	bne	r2,zero,8016a28 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8016994:	e0bffd17 	ldw	r2,-12(fp)
 8016998:	10c00017 	ldw	r3,0(r2)
 801699c:	e0bffd17 	ldw	r2,-12(fp)
 80169a0:	10800117 	ldw	r2,4(r2)
 80169a4:	e13ffe04 	addi	r4,fp,-8
 80169a8:	200f883a 	mov	r7,r4
 80169ac:	100d883a 	mov	r6,r2
 80169b0:	180b883a 	mov	r5,r3
 80169b4:	e13ffc17 	ldw	r4,-16(fp)
 80169b8:	80171000 	call	8017100 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 80169bc:	e0bffd17 	ldw	r2,-12(fp)
 80169c0:	10c00117 	ldw	r3,4(r2)
 80169c4:	e0bffe17 	ldw	r2,-8(fp)
 80169c8:	1887c83a 	sub	r3,r3,r2
 80169cc:	e0bffd17 	ldw	r2,-12(fp)
 80169d0:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 80169d4:	e0bffd17 	ldw	r2,-12(fp)
 80169d8:	10c00017 	ldw	r3,0(r2)
 80169dc:	e0bffe17 	ldw	r2,-8(fp)
 80169e0:	1887883a 	add	r3,r3,r2
 80169e4:	e0bffd17 	ldw	r2,-12(fp)
 80169e8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 80169ec:	e0bffd17 	ldw	r2,-12(fp)
 80169f0:	10800117 	ldw	r2,4(r2)
 80169f4:	10000c26 	beq	r2,zero,8016a28 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80169f8:	01400704 	movi	r5,28
 80169fc:	e13ffc17 	ldw	r4,-16(fp)
 8016a00:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 8016a04:	01400084 	movi	r5,2
 8016a08:	e13ffc17 	ldw	r4,-16(fp)
 8016a0c:	801835c0 	call	801835c <alt_avalon_i2c_int_enable>
 8016a10:	00000e06 	br	8016a4c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 8016a14:	e0bffb17 	ldw	r2,-20(fp)
 8016a18:	10bfffc4 	addi	r2,r2,-1
 8016a1c:	e0bffb15 	stw	r2,-20(fp)
 8016a20:	e0bffb17 	ldw	r2,-20(fp)
 8016a24:	10000426 	beq	r2,zero,8016a38 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 8016a28:	e13ffc17 	ldw	r4,-16(fp)
 8016a2c:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 8016a30:	103ff81e 	bne	r2,zero,8016a14 <__alt_data_end+0xfc016a14>
 8016a34:	00000106 	br	8016a3c <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 8016a38:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 8016a3c:	e13ffc17 	ldw	r4,-16(fp)
 8016a40:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 8016a44:	e0bffd17 	ldw	r2,-12(fp)
 8016a48:	10000215 	stw	zero,8(r2)
}
 8016a4c:	e037883a 	mov	sp,fp
 8016a50:	dfc00117 	ldw	ra,4(sp)
 8016a54:	df000017 	ldw	fp,0(sp)
 8016a58:	dec00204 	addi	sp,sp,8
 8016a5c:	f800283a 	ret

08016a60 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8016a60:	defffc04 	addi	sp,sp,-16
 8016a64:	dfc00315 	stw	ra,12(sp)
 8016a68:	df000215 	stw	fp,8(sp)
 8016a6c:	df000204 	addi	fp,sp,8
 8016a70:	e13ffe15 	stw	r4,-8(fp)
 8016a74:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 8016a78:	e0bfff17 	ldw	r2,-4(fp)
 8016a7c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8016a80:	e1ffff17 	ldw	r7,-4(fp)
 8016a84:	000d883a 	mov	r6,zero
 8016a88:	01420074 	movhi	r5,2049
 8016a8c:	295a5404 	addi	r5,r5,26960
 8016a90:	e13ffe17 	ldw	r4,-8(fp)
 8016a94:	8016b4c0 	call	8016b4c <alt_avalon_i2c_register_callback>
}
 8016a98:	0001883a 	nop
 8016a9c:	e037883a 	mov	sp,fp
 8016aa0:	dfc00117 	ldw	ra,4(sp)
 8016aa4:	df000017 	ldw	fp,0(sp)
 8016aa8:	dec00204 	addi	sp,sp,8
 8016aac:	f800283a 	ret

08016ab0 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 8016ab0:	defff904 	addi	sp,sp,-28
 8016ab4:	dfc00615 	stw	ra,24(sp)
 8016ab8:	df000515 	stw	fp,20(sp)
 8016abc:	df000504 	addi	fp,sp,20
 8016ac0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8016ac4:	e0bfff17 	ldw	r2,-4(fp)
 8016ac8:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8016acc:	014007c4 	movi	r5,31
 8016ad0:	e13ffb17 	ldw	r4,-20(fp)
 8016ad4:	80182f40 	call	80182f4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8016ad8:	01400704 	movi	r5,28
 8016adc:	e13ffb17 	ldw	r4,-20(fp)
 8016ae0:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8016ae4:	e0bffb17 	ldw	r2,-20(fp)
 8016ae8:	10800617 	ldw	r2,24(r2)
 8016aec:	10001126 	beq	r2,zero,8016b34 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016af0:	0005303a 	rdctl	r2,status
 8016af4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016af8:	e0fffd17 	ldw	r3,-12(fp)
 8016afc:	00bfff84 	movi	r2,-2
 8016b00:	1884703a 	and	r2,r3,r2
 8016b04:	1001703a 	wrctl	status,r2
  
  return context;
 8016b08:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8016b0c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 8016b10:	e0bffb17 	ldw	r2,-20(fp)
 8016b14:	10800617 	ldw	r2,24(r2)
 8016b18:	e13ffb17 	ldw	r4,-20(fp)
 8016b1c:	103ee83a 	callr	r2
 8016b20:	e0bffc17 	ldw	r2,-16(fp)
 8016b24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016b28:	e0bffe17 	ldw	r2,-8(fp)
 8016b2c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 8016b30:	0001883a 	nop
 8016b34:	0001883a 	nop
}
 8016b38:	e037883a 	mov	sp,fp
 8016b3c:	dfc00117 	ldw	ra,4(sp)
 8016b40:	df000017 	ldw	fp,0(sp)
 8016b44:	dec00204 	addi	sp,sp,8
 8016b48:	f800283a 	ret

08016b4c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 8016b4c:	defffb04 	addi	sp,sp,-20
 8016b50:	df000415 	stw	fp,16(sp)
 8016b54:	df000404 	addi	fp,sp,16
 8016b58:	e13ffc15 	stw	r4,-16(fp)
 8016b5c:	e17ffd15 	stw	r5,-12(fp)
 8016b60:	e1bffe15 	stw	r6,-8(fp)
 8016b64:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8016b68:	e0bffc17 	ldw	r2,-16(fp)
 8016b6c:	e0fffd17 	ldw	r3,-12(fp)
 8016b70:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 8016b74:	e0bffc17 	ldw	r2,-16(fp)
 8016b78:	e0ffff17 	ldw	r3,-4(fp)
 8016b7c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 8016b80:	e0bffc17 	ldw	r2,-16(fp)
 8016b84:	e0fffe17 	ldw	r3,-8(fp)
 8016b88:	10c00815 	stw	r3,32(r2)

    return ;
 8016b8c:	0001883a 	nop
}
 8016b90:	e037883a 	mov	sp,fp
 8016b94:	df000017 	ldw	fp,0(sp)
 8016b98:	dec00104 	addi	sp,sp,4
 8016b9c:	f800283a 	ret

08016ba0 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8016ba0:	defff704 	addi	sp,sp,-36
 8016ba4:	dfc00815 	stw	ra,32(sp)
 8016ba8:	df000715 	stw	fp,28(sp)
 8016bac:	df000704 	addi	fp,sp,28
 8016bb0:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8016bb4:	e13fff17 	ldw	r4,-4(fp)
 8016bb8:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8016bbc:	014007c4 	movi	r5,31
 8016bc0:	e13fff17 	ldw	r4,-4(fp)
 8016bc4:	80182f40 	call	80182f4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8016bc8:	01400704 	movi	r5,28
 8016bcc:	e13fff17 	ldw	r4,-4(fp)
 8016bd0:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8016bd4:	014000c4 	movi	r5,3
 8016bd8:	e13fff17 	ldw	r4,-4(fp)
 8016bdc:	80185000 	call	8018500 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8016be0:	014000c4 	movi	r5,3
 8016be4:	e13fff17 	ldw	r4,-4(fp)
 8016be8:	80184500 	call	8018450 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 8016bec:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 8016bf0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 8016bf4:	e0bffb04 	addi	r2,fp,-20
 8016bf8:	018000b4 	movhi	r6,2
 8016bfc:	31a1a804 	addi	r6,r6,-31072
 8016c00:	100b883a 	mov	r5,r2
 8016c04:	e13fff17 	ldw	r4,-4(fp)
 8016c08:	8016fc00 	call	8016fc0 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 8016c0c:	e0bffb04 	addi	r2,fp,-20
 8016c10:	100b883a 	mov	r5,r2
 8016c14:	e13fff17 	ldw	r4,-4(fp)
 8016c18:	8016e600 	call	8016e60 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 8016c1c:	d1601504 	addi	r5,gp,-32684
 8016c20:	e13fff17 	ldw	r4,-4(fp)
 8016c24:	80195a00 	call	80195a0 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8016c28:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8016c2c:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 8016c30:	e0bffa17 	ldw	r2,-24(fp)
 8016c34:	10000c1e 	bne	r2,zero,8016c68 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 8016c38:	e0bfff17 	ldw	r2,-4(fp)
 8016c3c:	10c00417 	ldw	r3,16(r2)
 8016c40:	e0bfff17 	ldw	r2,-4(fp)
 8016c44:	10800517 	ldw	r2,20(r2)
 8016c48:	d8000015 	stw	zero,0(sp)
 8016c4c:	e1ffff17 	ldw	r7,-4(fp)
 8016c50:	01820074 	movhi	r6,2049
 8016c54:	319aac04 	addi	r6,r6,27312
 8016c58:	100b883a 	mov	r5,r2
 8016c5c:	1809883a 	mov	r4,r3
 8016c60:	80197b40 	call	80197b4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8016c64:	00000406 	br	8016c78 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 8016c68:	010200b4 	movhi	r4,2050
 8016c6c:	212bad04 	addi	r4,r4,-20812
 8016c70:	8019e380 	call	8019e38 <alt_printf>
    }

    return;
 8016c74:	0001883a 	nop

}
 8016c78:	e037883a 	mov	sp,fp
 8016c7c:	dfc00117 	ldw	ra,4(sp)
 8016c80:	df000017 	ldw	fp,0(sp)
 8016c84:	dec00204 	addi	sp,sp,8
 8016c88:	f800283a 	ret

08016c8c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 8016c8c:	defffc04 	addi	sp,sp,-16
 8016c90:	dfc00315 	stw	ra,12(sp)
 8016c94:	df000215 	stw	fp,8(sp)
 8016c98:	df000204 	addi	fp,sp,8
 8016c9c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8016ca0:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8016ca4:	d1601504 	addi	r5,gp,-32684
 8016ca8:	e13fff17 	ldw	r4,-4(fp)
 8016cac:	80197040 	call	8019704 <alt_find_dev>
 8016cb0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8016cb4:	e0bffe17 	ldw	r2,-8(fp)
}
 8016cb8:	e037883a 	mov	sp,fp
 8016cbc:	dfc00117 	ldw	ra,4(sp)
 8016cc0:	df000017 	ldw	fp,0(sp)
 8016cc4:	dec00204 	addi	sp,sp,8
 8016cc8:	f800283a 	ret

08016ccc <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8016ccc:	defffc04 	addi	sp,sp,-16
 8016cd0:	df000315 	stw	fp,12(sp)
 8016cd4:	df000304 	addi	fp,sp,12
 8016cd8:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8016cdc:	e0bfff17 	ldw	r2,-4(fp)
 8016ce0:	10800717 	ldw	r2,28(r2)
 8016ce4:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 8016ce8:	e0bfff17 	ldw	r2,-4(fp)
 8016cec:	10800317 	ldw	r2,12(r2)
 8016cf0:	10800204 	addi	r2,r2,8
 8016cf4:	10800037 	ldwio	r2,0(r2)
 8016cf8:	1080004c 	andi	r2,r2,1
 8016cfc:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 8016d00:	e0bffe17 	ldw	r2,-8(fp)
 8016d04:	10000226 	beq	r2,zero,8016d10 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 8016d08:	00bffe44 	movi	r2,-7
 8016d0c:	00001106 	br	8016d54 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 8016d10:	e0bfff17 	ldw	r2,-4(fp)
 8016d14:	10c00617 	ldw	r3,24(r2)
 8016d18:	00820074 	movhi	r2,2049
 8016d1c:	109a5404 	addi	r2,r2,26960
 8016d20:	1880021e 	bne	r3,r2,8016d2c <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 8016d24:	e0bffd17 	ldw	r2,-12(fp)
 8016d28:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 8016d2c:	e0bfff17 	ldw	r2,-4(fp)
 8016d30:	10800317 	ldw	r2,12(r2)
 8016d34:	10800204 	addi	r2,r2,8
 8016d38:	e0ffff17 	ldw	r3,-4(fp)
 8016d3c:	18c00317 	ldw	r3,12(r3)
 8016d40:	18c00204 	addi	r3,r3,8
 8016d44:	18c00037 	ldwio	r3,0(r3)
 8016d48:	18c00054 	ori	r3,r3,1
 8016d4c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8016d50:	0005883a 	mov	r2,zero
}
 8016d54:	e037883a 	mov	sp,fp
 8016d58:	df000017 	ldw	fp,0(sp)
 8016d5c:	dec00104 	addi	sp,sp,4
 8016d60:	f800283a 	ret

08016d64 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8016d64:	defffe04 	addi	sp,sp,-8
 8016d68:	df000115 	stw	fp,4(sp)
 8016d6c:	df000104 	addi	fp,sp,4
 8016d70:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8016d74:	e0bfff17 	ldw	r2,-4(fp)
 8016d78:	10800317 	ldw	r2,12(r2)
 8016d7c:	10800204 	addi	r2,r2,8
 8016d80:	e0ffff17 	ldw	r3,-4(fp)
 8016d84:	18c00317 	ldw	r3,12(r3)
 8016d88:	18c00204 	addi	r3,r3,8
 8016d8c:	19000037 	ldwio	r4,0(r3)
 8016d90:	00ffff84 	movi	r3,-2
 8016d94:	20c6703a 	and	r3,r4,r3
 8016d98:	10c00035 	stwio	r3,0(r2)

}
 8016d9c:	0001883a 	nop
 8016da0:	e037883a 	mov	sp,fp
 8016da4:	df000017 	ldw	fp,0(sp)
 8016da8:	dec00104 	addi	sp,sp,4
 8016dac:	f800283a 	ret

08016db0 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8016db0:	defffd04 	addi	sp,sp,-12
 8016db4:	df000215 	stw	fp,8(sp)
 8016db8:	df000204 	addi	fp,sp,8
 8016dbc:	e13ffe15 	stw	r4,-8(fp)
 8016dc0:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8016dc4:	e0bffe17 	ldw	r2,-8(fp)
 8016dc8:	10c00d17 	ldw	r3,52(r2)
 8016dcc:	e0bfff17 	ldw	r2,-4(fp)
 8016dd0:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8016dd4:	e0bffe17 	ldw	r2,-8(fp)
 8016dd8:	10800317 	ldw	r2,12(r2)
 8016ddc:	10800204 	addi	r2,r2,8
 8016de0:	10800037 	ldwio	r2,0(r2)
 8016de4:	1080008c 	andi	r2,r2,2
 8016de8:	1005d07a 	srai	r2,r2,1
 8016dec:	1007883a 	mov	r3,r2
 8016df0:	e0bfff17 	ldw	r2,-4(fp)
 8016df4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 8016df8:	e0bffe17 	ldw	r2,-8(fp)
 8016dfc:	10800317 	ldw	r2,12(r2)
 8016e00:	10800904 	addi	r2,r2,36
 8016e04:	10800037 	ldwio	r2,0(r2)
 8016e08:	1007883a 	mov	r3,r2
 8016e0c:	e0bfff17 	ldw	r2,-4(fp)
 8016e10:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 8016e14:	e0bffe17 	ldw	r2,-8(fp)
 8016e18:	10800317 	ldw	r2,12(r2)
 8016e1c:	10800804 	addi	r2,r2,32
 8016e20:	10800037 	ldwio	r2,0(r2)
 8016e24:	1007883a 	mov	r3,r2
 8016e28:	e0bfff17 	ldw	r2,-4(fp)
 8016e2c:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 8016e30:	e0bffe17 	ldw	r2,-8(fp)
 8016e34:	10800317 	ldw	r2,12(r2)
 8016e38:	10800a04 	addi	r2,r2,40
 8016e3c:	10800037 	ldwio	r2,0(r2)
 8016e40:	1007883a 	mov	r3,r2
 8016e44:	e0bfff17 	ldw	r2,-4(fp)
 8016e48:	10c0030d 	sth	r3,12(r2)
}
 8016e4c:	0001883a 	nop
 8016e50:	e037883a 	mov	sp,fp
 8016e54:	df000017 	ldw	fp,0(sp)
 8016e58:	dec00104 	addi	sp,sp,4
 8016e5c:	f800283a 	ret

08016e60 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8016e60:	defffd04 	addi	sp,sp,-12
 8016e64:	df000215 	stw	fp,8(sp)
 8016e68:	df000204 	addi	fp,sp,8
 8016e6c:	e13ffe15 	stw	r4,-8(fp)
 8016e70:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8016e74:	e0bfff17 	ldw	r2,-4(fp)
 8016e78:	10c00017 	ldw	r3,0(r2)
 8016e7c:	e0bffe17 	ldw	r2,-8(fp)
 8016e80:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8016e84:	e0bffe17 	ldw	r2,-8(fp)
 8016e88:	10800317 	ldw	r2,12(r2)
 8016e8c:	10c00204 	addi	r3,r2,8
 8016e90:	e0bffe17 	ldw	r2,-8(fp)
 8016e94:	10800317 	ldw	r2,12(r2)
 8016e98:	10800204 	addi	r2,r2,8
 8016e9c:	10800037 	ldwio	r2,0(r2)
 8016ea0:	1009883a 	mov	r4,r2
 8016ea4:	00bfff44 	movi	r2,-3
 8016ea8:	2088703a 	and	r4,r4,r2
 8016eac:	e0bfff17 	ldw	r2,-4(fp)
 8016eb0:	10800117 	ldw	r2,4(r2)
 8016eb4:	1085883a 	add	r2,r2,r2
 8016eb8:	1080008c 	andi	r2,r2,2
 8016ebc:	2084b03a 	or	r2,r4,r2
 8016ec0:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8016ec4:	e0bffe17 	ldw	r2,-8(fp)
 8016ec8:	10800317 	ldw	r2,12(r2)
 8016ecc:	10800904 	addi	r2,r2,36
 8016ed0:	e0ffff17 	ldw	r3,-4(fp)
 8016ed4:	18c0020b 	ldhu	r3,8(r3)
 8016ed8:	18ffffcc 	andi	r3,r3,65535
 8016edc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 8016ee0:	e0bffe17 	ldw	r2,-8(fp)
 8016ee4:	10800317 	ldw	r2,12(r2)
 8016ee8:	10800804 	addi	r2,r2,32
 8016eec:	e0ffff17 	ldw	r3,-4(fp)
 8016ef0:	18c0028b 	ldhu	r3,10(r3)
 8016ef4:	18ffffcc 	andi	r3,r3,65535
 8016ef8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 8016efc:	e0bffe17 	ldw	r2,-8(fp)
 8016f00:	10800317 	ldw	r2,12(r2)
 8016f04:	10800a04 	addi	r2,r2,40
 8016f08:	e0ffff17 	ldw	r3,-4(fp)
 8016f0c:	18c0030b 	ldhu	r3,12(r3)
 8016f10:	18ffffcc 	andi	r3,r3,65535
 8016f14:	10c00035 	stwio	r3,0(r2)
}
 8016f18:	0001883a 	nop
 8016f1c:	e037883a 	mov	sp,fp
 8016f20:	df000017 	ldw	fp,0(sp)
 8016f24:	dec00104 	addi	sp,sp,4
 8016f28:	f800283a 	ret

08016f2c <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 8016f2c:	defffb04 	addi	sp,sp,-20
 8016f30:	dfc00415 	stw	ra,16(sp)
 8016f34:	df000315 	stw	fp,12(sp)
 8016f38:	df000304 	addi	fp,sp,12
 8016f3c:	e13ffd15 	stw	r4,-12(fp)
 8016f40:	e17ffe15 	stw	r5,-8(fp)
 8016f44:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 8016f48:	e0bffe17 	ldw	r2,-8(fp)
 8016f4c:	1080028b 	ldhu	r2,10(r2)
 8016f50:	10bfffcc 	andi	r2,r2,65535
 8016f54:	10000426 	beq	r2,zero,8016f68 <alt_avalon_i2c_master_config_speed_get+0x3c>
 8016f58:	e0bffe17 	ldw	r2,-8(fp)
 8016f5c:	1080020b 	ldhu	r2,8(r2)
 8016f60:	10bfffcc 	andi	r2,r2,65535
 8016f64:	1000021e 	bne	r2,zero,8016f70 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 8016f68:	00bfff44 	movi	r2,-3
 8016f6c:	00000f06 	br	8016fac <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8016f70:	e0bffd17 	ldw	r2,-12(fp)
 8016f74:	11000c17 	ldw	r4,48(r2)
 8016f78:	e0bffe17 	ldw	r2,-8(fp)
 8016f7c:	1080028b 	ldhu	r2,10(r2)
 8016f80:	10ffffcc 	andi	r3,r2,65535
 8016f84:	e0bffe17 	ldw	r2,-8(fp)
 8016f88:	1080020b 	ldhu	r2,8(r2)
 8016f8c:	10bfffcc 	andi	r2,r2,65535
 8016f90:	1885883a 	add	r2,r3,r2
 8016f94:	100b883a 	mov	r5,r2
 8016f98:	80082700 	call	8008270 <__udivsi3>
 8016f9c:	1007883a 	mov	r3,r2
 8016fa0:	e0bfff17 	ldw	r2,-4(fp)
 8016fa4:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8016fa8:	0005883a 	mov	r2,zero
}
 8016fac:	e037883a 	mov	sp,fp
 8016fb0:	dfc00117 	ldw	ra,4(sp)
 8016fb4:	df000017 	ldw	fp,0(sp)
 8016fb8:	dec00204 	addi	sp,sp,8
 8016fbc:	f800283a 	ret

08016fc0 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8016fc0:	defff904 	addi	sp,sp,-28
 8016fc4:	dfc00615 	stw	ra,24(sp)
 8016fc8:	df000515 	stw	fp,20(sp)
 8016fcc:	df000504 	addi	fp,sp,20
 8016fd0:	e13ffd15 	stw	r4,-12(fp)
 8016fd4:	e17ffe15 	stw	r5,-8(fp)
 8016fd8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 8016fdc:	e0ffff17 	ldw	r3,-4(fp)
 8016fe0:	008001b4 	movhi	r2,6
 8016fe4:	1086a004 	addi	r2,r2,6784
 8016fe8:	10c00436 	bltu	r2,r3,8016ffc <alt_avalon_i2c_master_config_speed_set+0x3c>
 8016fec:	e0bfff17 	ldw	r2,-4(fp)
 8016ff0:	10000226 	beq	r2,zero,8016ffc <alt_avalon_i2c_master_config_speed_set+0x3c>
 8016ff4:	e0bfff17 	ldw	r2,-4(fp)
 8016ff8:	1000021e 	bne	r2,zero,8017004 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 8016ffc:	00bfff04 	movi	r2,-4
 8017000:	00002906 	br	80170a8 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 8017004:	e0bffd17 	ldw	r2,-12(fp)
 8017008:	10c00c17 	ldw	r3,48(r2)
 801700c:	e0bfff17 	ldw	r2,-4(fp)
 8017010:	1085883a 	add	r2,r2,r2
 8017014:	100b883a 	mov	r5,r2
 8017018:	1809883a 	mov	r4,r3
 801701c:	80082700 	call	8008270 <__udivsi3>
 8017020:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 8017024:	e0bffb17 	ldw	r2,-20(fp)
 8017028:	10800f04 	addi	r2,r2,60
 801702c:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 8017030:	e0bffb17 	ldw	r2,-20(fp)
 8017034:	10bff104 	addi	r2,r2,-60
 8017038:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 801703c:	e0ffff17 	ldw	r3,-4(fp)
 8017040:	008000b4 	movhi	r2,2
 8017044:	10a1a804 	addi	r2,r2,-31072
 8017048:	10c0042e 	bgeu	r2,r3,801705c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 801704c:	e0bffe17 	ldw	r2,-8(fp)
 8017050:	00c00044 	movi	r3,1
 8017054:	10c00115 	stw	r3,4(r2)
 8017058:	00000206 	br	8017064 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 801705c:	e0bffe17 	ldw	r2,-8(fp)
 8017060:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8017064:	e0bffb17 	ldw	r2,-20(fp)
 8017068:	1007883a 	mov	r3,r2
 801706c:	e0bffe17 	ldw	r2,-8(fp)
 8017070:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8017074:	e0bffc17 	ldw	r2,-16(fp)
 8017078:	1007883a 	mov	r3,r2
 801707c:	e0bffe17 	ldw	r2,-8(fp)
 8017080:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8017084:	e0bffb17 	ldw	r2,-20(fp)
 8017088:	1007883a 	mov	r3,r2
 801708c:	e0bffb17 	ldw	r2,-20(fp)
 8017090:	1004d07a 	srli	r2,r2,1
 8017094:	1885c83a 	sub	r2,r3,r2
 8017098:	1007883a 	mov	r3,r2
 801709c:	e0bffe17 	ldw	r2,-8(fp)
 80170a0:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 80170a4:	0005883a 	mov	r2,zero

}
 80170a8:	e037883a 	mov	sp,fp
 80170ac:	dfc00117 	ldw	ra,4(sp)
 80170b0:	df000017 	ldw	fp,0(sp)
 80170b4:	dec00204 	addi	sp,sp,8
 80170b8:	f800283a 	ret

080170bc <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 80170bc:	defffe04 	addi	sp,sp,-8
 80170c0:	df000115 	stw	fp,4(sp)
 80170c4:	df000104 	addi	fp,sp,4
 80170c8:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 80170cc:	e0bfff17 	ldw	r2,-4(fp)
 80170d0:	10800317 	ldw	r2,12(r2)
 80170d4:	10800504 	addi	r2,r2,20
 80170d8:	10800037 	ldwio	r2,0(r2)
 80170dc:	1080004c 	andi	r2,r2,1
 80170e0:	10000226 	beq	r2,zero,80170ec <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 80170e4:	00800044 	movi	r2,1
 80170e8:	00000106 	br	80170f0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 80170ec:	0005883a 	mov	r2,zero
}
 80170f0:	e037883a 	mov	sp,fp
 80170f4:	df000017 	ldw	fp,0(sp)
 80170f8:	dec00104 	addi	sp,sp,4
 80170fc:	f800283a 	ret

08017100 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 8017100:	defffb04 	addi	sp,sp,-20
 8017104:	df000415 	stw	fp,16(sp)
 8017108:	df000404 	addi	fp,sp,16
 801710c:	e13ffc15 	stw	r4,-16(fp)
 8017110:	e17ffd15 	stw	r5,-12(fp)
 8017114:	e1bffe15 	stw	r6,-8(fp)
 8017118:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 801711c:	e0bfff17 	ldw	r2,-4(fp)
 8017120:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8017124:	00001406 	br	8017178 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 8017128:	e0bfff17 	ldw	r2,-4(fp)
 801712c:	10800017 	ldw	r2,0(r2)
 8017130:	e0fffd17 	ldw	r3,-12(fp)
 8017134:	1885883a 	add	r2,r3,r2
 8017138:	e0fffc17 	ldw	r3,-16(fp)
 801713c:	18c00317 	ldw	r3,12(r3)
 8017140:	18c00104 	addi	r3,r3,4
 8017144:	18c00037 	ldwio	r3,0(r3)
 8017148:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 801714c:	e0bfff17 	ldw	r2,-4(fp)
 8017150:	10800017 	ldw	r2,0(r2)
 8017154:	10c00044 	addi	r3,r2,1
 8017158:	e0bfff17 	ldw	r2,-4(fp)
 801715c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8017160:	e0bfff17 	ldw	r2,-4(fp)
 8017164:	10c00017 	ldw	r3,0(r2)
 8017168:	e0bffe17 	ldw	r2,-8(fp)
 801716c:	1880021e 	bne	r3,r2,8017178 <alt_avalon_i2c_rx_read_available+0x78>
 8017170:	e0bffe17 	ldw	r2,-8(fp)
 8017174:	1000061e 	bne	r2,zero,8017190 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8017178:	e0bffc17 	ldw	r2,-16(fp)
 801717c:	10800317 	ldw	r2,12(r2)
 8017180:	10800704 	addi	r2,r2,28
 8017184:	10800037 	ldwio	r2,0(r2)
 8017188:	103fe71e 	bne	r2,zero,8017128 <__alt_data_end+0xfc017128>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 801718c:	00000106 	br	8017194 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 8017190:	0001883a 	nop
    }
}
 8017194:	0001883a 	nop
 8017198:	e037883a 	mov	sp,fp
 801719c:	df000017 	ldw	fp,0(sp)
 80171a0:	dec00104 	addi	sp,sp,4
 80171a4:	f800283a 	ret

080171a8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 80171a8:	defffa04 	addi	sp,sp,-24
 80171ac:	dfc00515 	stw	ra,20(sp)
 80171b0:	df000415 	stw	fp,16(sp)
 80171b4:	df000404 	addi	fp,sp,16
 80171b8:	e13ffe15 	stw	r4,-8(fp)
 80171bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 80171c0:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 80171c4:	008000b4 	movhi	r2,2
 80171c8:	10a1a804 	addi	r2,r2,-31072
 80171cc:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80171d0:	00000d06 	br	8017208 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 80171d4:	e0bffd17 	ldw	r2,-12(fp)
 80171d8:	108002a8 	cmpgeui	r2,r2,10
 80171dc:	1000021e 	bne	r2,zero,80171e8 <alt_avalon_i2c_rx_read+0x40>
 80171e0:	0109c404 	movi	r4,10000
 80171e4:	80193ec0 	call	80193ec <alt_busy_sleep>
      if (--timeout == 0)
 80171e8:	e0bffd17 	ldw	r2,-12(fp)
 80171ec:	10bfffc4 	addi	r2,r2,-1
 80171f0:	e0bffd15 	stw	r2,-12(fp)
 80171f4:	e0bffd17 	ldw	r2,-12(fp)
 80171f8:	1000031e 	bne	r2,zero,8017208 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 80171fc:	00bfff84 	movi	r2,-2
 8017200:	e0bffc15 	stw	r2,-16(fp)
        break;
 8017204:	00000506 	br	801721c <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 8017208:	e0bffe17 	ldw	r2,-8(fp)
 801720c:	10800317 	ldw	r2,12(r2)
 8017210:	10800704 	addi	r2,r2,28
 8017214:	10800037 	ldwio	r2,0(r2)
 8017218:	103fee26 	beq	r2,zero,80171d4 <__alt_data_end+0xfc0171d4>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 801721c:	e0bffe17 	ldw	r2,-8(fp)
 8017220:	10800317 	ldw	r2,12(r2)
 8017224:	10800104 	addi	r2,r2,4
 8017228:	10800037 	ldwio	r2,0(r2)
 801722c:	1007883a 	mov	r3,r2
 8017230:	e0bfff17 	ldw	r2,-4(fp)
 8017234:	10c00005 	stb	r3,0(r2)
        
    return status;
 8017238:	e0bffc17 	ldw	r2,-16(fp)
}
 801723c:	e037883a 	mov	sp,fp
 8017240:	dfc00117 	ldw	ra,4(sp)
 8017244:	df000017 	ldw	fp,0(sp)
 8017248:	dec00204 	addi	sp,sp,8
 801724c:	f800283a 	ret

08017250 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 8017250:	defff804 	addi	sp,sp,-32
 8017254:	dfc00715 	stw	ra,28(sp)
 8017258:	df000615 	stw	fp,24(sp)
 801725c:	df000604 	addi	fp,sp,24
 8017260:	e13ffc15 	stw	r4,-16(fp)
 8017264:	2809883a 	mov	r4,r5
 8017268:	3007883a 	mov	r3,r6
 801726c:	3805883a 	mov	r2,r7
 8017270:	e13ffd05 	stb	r4,-12(fp)
 8017274:	e0fffe05 	stb	r3,-8(fp)
 8017278:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 801727c:	0089c404 	movi	r2,10000
 8017280:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8017284:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8017288:	00000c06 	br	80172bc <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 801728c:	e0bffa17 	ldw	r2,-24(fp)
 8017290:	108002a8 	cmpgeui	r2,r2,10
 8017294:	1000021e 	bne	r2,zero,80172a0 <alt_avalon_i2c_cmd_write+0x50>
 8017298:	0109c404 	movi	r4,10000
 801729c:	80193ec0 	call	80193ec <alt_busy_sleep>
      if (--timeout == 0)
 80172a0:	e0bffa17 	ldw	r2,-24(fp)
 80172a4:	10bfffc4 	addi	r2,r2,-1
 80172a8:	e0bffa15 	stw	r2,-24(fp)
 80172ac:	e0bffa17 	ldw	r2,-24(fp)
 80172b0:	1000021e 	bne	r2,zero,80172bc <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 80172b4:	00bfff84 	movi	r2,-2
 80172b8:	00001906 	br	8017320 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 80172bc:	e0bffc17 	ldw	r2,-16(fp)
 80172c0:	10800317 	ldw	r2,12(r2)
 80172c4:	10800404 	addi	r2,r2,16
 80172c8:	10800037 	ldwio	r2,0(r2)
 80172cc:	1080004c 	andi	r2,r2,1
 80172d0:	103fee26 	beq	r2,zero,801728c <__alt_data_end+0xfc01728c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 80172d4:	e0bffc17 	ldw	r2,-16(fp)
 80172d8:	10800317 	ldw	r2,12(r2)
 80172dc:	e13ffd03 	ldbu	r4,-12(fp)
 80172e0:	e0fffe03 	ldbu	r3,-8(fp)
 80172e4:	1806927a 	slli	r3,r3,9
 80172e8:	20c8b03a 	or	r4,r4,r3
 80172ec:	e0ffff03 	ldbu	r3,-4(fp)
 80172f0:	1806923a 	slli	r3,r3,8
 80172f4:	20c6b03a 	or	r3,r4,r3
 80172f8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 80172fc:	e0bffb04 	addi	r2,fp,-20
 8017300:	100b883a 	mov	r5,r2
 8017304:	e13ffc17 	ldw	r4,-16(fp)
 8017308:	80174900 	call	8017490 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 801730c:	e0bffb04 	addi	r2,fp,-20
 8017310:	100b883a 	mov	r5,r2
 8017314:	e13ffc17 	ldw	r4,-16(fp)
 8017318:	80174dc0 	call	80174dc <alt_avalon_i2c_check_arblost>
    
    return status;
 801731c:	e0bffb17 	ldw	r2,-20(fp)
}
 8017320:	e037883a 	mov	sp,fp
 8017324:	dfc00117 	ldw	ra,4(sp)
 8017328:	df000017 	ldw	fp,0(sp)
 801732c:	dec00204 	addi	sp,sp,8
 8017330:	f800283a 	ret

08017334 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 8017334:	defffa04 	addi	sp,sp,-24
 8017338:	dfc00515 	stw	ra,20(sp)
 801733c:	df000415 	stw	fp,16(sp)
 8017340:	df000404 	addi	fp,sp,16
 8017344:	e13ffd15 	stw	r4,-12(fp)
 8017348:	e17ffe15 	stw	r5,-8(fp)
 801734c:	3005883a 	mov	r2,r6
 8017350:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8017354:	e0bffd17 	ldw	r2,-12(fp)
 8017358:	10800d17 	ldw	r2,52(r2)
 801735c:	10800058 	cmpnei	r2,r2,1
 8017360:	10001c1e 	bne	r2,zero,80173d4 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8017364:	e0bffd17 	ldw	r2,-12(fp)
 8017368:	10800917 	ldw	r2,36(r2)
 801736c:	109e0014 	ori	r2,r2,30720
 8017370:	1004d1fa 	srli	r2,r2,7
 8017374:	1007883a 	mov	r3,r2
 8017378:	00bfff84 	movi	r2,-2
 801737c:	1884703a 	and	r2,r3,r2
 8017380:	1007883a 	mov	r3,r2
 8017384:	e0bffe17 	ldw	r2,-8(fp)
 8017388:	1884b03a 	or	r2,r3,r2
 801738c:	10803fcc 	andi	r2,r2,255
 8017390:	e0ffff03 	ldbu	r3,-4(fp)
 8017394:	000f883a 	mov	r7,zero
 8017398:	180d883a 	mov	r6,r3
 801739c:	100b883a 	mov	r5,r2
 80173a0:	e13ffd17 	ldw	r4,-12(fp)
 80173a4:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 80173a8:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 80173ac:	e0bffd17 	ldw	r2,-12(fp)
 80173b0:	10800917 	ldw	r2,36(r2)
 80173b4:	10803fcc 	andi	r2,r2,255
 80173b8:	000f883a 	mov	r7,zero
 80173bc:	000d883a 	mov	r6,zero
 80173c0:	100b883a 	mov	r5,r2
 80173c4:	e13ffd17 	ldw	r4,-12(fp)
 80173c8:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 80173cc:	e0bffc15 	stw	r2,-16(fp)
 80173d0:	00000e06 	br	801740c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 80173d4:	e0bffd17 	ldw	r2,-12(fp)
 80173d8:	10800917 	ldw	r2,36(r2)
 80173dc:	1085883a 	add	r2,r2,r2
 80173e0:	1007883a 	mov	r3,r2
 80173e4:	e0bffe17 	ldw	r2,-8(fp)
 80173e8:	1884b03a 	or	r2,r3,r2
 80173ec:	10803fcc 	andi	r2,r2,255
 80173f0:	e0ffff03 	ldbu	r3,-4(fp)
 80173f4:	000f883a 	mov	r7,zero
 80173f8:	180d883a 	mov	r6,r3
 80173fc:	100b883a 	mov	r5,r2
 8017400:	e13ffd17 	ldw	r4,-12(fp)
 8017404:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017408:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 801740c:	e0bffc17 	ldw	r2,-16(fp)
}
 8017410:	e037883a 	mov	sp,fp
 8017414:	dfc00117 	ldw	ra,4(sp)
 8017418:	df000017 	ldw	fp,0(sp)
 801741c:	dec00204 	addi	sp,sp,8
 8017420:	f800283a 	ret

08017424 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 8017424:	defffd04 	addi	sp,sp,-12
 8017428:	df000215 	stw	fp,8(sp)
 801742c:	df000204 	addi	fp,sp,8
 8017430:	e13ffe15 	stw	r4,-8(fp)
 8017434:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 8017438:	e0bffe17 	ldw	r2,-8(fp)
 801743c:	10c00917 	ldw	r3,36(r2)
 8017440:	e0bfff17 	ldw	r2,-4(fp)
 8017444:	10c00015 	stw	r3,0(r2)
}
 8017448:	0001883a 	nop
 801744c:	e037883a 	mov	sp,fp
 8017450:	df000017 	ldw	fp,0(sp)
 8017454:	dec00104 	addi	sp,sp,4
 8017458:	f800283a 	ret

0801745c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 801745c:	defffd04 	addi	sp,sp,-12
 8017460:	df000215 	stw	fp,8(sp)
 8017464:	df000204 	addi	fp,sp,8
 8017468:	e13ffe15 	stw	r4,-8(fp)
 801746c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 8017470:	e0bffe17 	ldw	r2,-8(fp)
 8017474:	e0ffff17 	ldw	r3,-4(fp)
 8017478:	10c00915 	stw	r3,36(r2)
}
 801747c:	0001883a 	nop
 8017480:	e037883a 	mov	sp,fp
 8017484:	df000017 	ldw	fp,0(sp)
 8017488:	dec00104 	addi	sp,sp,4
 801748c:	f800283a 	ret

08017490 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 8017490:	defffd04 	addi	sp,sp,-12
 8017494:	df000215 	stw	fp,8(sp)
 8017498:	df000204 	addi	fp,sp,8
 801749c:	e13ffe15 	stw	r4,-8(fp)
 80174a0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 80174a4:	e0bffe17 	ldw	r2,-8(fp)
 80174a8:	10800317 	ldw	r2,12(r2)
 80174ac:	10800404 	addi	r2,r2,16
 80174b0:	10800037 	ldwio	r2,0(r2)
 80174b4:	1080010c 	andi	r2,r2,4
 80174b8:	10000326 	beq	r2,zero,80174c8 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 80174bc:	e0bfff17 	ldw	r2,-4(fp)
 80174c0:	00fffec4 	movi	r3,-5
 80174c4:	10c00015 	stw	r3,0(r2)
    }
}
 80174c8:	0001883a 	nop
 80174cc:	e037883a 	mov	sp,fp
 80174d0:	df000017 	ldw	fp,0(sp)
 80174d4:	dec00104 	addi	sp,sp,4
 80174d8:	f800283a 	ret

080174dc <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 80174dc:	defffd04 	addi	sp,sp,-12
 80174e0:	df000215 	stw	fp,8(sp)
 80174e4:	df000204 	addi	fp,sp,8
 80174e8:	e13ffe15 	stw	r4,-8(fp)
 80174ec:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 80174f0:	e0bffe17 	ldw	r2,-8(fp)
 80174f4:	10800317 	ldw	r2,12(r2)
 80174f8:	10800404 	addi	r2,r2,16
 80174fc:	10800037 	ldwio	r2,0(r2)
 8017500:	1080020c 	andi	r2,r2,8
 8017504:	10000326 	beq	r2,zero,8017514 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 8017508:	e0bfff17 	ldw	r2,-4(fp)
 801750c:	00fffe84 	movi	r3,-6
 8017510:	10c00015 	stw	r3,0(r2)
    }
}
 8017514:	0001883a 	nop
 8017518:	e037883a 	mov	sp,fp
 801751c:	df000017 	ldw	fp,0(sp)
 8017520:	dec00104 	addi	sp,sp,4
 8017524:	f800283a 	ret

08017528 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8017528:	defff804 	addi	sp,sp,-32
 801752c:	dfc00715 	stw	ra,28(sp)
 8017530:	df000615 	stw	fp,24(sp)
 8017534:	df000604 	addi	fp,sp,24
 8017538:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 801753c:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8017540:	e0bfff17 	ldw	r2,-4(fp)
 8017544:	10800717 	ldw	r2,28(r2)
 8017548:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 801754c:	e0bffb17 	ldw	r2,-20(fp)
 8017550:	10800117 	ldw	r2,4(r2)
 8017554:	10800044 	addi	r2,r2,1
 8017558:	0149c404 	movi	r5,10000
 801755c:	1009883a 	mov	r4,r2
 8017560:	800832c0 	call	800832c <__mulsi3>
 8017564:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 8017568:	e0bffd04 	addi	r2,fp,-12
 801756c:	100b883a 	mov	r5,r2
 8017570:	e13fff17 	ldw	r4,-4(fp)
 8017574:	80183c00 	call	80183c0 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 8017578:	e0bffd17 	ldw	r2,-12(fp)
 801757c:	100b883a 	mov	r5,r2
 8017580:	e13fff17 	ldw	r4,-4(fp)
 8017584:	80182f40 	call	80182f4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8017588:	e0bffc04 	addi	r2,fp,-16
 801758c:	100b883a 	mov	r5,r2
 8017590:	e13fff17 	ldw	r4,-4(fp)
 8017594:	80174900 	call	8017490 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 8017598:	e0bffc17 	ldw	r2,-16(fp)
 801759c:	10002226 	beq	r2,zero,8017628 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 80175a0:	e0bffb17 	ldw	r2,-20(fp)
 80175a4:	10800217 	ldw	r2,8(r2)
 80175a8:	10001d26 	beq	r2,zero,8017620 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80175ac:	00000d06 	br	80175e4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 80175b0:	e0bffa17 	ldw	r2,-24(fp)
 80175b4:	108002a8 	cmpgeui	r2,r2,10
 80175b8:	1000021e 	bne	r2,zero,80175c4 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 80175bc:	0109c404 	movi	r4,10000
 80175c0:	80193ec0 	call	80193ec <alt_busy_sleep>
              if (--timeout == 0)
 80175c4:	e0bffa17 	ldw	r2,-24(fp)
 80175c8:	10bfffc4 	addi	r2,r2,-1
 80175cc:	e0bffa15 	stw	r2,-24(fp)
 80175d0:	e0bffa17 	ldw	r2,-24(fp)
 80175d4:	1000031e 	bne	r2,zero,80175e4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 80175d8:	00bfff84 	movi	r2,-2
 80175dc:	e0bffc15 	stw	r2,-16(fp)
                 break;
 80175e0:	00000306 	br	80175f0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80175e4:	e13fff17 	ldw	r4,-4(fp)
 80175e8:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 80175ec:	103ff01e 	bne	r2,zero,80175b0 <__alt_data_end+0xfc0175b0>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 80175f0:	e0bffb17 	ldw	r2,-20(fp)
 80175f4:	10800017 	ldw	r2,0(r2)
 80175f8:	e0fffe04 	addi	r3,fp,-8
 80175fc:	180f883a 	mov	r7,r3
 8017600:	000d883a 	mov	r6,zero
 8017604:	100b883a 	mov	r5,r2
 8017608:	e13fff17 	ldw	r4,-4(fp)
 801760c:	80171000 	call	8017100 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 8017610:	e13fff17 	ldw	r4,-4(fp)
 8017614:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 8017618:	e0bffb17 	ldw	r2,-20(fp)
 801761c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 8017620:	e0bffc17 	ldw	r2,-16(fp)
 8017624:	00000a06 	br	8017650 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 8017628:	e0bffb17 	ldw	r2,-20(fp)
 801762c:	10800217 	ldw	r2,8(r2)
 8017630:	10000626 	beq	r2,zero,801764c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 8017634:	e0bffd17 	ldw	r2,-12(fp)
 8017638:	100b883a 	mov	r5,r2
 801763c:	e13fff17 	ldw	r4,-4(fp)
 8017640:	801835c0 	call	801835c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8017644:	00bffe44 	movi	r2,-7
 8017648:	00000106 	br	8017650 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 801764c:	0005883a 	mov	r2,zero
}
 8017650:	e037883a 	mov	sp,fp
 8017654:	dfc00117 	ldw	ra,4(sp)
 8017658:	df000017 	ldw	fp,0(sp)
 801765c:	dec00204 	addi	sp,sp,8
 8017660:	f800283a 	ret

08017664 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8017664:	defff704 	addi	sp,sp,-36
 8017668:	dfc00815 	stw	ra,32(sp)
 801766c:	df000715 	stw	fp,28(sp)
 8017670:	df000704 	addi	fp,sp,28
 8017674:	e13ffc15 	stw	r4,-16(fp)
 8017678:	e17ffd15 	stw	r5,-12(fp)
 801767c:	e1bffe15 	stw	r6,-8(fp)
 8017680:	3805883a 	mov	r2,r7
 8017684:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8017688:	0089c404 	movi	r2,10000
 801768c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 8017690:	00002206 	br	801771c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8017694:	e0bffb17 	ldw	r2,-20(fp)
 8017698:	108002a8 	cmpgeui	r2,r2,10
 801769c:	1000021e 	bne	r2,zero,80176a8 <alt_avalon_i2c_master_tx+0x44>
 80176a0:	0109c404 	movi	r4,10000
 80176a4:	80193ec0 	call	80193ec <alt_busy_sleep>
      if (use_interrupts)
 80176a8:	e0bfff03 	ldbu	r2,-4(fp)
 80176ac:	10000926 	beq	r2,zero,80176d4 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 80176b0:	00800044 	movi	r2,1
 80176b4:	d8800015 	stw	r2,0(sp)
 80176b8:	000f883a 	mov	r7,zero
 80176bc:	e1bffe17 	ldw	r6,-8(fp)
 80176c0:	e17ffd17 	ldw	r5,-12(fp)
 80176c4:	e13ffc17 	ldw	r4,-16(fp)
 80176c8:	8017c100 	call	8017c10 <alt_avalon_i2c_master_transmit_using_interrupts>
 80176cc:	e0bffa15 	stw	r2,-24(fp)
 80176d0:	00000806 	br	80176f4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 80176d4:	00800044 	movi	r2,1
 80176d8:	d8800015 	stw	r2,0(sp)
 80176dc:	000f883a 	mov	r7,zero
 80176e0:	e1bffe17 	ldw	r6,-8(fp)
 80176e4:	e17ffd17 	ldw	r5,-12(fp)
 80176e8:	e13ffc17 	ldw	r4,-16(fp)
 80176ec:	8017a500 	call	8017a50 <alt_avalon_i2c_master_transmit>
 80176f0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80176f4:	e0bffa17 	ldw	r2,-24(fp)
 80176f8:	10bffea0 	cmpeqi	r2,r2,-6
 80176fc:	1000061e 	bne	r2,zero,8017718 <alt_avalon_i2c_master_tx+0xb4>
 8017700:	e0bffa17 	ldw	r2,-24(fp)
 8017704:	10bffee0 	cmpeqi	r2,r2,-5
 8017708:	1000031e 	bne	r2,zero,8017718 <alt_avalon_i2c_master_tx+0xb4>
 801770c:	e0bffa17 	ldw	r2,-24(fp)
 8017710:	10bffe58 	cmpnei	r2,r2,-7
 8017714:	1000061e 	bne	r2,zero,8017730 <alt_avalon_i2c_master_tx+0xcc>
 8017718:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 801771c:	e0bffb17 	ldw	r2,-20(fp)
 8017720:	10ffffc4 	addi	r3,r2,-1
 8017724:	e0fffb15 	stw	r3,-20(fp)
 8017728:	103fda1e 	bne	r2,zero,8017694 <__alt_data_end+0xfc017694>
 801772c:	00000106 	br	8017734 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 8017730:	0001883a 	nop
    }

    return status;
 8017734:	e0bffa17 	ldw	r2,-24(fp)
}        
 8017738:	e037883a 	mov	sp,fp
 801773c:	dfc00117 	ldw	ra,4(sp)
 8017740:	df000017 	ldw	fp,0(sp)
 8017744:	dec00204 	addi	sp,sp,8
 8017748:	f800283a 	ret

0801774c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 801774c:	defff704 	addi	sp,sp,-36
 8017750:	dfc00815 	stw	ra,32(sp)
 8017754:	df000715 	stw	fp,28(sp)
 8017758:	df000704 	addi	fp,sp,28
 801775c:	e13ffc15 	stw	r4,-16(fp)
 8017760:	e17ffd15 	stw	r5,-12(fp)
 8017764:	e1bffe15 	stw	r6,-8(fp)
 8017768:	3805883a 	mov	r2,r7
 801776c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8017770:	0089c404 	movi	r2,10000
 8017774:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 8017778:	e0bfff03 	ldbu	r2,-4(fp)
 801777c:	10003426 	beq	r2,zero,8017850 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 8017780:	00001706 	br	80177e0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8017784:	e0bffb17 	ldw	r2,-20(fp)
 8017788:	108002a8 	cmpgeui	r2,r2,10
 801778c:	1000021e 	bne	r2,zero,8017798 <alt_avalon_i2c_master_rx+0x4c>
 8017790:	0109c404 	movi	r4,10000
 8017794:	80193ec0 	call	80193ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8017798:	00800044 	movi	r2,1
 801779c:	d8800015 	stw	r2,0(sp)
 80177a0:	000f883a 	mov	r7,zero
 80177a4:	e1bffe17 	ldw	r6,-8(fp)
 80177a8:	e17ffd17 	ldw	r5,-12(fp)
 80177ac:	e13ffc17 	ldw	r4,-16(fp)
 80177b0:	801802c0 	call	801802c <alt_avalon_i2c_master_receive_using_interrupts>
 80177b4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80177b8:	e0bffa17 	ldw	r2,-24(fp)
 80177bc:	10bffea0 	cmpeqi	r2,r2,-6
 80177c0:	1000061e 	bne	r2,zero,80177dc <alt_avalon_i2c_master_rx+0x90>
 80177c4:	e0bffa17 	ldw	r2,-24(fp)
 80177c8:	10bffee0 	cmpeqi	r2,r2,-5
 80177cc:	1000031e 	bne	r2,zero,80177dc <alt_avalon_i2c_master_rx+0x90>
 80177d0:	e0bffa17 	ldw	r2,-24(fp)
 80177d4:	10bffe58 	cmpnei	r2,r2,-7
 80177d8:	1000221e 	bne	r2,zero,8017864 <alt_avalon_i2c_master_rx+0x118>
 80177dc:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 80177e0:	e0bffb17 	ldw	r2,-20(fp)
 80177e4:	10ffffc4 	addi	r3,r2,-1
 80177e8:	e0fffb15 	stw	r3,-20(fp)
 80177ec:	103fe51e 	bne	r2,zero,8017784 <__alt_data_end+0xfc017784>
 80177f0:	00001f06 	br	8017870 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 80177f4:	e0bffb17 	ldw	r2,-20(fp)
 80177f8:	108002a8 	cmpgeui	r2,r2,10
 80177fc:	1000021e 	bne	r2,zero,8017808 <alt_avalon_i2c_master_rx+0xbc>
 8017800:	0109c404 	movi	r4,10000
 8017804:	80193ec0 	call	80193ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8017808:	00800044 	movi	r2,1
 801780c:	d8800015 	stw	r2,0(sp)
 8017810:	000f883a 	mov	r7,zero
 8017814:	e1bffe17 	ldw	r6,-8(fp)
 8017818:	e17ffd17 	ldw	r5,-12(fp)
 801781c:	e13ffc17 	ldw	r4,-16(fp)
 8017820:	8017e1c0 	call	8017e1c <alt_avalon_i2c_master_receive>
 8017824:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8017828:	e0bffa17 	ldw	r2,-24(fp)
 801782c:	10bffea0 	cmpeqi	r2,r2,-6
 8017830:	1000061e 	bne	r2,zero,801784c <alt_avalon_i2c_master_rx+0x100>
 8017834:	e0bffa17 	ldw	r2,-24(fp)
 8017838:	10bffee0 	cmpeqi	r2,r2,-5
 801783c:	1000031e 	bne	r2,zero,801784c <alt_avalon_i2c_master_rx+0x100>
 8017840:	e0bffa17 	ldw	r2,-24(fp)
 8017844:	10bffe58 	cmpnei	r2,r2,-7
 8017848:	1000081e 	bne	r2,zero,801786c <alt_avalon_i2c_master_rx+0x120>
 801784c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 8017850:	e0bffb17 	ldw	r2,-20(fp)
 8017854:	10ffffc4 	addi	r3,r2,-1
 8017858:	e0fffb15 	stw	r3,-20(fp)
 801785c:	103fe51e 	bne	r2,zero,80177f4 <__alt_data_end+0xfc0177f4>
 8017860:	00000306 	br	8017870 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8017864:	0001883a 	nop
 8017868:	00000106 	br	8017870 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 801786c:	0001883a 	nop
      }
    }
    
    return status;
 8017870:	e0bffa17 	ldw	r2,-24(fp)
}        
 8017874:	e037883a 	mov	sp,fp
 8017878:	dfc00117 	ldw	ra,4(sp)
 801787c:	df000017 	ldw	fp,0(sp)
 8017880:	dec00204 	addi	sp,sp,8
 8017884:	f800283a 	ret

08017888 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8017888:	defff604 	addi	sp,sp,-40
 801788c:	dfc00915 	stw	ra,36(sp)
 8017890:	df000815 	stw	fp,32(sp)
 8017894:	df000804 	addi	fp,sp,32
 8017898:	e13ffb15 	stw	r4,-20(fp)
 801789c:	e17ffc15 	stw	r5,-16(fp)
 80178a0:	e1bffd15 	stw	r6,-12(fp)
 80178a4:	e1fffe15 	stw	r7,-8(fp)
 80178a8:	e0800317 	ldw	r2,12(fp)
 80178ac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 80178b0:	0089c404 	movi	r2,10000
 80178b4:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 80178b8:	e0bfff03 	ldbu	r2,-4(fp)
 80178bc:	10005626 	beq	r2,zero,8017a18 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 80178c0:	00002806 	br	8017964 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 80178c4:	e0bffa17 	ldw	r2,-24(fp)
 80178c8:	108002a8 	cmpgeui	r2,r2,10
 80178cc:	1000021e 	bne	r2,zero,80178d8 <alt_avalon_i2c_master_tx_rx+0x50>
 80178d0:	0109c404 	movi	r4,10000
 80178d4:	80193ec0 	call	80193ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 80178d8:	d8000015 	stw	zero,0(sp)
 80178dc:	000f883a 	mov	r7,zero
 80178e0:	e1bffd17 	ldw	r6,-12(fp)
 80178e4:	e17ffc17 	ldw	r5,-16(fp)
 80178e8:	e13ffb17 	ldw	r4,-20(fp)
 80178ec:	8017c100 	call	8017c10 <alt_avalon_i2c_master_transmit_using_interrupts>
 80178f0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80178f4:	e0bff917 	ldw	r2,-28(fp)
 80178f8:	10bffea0 	cmpeqi	r2,r2,-6
 80178fc:	1000191e 	bne	r2,zero,8017964 <alt_avalon_i2c_master_tx_rx+0xdc>
 8017900:	e0bff917 	ldw	r2,-28(fp)
 8017904:	10bffee0 	cmpeqi	r2,r2,-5
 8017908:	1000161e 	bne	r2,zero,8017964 <alt_avalon_i2c_master_tx_rx+0xdc>
 801790c:	e0bff917 	ldw	r2,-28(fp)
 8017910:	10bffe58 	cmpnei	r2,r2,-7
 8017914:	1000011e 	bne	r2,zero,801791c <alt_avalon_i2c_master_tx_rx+0x94>
 8017918:	00001206 	br	8017964 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 801791c:	00800044 	movi	r2,1
 8017920:	d8800015 	stw	r2,0(sp)
 8017924:	01c00044 	movi	r7,1
 8017928:	e1800217 	ldw	r6,8(fp)
 801792c:	e17ffe17 	ldw	r5,-8(fp)
 8017930:	e13ffb17 	ldw	r4,-20(fp)
 8017934:	801802c0 	call	801802c <alt_avalon_i2c_master_receive_using_interrupts>
 8017938:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 801793c:	e0bff917 	ldw	r2,-28(fp)
 8017940:	10bffea0 	cmpeqi	r2,r2,-6
 8017944:	1000061e 	bne	r2,zero,8017960 <alt_avalon_i2c_master_tx_rx+0xd8>
 8017948:	e0bff917 	ldw	r2,-28(fp)
 801794c:	10bffee0 	cmpeqi	r2,r2,-5
 8017950:	1000031e 	bne	r2,zero,8017960 <alt_avalon_i2c_master_tx_rx+0xd8>
 8017954:	e0bff917 	ldw	r2,-28(fp)
 8017958:	10bffe58 	cmpnei	r2,r2,-7
 801795c:	1000331e 	bne	r2,zero,8017a2c <alt_avalon_i2c_master_tx_rx+0x1a4>
 8017960:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 8017964:	e0bffa17 	ldw	r2,-24(fp)
 8017968:	10ffffc4 	addi	r3,r2,-1
 801796c:	e0fffa15 	stw	r3,-24(fp)
 8017970:	103fd41e 	bne	r2,zero,80178c4 <__alt_data_end+0xfc0178c4>
 8017974:	00003006 	br	8017a38 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8017978:	e0bffa17 	ldw	r2,-24(fp)
 801797c:	108002a8 	cmpgeui	r2,r2,10
 8017980:	1000021e 	bne	r2,zero,801798c <alt_avalon_i2c_master_tx_rx+0x104>
 8017984:	0109c404 	movi	r4,10000
 8017988:	80193ec0 	call	80193ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 801798c:	d8000015 	stw	zero,0(sp)
 8017990:	000f883a 	mov	r7,zero
 8017994:	e1bffd17 	ldw	r6,-12(fp)
 8017998:	e17ffc17 	ldw	r5,-16(fp)
 801799c:	e13ffb17 	ldw	r4,-20(fp)
 80179a0:	8017a500 	call	8017a50 <alt_avalon_i2c_master_transmit>
 80179a4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80179a8:	e0bff917 	ldw	r2,-28(fp)
 80179ac:	10bffea0 	cmpeqi	r2,r2,-6
 80179b0:	1000191e 	bne	r2,zero,8017a18 <alt_avalon_i2c_master_tx_rx+0x190>
 80179b4:	e0bff917 	ldw	r2,-28(fp)
 80179b8:	10bffee0 	cmpeqi	r2,r2,-5
 80179bc:	1000161e 	bne	r2,zero,8017a18 <alt_avalon_i2c_master_tx_rx+0x190>
 80179c0:	e0bff917 	ldw	r2,-28(fp)
 80179c4:	10bffe58 	cmpnei	r2,r2,-7
 80179c8:	1000011e 	bne	r2,zero,80179d0 <alt_avalon_i2c_master_tx_rx+0x148>
 80179cc:	00001206 	br	8017a18 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 80179d0:	00800044 	movi	r2,1
 80179d4:	d8800015 	stw	r2,0(sp)
 80179d8:	01c00044 	movi	r7,1
 80179dc:	e1800217 	ldw	r6,8(fp)
 80179e0:	e17ffe17 	ldw	r5,-8(fp)
 80179e4:	e13ffb17 	ldw	r4,-20(fp)
 80179e8:	8017e1c0 	call	8017e1c <alt_avalon_i2c_master_receive>
 80179ec:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80179f0:	e0bff917 	ldw	r2,-28(fp)
 80179f4:	10bffea0 	cmpeqi	r2,r2,-6
 80179f8:	1000061e 	bne	r2,zero,8017a14 <alt_avalon_i2c_master_tx_rx+0x18c>
 80179fc:	e0bff917 	ldw	r2,-28(fp)
 8017a00:	10bffee0 	cmpeqi	r2,r2,-5
 8017a04:	1000031e 	bne	r2,zero,8017a14 <alt_avalon_i2c_master_tx_rx+0x18c>
 8017a08:	e0bff917 	ldw	r2,-28(fp)
 8017a0c:	10bffe58 	cmpnei	r2,r2,-7
 8017a10:	1000081e 	bne	r2,zero,8017a34 <alt_avalon_i2c_master_tx_rx+0x1ac>
 8017a14:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 8017a18:	e0bffa17 	ldw	r2,-24(fp)
 8017a1c:	10ffffc4 	addi	r3,r2,-1
 8017a20:	e0fffa15 	stw	r3,-24(fp)
 8017a24:	103fd41e 	bne	r2,zero,8017978 <__alt_data_end+0xfc017978>
 8017a28:	00000306 	br	8017a38 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8017a2c:	0001883a 	nop
 8017a30:	00000106 	br	8017a38 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8017a34:	0001883a 	nop
      }
    }
    
    return status;
 8017a38:	e0bff917 	ldw	r2,-28(fp)
}                                       
 8017a3c:	e037883a 	mov	sp,fp
 8017a40:	dfc00117 	ldw	ra,4(sp)
 8017a44:	df000017 	ldw	fp,0(sp)
 8017a48:	dec00204 	addi	sp,sp,8
 8017a4c:	f800283a 	ret

08017a50 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8017a50:	defff704 	addi	sp,sp,-36
 8017a54:	dfc00815 	stw	ra,32(sp)
 8017a58:	df000715 	stw	fp,28(sp)
 8017a5c:	df000704 	addi	fp,sp,28
 8017a60:	e13ffb15 	stw	r4,-20(fp)
 8017a64:	e17ffc15 	stw	r5,-16(fp)
 8017a68:	e1bffd15 	stw	r6,-12(fp)
 8017a6c:	3807883a 	mov	r3,r7
 8017a70:	e0800217 	ldw	r2,8(fp)
 8017a74:	e0fffe05 	stb	r3,-8(fp)
 8017a78:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8017a7c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 8017a80:	0149c404 	movi	r5,10000
 8017a84:	e13ffd17 	ldw	r4,-12(fp)
 8017a88:	800832c0 	call	800832c <__mulsi3>
 8017a8c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 8017a90:	e0bffd17 	ldw	r2,-12(fp)
 8017a94:	1000021e 	bne	r2,zero,8017aa0 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8017a98:	0005883a 	mov	r2,zero
 8017a9c:	00005706 	br	8017bfc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8017aa0:	e0bffe03 	ldbu	r2,-8(fp)
 8017aa4:	10000a1e 	bne	r2,zero,8017ad0 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8017aa8:	e13ffb17 	ldw	r4,-20(fp)
 8017aac:	8016ccc0 	call	8016ccc <alt_avalon_i2c_enable>
 8017ab0:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8017ab4:	e0bffa17 	ldw	r2,-24(fp)
 8017ab8:	10000226 	beq	r2,zero,8017ac4 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 8017abc:	e0bffa17 	ldw	r2,-24(fp)
 8017ac0:	00004e06 	br	8017bfc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8017ac4:	01400704 	movi	r5,28
 8017ac8:	e13ffb17 	ldw	r4,-20(fp)
 8017acc:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8017ad0:	e0bffe03 	ldbu	r2,-8(fp)
 8017ad4:	100d883a 	mov	r6,r2
 8017ad8:	000b883a 	mov	r5,zero
 8017adc:	e13ffb17 	ldw	r4,-20(fp)
 8017ae0:	80173340 	call	8017334 <alt_avalon_i2c_send_address>
 8017ae4:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 8017ae8:	e0bffa17 	ldw	r2,-24(fp)
 8017aec:	1000271e 	bne	r2,zero,8017b8c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8017af0:	00000f06 	br	8017b30 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8017af4:	e0bffc17 	ldw	r2,-16(fp)
 8017af8:	10800003 	ldbu	r2,0(r2)
 8017afc:	10803fcc 	andi	r2,r2,255
 8017b00:	000f883a 	mov	r7,zero
 8017b04:	000d883a 	mov	r6,zero
 8017b08:	100b883a 	mov	r5,r2
 8017b0c:	e13ffb17 	ldw	r4,-20(fp)
 8017b10:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017b14:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 8017b18:	e0bffc17 	ldw	r2,-16(fp)
 8017b1c:	10800044 	addi	r2,r2,1
 8017b20:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8017b24:	e0bffd17 	ldw	r2,-12(fp)
 8017b28:	10bfffc4 	addi	r2,r2,-1
 8017b2c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8017b30:	e0bffd17 	ldw	r2,-12(fp)
 8017b34:	108000b0 	cmpltui	r2,r2,2
 8017b38:	1000021e 	bne	r2,zero,8017b44 <alt_avalon_i2c_master_transmit+0xf4>
 8017b3c:	e0bffa17 	ldw	r2,-24(fp)
 8017b40:	103fec26 	beq	r2,zero,8017af4 <__alt_data_end+0xfc017af4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8017b44:	e0bffa17 	ldw	r2,-24(fp)
 8017b48:	1000101e 	bne	r2,zero,8017b8c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8017b4c:	e0bffc17 	ldw	r2,-16(fp)
 8017b50:	10800003 	ldbu	r2,0(r2)
 8017b54:	10803fcc 	andi	r2,r2,255
 8017b58:	e0ffff03 	ldbu	r3,-4(fp)
 8017b5c:	180f883a 	mov	r7,r3
 8017b60:	000d883a 	mov	r6,zero
 8017b64:	100b883a 	mov	r5,r2
 8017b68:	e13ffb17 	ldw	r4,-20(fp)
 8017b6c:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017b70:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 8017b74:	e0bffc17 	ldw	r2,-16(fp)
 8017b78:	10800044 	addi	r2,r2,1
 8017b7c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8017b80:	e0bffd17 	ldw	r2,-12(fp)
 8017b84:	10bfffc4 	addi	r2,r2,-1
 8017b88:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8017b8c:	e0bfff03 	ldbu	r2,-4(fp)
 8017b90:	1000101e 	bne	r2,zero,8017bd4 <alt_avalon_i2c_master_transmit+0x184>
 8017b94:	e0bffa17 	ldw	r2,-24(fp)
 8017b98:	10001726 	beq	r2,zero,8017bf8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017b9c:	00000d06 	br	8017bd4 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8017ba0:	e0bff917 	ldw	r2,-28(fp)
 8017ba4:	108002a8 	cmpgeui	r2,r2,10
 8017ba8:	1000021e 	bne	r2,zero,8017bb4 <alt_avalon_i2c_master_transmit+0x164>
 8017bac:	0109c404 	movi	r4,10000
 8017bb0:	80193ec0 	call	80193ec <alt_busy_sleep>
            if (--timeout == 0)
 8017bb4:	e0bff917 	ldw	r2,-28(fp)
 8017bb8:	10bfffc4 	addi	r2,r2,-1
 8017bbc:	e0bff915 	stw	r2,-28(fp)
 8017bc0:	e0bff917 	ldw	r2,-28(fp)
 8017bc4:	1000031e 	bne	r2,zero,8017bd4 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8017bc8:	00bfff84 	movi	r2,-2
 8017bcc:	e0bffa15 	stw	r2,-24(fp)
               break;
 8017bd0:	00000306 	br	8017be0 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017bd4:	e13ffb17 	ldw	r4,-20(fp)
 8017bd8:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 8017bdc:	103ff01e 	bne	r2,zero,8017ba0 <__alt_data_end+0xfc017ba0>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 8017be0:	e0bffa04 	addi	r2,fp,-24
 8017be4:	100b883a 	mov	r5,r2
 8017be8:	e13ffb17 	ldw	r4,-20(fp)
 8017bec:	80174900 	call	8017490 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8017bf0:	e13ffb17 	ldw	r4,-20(fp)
 8017bf4:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>
    }


    return status;
 8017bf8:	e0bffa17 	ldw	r2,-24(fp)
}
 8017bfc:	e037883a 	mov	sp,fp
 8017c00:	dfc00117 	ldw	ra,4(sp)
 8017c04:	df000017 	ldw	fp,0(sp)
 8017c08:	dec00204 	addi	sp,sp,8
 8017c0c:	f800283a 	ret

08017c10 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8017c10:	defff604 	addi	sp,sp,-40
 8017c14:	dfc00915 	stw	ra,36(sp)
 8017c18:	df000815 	stw	fp,32(sp)
 8017c1c:	df000804 	addi	fp,sp,32
 8017c20:	e13ffb15 	stw	r4,-20(fp)
 8017c24:	e17ffc15 	stw	r5,-16(fp)
 8017c28:	e1bffd15 	stw	r6,-12(fp)
 8017c2c:	3807883a 	mov	r3,r7
 8017c30:	e0800217 	ldw	r2,8(fp)
 8017c34:	e0fffe05 	stb	r3,-8(fp)
 8017c38:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8017c3c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 8017c40:	0149c404 	movi	r5,10000
 8017c44:	e13ffd17 	ldw	r4,-12(fp)
 8017c48:	800832c0 	call	800832c <__mulsi3>
 8017c4c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8017c50:	e0bffb17 	ldw	r2,-20(fp)
 8017c54:	10800717 	ldw	r2,28(r2)
 8017c58:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 8017c5c:	e0bffd17 	ldw	r2,-12(fp)
 8017c60:	1000021e 	bne	r2,zero,8017c6c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8017c64:	0005883a 	mov	r2,zero
 8017c68:	00006706 	br	8017e08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8017c6c:	e0bffb17 	ldw	r2,-20(fp)
 8017c70:	10c00617 	ldw	r3,24(r2)
 8017c74:	00820074 	movhi	r2,2049
 8017c78:	109a5404 	addi	r2,r2,26960
 8017c7c:	18800226 	beq	r3,r2,8017c88 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8017c80:	00bfff44 	movi	r2,-3
 8017c84:	00006006 	br	8017e08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8017c88:	e0bffe03 	ldbu	r2,-8(fp)
 8017c8c:	10000a1e 	bne	r2,zero,8017cb8 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8017c90:	e13ffb17 	ldw	r4,-20(fp)
 8017c94:	8016ccc0 	call	8016ccc <alt_avalon_i2c_enable>
 8017c98:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8017c9c:	e0bff817 	ldw	r2,-32(fp)
 8017ca0:	10000226 	beq	r2,zero,8017cac <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 8017ca4:	e0bff817 	ldw	r2,-32(fp)
 8017ca8:	00005706 	br	8017e08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8017cac:	01400704 	movi	r5,28
 8017cb0:	e13ffb17 	ldw	r4,-20(fp)
 8017cb4:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8017cb8:	e0bffe03 	ldbu	r2,-8(fp)
 8017cbc:	100d883a 	mov	r6,r2
 8017cc0:	000b883a 	mov	r5,zero
 8017cc4:	e13ffb17 	ldw	r4,-20(fp)
 8017cc8:	80173340 	call	8017334 <alt_avalon_i2c_send_address>
 8017ccc:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 8017cd0:	e0bff817 	ldw	r2,-32(fp)
 8017cd4:	1000271e 	bne	r2,zero,8017d74 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8017cd8:	00000f06 	br	8017d18 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8017cdc:	e0bffc17 	ldw	r2,-16(fp)
 8017ce0:	10800003 	ldbu	r2,0(r2)
 8017ce4:	10803fcc 	andi	r2,r2,255
 8017ce8:	000f883a 	mov	r7,zero
 8017cec:	000d883a 	mov	r6,zero
 8017cf0:	100b883a 	mov	r5,r2
 8017cf4:	e13ffb17 	ldw	r4,-20(fp)
 8017cf8:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017cfc:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 8017d00:	e0bffc17 	ldw	r2,-16(fp)
 8017d04:	10800044 	addi	r2,r2,1
 8017d08:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8017d0c:	e0bffd17 	ldw	r2,-12(fp)
 8017d10:	10bfffc4 	addi	r2,r2,-1
 8017d14:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8017d18:	e0bffd17 	ldw	r2,-12(fp)
 8017d1c:	108000b0 	cmpltui	r2,r2,2
 8017d20:	1000021e 	bne	r2,zero,8017d2c <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 8017d24:	e0bff817 	ldw	r2,-32(fp)
 8017d28:	103fec26 	beq	r2,zero,8017cdc <__alt_data_end+0xfc017cdc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8017d2c:	e0bff817 	ldw	r2,-32(fp)
 8017d30:	1000101e 	bne	r2,zero,8017d74 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8017d34:	e0bffc17 	ldw	r2,-16(fp)
 8017d38:	10800003 	ldbu	r2,0(r2)
 8017d3c:	10803fcc 	andi	r2,r2,255
 8017d40:	e0ffff03 	ldbu	r3,-4(fp)
 8017d44:	180f883a 	mov	r7,r3
 8017d48:	000d883a 	mov	r6,zero
 8017d4c:	100b883a 	mov	r5,r2
 8017d50:	e13ffb17 	ldw	r4,-20(fp)
 8017d54:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017d58:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 8017d5c:	e0bffc17 	ldw	r2,-16(fp)
 8017d60:	10800044 	addi	r2,r2,1
 8017d64:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8017d68:	e0bffd17 	ldw	r2,-12(fp)
 8017d6c:	10bfffc4 	addi	r2,r2,-1
 8017d70:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8017d74:	e0bff817 	ldw	r2,-32(fp)
 8017d78:	10001426 	beq	r2,zero,8017dcc <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017d7c:	00000d06 	br	8017db4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 8017d80:	e0bff917 	ldw	r2,-28(fp)
 8017d84:	108002a8 	cmpgeui	r2,r2,10
 8017d88:	1000021e 	bne	r2,zero,8017d94 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 8017d8c:	0109c404 	movi	r4,10000
 8017d90:	80193ec0 	call	80193ec <alt_busy_sleep>
            if (--timeout == 0)
 8017d94:	e0bff917 	ldw	r2,-28(fp)
 8017d98:	10bfffc4 	addi	r2,r2,-1
 8017d9c:	e0bff915 	stw	r2,-28(fp)
 8017da0:	e0bff917 	ldw	r2,-28(fp)
 8017da4:	1000031e 	bne	r2,zero,8017db4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8017da8:	00bfff84 	movi	r2,-2
 8017dac:	e0bff815 	stw	r2,-32(fp)
               break;
 8017db0:	00000306 	br	8017dc0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017db4:	e13ffb17 	ldw	r4,-20(fp)
 8017db8:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 8017dbc:	103ff01e 	bne	r2,zero,8017d80 <__alt_data_end+0xfc017d80>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8017dc0:	e13ffb17 	ldw	r4,-20(fp)
 8017dc4:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>
 8017dc8:	00000e06 	br	8017e04 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 8017dcc:	e0bfff03 	ldbu	r2,-4(fp)
 8017dd0:	10000c26 	beq	r2,zero,8017e04 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8017dd4:	01400704 	movi	r5,28
 8017dd8:	e13ffb17 	ldw	r4,-20(fp)
 8017ddc:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 8017de0:	000b883a 	mov	r5,zero
 8017de4:	e13ffb17 	ldw	r4,-20(fp)
 8017de8:	80185000 	call	8018500 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 8017dec:	e0bffa17 	ldw	r2,-24(fp)
 8017df0:	00c00044 	movi	r3,1
 8017df4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 8017df8:	01400044 	movi	r5,1
 8017dfc:	e13ffb17 	ldw	r4,-20(fp)
 8017e00:	801835c0 	call	801835c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 8017e04:	e0bff817 	ldw	r2,-32(fp)
}
 8017e08:	e037883a 	mov	sp,fp
 8017e0c:	dfc00117 	ldw	ra,4(sp)
 8017e10:	df000017 	ldw	fp,0(sp)
 8017e14:	dec00204 	addi	sp,sp,8
 8017e18:	f800283a 	ret

08017e1c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8017e1c:	defff404 	addi	sp,sp,-48
 8017e20:	dfc00b15 	stw	ra,44(sp)
 8017e24:	df000a15 	stw	fp,40(sp)
 8017e28:	df000a04 	addi	fp,sp,40
 8017e2c:	e13ffb15 	stw	r4,-20(fp)
 8017e30:	e17ffc15 	stw	r5,-16(fp)
 8017e34:	e1bffd15 	stw	r6,-12(fp)
 8017e38:	3807883a 	mov	r3,r7
 8017e3c:	e0800217 	ldw	r2,8(fp)
 8017e40:	e0fffe05 	stb	r3,-8(fp)
 8017e44:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8017e48:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 8017e4c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 8017e50:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 8017e54:	e0bffd17 	ldw	r2,-12(fp)
 8017e58:	1000021e 	bne	r2,zero,8017e64 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8017e5c:	0005883a 	mov	r2,zero
 8017e60:	00006d06 	br	8018018 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8017e64:	e0bffe03 	ldbu	r2,-8(fp)
 8017e68:	10000a1e 	bne	r2,zero,8017e94 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8017e6c:	e13ffb17 	ldw	r4,-20(fp)
 8017e70:	8016ccc0 	call	8016ccc <alt_avalon_i2c_enable>
 8017e74:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8017e78:	e0bff917 	ldw	r2,-28(fp)
 8017e7c:	10000226 	beq	r2,zero,8017e88 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 8017e80:	e0bff917 	ldw	r2,-28(fp)
 8017e84:	00006406 	br	8018018 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8017e88:	01400704 	movi	r5,28
 8017e8c:	e13ffb17 	ldw	r4,-20(fp)
 8017e90:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8017e94:	e0bffe03 	ldbu	r2,-8(fp)
 8017e98:	100d883a 	mov	r6,r2
 8017e9c:	01400044 	movi	r5,1
 8017ea0:	e13ffb17 	ldw	r4,-20(fp)
 8017ea4:	80173340 	call	8017334 <alt_avalon_i2c_send_address>
 8017ea8:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8017eac:	e0bff917 	ldw	r2,-28(fp)
 8017eb0:	1000341e 	bne	r2,zero,8017f84 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8017eb4:	00001906 	br	8017f1c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8017eb8:	000f883a 	mov	r7,zero
 8017ebc:	000d883a 	mov	r6,zero
 8017ec0:	000b883a 	mov	r5,zero
 8017ec4:	e13ffb17 	ldw	r4,-20(fp)
 8017ec8:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017ecc:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 8017ed0:	e0bff817 	ldw	r2,-32(fp)
 8017ed4:	10800044 	addi	r2,r2,1
 8017ed8:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 8017edc:	e0bff917 	ldw	r2,-28(fp)
 8017ee0:	10000e1e 	bne	r2,zero,8017f1c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 8017ee4:	e0bffa04 	addi	r2,fp,-24
 8017ee8:	100f883a 	mov	r7,r2
 8017eec:	000d883a 	mov	r6,zero
 8017ef0:	e17ffc17 	ldw	r5,-16(fp)
 8017ef4:	e13ffb17 	ldw	r4,-20(fp)
 8017ef8:	80171000 	call	8017100 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 8017efc:	e0bffa17 	ldw	r2,-24(fp)
 8017f00:	e0fffc17 	ldw	r3,-16(fp)
 8017f04:	1885883a 	add	r2,r3,r2
 8017f08:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 8017f0c:	e0bffa17 	ldw	r2,-24(fp)
 8017f10:	e0fff717 	ldw	r3,-36(fp)
 8017f14:	1885883a 	add	r2,r3,r2
 8017f18:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8017f1c:	e0bffd17 	ldw	r2,-12(fp)
 8017f20:	10bfffc4 	addi	r2,r2,-1
 8017f24:	e0fff817 	ldw	r3,-32(fp)
 8017f28:	1880022e 	bgeu	r3,r2,8017f34 <alt_avalon_i2c_master_receive+0x118>
 8017f2c:	e0bff917 	ldw	r2,-28(fp)
 8017f30:	103fe126 	beq	r2,zero,8017eb8 <__alt_data_end+0xfc017eb8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8017f34:	e0bff917 	ldw	r2,-28(fp)
 8017f38:	1000121e 	bne	r2,zero,8017f84 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8017f3c:	e0bfff03 	ldbu	r2,-4(fp)
 8017f40:	100f883a 	mov	r7,r2
 8017f44:	000d883a 	mov	r6,zero
 8017f48:	000b883a 	mov	r5,zero
 8017f4c:	e13ffb17 	ldw	r4,-20(fp)
 8017f50:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8017f54:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8017f58:	00000a06 	br	8017f84 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 8017f5c:	e17ffc17 	ldw	r5,-16(fp)
 8017f60:	e13ffb17 	ldw	r4,-20(fp)
 8017f64:	80171a80 	call	80171a8 <alt_avalon_i2c_rx_read>
 8017f68:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 8017f6c:	e0bffc17 	ldw	r2,-16(fp)
 8017f70:	10800044 	addi	r2,r2,1
 8017f74:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 8017f78:	e0bff717 	ldw	r2,-36(fp)
 8017f7c:	10800044 	addi	r2,r2,1
 8017f80:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8017f84:	e0fff717 	ldw	r3,-36(fp)
 8017f88:	e0bffd17 	ldw	r2,-12(fp)
 8017f8c:	1880022e 	bgeu	r3,r2,8017f98 <alt_avalon_i2c_master_receive+0x17c>
 8017f90:	e0bff917 	ldw	r2,-28(fp)
 8017f94:	103ff126 	beq	r2,zero,8017f5c <__alt_data_end+0xfc017f5c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8017f98:	e0bfff03 	ldbu	r2,-4(fp)
 8017f9c:	1000021e 	bne	r2,zero,8017fa8 <alt_avalon_i2c_master_receive+0x18c>
 8017fa0:	e0bff917 	ldw	r2,-28(fp)
 8017fa4:	10001b26 	beq	r2,zero,8018014 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 8017fa8:	0149c404 	movi	r5,10000
 8017fac:	e13ffd17 	ldw	r4,-12(fp)
 8017fb0:	800832c0 	call	800832c <__mulsi3>
 8017fb4:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017fb8:	00000d06 	br	8017ff0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8017fbc:	e0bff617 	ldw	r2,-40(fp)
 8017fc0:	108002a8 	cmpgeui	r2,r2,10
 8017fc4:	1000021e 	bne	r2,zero,8017fd0 <alt_avalon_i2c_master_receive+0x1b4>
 8017fc8:	0109c404 	movi	r4,10000
 8017fcc:	80193ec0 	call	80193ec <alt_busy_sleep>
            if (--timeout == 0)
 8017fd0:	e0bff617 	ldw	r2,-40(fp)
 8017fd4:	10bfffc4 	addi	r2,r2,-1
 8017fd8:	e0bff615 	stw	r2,-40(fp)
 8017fdc:	e0bff617 	ldw	r2,-40(fp)
 8017fe0:	1000031e 	bne	r2,zero,8017ff0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8017fe4:	00bfff84 	movi	r2,-2
 8017fe8:	e0bff915 	stw	r2,-28(fp)
               break;
 8017fec:	00000306 	br	8017ffc <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8017ff0:	e13ffb17 	ldw	r4,-20(fp)
 8017ff4:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 8017ff8:	103ff01e 	bne	r2,zero,8017fbc <__alt_data_end+0xfc017fbc>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 8017ffc:	e0bff904 	addi	r2,fp,-28
 8018000:	100b883a 	mov	r5,r2
 8018004:	e13ffb17 	ldw	r4,-20(fp)
 8018008:	80174900 	call	8017490 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 801800c:	e13ffb17 	ldw	r4,-20(fp)
 8018010:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>
    }

    return status;
 8018014:	e0bff917 	ldw	r2,-28(fp)
}
 8018018:	e037883a 	mov	sp,fp
 801801c:	dfc00117 	ldw	ra,4(sp)
 8018020:	df000017 	ldw	fp,0(sp)
 8018024:	dec00204 	addi	sp,sp,8
 8018028:	f800283a 	ret

0801802c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 801802c:	defff504 	addi	sp,sp,-44
 8018030:	dfc00a15 	stw	ra,40(sp)
 8018034:	df000915 	stw	fp,36(sp)
 8018038:	df000904 	addi	fp,sp,36
 801803c:	e13ffb15 	stw	r4,-20(fp)
 8018040:	e17ffc15 	stw	r5,-16(fp)
 8018044:	e1bffd15 	stw	r6,-12(fp)
 8018048:	3807883a 	mov	r3,r7
 801804c:	e0800217 	ldw	r2,8(fp)
 8018050:	e0fffe05 	stb	r3,-8(fp)
 8018054:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8018058:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 801805c:	e0bffb17 	ldw	r2,-20(fp)
 8018060:	10800717 	ldw	r2,28(r2)
 8018064:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 8018068:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 801806c:	e0bffd17 	ldw	r2,-12(fp)
 8018070:	1000021e 	bne	r2,zero,801807c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8018074:	0005883a 	mov	r2,zero
 8018078:	00006306 	br	8018208 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 801807c:	e0bffb17 	ldw	r2,-20(fp)
 8018080:	10c00617 	ldw	r3,24(r2)
 8018084:	00820074 	movhi	r2,2049
 8018088:	109a5404 	addi	r2,r2,26960
 801808c:	18800226 	beq	r3,r2,8018098 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8018090:	00bfff44 	movi	r2,-3
 8018094:	00005c06 	br	8018208 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8018098:	e0bffe03 	ldbu	r2,-8(fp)
 801809c:	10000a1e 	bne	r2,zero,80180c8 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 80180a0:	e13ffb17 	ldw	r4,-20(fp)
 80180a4:	8016ccc0 	call	8016ccc <alt_avalon_i2c_enable>
 80180a8:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 80180ac:	e0bff717 	ldw	r2,-36(fp)
 80180b0:	10000226 	beq	r2,zero,80180bc <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 80180b4:	e0bff717 	ldw	r2,-36(fp)
 80180b8:	00005306 	br	8018208 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80180bc:	01400704 	movi	r5,28
 80180c0:	e13ffb17 	ldw	r4,-20(fp)
 80180c4:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 80180c8:	e0bffe03 	ldbu	r2,-8(fp)
 80180cc:	100d883a 	mov	r6,r2
 80180d0:	01400044 	movi	r5,1
 80180d4:	e13ffb17 	ldw	r4,-20(fp)
 80180d8:	80173340 	call	8017334 <alt_avalon_i2c_send_address>
 80180dc:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 80180e0:	e0bff717 	ldw	r2,-36(fp)
 80180e4:	1000191e 	bne	r2,zero,801814c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80180e8:	00000906 	br	8018110 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80180ec:	000f883a 	mov	r7,zero
 80180f0:	000d883a 	mov	r6,zero
 80180f4:	000b883a 	mov	r5,zero
 80180f8:	e13ffb17 	ldw	r4,-20(fp)
 80180fc:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8018100:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 8018104:	e0bff917 	ldw	r2,-28(fp)
 8018108:	10800044 	addi	r2,r2,1
 801810c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8018110:	e0bffd17 	ldw	r2,-12(fp)
 8018114:	10bfffc4 	addi	r2,r2,-1
 8018118:	e0fff917 	ldw	r3,-28(fp)
 801811c:	1880022e 	bgeu	r3,r2,8018128 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 8018120:	e0bff717 	ldw	r2,-36(fp)
 8018124:	103ff126 	beq	r2,zero,80180ec <__alt_data_end+0xfc0180ec>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8018128:	e0bff717 	ldw	r2,-36(fp)
 801812c:	1000071e 	bne	r2,zero,801814c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8018130:	e0bfff03 	ldbu	r2,-4(fp)
 8018134:	100f883a 	mov	r7,r2
 8018138:	000d883a 	mov	r6,zero
 801813c:	000b883a 	mov	r5,zero
 8018140:	e13ffb17 	ldw	r4,-20(fp)
 8018144:	80172500 	call	8017250 <alt_avalon_i2c_cmd_write>
 8018148:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 801814c:	e0bff717 	ldw	r2,-36(fp)
 8018150:	10001826 	beq	r2,zero,80181b4 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 8018154:	0149c404 	movi	r5,10000
 8018158:	e13ffd17 	ldw	r4,-12(fp)
 801815c:	800832c0 	call	800832c <__mulsi3>
 8018160:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8018164:	00000d06 	br	801819c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8018168:	e0bff817 	ldw	r2,-32(fp)
 801816c:	108002a8 	cmpgeui	r2,r2,10
 8018170:	1000021e 	bne	r2,zero,801817c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 8018174:	0109c404 	movi	r4,10000
 8018178:	80193ec0 	call	80193ec <alt_busy_sleep>
            if (--timeout == 0)
 801817c:	e0bff817 	ldw	r2,-32(fp)
 8018180:	10bfffc4 	addi	r2,r2,-1
 8018184:	e0bff815 	stw	r2,-32(fp)
 8018188:	e0bff817 	ldw	r2,-32(fp)
 801818c:	1000031e 	bne	r2,zero,801819c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8018190:	00bfff84 	movi	r2,-2
 8018194:	e0bff715 	stw	r2,-36(fp)
               break;
 8018198:	00000306 	br	80181a8 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 801819c:	e13ffb17 	ldw	r4,-20(fp)
 80181a0:	80170bc0 	call	80170bc <alt_avalon_i2c_is_busy>
 80181a4:	103ff01e 	bne	r2,zero,8018168 <__alt_data_end+0xfc018168>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 80181a8:	e13ffb17 	ldw	r4,-20(fp)
 80181ac:	8016d640 	call	8016d64 <alt_avalon_i2c_disable>
 80181b0:	00001406 	br	8018204 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 80181b4:	e0bfff03 	ldbu	r2,-4(fp)
 80181b8:	10001226 	beq	r2,zero,8018204 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80181bc:	01400704 	movi	r5,28
 80181c0:	e13ffb17 	ldw	r4,-20(fp)
 80181c4:	80182b80 	call	80182b8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 80181c8:	000b883a 	mov	r5,zero
 80181cc:	e13ffb17 	ldw	r4,-20(fp)
 80181d0:	80184500 	call	8018450 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 80181d4:	e0bffa17 	ldw	r2,-24(fp)
 80181d8:	00c00084 	movi	r3,2
 80181dc:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 80181e0:	e0bffa17 	ldw	r2,-24(fp)
 80181e4:	e0fffc17 	ldw	r3,-16(fp)
 80181e8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 80181ec:	e0bffa17 	ldw	r2,-24(fp)
 80181f0:	e0fffd17 	ldw	r3,-12(fp)
 80181f4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80181f8:	01400084 	movi	r5,2
 80181fc:	e13ffb17 	ldw	r4,-20(fp)
 8018200:	801835c0 	call	801835c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 8018204:	e0bff717 	ldw	r2,-36(fp)
}
 8018208:	e037883a 	mov	sp,fp
 801820c:	dfc00117 	ldw	ra,4(sp)
 8018210:	df000017 	ldw	fp,0(sp)
 8018214:	dec00204 	addi	sp,sp,8
 8018218:	f800283a 	ret

0801821c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 801821c:	defffd04 	addi	sp,sp,-12
 8018220:	df000215 	stw	fp,8(sp)
 8018224:	df000204 	addi	fp,sp,8
 8018228:	e13ffe15 	stw	r4,-8(fp)
 801822c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 8018230:	e0bffe17 	ldw	r2,-8(fp)
 8018234:	10800317 	ldw	r2,12(r2)
 8018238:	10800404 	addi	r2,r2,16
 801823c:	10c00037 	ldwio	r3,0(r2)
 8018240:	e0bffe17 	ldw	r2,-8(fp)
 8018244:	10800317 	ldw	r2,12(r2)
 8018248:	10800304 	addi	r2,r2,12
 801824c:	10800037 	ldwio	r2,0(r2)
 8018250:	1884703a 	and	r2,r3,r2
 8018254:	1007883a 	mov	r3,r2
 8018258:	e0bfff17 	ldw	r2,-4(fp)
 801825c:	10c00015 	stw	r3,0(r2)
}
 8018260:	0001883a 	nop
 8018264:	e037883a 	mov	sp,fp
 8018268:	df000017 	ldw	fp,0(sp)
 801826c:	dec00104 	addi	sp,sp,4
 8018270:	f800283a 	ret

08018274 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 8018274:	defffd04 	addi	sp,sp,-12
 8018278:	df000215 	stw	fp,8(sp)
 801827c:	df000204 	addi	fp,sp,8
 8018280:	e13ffe15 	stw	r4,-8(fp)
 8018284:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 8018288:	e0bffe17 	ldw	r2,-8(fp)
 801828c:	10800317 	ldw	r2,12(r2)
 8018290:	10800404 	addi	r2,r2,16
 8018294:	10800037 	ldwio	r2,0(r2)
 8018298:	1007883a 	mov	r3,r2
 801829c:	e0bfff17 	ldw	r2,-4(fp)
 80182a0:	10c00015 	stw	r3,0(r2)
}
 80182a4:	0001883a 	nop
 80182a8:	e037883a 	mov	sp,fp
 80182ac:	df000017 	ldw	fp,0(sp)
 80182b0:	dec00104 	addi	sp,sp,4
 80182b4:	f800283a 	ret

080182b8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80182b8:	defffd04 	addi	sp,sp,-12
 80182bc:	df000215 	stw	fp,8(sp)
 80182c0:	df000204 	addi	fp,sp,8
 80182c4:	e13ffe15 	stw	r4,-8(fp)
 80182c8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 80182cc:	e0bffe17 	ldw	r2,-8(fp)
 80182d0:	10800317 	ldw	r2,12(r2)
 80182d4:	10800404 	addi	r2,r2,16
 80182d8:	e0ffff17 	ldw	r3,-4(fp)
 80182dc:	10c00035 	stwio	r3,0(r2)
}
 80182e0:	0001883a 	nop
 80182e4:	e037883a 	mov	sp,fp
 80182e8:	df000017 	ldw	fp,0(sp)
 80182ec:	dec00104 	addi	sp,sp,4
 80182f0:	f800283a 	ret

080182f4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80182f4:	defffb04 	addi	sp,sp,-20
 80182f8:	dfc00415 	stw	ra,16(sp)
 80182fc:	df000315 	stw	fp,12(sp)
 8018300:	df000304 	addi	fp,sp,12
 8018304:	e13ffe15 	stw	r4,-8(fp)
 8018308:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 801830c:	e17ffd04 	addi	r5,fp,-12
 8018310:	e13ffe17 	ldw	r4,-8(fp)
 8018314:	80183c00 	call	80183c0 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 8018318:	e0bfff17 	ldw	r2,-4(fp)
 801831c:	0086303a 	nor	r3,zero,r2
 8018320:	e0bffd17 	ldw	r2,-12(fp)
 8018324:	1884703a 	and	r2,r3,r2
 8018328:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801832c:	e0bffe17 	ldw	r2,-8(fp)
 8018330:	10800317 	ldw	r2,12(r2)
 8018334:	10800304 	addi	r2,r2,12
 8018338:	e0fffd17 	ldw	r3,-12(fp)
 801833c:	18c007cc 	andi	r3,r3,31
 8018340:	10c00035 	stwio	r3,0(r2)
}
 8018344:	0001883a 	nop
 8018348:	e037883a 	mov	sp,fp
 801834c:	dfc00117 	ldw	ra,4(sp)
 8018350:	df000017 	ldw	fp,0(sp)
 8018354:	dec00204 	addi	sp,sp,8
 8018358:	f800283a 	ret

0801835c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 801835c:	defffb04 	addi	sp,sp,-20
 8018360:	dfc00415 	stw	ra,16(sp)
 8018364:	df000315 	stw	fp,12(sp)
 8018368:	df000304 	addi	fp,sp,12
 801836c:	e13ffe15 	stw	r4,-8(fp)
 8018370:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8018374:	e17ffd04 	addi	r5,fp,-12
 8018378:	e13ffe17 	ldw	r4,-8(fp)
 801837c:	80183c00 	call	80183c0 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 8018380:	e0fffd17 	ldw	r3,-12(fp)
 8018384:	e0bfff17 	ldw	r2,-4(fp)
 8018388:	1884b03a 	or	r2,r3,r2
 801838c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8018390:	e0bffe17 	ldw	r2,-8(fp)
 8018394:	10800317 	ldw	r2,12(r2)
 8018398:	10800304 	addi	r2,r2,12
 801839c:	e0fffd17 	ldw	r3,-12(fp)
 80183a0:	18c007cc 	andi	r3,r3,31
 80183a4:	10c00035 	stwio	r3,0(r2)
}
 80183a8:	0001883a 	nop
 80183ac:	e037883a 	mov	sp,fp
 80183b0:	dfc00117 	ldw	ra,4(sp)
 80183b4:	df000017 	ldw	fp,0(sp)
 80183b8:	dec00204 	addi	sp,sp,8
 80183bc:	f800283a 	ret

080183c0 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 80183c0:	defffd04 	addi	sp,sp,-12
 80183c4:	df000215 	stw	fp,8(sp)
 80183c8:	df000204 	addi	fp,sp,8
 80183cc:	e13ffe15 	stw	r4,-8(fp)
 80183d0:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 80183d4:	e0bffe17 	ldw	r2,-8(fp)
 80183d8:	10800317 	ldw	r2,12(r2)
 80183dc:	10800304 	addi	r2,r2,12
 80183e0:	10800037 	ldwio	r2,0(r2)
 80183e4:	10c007cc 	andi	r3,r2,31
 80183e8:	e0bfff17 	ldw	r2,-4(fp)
 80183ec:	10c00015 	stw	r3,0(r2)
}
 80183f0:	0001883a 	nop
 80183f4:	e037883a 	mov	sp,fp
 80183f8:	df000017 	ldw	fp,0(sp)
 80183fc:	dec00104 	addi	sp,sp,4
 8018400:	f800283a 	ret

08018404 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 8018404:	defffd04 	addi	sp,sp,-12
 8018408:	df000215 	stw	fp,8(sp)
 801840c:	df000204 	addi	fp,sp,8
 8018410:	e13ffe15 	stw	r4,-8(fp)
 8018414:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 8018418:	e0bffe17 	ldw	r2,-8(fp)
 801841c:	10800317 	ldw	r2,12(r2)
 8018420:	10800204 	addi	r2,r2,8
 8018424:	10800037 	ldwio	r2,0(r2)
 8018428:	10800c0c 	andi	r2,r2,48
 801842c:	1005d13a 	srai	r2,r2,4
 8018430:	1007883a 	mov	r3,r2
 8018434:	e0bfff17 	ldw	r2,-4(fp)
 8018438:	10c00015 	stw	r3,0(r2)
}
 801843c:	0001883a 	nop
 8018440:	e037883a 	mov	sp,fp
 8018444:	df000017 	ldw	fp,0(sp)
 8018448:	dec00104 	addi	sp,sp,4
 801844c:	f800283a 	ret

08018450 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 8018450:	defffd04 	addi	sp,sp,-12
 8018454:	df000215 	stw	fp,8(sp)
 8018458:	df000204 	addi	fp,sp,8
 801845c:	e13ffe15 	stw	r4,-8(fp)
 8018460:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 8018464:	e0bffe17 	ldw	r2,-8(fp)
 8018468:	10800317 	ldw	r2,12(r2)
 801846c:	10800204 	addi	r2,r2,8
 8018470:	e0fffe17 	ldw	r3,-8(fp)
 8018474:	18c00317 	ldw	r3,12(r3)
 8018478:	18c00204 	addi	r3,r3,8
 801847c:	18c00037 	ldwio	r3,0(r3)
 8018480:	1809883a 	mov	r4,r3
 8018484:	00fff3c4 	movi	r3,-49
 8018488:	20c8703a 	and	r4,r4,r3
 801848c:	e0ffff17 	ldw	r3,-4(fp)
 8018490:	1806913a 	slli	r3,r3,4
 8018494:	18c00c0c 	andi	r3,r3,48
 8018498:	20c6b03a 	or	r3,r4,r3
 801849c:	10c00035 	stwio	r3,0(r2)
}
 80184a0:	0001883a 	nop
 80184a4:	e037883a 	mov	sp,fp
 80184a8:	df000017 	ldw	fp,0(sp)
 80184ac:	dec00104 	addi	sp,sp,4
 80184b0:	f800283a 	ret

080184b4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 80184b4:	defffd04 	addi	sp,sp,-12
 80184b8:	df000215 	stw	fp,8(sp)
 80184bc:	df000204 	addi	fp,sp,8
 80184c0:	e13ffe15 	stw	r4,-8(fp)
 80184c4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 80184c8:	e0bffe17 	ldw	r2,-8(fp)
 80184cc:	10800317 	ldw	r2,12(r2)
 80184d0:	10800204 	addi	r2,r2,8
 80184d4:	10800037 	ldwio	r2,0(r2)
 80184d8:	1080030c 	andi	r2,r2,12
 80184dc:	1005d0ba 	srai	r2,r2,2
 80184e0:	1007883a 	mov	r3,r2
 80184e4:	e0bfff17 	ldw	r2,-4(fp)
 80184e8:	10c00015 	stw	r3,0(r2)
}
 80184ec:	0001883a 	nop
 80184f0:	e037883a 	mov	sp,fp
 80184f4:	df000017 	ldw	fp,0(sp)
 80184f8:	dec00104 	addi	sp,sp,4
 80184fc:	f800283a 	ret

08018500 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 8018500:	defffd04 	addi	sp,sp,-12
 8018504:	df000215 	stw	fp,8(sp)
 8018508:	df000204 	addi	fp,sp,8
 801850c:	e13ffe15 	stw	r4,-8(fp)
 8018510:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 8018514:	e0bffe17 	ldw	r2,-8(fp)
 8018518:	10800317 	ldw	r2,12(r2)
 801851c:	10c00204 	addi	r3,r2,8
 8018520:	e0bffe17 	ldw	r2,-8(fp)
 8018524:	10800317 	ldw	r2,12(r2)
 8018528:	10800204 	addi	r2,r2,8
 801852c:	10800037 	ldwio	r2,0(r2)
 8018530:	1009883a 	mov	r4,r2
 8018534:	00bffcc4 	movi	r2,-13
 8018538:	2088703a 	and	r4,r4,r2
 801853c:	e0bfff17 	ldw	r2,-4(fp)
 8018540:	1085883a 	add	r2,r2,r2
 8018544:	1085883a 	add	r2,r2,r2
 8018548:	1080030c 	andi	r2,r2,12
 801854c:	2084b03a 	or	r2,r4,r2
 8018550:	18800035 	stwio	r2,0(r3)
}
 8018554:	0001883a 	nop
 8018558:	e037883a 	mov	sp,fp
 801855c:	df000017 	ldw	fp,0(sp)
 8018560:	dec00104 	addi	sp,sp,4
 8018564:	f800283a 	ret

08018568 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8018568:	defffa04 	addi	sp,sp,-24
 801856c:	dfc00515 	stw	ra,20(sp)
 8018570:	df000415 	stw	fp,16(sp)
 8018574:	df000404 	addi	fp,sp,16
 8018578:	e13ffd15 	stw	r4,-12(fp)
 801857c:	e17ffe15 	stw	r5,-8(fp)
 8018580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8018584:	e0bffd17 	ldw	r2,-12(fp)
 8018588:	10800017 	ldw	r2,0(r2)
 801858c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8018590:	e0bffc17 	ldw	r2,-16(fp)
 8018594:	10c00a04 	addi	r3,r2,40
 8018598:	e0bffd17 	ldw	r2,-12(fp)
 801859c:	10800217 	ldw	r2,8(r2)
 80185a0:	100f883a 	mov	r7,r2
 80185a4:	e1bfff17 	ldw	r6,-4(fp)
 80185a8:	e17ffe17 	ldw	r5,-8(fp)
 80185ac:	1809883a 	mov	r4,r3
 80185b0:	8018b900 	call	8018b90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80185b4:	e037883a 	mov	sp,fp
 80185b8:	dfc00117 	ldw	ra,4(sp)
 80185bc:	df000017 	ldw	fp,0(sp)
 80185c0:	dec00204 	addi	sp,sp,8
 80185c4:	f800283a 	ret

080185c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80185c8:	defffa04 	addi	sp,sp,-24
 80185cc:	dfc00515 	stw	ra,20(sp)
 80185d0:	df000415 	stw	fp,16(sp)
 80185d4:	df000404 	addi	fp,sp,16
 80185d8:	e13ffd15 	stw	r4,-12(fp)
 80185dc:	e17ffe15 	stw	r5,-8(fp)
 80185e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80185e4:	e0bffd17 	ldw	r2,-12(fp)
 80185e8:	10800017 	ldw	r2,0(r2)
 80185ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80185f0:	e0bffc17 	ldw	r2,-16(fp)
 80185f4:	10c00a04 	addi	r3,r2,40
 80185f8:	e0bffd17 	ldw	r2,-12(fp)
 80185fc:	10800217 	ldw	r2,8(r2)
 8018600:	100f883a 	mov	r7,r2
 8018604:	e1bfff17 	ldw	r6,-4(fp)
 8018608:	e17ffe17 	ldw	r5,-8(fp)
 801860c:	1809883a 	mov	r4,r3
 8018610:	8018dac0 	call	8018dac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8018614:	e037883a 	mov	sp,fp
 8018618:	dfc00117 	ldw	ra,4(sp)
 801861c:	df000017 	ldw	fp,0(sp)
 8018620:	dec00204 	addi	sp,sp,8
 8018624:	f800283a 	ret

08018628 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8018628:	defffc04 	addi	sp,sp,-16
 801862c:	dfc00315 	stw	ra,12(sp)
 8018630:	df000215 	stw	fp,8(sp)
 8018634:	df000204 	addi	fp,sp,8
 8018638:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801863c:	e0bfff17 	ldw	r2,-4(fp)
 8018640:	10800017 	ldw	r2,0(r2)
 8018644:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8018648:	e0bffe17 	ldw	r2,-8(fp)
 801864c:	10c00a04 	addi	r3,r2,40
 8018650:	e0bfff17 	ldw	r2,-4(fp)
 8018654:	10800217 	ldw	r2,8(r2)
 8018658:	100b883a 	mov	r5,r2
 801865c:	1809883a 	mov	r4,r3
 8018660:	8018a380 	call	8018a38 <altera_avalon_jtag_uart_close>
}
 8018664:	e037883a 	mov	sp,fp
 8018668:	dfc00117 	ldw	ra,4(sp)
 801866c:	df000017 	ldw	fp,0(sp)
 8018670:	dec00204 	addi	sp,sp,8
 8018674:	f800283a 	ret

08018678 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8018678:	defffa04 	addi	sp,sp,-24
 801867c:	dfc00515 	stw	ra,20(sp)
 8018680:	df000415 	stw	fp,16(sp)
 8018684:	df000404 	addi	fp,sp,16
 8018688:	e13ffd15 	stw	r4,-12(fp)
 801868c:	e17ffe15 	stw	r5,-8(fp)
 8018690:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8018694:	e0bffd17 	ldw	r2,-12(fp)
 8018698:	10800017 	ldw	r2,0(r2)
 801869c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80186a0:	e0bffc17 	ldw	r2,-16(fp)
 80186a4:	10800a04 	addi	r2,r2,40
 80186a8:	e1bfff17 	ldw	r6,-4(fp)
 80186ac:	e17ffe17 	ldw	r5,-8(fp)
 80186b0:	1009883a 	mov	r4,r2
 80186b4:	8018aa00 	call	8018aa0 <altera_avalon_jtag_uart_ioctl>
}
 80186b8:	e037883a 	mov	sp,fp
 80186bc:	dfc00117 	ldw	ra,4(sp)
 80186c0:	df000017 	ldw	fp,0(sp)
 80186c4:	dec00204 	addi	sp,sp,8
 80186c8:	f800283a 	ret

080186cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80186cc:	defffa04 	addi	sp,sp,-24
 80186d0:	dfc00515 	stw	ra,20(sp)
 80186d4:	df000415 	stw	fp,16(sp)
 80186d8:	df000404 	addi	fp,sp,16
 80186dc:	e13ffd15 	stw	r4,-12(fp)
 80186e0:	e17ffe15 	stw	r5,-8(fp)
 80186e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80186e8:	e0bffd17 	ldw	r2,-12(fp)
 80186ec:	00c00044 	movi	r3,1
 80186f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80186f4:	e0bffd17 	ldw	r2,-12(fp)
 80186f8:	10800017 	ldw	r2,0(r2)
 80186fc:	10800104 	addi	r2,r2,4
 8018700:	1007883a 	mov	r3,r2
 8018704:	e0bffd17 	ldw	r2,-12(fp)
 8018708:	10800817 	ldw	r2,32(r2)
 801870c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8018710:	e0bffe17 	ldw	r2,-8(fp)
 8018714:	e0ffff17 	ldw	r3,-4(fp)
 8018718:	d8000015 	stw	zero,0(sp)
 801871c:	e1fffd17 	ldw	r7,-12(fp)
 8018720:	018200b4 	movhi	r6,2050
 8018724:	31a1e304 	addi	r6,r6,-30836
 8018728:	180b883a 	mov	r5,r3
 801872c:	1009883a 	mov	r4,r2
 8018730:	80197b40 	call	80197b4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8018734:	e0bffd17 	ldw	r2,-12(fp)
 8018738:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801873c:	e0bffd17 	ldw	r2,-12(fp)
 8018740:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8018744:	d0e76617 	ldw	r3,-25192(gp)
 8018748:	e1fffd17 	ldw	r7,-12(fp)
 801874c:	018200b4 	movhi	r6,2050
 8018750:	31a26604 	addi	r6,r6,-30312
 8018754:	180b883a 	mov	r5,r3
 8018758:	1009883a 	mov	r4,r2
 801875c:	80192c00 	call	80192c0 <alt_alarm_start>
 8018760:	1000040e 	bge	r2,zero,8018774 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8018764:	e0fffd17 	ldw	r3,-12(fp)
 8018768:	00a00034 	movhi	r2,32768
 801876c:	10bfffc4 	addi	r2,r2,-1
 8018770:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8018774:	0001883a 	nop
 8018778:	e037883a 	mov	sp,fp
 801877c:	dfc00117 	ldw	ra,4(sp)
 8018780:	df000017 	ldw	fp,0(sp)
 8018784:	dec00204 	addi	sp,sp,8
 8018788:	f800283a 	ret

0801878c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801878c:	defff804 	addi	sp,sp,-32
 8018790:	df000715 	stw	fp,28(sp)
 8018794:	df000704 	addi	fp,sp,28
 8018798:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801879c:	e0bfff17 	ldw	r2,-4(fp)
 80187a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80187a4:	e0bffb17 	ldw	r2,-20(fp)
 80187a8:	10800017 	ldw	r2,0(r2)
 80187ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80187b0:	e0bffc17 	ldw	r2,-16(fp)
 80187b4:	10800104 	addi	r2,r2,4
 80187b8:	10800037 	ldwio	r2,0(r2)
 80187bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80187c0:	e0bffd17 	ldw	r2,-12(fp)
 80187c4:	1080c00c 	andi	r2,r2,768
 80187c8:	10006d26 	beq	r2,zero,8018980 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80187cc:	e0bffd17 	ldw	r2,-12(fp)
 80187d0:	1080400c 	andi	r2,r2,256
 80187d4:	10003526 	beq	r2,zero,80188ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80187d8:	00800074 	movhi	r2,1
 80187dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80187e0:	e0bffb17 	ldw	r2,-20(fp)
 80187e4:	10800a17 	ldw	r2,40(r2)
 80187e8:	10800044 	addi	r2,r2,1
 80187ec:	1081ffcc 	andi	r2,r2,2047
 80187f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80187f4:	e0bffb17 	ldw	r2,-20(fp)
 80187f8:	10c00b17 	ldw	r3,44(r2)
 80187fc:	e0bffe17 	ldw	r2,-8(fp)
 8018800:	18801526 	beq	r3,r2,8018858 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8018804:	e0bffc17 	ldw	r2,-16(fp)
 8018808:	10800037 	ldwio	r2,0(r2)
 801880c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8018810:	e0bff917 	ldw	r2,-28(fp)
 8018814:	10a0000c 	andi	r2,r2,32768
 8018818:	10001126 	beq	r2,zero,8018860 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801881c:	e0bffb17 	ldw	r2,-20(fp)
 8018820:	10800a17 	ldw	r2,40(r2)
 8018824:	e0fff917 	ldw	r3,-28(fp)
 8018828:	1809883a 	mov	r4,r3
 801882c:	e0fffb17 	ldw	r3,-20(fp)
 8018830:	1885883a 	add	r2,r3,r2
 8018834:	10800e04 	addi	r2,r2,56
 8018838:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801883c:	e0bffb17 	ldw	r2,-20(fp)
 8018840:	10800a17 	ldw	r2,40(r2)
 8018844:	10800044 	addi	r2,r2,1
 8018848:	10c1ffcc 	andi	r3,r2,2047
 801884c:	e0bffb17 	ldw	r2,-20(fp)
 8018850:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8018854:	003fe206 	br	80187e0 <__alt_data_end+0xfc0187e0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8018858:	0001883a 	nop
 801885c:	00000106 	br	8018864 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8018860:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8018864:	e0bff917 	ldw	r2,-28(fp)
 8018868:	10bfffec 	andhi	r2,r2,65535
 801886c:	10000f26 	beq	r2,zero,80188ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8018870:	e0bffb17 	ldw	r2,-20(fp)
 8018874:	10c00817 	ldw	r3,32(r2)
 8018878:	00bfff84 	movi	r2,-2
 801887c:	1886703a 	and	r3,r3,r2
 8018880:	e0bffb17 	ldw	r2,-20(fp)
 8018884:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8018888:	e0bffc17 	ldw	r2,-16(fp)
 801888c:	10800104 	addi	r2,r2,4
 8018890:	1007883a 	mov	r3,r2
 8018894:	e0bffb17 	ldw	r2,-20(fp)
 8018898:	10800817 	ldw	r2,32(r2)
 801889c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80188a0:	e0bffc17 	ldw	r2,-16(fp)
 80188a4:	10800104 	addi	r2,r2,4
 80188a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80188ac:	e0bffd17 	ldw	r2,-12(fp)
 80188b0:	1080800c 	andi	r2,r2,512
 80188b4:	103fbe26 	beq	r2,zero,80187b0 <__alt_data_end+0xfc0187b0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80188b8:	e0bffd17 	ldw	r2,-12(fp)
 80188bc:	1004d43a 	srli	r2,r2,16
 80188c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80188c4:	00001406 	br	8018918 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80188c8:	e0bffc17 	ldw	r2,-16(fp)
 80188cc:	e0fffb17 	ldw	r3,-20(fp)
 80188d0:	18c00d17 	ldw	r3,52(r3)
 80188d4:	e13ffb17 	ldw	r4,-20(fp)
 80188d8:	20c7883a 	add	r3,r4,r3
 80188dc:	18c20e04 	addi	r3,r3,2104
 80188e0:	18c00003 	ldbu	r3,0(r3)
 80188e4:	18c03fcc 	andi	r3,r3,255
 80188e8:	18c0201c 	xori	r3,r3,128
 80188ec:	18ffe004 	addi	r3,r3,-128
 80188f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80188f4:	e0bffb17 	ldw	r2,-20(fp)
 80188f8:	10800d17 	ldw	r2,52(r2)
 80188fc:	10800044 	addi	r2,r2,1
 8018900:	10c1ffcc 	andi	r3,r2,2047
 8018904:	e0bffb17 	ldw	r2,-20(fp)
 8018908:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801890c:	e0bffa17 	ldw	r2,-24(fp)
 8018910:	10bfffc4 	addi	r2,r2,-1
 8018914:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8018918:	e0bffa17 	ldw	r2,-24(fp)
 801891c:	10000526 	beq	r2,zero,8018934 <altera_avalon_jtag_uart_irq+0x1a8>
 8018920:	e0bffb17 	ldw	r2,-20(fp)
 8018924:	10c00d17 	ldw	r3,52(r2)
 8018928:	e0bffb17 	ldw	r2,-20(fp)
 801892c:	10800c17 	ldw	r2,48(r2)
 8018930:	18bfe51e 	bne	r3,r2,80188c8 <__alt_data_end+0xfc0188c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8018934:	e0bffa17 	ldw	r2,-24(fp)
 8018938:	103f9d26 	beq	r2,zero,80187b0 <__alt_data_end+0xfc0187b0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801893c:	e0bffb17 	ldw	r2,-20(fp)
 8018940:	10c00817 	ldw	r3,32(r2)
 8018944:	00bfff44 	movi	r2,-3
 8018948:	1886703a 	and	r3,r3,r2
 801894c:	e0bffb17 	ldw	r2,-20(fp)
 8018950:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018954:	e0bffb17 	ldw	r2,-20(fp)
 8018958:	10800017 	ldw	r2,0(r2)
 801895c:	10800104 	addi	r2,r2,4
 8018960:	1007883a 	mov	r3,r2
 8018964:	e0bffb17 	ldw	r2,-20(fp)
 8018968:	10800817 	ldw	r2,32(r2)
 801896c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8018970:	e0bffc17 	ldw	r2,-16(fp)
 8018974:	10800104 	addi	r2,r2,4
 8018978:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801897c:	003f8c06 	br	80187b0 <__alt_data_end+0xfc0187b0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8018980:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8018984:	0001883a 	nop
 8018988:	e037883a 	mov	sp,fp
 801898c:	df000017 	ldw	fp,0(sp)
 8018990:	dec00104 	addi	sp,sp,4
 8018994:	f800283a 	ret

08018998 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8018998:	defff804 	addi	sp,sp,-32
 801899c:	df000715 	stw	fp,28(sp)
 80189a0:	df000704 	addi	fp,sp,28
 80189a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80189a8:	e0bffb17 	ldw	r2,-20(fp)
 80189ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80189b0:	e0bff917 	ldw	r2,-28(fp)
 80189b4:	10800017 	ldw	r2,0(r2)
 80189b8:	10800104 	addi	r2,r2,4
 80189bc:	10800037 	ldwio	r2,0(r2)
 80189c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80189c4:	e0bffa17 	ldw	r2,-24(fp)
 80189c8:	1081000c 	andi	r2,r2,1024
 80189cc:	10000b26 	beq	r2,zero,80189fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80189d0:	e0bff917 	ldw	r2,-28(fp)
 80189d4:	10800017 	ldw	r2,0(r2)
 80189d8:	10800104 	addi	r2,r2,4
 80189dc:	1007883a 	mov	r3,r2
 80189e0:	e0bff917 	ldw	r2,-28(fp)
 80189e4:	10800817 	ldw	r2,32(r2)
 80189e8:	10810014 	ori	r2,r2,1024
 80189ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80189f0:	e0bff917 	ldw	r2,-28(fp)
 80189f4:	10000915 	stw	zero,36(r2)
 80189f8:	00000a06 	br	8018a24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80189fc:	e0bff917 	ldw	r2,-28(fp)
 8018a00:	10c00917 	ldw	r3,36(r2)
 8018a04:	00a00034 	movhi	r2,32768
 8018a08:	10bfff04 	addi	r2,r2,-4
 8018a0c:	10c00536 	bltu	r2,r3,8018a24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8018a10:	e0bff917 	ldw	r2,-28(fp)
 8018a14:	10800917 	ldw	r2,36(r2)
 8018a18:	10c00044 	addi	r3,r2,1
 8018a1c:	e0bff917 	ldw	r2,-28(fp)
 8018a20:	10c00915 	stw	r3,36(r2)
 8018a24:	d0a76617 	ldw	r2,-25192(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8018a28:	e037883a 	mov	sp,fp
 8018a2c:	df000017 	ldw	fp,0(sp)
 8018a30:	dec00104 	addi	sp,sp,4
 8018a34:	f800283a 	ret

08018a38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8018a38:	defffd04 	addi	sp,sp,-12
 8018a3c:	df000215 	stw	fp,8(sp)
 8018a40:	df000204 	addi	fp,sp,8
 8018a44:	e13ffe15 	stw	r4,-8(fp)
 8018a48:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8018a4c:	00000506 	br	8018a64 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8018a50:	e0bfff17 	ldw	r2,-4(fp)
 8018a54:	1090000c 	andi	r2,r2,16384
 8018a58:	10000226 	beq	r2,zero,8018a64 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8018a5c:	00bffd44 	movi	r2,-11
 8018a60:	00000b06 	br	8018a90 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8018a64:	e0bffe17 	ldw	r2,-8(fp)
 8018a68:	10c00d17 	ldw	r3,52(r2)
 8018a6c:	e0bffe17 	ldw	r2,-8(fp)
 8018a70:	10800c17 	ldw	r2,48(r2)
 8018a74:	18800526 	beq	r3,r2,8018a8c <altera_avalon_jtag_uart_close+0x54>
 8018a78:	e0bffe17 	ldw	r2,-8(fp)
 8018a7c:	10c00917 	ldw	r3,36(r2)
 8018a80:	e0bffe17 	ldw	r2,-8(fp)
 8018a84:	10800117 	ldw	r2,4(r2)
 8018a88:	18bff136 	bltu	r3,r2,8018a50 <__alt_data_end+0xfc018a50>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8018a8c:	0005883a 	mov	r2,zero
}
 8018a90:	e037883a 	mov	sp,fp
 8018a94:	df000017 	ldw	fp,0(sp)
 8018a98:	dec00104 	addi	sp,sp,4
 8018a9c:	f800283a 	ret

08018aa0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8018aa0:	defffa04 	addi	sp,sp,-24
 8018aa4:	df000515 	stw	fp,20(sp)
 8018aa8:	df000504 	addi	fp,sp,20
 8018aac:	e13ffd15 	stw	r4,-12(fp)
 8018ab0:	e17ffe15 	stw	r5,-8(fp)
 8018ab4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8018ab8:	00bff9c4 	movi	r2,-25
 8018abc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8018ac0:	e0bffe17 	ldw	r2,-8(fp)
 8018ac4:	10da8060 	cmpeqi	r3,r2,27137
 8018ac8:	1800031e 	bne	r3,zero,8018ad8 <altera_avalon_jtag_uart_ioctl+0x38>
 8018acc:	109a80a0 	cmpeqi	r2,r2,27138
 8018ad0:	1000181e 	bne	r2,zero,8018b34 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8018ad4:	00002906 	br	8018b7c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8018ad8:	e0bffd17 	ldw	r2,-12(fp)
 8018adc:	10c00117 	ldw	r3,4(r2)
 8018ae0:	00a00034 	movhi	r2,32768
 8018ae4:	10bfffc4 	addi	r2,r2,-1
 8018ae8:	18802126 	beq	r3,r2,8018b70 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8018aec:	e0bfff17 	ldw	r2,-4(fp)
 8018af0:	10800017 	ldw	r2,0(r2)
 8018af4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8018af8:	e0bffc17 	ldw	r2,-16(fp)
 8018afc:	10800090 	cmplti	r2,r2,2
 8018b00:	1000061e 	bne	r2,zero,8018b1c <altera_avalon_jtag_uart_ioctl+0x7c>
 8018b04:	e0fffc17 	ldw	r3,-16(fp)
 8018b08:	00a00034 	movhi	r2,32768
 8018b0c:	10bfffc4 	addi	r2,r2,-1
 8018b10:	18800226 	beq	r3,r2,8018b1c <altera_avalon_jtag_uart_ioctl+0x7c>
 8018b14:	e0bffc17 	ldw	r2,-16(fp)
 8018b18:	00000206 	br	8018b24 <altera_avalon_jtag_uart_ioctl+0x84>
 8018b1c:	00a00034 	movhi	r2,32768
 8018b20:	10bfff84 	addi	r2,r2,-2
 8018b24:	e0fffd17 	ldw	r3,-12(fp)
 8018b28:	18800115 	stw	r2,4(r3)
      rc = 0;
 8018b2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8018b30:	00000f06 	br	8018b70 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8018b34:	e0bffd17 	ldw	r2,-12(fp)
 8018b38:	10c00117 	ldw	r3,4(r2)
 8018b3c:	00a00034 	movhi	r2,32768
 8018b40:	10bfffc4 	addi	r2,r2,-1
 8018b44:	18800c26 	beq	r3,r2,8018b78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8018b48:	e0bffd17 	ldw	r2,-12(fp)
 8018b4c:	10c00917 	ldw	r3,36(r2)
 8018b50:	e0bffd17 	ldw	r2,-12(fp)
 8018b54:	10800117 	ldw	r2,4(r2)
 8018b58:	1885803a 	cmpltu	r2,r3,r2
 8018b5c:	10c03fcc 	andi	r3,r2,255
 8018b60:	e0bfff17 	ldw	r2,-4(fp)
 8018b64:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8018b68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8018b6c:	00000206 	br	8018b78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8018b70:	0001883a 	nop
 8018b74:	00000106 	br	8018b7c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8018b78:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8018b7c:	e0bffb17 	ldw	r2,-20(fp)
}
 8018b80:	e037883a 	mov	sp,fp
 8018b84:	df000017 	ldw	fp,0(sp)
 8018b88:	dec00104 	addi	sp,sp,4
 8018b8c:	f800283a 	ret

08018b90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8018b90:	defff304 	addi	sp,sp,-52
 8018b94:	dfc00c15 	stw	ra,48(sp)
 8018b98:	df000b15 	stw	fp,44(sp)
 8018b9c:	df000b04 	addi	fp,sp,44
 8018ba0:	e13ffc15 	stw	r4,-16(fp)
 8018ba4:	e17ffd15 	stw	r5,-12(fp)
 8018ba8:	e1bffe15 	stw	r6,-8(fp)
 8018bac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8018bb0:	e0bffd17 	ldw	r2,-12(fp)
 8018bb4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8018bb8:	00004706 	br	8018cd8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8018bbc:	e0bffc17 	ldw	r2,-16(fp)
 8018bc0:	10800a17 	ldw	r2,40(r2)
 8018bc4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8018bc8:	e0bffc17 	ldw	r2,-16(fp)
 8018bcc:	10800b17 	ldw	r2,44(r2)
 8018bd0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8018bd4:	e0fff717 	ldw	r3,-36(fp)
 8018bd8:	e0bff817 	ldw	r2,-32(fp)
 8018bdc:	18800536 	bltu	r3,r2,8018bf4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8018be0:	e0fff717 	ldw	r3,-36(fp)
 8018be4:	e0bff817 	ldw	r2,-32(fp)
 8018be8:	1885c83a 	sub	r2,r3,r2
 8018bec:	e0bff615 	stw	r2,-40(fp)
 8018bf0:	00000406 	br	8018c04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8018bf4:	00c20004 	movi	r3,2048
 8018bf8:	e0bff817 	ldw	r2,-32(fp)
 8018bfc:	1885c83a 	sub	r2,r3,r2
 8018c00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8018c04:	e0bff617 	ldw	r2,-40(fp)
 8018c08:	10001e26 	beq	r2,zero,8018c84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8018c0c:	e0fffe17 	ldw	r3,-8(fp)
 8018c10:	e0bff617 	ldw	r2,-40(fp)
 8018c14:	1880022e 	bgeu	r3,r2,8018c20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8018c18:	e0bffe17 	ldw	r2,-8(fp)
 8018c1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8018c20:	e0bffc17 	ldw	r2,-16(fp)
 8018c24:	10c00e04 	addi	r3,r2,56
 8018c28:	e0bff817 	ldw	r2,-32(fp)
 8018c2c:	1885883a 	add	r2,r3,r2
 8018c30:	e1bff617 	ldw	r6,-40(fp)
 8018c34:	100b883a 	mov	r5,r2
 8018c38:	e13ff517 	ldw	r4,-44(fp)
 8018c3c:	80113a80 	call	80113a8 <memcpy>
      ptr   += n;
 8018c40:	e0fff517 	ldw	r3,-44(fp)
 8018c44:	e0bff617 	ldw	r2,-40(fp)
 8018c48:	1885883a 	add	r2,r3,r2
 8018c4c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8018c50:	e0fffe17 	ldw	r3,-8(fp)
 8018c54:	e0bff617 	ldw	r2,-40(fp)
 8018c58:	1885c83a 	sub	r2,r3,r2
 8018c5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8018c60:	e0fff817 	ldw	r3,-32(fp)
 8018c64:	e0bff617 	ldw	r2,-40(fp)
 8018c68:	1885883a 	add	r2,r3,r2
 8018c6c:	10c1ffcc 	andi	r3,r2,2047
 8018c70:	e0bffc17 	ldw	r2,-16(fp)
 8018c74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8018c78:	e0bffe17 	ldw	r2,-8(fp)
 8018c7c:	00bfcf16 	blt	zero,r2,8018bbc <__alt_data_end+0xfc018bbc>
 8018c80:	00000106 	br	8018c88 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8018c84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8018c88:	e0fff517 	ldw	r3,-44(fp)
 8018c8c:	e0bffd17 	ldw	r2,-12(fp)
 8018c90:	1880141e 	bne	r3,r2,8018ce4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8018c94:	e0bfff17 	ldw	r2,-4(fp)
 8018c98:	1090000c 	andi	r2,r2,16384
 8018c9c:	1000131e 	bne	r2,zero,8018cec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8018ca0:	0001883a 	nop
 8018ca4:	e0bffc17 	ldw	r2,-16(fp)
 8018ca8:	10c00a17 	ldw	r3,40(r2)
 8018cac:	e0bff717 	ldw	r2,-36(fp)
 8018cb0:	1880051e 	bne	r3,r2,8018cc8 <altera_avalon_jtag_uart_read+0x138>
 8018cb4:	e0bffc17 	ldw	r2,-16(fp)
 8018cb8:	10c00917 	ldw	r3,36(r2)
 8018cbc:	e0bffc17 	ldw	r2,-16(fp)
 8018cc0:	10800117 	ldw	r2,4(r2)
 8018cc4:	18bff736 	bltu	r3,r2,8018ca4 <__alt_data_end+0xfc018ca4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8018cc8:	e0bffc17 	ldw	r2,-16(fp)
 8018ccc:	10c00a17 	ldw	r3,40(r2)
 8018cd0:	e0bff717 	ldw	r2,-36(fp)
 8018cd4:	18800726 	beq	r3,r2,8018cf4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8018cd8:	e0bffe17 	ldw	r2,-8(fp)
 8018cdc:	00bfb716 	blt	zero,r2,8018bbc <__alt_data_end+0xfc018bbc>
 8018ce0:	00000506 	br	8018cf8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8018ce4:	0001883a 	nop
 8018ce8:	00000306 	br	8018cf8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8018cec:	0001883a 	nop
 8018cf0:	00000106 	br	8018cf8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8018cf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8018cf8:	e0fff517 	ldw	r3,-44(fp)
 8018cfc:	e0bffd17 	ldw	r2,-12(fp)
 8018d00:	18801826 	beq	r3,r2,8018d64 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018d04:	0005303a 	rdctl	r2,status
 8018d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018d0c:	e0fffb17 	ldw	r3,-20(fp)
 8018d10:	00bfff84 	movi	r2,-2
 8018d14:	1884703a 	and	r2,r3,r2
 8018d18:	1001703a 	wrctl	status,r2
  
  return context;
 8018d1c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8018d20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8018d24:	e0bffc17 	ldw	r2,-16(fp)
 8018d28:	10800817 	ldw	r2,32(r2)
 8018d2c:	10c00054 	ori	r3,r2,1
 8018d30:	e0bffc17 	ldw	r2,-16(fp)
 8018d34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018d38:	e0bffc17 	ldw	r2,-16(fp)
 8018d3c:	10800017 	ldw	r2,0(r2)
 8018d40:	10800104 	addi	r2,r2,4
 8018d44:	1007883a 	mov	r3,r2
 8018d48:	e0bffc17 	ldw	r2,-16(fp)
 8018d4c:	10800817 	ldw	r2,32(r2)
 8018d50:	18800035 	stwio	r2,0(r3)
 8018d54:	e0bffa17 	ldw	r2,-24(fp)
 8018d58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018d5c:	e0bff917 	ldw	r2,-28(fp)
 8018d60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8018d64:	e0fff517 	ldw	r3,-44(fp)
 8018d68:	e0bffd17 	ldw	r2,-12(fp)
 8018d6c:	18800426 	beq	r3,r2,8018d80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8018d70:	e0fff517 	ldw	r3,-44(fp)
 8018d74:	e0bffd17 	ldw	r2,-12(fp)
 8018d78:	1885c83a 	sub	r2,r3,r2
 8018d7c:	00000606 	br	8018d98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8018d80:	e0bfff17 	ldw	r2,-4(fp)
 8018d84:	1090000c 	andi	r2,r2,16384
 8018d88:	10000226 	beq	r2,zero,8018d94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8018d8c:	00bffd44 	movi	r2,-11
 8018d90:	00000106 	br	8018d98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8018d94:	00bffec4 	movi	r2,-5
}
 8018d98:	e037883a 	mov	sp,fp
 8018d9c:	dfc00117 	ldw	ra,4(sp)
 8018da0:	df000017 	ldw	fp,0(sp)
 8018da4:	dec00204 	addi	sp,sp,8
 8018da8:	f800283a 	ret

08018dac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8018dac:	defff304 	addi	sp,sp,-52
 8018db0:	dfc00c15 	stw	ra,48(sp)
 8018db4:	df000b15 	stw	fp,44(sp)
 8018db8:	df000b04 	addi	fp,sp,44
 8018dbc:	e13ffc15 	stw	r4,-16(fp)
 8018dc0:	e17ffd15 	stw	r5,-12(fp)
 8018dc4:	e1bffe15 	stw	r6,-8(fp)
 8018dc8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8018dcc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8018dd0:	e0bffd17 	ldw	r2,-12(fp)
 8018dd4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8018dd8:	00003706 	br	8018eb8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8018ddc:	e0bffc17 	ldw	r2,-16(fp)
 8018de0:	10800c17 	ldw	r2,48(r2)
 8018de4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8018de8:	e0bffc17 	ldw	r2,-16(fp)
 8018dec:	10800d17 	ldw	r2,52(r2)
 8018df0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8018df4:	e0fff917 	ldw	r3,-28(fp)
 8018df8:	e0bff517 	ldw	r2,-44(fp)
 8018dfc:	1880062e 	bgeu	r3,r2,8018e18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8018e00:	e0fff517 	ldw	r3,-44(fp)
 8018e04:	e0bff917 	ldw	r2,-28(fp)
 8018e08:	1885c83a 	sub	r2,r3,r2
 8018e0c:	10bfffc4 	addi	r2,r2,-1
 8018e10:	e0bff615 	stw	r2,-40(fp)
 8018e14:	00000b06 	br	8018e44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8018e18:	e0bff517 	ldw	r2,-44(fp)
 8018e1c:	10000526 	beq	r2,zero,8018e34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8018e20:	00c20004 	movi	r3,2048
 8018e24:	e0bff917 	ldw	r2,-28(fp)
 8018e28:	1885c83a 	sub	r2,r3,r2
 8018e2c:	e0bff615 	stw	r2,-40(fp)
 8018e30:	00000406 	br	8018e44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8018e34:	00c1ffc4 	movi	r3,2047
 8018e38:	e0bff917 	ldw	r2,-28(fp)
 8018e3c:	1885c83a 	sub	r2,r3,r2
 8018e40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8018e44:	e0bff617 	ldw	r2,-40(fp)
 8018e48:	10001e26 	beq	r2,zero,8018ec4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8018e4c:	e0fffe17 	ldw	r3,-8(fp)
 8018e50:	e0bff617 	ldw	r2,-40(fp)
 8018e54:	1880022e 	bgeu	r3,r2,8018e60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8018e58:	e0bffe17 	ldw	r2,-8(fp)
 8018e5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8018e60:	e0bffc17 	ldw	r2,-16(fp)
 8018e64:	10c20e04 	addi	r3,r2,2104
 8018e68:	e0bff917 	ldw	r2,-28(fp)
 8018e6c:	1885883a 	add	r2,r3,r2
 8018e70:	e1bff617 	ldw	r6,-40(fp)
 8018e74:	e17ffd17 	ldw	r5,-12(fp)
 8018e78:	1009883a 	mov	r4,r2
 8018e7c:	80113a80 	call	80113a8 <memcpy>
      ptr   += n;
 8018e80:	e0fffd17 	ldw	r3,-12(fp)
 8018e84:	e0bff617 	ldw	r2,-40(fp)
 8018e88:	1885883a 	add	r2,r3,r2
 8018e8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8018e90:	e0fffe17 	ldw	r3,-8(fp)
 8018e94:	e0bff617 	ldw	r2,-40(fp)
 8018e98:	1885c83a 	sub	r2,r3,r2
 8018e9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8018ea0:	e0fff917 	ldw	r3,-28(fp)
 8018ea4:	e0bff617 	ldw	r2,-40(fp)
 8018ea8:	1885883a 	add	r2,r3,r2
 8018eac:	10c1ffcc 	andi	r3,r2,2047
 8018eb0:	e0bffc17 	ldw	r2,-16(fp)
 8018eb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8018eb8:	e0bffe17 	ldw	r2,-8(fp)
 8018ebc:	00bfc716 	blt	zero,r2,8018ddc <__alt_data_end+0xfc018ddc>
 8018ec0:	00000106 	br	8018ec8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8018ec4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018ec8:	0005303a 	rdctl	r2,status
 8018ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018ed0:	e0fffb17 	ldw	r3,-20(fp)
 8018ed4:	00bfff84 	movi	r2,-2
 8018ed8:	1884703a 	and	r2,r3,r2
 8018edc:	1001703a 	wrctl	status,r2
  
  return context;
 8018ee0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8018ee4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8018ee8:	e0bffc17 	ldw	r2,-16(fp)
 8018eec:	10800817 	ldw	r2,32(r2)
 8018ef0:	10c00094 	ori	r3,r2,2
 8018ef4:	e0bffc17 	ldw	r2,-16(fp)
 8018ef8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8018efc:	e0bffc17 	ldw	r2,-16(fp)
 8018f00:	10800017 	ldw	r2,0(r2)
 8018f04:	10800104 	addi	r2,r2,4
 8018f08:	1007883a 	mov	r3,r2
 8018f0c:	e0bffc17 	ldw	r2,-16(fp)
 8018f10:	10800817 	ldw	r2,32(r2)
 8018f14:	18800035 	stwio	r2,0(r3)
 8018f18:	e0bffa17 	ldw	r2,-24(fp)
 8018f1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018f20:	e0bff817 	ldw	r2,-32(fp)
 8018f24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8018f28:	e0bffe17 	ldw	r2,-8(fp)
 8018f2c:	0080100e 	bge	zero,r2,8018f70 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8018f30:	e0bfff17 	ldw	r2,-4(fp)
 8018f34:	1090000c 	andi	r2,r2,16384
 8018f38:	1000101e 	bne	r2,zero,8018f7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8018f3c:	0001883a 	nop
 8018f40:	e0bffc17 	ldw	r2,-16(fp)
 8018f44:	10c00d17 	ldw	r3,52(r2)
 8018f48:	e0bff517 	ldw	r2,-44(fp)
 8018f4c:	1880051e 	bne	r3,r2,8018f64 <altera_avalon_jtag_uart_write+0x1b8>
 8018f50:	e0bffc17 	ldw	r2,-16(fp)
 8018f54:	10c00917 	ldw	r3,36(r2)
 8018f58:	e0bffc17 	ldw	r2,-16(fp)
 8018f5c:	10800117 	ldw	r2,4(r2)
 8018f60:	18bff736 	bltu	r3,r2,8018f40 <__alt_data_end+0xfc018f40>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8018f64:	e0bffc17 	ldw	r2,-16(fp)
 8018f68:	10800917 	ldw	r2,36(r2)
 8018f6c:	1000051e 	bne	r2,zero,8018f84 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8018f70:	e0bffe17 	ldw	r2,-8(fp)
 8018f74:	00bfd016 	blt	zero,r2,8018eb8 <__alt_data_end+0xfc018eb8>
 8018f78:	00000306 	br	8018f88 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8018f7c:	0001883a 	nop
 8018f80:	00000106 	br	8018f88 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8018f84:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8018f88:	e0fffd17 	ldw	r3,-12(fp)
 8018f8c:	e0bff717 	ldw	r2,-36(fp)
 8018f90:	18800426 	beq	r3,r2,8018fa4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8018f94:	e0fffd17 	ldw	r3,-12(fp)
 8018f98:	e0bff717 	ldw	r2,-36(fp)
 8018f9c:	1885c83a 	sub	r2,r3,r2
 8018fa0:	00000606 	br	8018fbc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8018fa4:	e0bfff17 	ldw	r2,-4(fp)
 8018fa8:	1090000c 	andi	r2,r2,16384
 8018fac:	10000226 	beq	r2,zero,8018fb8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8018fb0:	00bffd44 	movi	r2,-11
 8018fb4:	00000106 	br	8018fbc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8018fb8:	00bffec4 	movi	r2,-5
}
 8018fbc:	e037883a 	mov	sp,fp
 8018fc0:	dfc00117 	ldw	ra,4(sp)
 8018fc4:	df000017 	ldw	fp,0(sp)
 8018fc8:	dec00204 	addi	sp,sp,8
 8018fcc:	f800283a 	ret

08018fd0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8018fd0:	defff404 	addi	sp,sp,-48
 8018fd4:	df000b15 	stw	fp,44(sp)
 8018fd8:	df000b04 	addi	fp,sp,44
 8018fdc:	e13ffc15 	stw	r4,-16(fp)
 8018fe0:	e17ffd15 	stw	r5,-12(fp)
 8018fe4:	e1bffe15 	stw	r6,-8(fp)
 8018fe8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8018fec:	e0ffff17 	ldw	r3,-4(fp)
 8018ff0:	e0bffe17 	ldw	r2,-8(fp)
 8018ff4:	1885883a 	add	r2,r3,r2
 8018ff8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8018ffc:	e0c00217 	ldw	r3,8(fp)
 8019000:	e0800117 	ldw	r2,4(fp)
 8019004:	1885883a 	add	r2,r3,r2
 8019008:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 801900c:	e0800117 	ldw	r2,4(fp)
 8019010:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8019014:	e0bffe17 	ldw	r2,-8(fp)
 8019018:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 801901c:	00800044 	movi	r2,1
 8019020:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8019024:	e0bffc17 	ldw	r2,-16(fp)
 8019028:	10800504 	addi	r2,r2,20
 801902c:	1009883a 	mov	r4,r2
 8019030:	00c00044 	movi	r3,1
 8019034:	e0bffd17 	ldw	r2,-12(fp)
 8019038:	1884983a 	sll	r2,r3,r2
 801903c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8019040:	e0800317 	ldw	r2,12(fp)
 8019044:	1080008c 	andi	r2,r2,2
 8019048:	1000051e 	bne	r2,zero,8019060 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801904c:	e0bffc17 	ldw	r2,-16(fp)
 8019050:	10800304 	addi	r2,r2,12
 8019054:	1007883a 	mov	r3,r2
 8019058:	00810004 	movi	r2,1024
 801905c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8019060:	e0bffc17 	ldw	r2,-16(fp)
 8019064:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8019068:	e0bffc17 	ldw	r2,-16(fp)
 801906c:	10800204 	addi	r2,r2,8
 8019070:	10800037 	ldwio	r2,0(r2)
 8019074:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019078:	e0bffa17 	ldw	r2,-24(fp)
 801907c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8019080:	10000226 	beq	r2,zero,801908c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019084:	e0bff717 	ldw	r2,-36(fp)
 8019088:	1000031e 	bne	r2,zero,8019098 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801908c:	e0bffa17 	ldw	r2,-24(fp)
 8019090:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8019094:	103ff426 	beq	r2,zero,8019068 <__alt_data_end+0xfc019068>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8019098:	e0bffa17 	ldw	r2,-24(fp)
 801909c:	1080100c 	andi	r2,r2,64
 80190a0:	10001e26 	beq	r2,zero,801911c <alt_avalon_spi_command+0x14c>
 80190a4:	e0bff717 	ldw	r2,-36(fp)
 80190a8:	00801c0e 	bge	zero,r2,801911c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 80190ac:	e0bff717 	ldw	r2,-36(fp)
 80190b0:	10bfffc4 	addi	r2,r2,-1
 80190b4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 80190b8:	e0ffff17 	ldw	r3,-4(fp)
 80190bc:	e0bff817 	ldw	r2,-32(fp)
 80190c0:	18800a2e 	bgeu	r3,r2,80190ec <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 80190c4:	e0bffc17 	ldw	r2,-16(fp)
 80190c8:	10800104 	addi	r2,r2,4
 80190cc:	1009883a 	mov	r4,r2
 80190d0:	e0bfff17 	ldw	r2,-4(fp)
 80190d4:	10c00044 	addi	r3,r2,1
 80190d8:	e0ffff15 	stw	r3,-4(fp)
 80190dc:	10800003 	ldbu	r2,0(r2)
 80190e0:	10803fcc 	andi	r2,r2,255
 80190e4:	20800035 	stwio	r2,0(r4)
 80190e8:	00000c06 	br	801911c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 80190ec:	e0bff517 	ldw	r2,-44(fp)
 80190f0:	10000826 	beq	r2,zero,8019114 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 80190f4:	e0bff517 	ldw	r2,-44(fp)
 80190f8:	10bfffc4 	addi	r2,r2,-1
 80190fc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8019100:	e0bffc17 	ldw	r2,-16(fp)
 8019104:	10800104 	addi	r2,r2,4
 8019108:	0007883a 	mov	r3,zero
 801910c:	10c00035 	stwio	r3,0(r2)
 8019110:	00000206 	br	801911c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8019114:	00bf0004 	movi	r2,-1024
 8019118:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 801911c:	e0bffa17 	ldw	r2,-24(fp)
 8019120:	1080200c 	andi	r2,r2,128
 8019124:	103fd026 	beq	r2,zero,8019068 <__alt_data_end+0xfc019068>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8019128:	e0bffc17 	ldw	r2,-16(fp)
 801912c:	10800037 	ldwio	r2,0(r2)
 8019130:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8019134:	e0bff617 	ldw	r2,-40(fp)
 8019138:	10000426 	beq	r2,zero,801914c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 801913c:	e0bff617 	ldw	r2,-40(fp)
 8019140:	10bfffc4 	addi	r2,r2,-1
 8019144:	e0bff615 	stw	r2,-40(fp)
 8019148:	00000506 	br	8019160 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801914c:	e0800217 	ldw	r2,8(fp)
 8019150:	10c00044 	addi	r3,r2,1
 8019154:	e0c00215 	stw	r3,8(fp)
 8019158:	e0fffb17 	ldw	r3,-20(fp)
 801915c:	10c00005 	stb	r3,0(r2)
      credits++;
 8019160:	e0bff717 	ldw	r2,-36(fp)
 8019164:	10800044 	addi	r2,r2,1
 8019168:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 801916c:	e0bff617 	ldw	r2,-40(fp)
 8019170:	103fbd1e 	bne	r2,zero,8019068 <__alt_data_end+0xfc019068>
 8019174:	e0c00217 	ldw	r3,8(fp)
 8019178:	e0bff917 	ldw	r2,-28(fp)
 801917c:	18bfba1e 	bne	r3,r2,8019068 <__alt_data_end+0xfc019068>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8019180:	e0bffc17 	ldw	r2,-16(fp)
 8019184:	10800204 	addi	r2,r2,8
 8019188:	10800037 	ldwio	r2,0(r2)
 801918c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8019190:	e0bffa17 	ldw	r2,-24(fp)
 8019194:	1080080c 	andi	r2,r2,32
 8019198:	103ff926 	beq	r2,zero,8019180 <__alt_data_end+0xfc019180>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 801919c:	e0800317 	ldw	r2,12(fp)
 80191a0:	1080004c 	andi	r2,r2,1
 80191a4:	1000041e 	bne	r2,zero,80191b8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 80191a8:	e0bffc17 	ldw	r2,-16(fp)
 80191ac:	10800304 	addi	r2,r2,12
 80191b0:	0007883a 	mov	r3,zero
 80191b4:	10c00035 	stwio	r3,0(r2)

  return read_length;
 80191b8:	e0800117 	ldw	r2,4(fp)
}
 80191bc:	e037883a 	mov	sp,fp
 80191c0:	df000017 	ldw	fp,0(sp)
 80191c4:	dec00104 	addi	sp,sp,4
 80191c8:	f800283a 	ret

080191cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80191cc:	defffa04 	addi	sp,sp,-24
 80191d0:	dfc00515 	stw	ra,20(sp)
 80191d4:	df000415 	stw	fp,16(sp)
 80191d8:	df000404 	addi	fp,sp,16
 80191dc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80191e0:	0007883a 	mov	r3,zero
 80191e4:	e0bfff17 	ldw	r2,-4(fp)
 80191e8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80191ec:	e0bfff17 	ldw	r2,-4(fp)
 80191f0:	10800104 	addi	r2,r2,4
 80191f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80191f8:	0005303a 	rdctl	r2,status
 80191fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019200:	e0fffd17 	ldw	r3,-12(fp)
 8019204:	00bfff84 	movi	r2,-2
 8019208:	1884703a 	and	r2,r3,r2
 801920c:	1001703a 	wrctl	status,r2
  
  return context;
 8019210:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8019214:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8019218:	80166000 	call	8016600 <alt_tick>
 801921c:	e0bffc17 	ldw	r2,-16(fp)
 8019220:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019224:	e0bffe17 	ldw	r2,-8(fp)
 8019228:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801922c:	0001883a 	nop
 8019230:	e037883a 	mov	sp,fp
 8019234:	dfc00117 	ldw	ra,4(sp)
 8019238:	df000017 	ldw	fp,0(sp)
 801923c:	dec00204 	addi	sp,sp,8
 8019240:	f800283a 	ret

08019244 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8019244:	defff804 	addi	sp,sp,-32
 8019248:	dfc00715 	stw	ra,28(sp)
 801924c:	df000615 	stw	fp,24(sp)
 8019250:	df000604 	addi	fp,sp,24
 8019254:	e13ffc15 	stw	r4,-16(fp)
 8019258:	e17ffd15 	stw	r5,-12(fp)
 801925c:	e1bffe15 	stw	r6,-8(fp)
 8019260:	e1ffff15 	stw	r7,-4(fp)
 8019264:	e0bfff17 	ldw	r2,-4(fp)
 8019268:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801926c:	d0a76617 	ldw	r2,-25192(gp)
 8019270:	1000021e 	bne	r2,zero,801927c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8019274:	e0bffb17 	ldw	r2,-20(fp)
 8019278:	d0a76615 	stw	r2,-25192(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801927c:	e0bffc17 	ldw	r2,-16(fp)
 8019280:	10800104 	addi	r2,r2,4
 8019284:	00c001c4 	movi	r3,7
 8019288:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801928c:	d8000015 	stw	zero,0(sp)
 8019290:	e1fffc17 	ldw	r7,-16(fp)
 8019294:	018200b4 	movhi	r6,2050
 8019298:	31a47304 	addi	r6,r6,-28212
 801929c:	e17ffe17 	ldw	r5,-8(fp)
 80192a0:	e13ffd17 	ldw	r4,-12(fp)
 80192a4:	80197b40 	call	80197b4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80192a8:	0001883a 	nop
 80192ac:	e037883a 	mov	sp,fp
 80192b0:	dfc00117 	ldw	ra,4(sp)
 80192b4:	df000017 	ldw	fp,0(sp)
 80192b8:	dec00204 	addi	sp,sp,8
 80192bc:	f800283a 	ret

080192c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80192c0:	defff504 	addi	sp,sp,-44
 80192c4:	df000a15 	stw	fp,40(sp)
 80192c8:	df000a04 	addi	fp,sp,40
 80192cc:	e13ffc15 	stw	r4,-16(fp)
 80192d0:	e17ffd15 	stw	r5,-12(fp)
 80192d4:	e1bffe15 	stw	r6,-8(fp)
 80192d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80192dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80192e0:	d0a76617 	ldw	r2,-25192(gp)
  
  if (alt_ticks_per_second ())
 80192e4:	10003c26 	beq	r2,zero,80193d8 <alt_alarm_start+0x118>
  {
    if (alarm)
 80192e8:	e0bffc17 	ldw	r2,-16(fp)
 80192ec:	10003826 	beq	r2,zero,80193d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80192f0:	e0bffc17 	ldw	r2,-16(fp)
 80192f4:	e0fffe17 	ldw	r3,-8(fp)
 80192f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80192fc:	e0bffc17 	ldw	r2,-16(fp)
 8019300:	e0ffff17 	ldw	r3,-4(fp)
 8019304:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019308:	0005303a 	rdctl	r2,status
 801930c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019310:	e0fff917 	ldw	r3,-28(fp)
 8019314:	00bfff84 	movi	r2,-2
 8019318:	1884703a 	and	r2,r3,r2
 801931c:	1001703a 	wrctl	status,r2
  
  return context;
 8019320:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8019324:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8019328:	d0a76717 	ldw	r2,-25188(gp)
      
      current_nticks = alt_nticks();
 801932c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8019330:	e0fffd17 	ldw	r3,-12(fp)
 8019334:	e0bff617 	ldw	r2,-40(fp)
 8019338:	1885883a 	add	r2,r3,r2
 801933c:	10c00044 	addi	r3,r2,1
 8019340:	e0bffc17 	ldw	r2,-16(fp)
 8019344:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8019348:	e0bffc17 	ldw	r2,-16(fp)
 801934c:	10c00217 	ldw	r3,8(r2)
 8019350:	e0bff617 	ldw	r2,-40(fp)
 8019354:	1880042e 	bgeu	r3,r2,8019368 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8019358:	e0bffc17 	ldw	r2,-16(fp)
 801935c:	00c00044 	movi	r3,1
 8019360:	10c00405 	stb	r3,16(r2)
 8019364:	00000206 	br	8019370 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8019368:	e0bffc17 	ldw	r2,-16(fp)
 801936c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8019370:	e0bffc17 	ldw	r2,-16(fp)
 8019374:	d0e01304 	addi	r3,gp,-32692
 8019378:	e0fffa15 	stw	r3,-24(fp)
 801937c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8019380:	e0bffb17 	ldw	r2,-20(fp)
 8019384:	e0fffa17 	ldw	r3,-24(fp)
 8019388:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801938c:	e0bffa17 	ldw	r2,-24(fp)
 8019390:	10c00017 	ldw	r3,0(r2)
 8019394:	e0bffb17 	ldw	r2,-20(fp)
 8019398:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801939c:	e0bffa17 	ldw	r2,-24(fp)
 80193a0:	10800017 	ldw	r2,0(r2)
 80193a4:	e0fffb17 	ldw	r3,-20(fp)
 80193a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80193ac:	e0bffa17 	ldw	r2,-24(fp)
 80193b0:	e0fffb17 	ldw	r3,-20(fp)
 80193b4:	10c00015 	stw	r3,0(r2)
 80193b8:	e0bff817 	ldw	r2,-32(fp)
 80193bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80193c0:	e0bff717 	ldw	r2,-36(fp)
 80193c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80193c8:	0005883a 	mov	r2,zero
 80193cc:	00000306 	br	80193dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80193d0:	00bffa84 	movi	r2,-22
 80193d4:	00000106 	br	80193dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80193d8:	00bfde84 	movi	r2,-134
  }
}
 80193dc:	e037883a 	mov	sp,fp
 80193e0:	df000017 	ldw	fp,0(sp)
 80193e4:	dec00104 	addi	sp,sp,4
 80193e8:	f800283a 	ret

080193ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80193ec:	defffa04 	addi	sp,sp,-24
 80193f0:	dfc00515 	stw	ra,20(sp)
 80193f4:	df000415 	stw	fp,16(sp)
 80193f8:	df000404 	addi	fp,sp,16
 80193fc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8019400:	00800244 	movi	r2,9
 8019404:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8019408:	014003f4 	movhi	r5,15
 801940c:	29509004 	addi	r5,r5,16960
 8019410:	e13ffd17 	ldw	r4,-12(fp)
 8019414:	800832c0 	call	800832c <__mulsi3>
 8019418:	100b883a 	mov	r5,r2
 801941c:	0100bef4 	movhi	r4,763
 8019420:	213c2004 	addi	r4,r4,-3968
 8019424:	80082700 	call	8008270 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8019428:	100b883a 	mov	r5,r2
 801942c:	01200034 	movhi	r4,32768
 8019430:	213fffc4 	addi	r4,r4,-1
 8019434:	80082700 	call	8008270 <__udivsi3>
 8019438:	100b883a 	mov	r5,r2
 801943c:	e13fff17 	ldw	r4,-4(fp)
 8019440:	80082700 	call	8008270 <__udivsi3>
 8019444:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8019448:	e0bffe17 	ldw	r2,-8(fp)
 801944c:	10002a26 	beq	r2,zero,80194f8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8019450:	e03ffc15 	stw	zero,-16(fp)
 8019454:	00001706 	br	80194b4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8019458:	00a00034 	movhi	r2,32768
 801945c:	10bfffc4 	addi	r2,r2,-1
 8019460:	10bfffc4 	addi	r2,r2,-1
 8019464:	103ffe1e 	bne	r2,zero,8019460 <__alt_data_end+0xfc019460>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8019468:	014003f4 	movhi	r5,15
 801946c:	29509004 	addi	r5,r5,16960
 8019470:	e13ffd17 	ldw	r4,-12(fp)
 8019474:	800832c0 	call	800832c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8019478:	100b883a 	mov	r5,r2
 801947c:	0100bef4 	movhi	r4,763
 8019480:	213c2004 	addi	r4,r4,-3968
 8019484:	80082700 	call	8008270 <__udivsi3>
 8019488:	100b883a 	mov	r5,r2
 801948c:	01200034 	movhi	r4,32768
 8019490:	213fffc4 	addi	r4,r4,-1
 8019494:	80082700 	call	8008270 <__udivsi3>
 8019498:	1007883a 	mov	r3,r2
 801949c:	e0bfff17 	ldw	r2,-4(fp)
 80194a0:	10c5c83a 	sub	r2,r2,r3
 80194a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80194a8:	e0bffc17 	ldw	r2,-16(fp)
 80194ac:	10800044 	addi	r2,r2,1
 80194b0:	e0bffc15 	stw	r2,-16(fp)
 80194b4:	e0fffc17 	ldw	r3,-16(fp)
 80194b8:	e0bffe17 	ldw	r2,-8(fp)
 80194bc:	18bfe616 	blt	r3,r2,8019458 <__alt_data_end+0xfc019458>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80194c0:	014003f4 	movhi	r5,15
 80194c4:	29509004 	addi	r5,r5,16960
 80194c8:	e13ffd17 	ldw	r4,-12(fp)
 80194cc:	800832c0 	call	800832c <__mulsi3>
 80194d0:	100b883a 	mov	r5,r2
 80194d4:	0100bef4 	movhi	r4,763
 80194d8:	213c2004 	addi	r4,r4,-3968
 80194dc:	80082700 	call	8008270 <__udivsi3>
 80194e0:	e17fff17 	ldw	r5,-4(fp)
 80194e4:	1009883a 	mov	r4,r2
 80194e8:	800832c0 	call	800832c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80194ec:	10bfffc4 	addi	r2,r2,-1
 80194f0:	103ffe1e 	bne	r2,zero,80194ec <__alt_data_end+0xfc0194ec>
 80194f4:	00000d06 	br	801952c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80194f8:	014003f4 	movhi	r5,15
 80194fc:	29509004 	addi	r5,r5,16960
 8019500:	e13ffd17 	ldw	r4,-12(fp)
 8019504:	800832c0 	call	800832c <__mulsi3>
 8019508:	100b883a 	mov	r5,r2
 801950c:	0100bef4 	movhi	r4,763
 8019510:	213c2004 	addi	r4,r4,-3968
 8019514:	80082700 	call	8008270 <__udivsi3>
 8019518:	e17fff17 	ldw	r5,-4(fp)
 801951c:	1009883a 	mov	r4,r2
 8019520:	800832c0 	call	800832c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8019524:	10bfffc4 	addi	r2,r2,-1
 8019528:	00bffe16 	blt	zero,r2,8019524 <__alt_data_end+0xfc019524>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801952c:	0005883a 	mov	r2,zero
}
 8019530:	e037883a 	mov	sp,fp
 8019534:	dfc00117 	ldw	ra,4(sp)
 8019538:	df000017 	ldw	fp,0(sp)
 801953c:	dec00204 	addi	sp,sp,8
 8019540:	f800283a 	ret

08019544 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8019544:	deffff04 	addi	sp,sp,-4
 8019548:	df000015 	stw	fp,0(sp)
 801954c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8019550:	0001883a 	nop
 8019554:	e037883a 	mov	sp,fp
 8019558:	df000017 	ldw	fp,0(sp)
 801955c:	dec00104 	addi	sp,sp,4
 8019560:	f800283a 	ret

08019564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019564:	defffe04 	addi	sp,sp,-8
 8019568:	dfc00115 	stw	ra,4(sp)
 801956c:	df000015 	stw	fp,0(sp)
 8019570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019574:	d0a01117 	ldw	r2,-32700(gp)
 8019578:	10000326 	beq	r2,zero,8019588 <alt_get_errno+0x24>
 801957c:	d0a01117 	ldw	r2,-32700(gp)
 8019580:	103ee83a 	callr	r2
 8019584:	00000106 	br	801958c <alt_get_errno+0x28>
 8019588:	d0a76204 	addi	r2,gp,-25208
}
 801958c:	e037883a 	mov	sp,fp
 8019590:	dfc00117 	ldw	ra,4(sp)
 8019594:	df000017 	ldw	fp,0(sp)
 8019598:	dec00204 	addi	sp,sp,8
 801959c:	f800283a 	ret

080195a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80195a0:	defffa04 	addi	sp,sp,-24
 80195a4:	dfc00515 	stw	ra,20(sp)
 80195a8:	df000415 	stw	fp,16(sp)
 80195ac:	df000404 	addi	fp,sp,16
 80195b0:	e13ffe15 	stw	r4,-8(fp)
 80195b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80195b8:	e0bffe17 	ldw	r2,-8(fp)
 80195bc:	10000326 	beq	r2,zero,80195cc <alt_dev_llist_insert+0x2c>
 80195c0:	e0bffe17 	ldw	r2,-8(fp)
 80195c4:	10800217 	ldw	r2,8(r2)
 80195c8:	1000061e 	bne	r2,zero,80195e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80195cc:	80195640 	call	8019564 <alt_get_errno>
 80195d0:	1007883a 	mov	r3,r2
 80195d4:	00800584 	movi	r2,22
 80195d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80195dc:	00bffa84 	movi	r2,-22
 80195e0:	00001306 	br	8019630 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80195e4:	e0bffe17 	ldw	r2,-8(fp)
 80195e8:	e0ffff17 	ldw	r3,-4(fp)
 80195ec:	e0fffc15 	stw	r3,-16(fp)
 80195f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80195f4:	e0bffd17 	ldw	r2,-12(fp)
 80195f8:	e0fffc17 	ldw	r3,-16(fp)
 80195fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8019600:	e0bffc17 	ldw	r2,-16(fp)
 8019604:	10c00017 	ldw	r3,0(r2)
 8019608:	e0bffd17 	ldw	r2,-12(fp)
 801960c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8019610:	e0bffc17 	ldw	r2,-16(fp)
 8019614:	10800017 	ldw	r2,0(r2)
 8019618:	e0fffd17 	ldw	r3,-12(fp)
 801961c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8019620:	e0bffc17 	ldw	r2,-16(fp)
 8019624:	e0fffd17 	ldw	r3,-12(fp)
 8019628:	10c00015 	stw	r3,0(r2)

  return 0;  
 801962c:	0005883a 	mov	r2,zero
}
 8019630:	e037883a 	mov	sp,fp
 8019634:	dfc00117 	ldw	ra,4(sp)
 8019638:	df000017 	ldw	fp,0(sp)
 801963c:	dec00204 	addi	sp,sp,8
 8019640:	f800283a 	ret

08019644 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8019644:	defffd04 	addi	sp,sp,-12
 8019648:	dfc00215 	stw	ra,8(sp)
 801964c:	df000115 	stw	fp,4(sp)
 8019650:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8019654:	008200b4 	movhi	r2,2050
 8019658:	10aa0904 	addi	r2,r2,-22492
 801965c:	e0bfff15 	stw	r2,-4(fp)
 8019660:	00000606 	br	801967c <_do_ctors+0x38>
        (*ctor) (); 
 8019664:	e0bfff17 	ldw	r2,-4(fp)
 8019668:	10800017 	ldw	r2,0(r2)
 801966c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8019670:	e0bfff17 	ldw	r2,-4(fp)
 8019674:	10bfff04 	addi	r2,r2,-4
 8019678:	e0bfff15 	stw	r2,-4(fp)
 801967c:	e0ffff17 	ldw	r3,-4(fp)
 8019680:	008200b4 	movhi	r2,2050
 8019684:	10aa0a04 	addi	r2,r2,-22488
 8019688:	18bff62e 	bgeu	r3,r2,8019664 <__alt_data_end+0xfc019664>
        (*ctor) (); 
}
 801968c:	0001883a 	nop
 8019690:	e037883a 	mov	sp,fp
 8019694:	dfc00117 	ldw	ra,4(sp)
 8019698:	df000017 	ldw	fp,0(sp)
 801969c:	dec00204 	addi	sp,sp,8
 80196a0:	f800283a 	ret

080196a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80196a4:	defffd04 	addi	sp,sp,-12
 80196a8:	dfc00215 	stw	ra,8(sp)
 80196ac:	df000115 	stw	fp,4(sp)
 80196b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80196b4:	008200b4 	movhi	r2,2050
 80196b8:	10aa0904 	addi	r2,r2,-22492
 80196bc:	e0bfff15 	stw	r2,-4(fp)
 80196c0:	00000606 	br	80196dc <_do_dtors+0x38>
        (*dtor) (); 
 80196c4:	e0bfff17 	ldw	r2,-4(fp)
 80196c8:	10800017 	ldw	r2,0(r2)
 80196cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80196d0:	e0bfff17 	ldw	r2,-4(fp)
 80196d4:	10bfff04 	addi	r2,r2,-4
 80196d8:	e0bfff15 	stw	r2,-4(fp)
 80196dc:	e0ffff17 	ldw	r3,-4(fp)
 80196e0:	008200b4 	movhi	r2,2050
 80196e4:	10aa0a04 	addi	r2,r2,-22488
 80196e8:	18bff62e 	bgeu	r3,r2,80196c4 <__alt_data_end+0xfc0196c4>
        (*dtor) (); 
}
 80196ec:	0001883a 	nop
 80196f0:	e037883a 	mov	sp,fp
 80196f4:	dfc00117 	ldw	ra,4(sp)
 80196f8:	df000017 	ldw	fp,0(sp)
 80196fc:	dec00204 	addi	sp,sp,8
 8019700:	f800283a 	ret

08019704 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8019704:	defffa04 	addi	sp,sp,-24
 8019708:	dfc00515 	stw	ra,20(sp)
 801970c:	df000415 	stw	fp,16(sp)
 8019710:	df000404 	addi	fp,sp,16
 8019714:	e13ffe15 	stw	r4,-8(fp)
 8019718:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801971c:	e0bfff17 	ldw	r2,-4(fp)
 8019720:	10800017 	ldw	r2,0(r2)
 8019724:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8019728:	e13ffe17 	ldw	r4,-8(fp)
 801972c:	800b8f40 	call	800b8f4 <strlen>
 8019730:	10800044 	addi	r2,r2,1
 8019734:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8019738:	00000d06 	br	8019770 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801973c:	e0bffc17 	ldw	r2,-16(fp)
 8019740:	10800217 	ldw	r2,8(r2)
 8019744:	e0fffd17 	ldw	r3,-12(fp)
 8019748:	180d883a 	mov	r6,r3
 801974c:	e17ffe17 	ldw	r5,-8(fp)
 8019750:	1009883a 	mov	r4,r2
 8019754:	801a3780 	call	801a378 <memcmp>
 8019758:	1000021e 	bne	r2,zero,8019764 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801975c:	e0bffc17 	ldw	r2,-16(fp)
 8019760:	00000706 	br	8019780 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8019764:	e0bffc17 	ldw	r2,-16(fp)
 8019768:	10800017 	ldw	r2,0(r2)
 801976c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8019770:	e0fffc17 	ldw	r3,-16(fp)
 8019774:	e0bfff17 	ldw	r2,-4(fp)
 8019778:	18bff01e 	bne	r3,r2,801973c <__alt_data_end+0xfc01973c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801977c:	0005883a 	mov	r2,zero
}
 8019780:	e037883a 	mov	sp,fp
 8019784:	dfc00117 	ldw	ra,4(sp)
 8019788:	df000017 	ldw	fp,0(sp)
 801978c:	dec00204 	addi	sp,sp,8
 8019790:	f800283a 	ret

08019794 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8019794:	deffff04 	addi	sp,sp,-4
 8019798:	df000015 	stw	fp,0(sp)
 801979c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80197a0:	0001883a 	nop
 80197a4:	e037883a 	mov	sp,fp
 80197a8:	df000017 	ldw	fp,0(sp)
 80197ac:	dec00104 	addi	sp,sp,4
 80197b0:	f800283a 	ret

080197b4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80197b4:	defff904 	addi	sp,sp,-28
 80197b8:	dfc00615 	stw	ra,24(sp)
 80197bc:	df000515 	stw	fp,20(sp)
 80197c0:	df000504 	addi	fp,sp,20
 80197c4:	e13ffc15 	stw	r4,-16(fp)
 80197c8:	e17ffd15 	stw	r5,-12(fp)
 80197cc:	e1bffe15 	stw	r6,-8(fp)
 80197d0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80197d4:	e0800217 	ldw	r2,8(fp)
 80197d8:	d8800015 	stw	r2,0(sp)
 80197dc:	e1ffff17 	ldw	r7,-4(fp)
 80197e0:	e1bffe17 	ldw	r6,-8(fp)
 80197e4:	e17ffd17 	ldw	r5,-12(fp)
 80197e8:	e13ffc17 	ldw	r4,-16(fp)
 80197ec:	80199640 	call	8019964 <alt_iic_isr_register>
}  
 80197f0:	e037883a 	mov	sp,fp
 80197f4:	dfc00117 	ldw	ra,4(sp)
 80197f8:	df000017 	ldw	fp,0(sp)
 80197fc:	dec00204 	addi	sp,sp,8
 8019800:	f800283a 	ret

08019804 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8019804:	defff904 	addi	sp,sp,-28
 8019808:	df000615 	stw	fp,24(sp)
 801980c:	df000604 	addi	fp,sp,24
 8019810:	e13ffe15 	stw	r4,-8(fp)
 8019814:	e17fff15 	stw	r5,-4(fp)
 8019818:	e0bfff17 	ldw	r2,-4(fp)
 801981c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019820:	0005303a 	rdctl	r2,status
 8019824:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019828:	e0fffb17 	ldw	r3,-20(fp)
 801982c:	00bfff84 	movi	r2,-2
 8019830:	1884703a 	and	r2,r3,r2
 8019834:	1001703a 	wrctl	status,r2
  
  return context;
 8019838:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801983c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8019840:	00c00044 	movi	r3,1
 8019844:	e0bffa17 	ldw	r2,-24(fp)
 8019848:	1884983a 	sll	r2,r3,r2
 801984c:	1007883a 	mov	r3,r2
 8019850:	d0a76817 	ldw	r2,-25184(gp)
 8019854:	1884b03a 	or	r2,r3,r2
 8019858:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801985c:	d0a76817 	ldw	r2,-25184(gp)
 8019860:	100170fa 	wrctl	ienable,r2
 8019864:	e0bffc17 	ldw	r2,-16(fp)
 8019868:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801986c:	e0bffd17 	ldw	r2,-12(fp)
 8019870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8019874:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8019878:	0001883a 	nop
}
 801987c:	e037883a 	mov	sp,fp
 8019880:	df000017 	ldw	fp,0(sp)
 8019884:	dec00104 	addi	sp,sp,4
 8019888:	f800283a 	ret

0801988c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801988c:	defff904 	addi	sp,sp,-28
 8019890:	df000615 	stw	fp,24(sp)
 8019894:	df000604 	addi	fp,sp,24
 8019898:	e13ffe15 	stw	r4,-8(fp)
 801989c:	e17fff15 	stw	r5,-4(fp)
 80198a0:	e0bfff17 	ldw	r2,-4(fp)
 80198a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80198a8:	0005303a 	rdctl	r2,status
 80198ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80198b0:	e0fffb17 	ldw	r3,-20(fp)
 80198b4:	00bfff84 	movi	r2,-2
 80198b8:	1884703a 	and	r2,r3,r2
 80198bc:	1001703a 	wrctl	status,r2
  
  return context;
 80198c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80198c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80198c8:	00c00044 	movi	r3,1
 80198cc:	e0bffa17 	ldw	r2,-24(fp)
 80198d0:	1884983a 	sll	r2,r3,r2
 80198d4:	0084303a 	nor	r2,zero,r2
 80198d8:	1007883a 	mov	r3,r2
 80198dc:	d0a76817 	ldw	r2,-25184(gp)
 80198e0:	1884703a 	and	r2,r3,r2
 80198e4:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80198e8:	d0a76817 	ldw	r2,-25184(gp)
 80198ec:	100170fa 	wrctl	ienable,r2
 80198f0:	e0bffc17 	ldw	r2,-16(fp)
 80198f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80198f8:	e0bffd17 	ldw	r2,-12(fp)
 80198fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8019900:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8019904:	0001883a 	nop
}
 8019908:	e037883a 	mov	sp,fp
 801990c:	df000017 	ldw	fp,0(sp)
 8019910:	dec00104 	addi	sp,sp,4
 8019914:	f800283a 	ret

08019918 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8019918:	defffc04 	addi	sp,sp,-16
 801991c:	df000315 	stw	fp,12(sp)
 8019920:	df000304 	addi	fp,sp,12
 8019924:	e13ffe15 	stw	r4,-8(fp)
 8019928:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801992c:	000530fa 	rdctl	r2,ienable
 8019930:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8019934:	00c00044 	movi	r3,1
 8019938:	e0bfff17 	ldw	r2,-4(fp)
 801993c:	1884983a 	sll	r2,r3,r2
 8019940:	1007883a 	mov	r3,r2
 8019944:	e0bffd17 	ldw	r2,-12(fp)
 8019948:	1884703a 	and	r2,r3,r2
 801994c:	1004c03a 	cmpne	r2,r2,zero
 8019950:	10803fcc 	andi	r2,r2,255
}
 8019954:	e037883a 	mov	sp,fp
 8019958:	df000017 	ldw	fp,0(sp)
 801995c:	dec00104 	addi	sp,sp,4
 8019960:	f800283a 	ret

08019964 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8019964:	defff504 	addi	sp,sp,-44
 8019968:	dfc00a15 	stw	ra,40(sp)
 801996c:	df000915 	stw	fp,36(sp)
 8019970:	df000904 	addi	fp,sp,36
 8019974:	e13ffc15 	stw	r4,-16(fp)
 8019978:	e17ffd15 	stw	r5,-12(fp)
 801997c:	e1bffe15 	stw	r6,-8(fp)
 8019980:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8019984:	00bffa84 	movi	r2,-22
 8019988:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801998c:	e0bffd17 	ldw	r2,-12(fp)
 8019990:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8019994:	e0bff817 	ldw	r2,-32(fp)
 8019998:	10800808 	cmpgei	r2,r2,32
 801999c:	1000271e 	bne	r2,zero,8019a3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80199a0:	0005303a 	rdctl	r2,status
 80199a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80199a8:	e0fffb17 	ldw	r3,-20(fp)
 80199ac:	00bfff84 	movi	r2,-2
 80199b0:	1884703a 	and	r2,r3,r2
 80199b4:	1001703a 	wrctl	status,r2
  
  return context;
 80199b8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80199bc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80199c0:	008200b4 	movhi	r2,2050
 80199c4:	10bab804 	addi	r2,r2,-5408
 80199c8:	e0fff817 	ldw	r3,-32(fp)
 80199cc:	180690fa 	slli	r3,r3,3
 80199d0:	10c5883a 	add	r2,r2,r3
 80199d4:	e0fffe17 	ldw	r3,-8(fp)
 80199d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80199dc:	008200b4 	movhi	r2,2050
 80199e0:	10bab804 	addi	r2,r2,-5408
 80199e4:	e0fff817 	ldw	r3,-32(fp)
 80199e8:	180690fa 	slli	r3,r3,3
 80199ec:	10c5883a 	add	r2,r2,r3
 80199f0:	10800104 	addi	r2,r2,4
 80199f4:	e0ffff17 	ldw	r3,-4(fp)
 80199f8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80199fc:	e0bffe17 	ldw	r2,-8(fp)
 8019a00:	10000526 	beq	r2,zero,8019a18 <alt_iic_isr_register+0xb4>
 8019a04:	e0bff817 	ldw	r2,-32(fp)
 8019a08:	100b883a 	mov	r5,r2
 8019a0c:	e13ffc17 	ldw	r4,-16(fp)
 8019a10:	80198040 	call	8019804 <alt_ic_irq_enable>
 8019a14:	00000406 	br	8019a28 <alt_iic_isr_register+0xc4>
 8019a18:	e0bff817 	ldw	r2,-32(fp)
 8019a1c:	100b883a 	mov	r5,r2
 8019a20:	e13ffc17 	ldw	r4,-16(fp)
 8019a24:	801988c0 	call	801988c <alt_ic_irq_disable>
 8019a28:	e0bff715 	stw	r2,-36(fp)
 8019a2c:	e0bffa17 	ldw	r2,-24(fp)
 8019a30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019a34:	e0bff917 	ldw	r2,-28(fp)
 8019a38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8019a3c:	e0bff717 	ldw	r2,-36(fp)
}
 8019a40:	e037883a 	mov	sp,fp
 8019a44:	dfc00117 	ldw	ra,4(sp)
 8019a48:	df000017 	ldw	fp,0(sp)
 8019a4c:	dec00204 	addi	sp,sp,8
 8019a50:	f800283a 	ret

08019a54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8019a54:	defff804 	addi	sp,sp,-32
 8019a58:	dfc00715 	stw	ra,28(sp)
 8019a5c:	df000615 	stw	fp,24(sp)
 8019a60:	dc000515 	stw	r16,20(sp)
 8019a64:	df000604 	addi	fp,sp,24
 8019a68:	e13ffb15 	stw	r4,-20(fp)
 8019a6c:	e17ffc15 	stw	r5,-16(fp)
 8019a70:	e1bffd15 	stw	r6,-12(fp)
 8019a74:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8019a78:	e1bffe17 	ldw	r6,-8(fp)
 8019a7c:	e17ffd17 	ldw	r5,-12(fp)
 8019a80:	e13ffc17 	ldw	r4,-16(fp)
 8019a84:	8019cdc0 	call	8019cdc <open>
 8019a88:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8019a8c:	e0bffa17 	ldw	r2,-24(fp)
 8019a90:	10002216 	blt	r2,zero,8019b1c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8019a94:	040200b4 	movhi	r16,2050
 8019a98:	842e5004 	addi	r16,r16,-18112
 8019a9c:	e0bffa17 	ldw	r2,-24(fp)
 8019aa0:	01400304 	movi	r5,12
 8019aa4:	1009883a 	mov	r4,r2
 8019aa8:	800832c0 	call	800832c <__mulsi3>
 8019aac:	8085883a 	add	r2,r16,r2
 8019ab0:	10c00017 	ldw	r3,0(r2)
 8019ab4:	e0bffb17 	ldw	r2,-20(fp)
 8019ab8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8019abc:	040200b4 	movhi	r16,2050
 8019ac0:	842e5004 	addi	r16,r16,-18112
 8019ac4:	e0bffa17 	ldw	r2,-24(fp)
 8019ac8:	01400304 	movi	r5,12
 8019acc:	1009883a 	mov	r4,r2
 8019ad0:	800832c0 	call	800832c <__mulsi3>
 8019ad4:	8085883a 	add	r2,r16,r2
 8019ad8:	10800104 	addi	r2,r2,4
 8019adc:	10c00017 	ldw	r3,0(r2)
 8019ae0:	e0bffb17 	ldw	r2,-20(fp)
 8019ae4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8019ae8:	040200b4 	movhi	r16,2050
 8019aec:	842e5004 	addi	r16,r16,-18112
 8019af0:	e0bffa17 	ldw	r2,-24(fp)
 8019af4:	01400304 	movi	r5,12
 8019af8:	1009883a 	mov	r4,r2
 8019afc:	800832c0 	call	800832c <__mulsi3>
 8019b00:	8085883a 	add	r2,r16,r2
 8019b04:	10800204 	addi	r2,r2,8
 8019b08:	10c00017 	ldw	r3,0(r2)
 8019b0c:	e0bffb17 	ldw	r2,-20(fp)
 8019b10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8019b14:	e13ffa17 	ldw	r4,-24(fp)
 8019b18:	80164300 	call	8016430 <alt_release_fd>
  }
} 
 8019b1c:	0001883a 	nop
 8019b20:	e6ffff04 	addi	sp,fp,-4
 8019b24:	dfc00217 	ldw	ra,8(sp)
 8019b28:	df000117 	ldw	fp,4(sp)
 8019b2c:	dc000017 	ldw	r16,0(sp)
 8019b30:	dec00304 	addi	sp,sp,12
 8019b34:	f800283a 	ret

08019b38 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8019b38:	defffb04 	addi	sp,sp,-20
 8019b3c:	dfc00415 	stw	ra,16(sp)
 8019b40:	df000315 	stw	fp,12(sp)
 8019b44:	df000304 	addi	fp,sp,12
 8019b48:	e13ffd15 	stw	r4,-12(fp)
 8019b4c:	e17ffe15 	stw	r5,-8(fp)
 8019b50:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8019b54:	01c07fc4 	movi	r7,511
 8019b58:	01800044 	movi	r6,1
 8019b5c:	e17ffd17 	ldw	r5,-12(fp)
 8019b60:	010200b4 	movhi	r4,2050
 8019b64:	212e5304 	addi	r4,r4,-18100
 8019b68:	8019a540 	call	8019a54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8019b6c:	01c07fc4 	movi	r7,511
 8019b70:	000d883a 	mov	r6,zero
 8019b74:	e17ffe17 	ldw	r5,-8(fp)
 8019b78:	010200b4 	movhi	r4,2050
 8019b7c:	212e5004 	addi	r4,r4,-18112
 8019b80:	8019a540 	call	8019a54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8019b84:	01c07fc4 	movi	r7,511
 8019b88:	01800044 	movi	r6,1
 8019b8c:	e17fff17 	ldw	r5,-4(fp)
 8019b90:	010200b4 	movhi	r4,2050
 8019b94:	212e5604 	addi	r4,r4,-18088
 8019b98:	8019a540 	call	8019a54 <alt_open_fd>
}  
 8019b9c:	0001883a 	nop
 8019ba0:	e037883a 	mov	sp,fp
 8019ba4:	dfc00117 	ldw	ra,4(sp)
 8019ba8:	df000017 	ldw	fp,0(sp)
 8019bac:	dec00204 	addi	sp,sp,8
 8019bb0:	f800283a 	ret

08019bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019bb4:	defffe04 	addi	sp,sp,-8
 8019bb8:	dfc00115 	stw	ra,4(sp)
 8019bbc:	df000015 	stw	fp,0(sp)
 8019bc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019bc4:	d0a01117 	ldw	r2,-32700(gp)
 8019bc8:	10000326 	beq	r2,zero,8019bd8 <alt_get_errno+0x24>
 8019bcc:	d0a01117 	ldw	r2,-32700(gp)
 8019bd0:	103ee83a 	callr	r2
 8019bd4:	00000106 	br	8019bdc <alt_get_errno+0x28>
 8019bd8:	d0a76204 	addi	r2,gp,-25208
}
 8019bdc:	e037883a 	mov	sp,fp
 8019be0:	dfc00117 	ldw	ra,4(sp)
 8019be4:	df000017 	ldw	fp,0(sp)
 8019be8:	dec00204 	addi	sp,sp,8
 8019bec:	f800283a 	ret

08019bf0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8019bf0:	defffb04 	addi	sp,sp,-20
 8019bf4:	dfc00415 	stw	ra,16(sp)
 8019bf8:	df000315 	stw	fp,12(sp)
 8019bfc:	dc000215 	stw	r16,8(sp)
 8019c00:	df000304 	addi	fp,sp,12
 8019c04:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8019c08:	e0bffe17 	ldw	r2,-8(fp)
 8019c0c:	10800217 	ldw	r2,8(r2)
 8019c10:	10d00034 	orhi	r3,r2,16384
 8019c14:	e0bffe17 	ldw	r2,-8(fp)
 8019c18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8019c1c:	e03ffd15 	stw	zero,-12(fp)
 8019c20:	00002306 	br	8019cb0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8019c24:	040200b4 	movhi	r16,2050
 8019c28:	842e5004 	addi	r16,r16,-18112
 8019c2c:	e0bffd17 	ldw	r2,-12(fp)
 8019c30:	01400304 	movi	r5,12
 8019c34:	1009883a 	mov	r4,r2
 8019c38:	800832c0 	call	800832c <__mulsi3>
 8019c3c:	8085883a 	add	r2,r16,r2
 8019c40:	10c00017 	ldw	r3,0(r2)
 8019c44:	e0bffe17 	ldw	r2,-8(fp)
 8019c48:	10800017 	ldw	r2,0(r2)
 8019c4c:	1880151e 	bne	r3,r2,8019ca4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8019c50:	040200b4 	movhi	r16,2050
 8019c54:	842e5004 	addi	r16,r16,-18112
 8019c58:	e0bffd17 	ldw	r2,-12(fp)
 8019c5c:	01400304 	movi	r5,12
 8019c60:	1009883a 	mov	r4,r2
 8019c64:	800832c0 	call	800832c <__mulsi3>
 8019c68:	8085883a 	add	r2,r16,r2
 8019c6c:	10800204 	addi	r2,r2,8
 8019c70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8019c74:	10000b0e 	bge	r2,zero,8019ca4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8019c78:	01400304 	movi	r5,12
 8019c7c:	e13ffd17 	ldw	r4,-12(fp)
 8019c80:	800832c0 	call	800832c <__mulsi3>
 8019c84:	1007883a 	mov	r3,r2
 8019c88:	008200b4 	movhi	r2,2050
 8019c8c:	10ae5004 	addi	r2,r2,-18112
 8019c90:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8019c94:	e0bffe17 	ldw	r2,-8(fp)
 8019c98:	18800226 	beq	r3,r2,8019ca4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8019c9c:	00bffcc4 	movi	r2,-13
 8019ca0:	00000806 	br	8019cc4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8019ca4:	e0bffd17 	ldw	r2,-12(fp)
 8019ca8:	10800044 	addi	r2,r2,1
 8019cac:	e0bffd15 	stw	r2,-12(fp)
 8019cb0:	d0a01017 	ldw	r2,-32704(gp)
 8019cb4:	1007883a 	mov	r3,r2
 8019cb8:	e0bffd17 	ldw	r2,-12(fp)
 8019cbc:	18bfd92e 	bgeu	r3,r2,8019c24 <__alt_data_end+0xfc019c24>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8019cc0:	0005883a 	mov	r2,zero
}
 8019cc4:	e6ffff04 	addi	sp,fp,-4
 8019cc8:	dfc00217 	ldw	ra,8(sp)
 8019ccc:	df000117 	ldw	fp,4(sp)
 8019cd0:	dc000017 	ldw	r16,0(sp)
 8019cd4:	dec00304 	addi	sp,sp,12
 8019cd8:	f800283a 	ret

08019cdc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8019cdc:	defff604 	addi	sp,sp,-40
 8019ce0:	dfc00915 	stw	ra,36(sp)
 8019ce4:	df000815 	stw	fp,32(sp)
 8019ce8:	df000804 	addi	fp,sp,32
 8019cec:	e13ffd15 	stw	r4,-12(fp)
 8019cf0:	e17ffe15 	stw	r5,-8(fp)
 8019cf4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8019cf8:	00bfffc4 	movi	r2,-1
 8019cfc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8019d00:	00bffb44 	movi	r2,-19
 8019d04:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8019d08:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8019d0c:	d1600e04 	addi	r5,gp,-32712
 8019d10:	e13ffd17 	ldw	r4,-12(fp)
 8019d14:	80197040 	call	8019704 <alt_find_dev>
 8019d18:	e0bff815 	stw	r2,-32(fp)
 8019d1c:	e0bff817 	ldw	r2,-32(fp)
 8019d20:	1000051e 	bne	r2,zero,8019d38 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8019d24:	e13ffd17 	ldw	r4,-12(fp)
 8019d28:	801a0c40 	call	801a0c4 <alt_find_file>
 8019d2c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8019d30:	00800044 	movi	r2,1
 8019d34:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8019d38:	e0bff817 	ldw	r2,-32(fp)
 8019d3c:	10002b26 	beq	r2,zero,8019dec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8019d40:	e13ff817 	ldw	r4,-32(fp)
 8019d44:	801a1cc0 	call	801a1cc <alt_get_fd>
 8019d48:	e0bff915 	stw	r2,-28(fp)
 8019d4c:	e0bff917 	ldw	r2,-28(fp)
 8019d50:	1000030e 	bge	r2,zero,8019d60 <open+0x84>
    {
      status = index;
 8019d54:	e0bff917 	ldw	r2,-28(fp)
 8019d58:	e0bffa15 	stw	r2,-24(fp)
 8019d5c:	00002506 	br	8019df4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8019d60:	01400304 	movi	r5,12
 8019d64:	e13ff917 	ldw	r4,-28(fp)
 8019d68:	800832c0 	call	800832c <__mulsi3>
 8019d6c:	1007883a 	mov	r3,r2
 8019d70:	008200b4 	movhi	r2,2050
 8019d74:	10ae5004 	addi	r2,r2,-18112
 8019d78:	1885883a 	add	r2,r3,r2
 8019d7c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8019d80:	e0fffe17 	ldw	r3,-8(fp)
 8019d84:	00900034 	movhi	r2,16384
 8019d88:	10bfffc4 	addi	r2,r2,-1
 8019d8c:	1886703a 	and	r3,r3,r2
 8019d90:	e0bffc17 	ldw	r2,-16(fp)
 8019d94:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8019d98:	e0bffb17 	ldw	r2,-20(fp)
 8019d9c:	1000051e 	bne	r2,zero,8019db4 <open+0xd8>
 8019da0:	e13ffc17 	ldw	r4,-16(fp)
 8019da4:	8019bf00 	call	8019bf0 <alt_file_locked>
 8019da8:	e0bffa15 	stw	r2,-24(fp)
 8019dac:	e0bffa17 	ldw	r2,-24(fp)
 8019db0:	10001016 	blt	r2,zero,8019df4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8019db4:	e0bff817 	ldw	r2,-32(fp)
 8019db8:	10800317 	ldw	r2,12(r2)
 8019dbc:	10000826 	beq	r2,zero,8019de0 <open+0x104>
 8019dc0:	e0bff817 	ldw	r2,-32(fp)
 8019dc4:	10800317 	ldw	r2,12(r2)
 8019dc8:	e1ffff17 	ldw	r7,-4(fp)
 8019dcc:	e1bffe17 	ldw	r6,-8(fp)
 8019dd0:	e17ffd17 	ldw	r5,-12(fp)
 8019dd4:	e13ffc17 	ldw	r4,-16(fp)
 8019dd8:	103ee83a 	callr	r2
 8019ddc:	00000106 	br	8019de4 <open+0x108>
 8019de0:	0005883a 	mov	r2,zero
 8019de4:	e0bffa15 	stw	r2,-24(fp)
 8019de8:	00000206 	br	8019df4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8019dec:	00bffb44 	movi	r2,-19
 8019df0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8019df4:	e0bffa17 	ldw	r2,-24(fp)
 8019df8:	1000090e 	bge	r2,zero,8019e20 <open+0x144>
  {
    alt_release_fd (index);  
 8019dfc:	e13ff917 	ldw	r4,-28(fp)
 8019e00:	80164300 	call	8016430 <alt_release_fd>
    ALT_ERRNO = -status;
 8019e04:	8019bb40 	call	8019bb4 <alt_get_errno>
 8019e08:	1007883a 	mov	r3,r2
 8019e0c:	e0bffa17 	ldw	r2,-24(fp)
 8019e10:	0085c83a 	sub	r2,zero,r2
 8019e14:	18800015 	stw	r2,0(r3)
    return -1;
 8019e18:	00bfffc4 	movi	r2,-1
 8019e1c:	00000106 	br	8019e24 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8019e20:	e0bff917 	ldw	r2,-28(fp)
}
 8019e24:	e037883a 	mov	sp,fp
 8019e28:	dfc00117 	ldw	ra,4(sp)
 8019e2c:	df000017 	ldw	fp,0(sp)
 8019e30:	dec00204 	addi	sp,sp,8
 8019e34:	f800283a 	ret

08019e38 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8019e38:	defff204 	addi	sp,sp,-56
 8019e3c:	dfc00a15 	stw	ra,40(sp)
 8019e40:	df000915 	stw	fp,36(sp)
 8019e44:	df000904 	addi	fp,sp,36
 8019e48:	e13fff15 	stw	r4,-4(fp)
 8019e4c:	e1400215 	stw	r5,8(fp)
 8019e50:	e1800315 	stw	r6,12(fp)
 8019e54:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8019e58:	e0800204 	addi	r2,fp,8
 8019e5c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8019e60:	e0bfff17 	ldw	r2,-4(fp)
 8019e64:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8019e68:	00006f06 	br	801a028 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8019e6c:	e0bff807 	ldb	r2,-32(fp)
 8019e70:	10800960 	cmpeqi	r2,r2,37
 8019e74:	1000041e 	bne	r2,zero,8019e88 <alt_printf+0x50>
        {
            alt_putchar(c);
 8019e78:	e0bff807 	ldb	r2,-32(fp)
 8019e7c:	1009883a 	mov	r4,r2
 8019e80:	801a0640 	call	801a064 <alt_putchar>
 8019e84:	00006806 	br	801a028 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8019e88:	e0bff717 	ldw	r2,-36(fp)
 8019e8c:	10c00044 	addi	r3,r2,1
 8019e90:	e0fff715 	stw	r3,-36(fp)
 8019e94:	10800003 	ldbu	r2,0(r2)
 8019e98:	e0bff805 	stb	r2,-32(fp)
 8019e9c:	e0bff807 	ldb	r2,-32(fp)
 8019ea0:	10006926 	beq	r2,zero,801a048 <alt_printf+0x210>
            {
                if (c == '%')
 8019ea4:	e0bff807 	ldb	r2,-32(fp)
 8019ea8:	10800958 	cmpnei	r2,r2,37
 8019eac:	1000041e 	bne	r2,zero,8019ec0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8019eb0:	e0bff807 	ldb	r2,-32(fp)
 8019eb4:	1009883a 	mov	r4,r2
 8019eb8:	801a0640 	call	801a064 <alt_putchar>
 8019ebc:	00005a06 	br	801a028 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8019ec0:	e0bff807 	ldb	r2,-32(fp)
 8019ec4:	108018d8 	cmpnei	r2,r2,99
 8019ec8:	1000081e 	bne	r2,zero,8019eec <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8019ecc:	e0bffe17 	ldw	r2,-8(fp)
 8019ed0:	10c00104 	addi	r3,r2,4
 8019ed4:	e0fffe15 	stw	r3,-8(fp)
 8019ed8:	10800017 	ldw	r2,0(r2)
 8019edc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8019ee0:	e13ffd17 	ldw	r4,-12(fp)
 8019ee4:	801a0640 	call	801a064 <alt_putchar>
 8019ee8:	00004f06 	br	801a028 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8019eec:	e0bff807 	ldb	r2,-32(fp)
 8019ef0:	10801e18 	cmpnei	r2,r2,120
 8019ef4:	1000341e 	bne	r2,zero,8019fc8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8019ef8:	e0bffe17 	ldw	r2,-8(fp)
 8019efc:	10c00104 	addi	r3,r2,4
 8019f00:	e0fffe15 	stw	r3,-8(fp)
 8019f04:	10800017 	ldw	r2,0(r2)
 8019f08:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8019f0c:	e0bffb17 	ldw	r2,-20(fp)
 8019f10:	1000031e 	bne	r2,zero,8019f20 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8019f14:	01000c04 	movi	r4,48
 8019f18:	801a0640 	call	801a064 <alt_putchar>
                        continue;
 8019f1c:	00004206 	br	801a028 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8019f20:	00800704 	movi	r2,28
 8019f24:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8019f28:	00000306 	br	8019f38 <alt_printf+0x100>
                        digit_shift -= 4;
 8019f2c:	e0bff917 	ldw	r2,-28(fp)
 8019f30:	10bfff04 	addi	r2,r2,-4
 8019f34:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8019f38:	00c003c4 	movi	r3,15
 8019f3c:	e0bff917 	ldw	r2,-28(fp)
 8019f40:	1884983a 	sll	r2,r3,r2
 8019f44:	1007883a 	mov	r3,r2
 8019f48:	e0bffb17 	ldw	r2,-20(fp)
 8019f4c:	1884703a 	and	r2,r3,r2
 8019f50:	103ff626 	beq	r2,zero,8019f2c <__alt_data_end+0xfc019f2c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8019f54:	00001906 	br	8019fbc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8019f58:	00c003c4 	movi	r3,15
 8019f5c:	e0bff917 	ldw	r2,-28(fp)
 8019f60:	1884983a 	sll	r2,r3,r2
 8019f64:	1007883a 	mov	r3,r2
 8019f68:	e0bffb17 	ldw	r2,-20(fp)
 8019f6c:	1886703a 	and	r3,r3,r2
 8019f70:	e0bff917 	ldw	r2,-28(fp)
 8019f74:	1884d83a 	srl	r2,r3,r2
 8019f78:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8019f7c:	e0bffc17 	ldw	r2,-16(fp)
 8019f80:	108002a8 	cmpgeui	r2,r2,10
 8019f84:	1000041e 	bne	r2,zero,8019f98 <alt_printf+0x160>
                            c = '0' + digit;
 8019f88:	e0bffc17 	ldw	r2,-16(fp)
 8019f8c:	10800c04 	addi	r2,r2,48
 8019f90:	e0bff805 	stb	r2,-32(fp)
 8019f94:	00000306 	br	8019fa4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8019f98:	e0bffc17 	ldw	r2,-16(fp)
 8019f9c:	108015c4 	addi	r2,r2,87
 8019fa0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8019fa4:	e0bff807 	ldb	r2,-32(fp)
 8019fa8:	1009883a 	mov	r4,r2
 8019fac:	801a0640 	call	801a064 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8019fb0:	e0bff917 	ldw	r2,-28(fp)
 8019fb4:	10bfff04 	addi	r2,r2,-4
 8019fb8:	e0bff915 	stw	r2,-28(fp)
 8019fbc:	e0bff917 	ldw	r2,-28(fp)
 8019fc0:	103fe50e 	bge	r2,zero,8019f58 <__alt_data_end+0xfc019f58>
 8019fc4:	00001806 	br	801a028 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8019fc8:	e0bff807 	ldb	r2,-32(fp)
 8019fcc:	10801cd8 	cmpnei	r2,r2,115
 8019fd0:	1000151e 	bne	r2,zero,801a028 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8019fd4:	e0bffe17 	ldw	r2,-8(fp)
 8019fd8:	10c00104 	addi	r3,r2,4
 8019fdc:	e0fffe15 	stw	r3,-8(fp)
 8019fe0:	10800017 	ldw	r2,0(r2)
 8019fe4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8019fe8:	00000906 	br	801a010 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8019fec:	e0bffa17 	ldw	r2,-24(fp)
 8019ff0:	10c00044 	addi	r3,r2,1
 8019ff4:	e0fffa15 	stw	r3,-24(fp)
 8019ff8:	10800003 	ldbu	r2,0(r2)
 8019ffc:	10803fcc 	andi	r2,r2,255
 801a000:	1080201c 	xori	r2,r2,128
 801a004:	10bfe004 	addi	r2,r2,-128
 801a008:	1009883a 	mov	r4,r2
 801a00c:	801a0640 	call	801a064 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 801a010:	e0bffa17 	ldw	r2,-24(fp)
 801a014:	10800003 	ldbu	r2,0(r2)
 801a018:	10803fcc 	andi	r2,r2,255
 801a01c:	1080201c 	xori	r2,r2,128
 801a020:	10bfe004 	addi	r2,r2,-128
 801a024:	103ff11e 	bne	r2,zero,8019fec <__alt_data_end+0xfc019fec>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 801a028:	e0bff717 	ldw	r2,-36(fp)
 801a02c:	10c00044 	addi	r3,r2,1
 801a030:	e0fff715 	stw	r3,-36(fp)
 801a034:	10800003 	ldbu	r2,0(r2)
 801a038:	e0bff805 	stb	r2,-32(fp)
 801a03c:	e0bff807 	ldb	r2,-32(fp)
 801a040:	103f8a1e 	bne	r2,zero,8019e6c <__alt_data_end+0xfc019e6c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 801a044:	00000106 	br	801a04c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 801a048:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 801a04c:	0001883a 	nop
 801a050:	e037883a 	mov	sp,fp
 801a054:	dfc00117 	ldw	ra,4(sp)
 801a058:	df000017 	ldw	fp,0(sp)
 801a05c:	dec00504 	addi	sp,sp,20
 801a060:	f800283a 	ret

0801a064 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 801a064:	defffd04 	addi	sp,sp,-12
 801a068:	dfc00215 	stw	ra,8(sp)
 801a06c:	df000115 	stw	fp,4(sp)
 801a070:	df000104 	addi	fp,sp,4
 801a074:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 801a078:	d0a00717 	ldw	r2,-32740(gp)
 801a07c:	10800217 	ldw	r2,8(r2)
 801a080:	100b883a 	mov	r5,r2
 801a084:	e13fff17 	ldw	r4,-4(fp)
 801a088:	801a4940 	call	801a494 <putc>
#endif
#endif
}
 801a08c:	e037883a 	mov	sp,fp
 801a090:	dfc00117 	ldw	ra,4(sp)
 801a094:	df000017 	ldw	fp,0(sp)
 801a098:	dec00204 	addi	sp,sp,8
 801a09c:	f800283a 	ret

0801a0a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801a0a0:	deffff04 	addi	sp,sp,-4
 801a0a4:	df000015 	stw	fp,0(sp)
 801a0a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801a0ac:	000170fa 	wrctl	ienable,zero
}
 801a0b0:	0001883a 	nop
 801a0b4:	e037883a 	mov	sp,fp
 801a0b8:	df000017 	ldw	fp,0(sp)
 801a0bc:	dec00104 	addi	sp,sp,4
 801a0c0:	f800283a 	ret

0801a0c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801a0c4:	defffb04 	addi	sp,sp,-20
 801a0c8:	dfc00415 	stw	ra,16(sp)
 801a0cc:	df000315 	stw	fp,12(sp)
 801a0d0:	df000304 	addi	fp,sp,12
 801a0d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801a0d8:	d0a00c17 	ldw	r2,-32720(gp)
 801a0dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801a0e0:	00003106 	br	801a1a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 801a0e4:	e0bffd17 	ldw	r2,-12(fp)
 801a0e8:	10800217 	ldw	r2,8(r2)
 801a0ec:	1009883a 	mov	r4,r2
 801a0f0:	800b8f40 	call	800b8f4 <strlen>
 801a0f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801a0f8:	e0bffd17 	ldw	r2,-12(fp)
 801a0fc:	10c00217 	ldw	r3,8(r2)
 801a100:	e0bffe17 	ldw	r2,-8(fp)
 801a104:	10bfffc4 	addi	r2,r2,-1
 801a108:	1885883a 	add	r2,r3,r2
 801a10c:	10800003 	ldbu	r2,0(r2)
 801a110:	10803fcc 	andi	r2,r2,255
 801a114:	1080201c 	xori	r2,r2,128
 801a118:	10bfe004 	addi	r2,r2,-128
 801a11c:	10800bd8 	cmpnei	r2,r2,47
 801a120:	1000031e 	bne	r2,zero,801a130 <alt_find_file+0x6c>
    {
      len -= 1;
 801a124:	e0bffe17 	ldw	r2,-8(fp)
 801a128:	10bfffc4 	addi	r2,r2,-1
 801a12c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801a130:	e0bffe17 	ldw	r2,-8(fp)
 801a134:	e0ffff17 	ldw	r3,-4(fp)
 801a138:	1885883a 	add	r2,r3,r2
 801a13c:	10800003 	ldbu	r2,0(r2)
 801a140:	10803fcc 	andi	r2,r2,255
 801a144:	1080201c 	xori	r2,r2,128
 801a148:	10bfe004 	addi	r2,r2,-128
 801a14c:	10800be0 	cmpeqi	r2,r2,47
 801a150:	1000081e 	bne	r2,zero,801a174 <alt_find_file+0xb0>
 801a154:	e0bffe17 	ldw	r2,-8(fp)
 801a158:	e0ffff17 	ldw	r3,-4(fp)
 801a15c:	1885883a 	add	r2,r3,r2
 801a160:	10800003 	ldbu	r2,0(r2)
 801a164:	10803fcc 	andi	r2,r2,255
 801a168:	1080201c 	xori	r2,r2,128
 801a16c:	10bfe004 	addi	r2,r2,-128
 801a170:	10000a1e 	bne	r2,zero,801a19c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 801a174:	e0bffd17 	ldw	r2,-12(fp)
 801a178:	10800217 	ldw	r2,8(r2)
 801a17c:	e0fffe17 	ldw	r3,-8(fp)
 801a180:	180d883a 	mov	r6,r3
 801a184:	e17fff17 	ldw	r5,-4(fp)
 801a188:	1009883a 	mov	r4,r2
 801a18c:	801a3780 	call	801a378 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801a190:	1000021e 	bne	r2,zero,801a19c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801a194:	e0bffd17 	ldw	r2,-12(fp)
 801a198:	00000706 	br	801a1b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801a19c:	e0bffd17 	ldw	r2,-12(fp)
 801a1a0:	10800017 	ldw	r2,0(r2)
 801a1a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801a1a8:	e0fffd17 	ldw	r3,-12(fp)
 801a1ac:	d0a00c04 	addi	r2,gp,-32720
 801a1b0:	18bfcc1e 	bne	r3,r2,801a0e4 <__alt_data_end+0xfc01a0e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801a1b4:	0005883a 	mov	r2,zero
}
 801a1b8:	e037883a 	mov	sp,fp
 801a1bc:	dfc00117 	ldw	ra,4(sp)
 801a1c0:	df000017 	ldw	fp,0(sp)
 801a1c4:	dec00204 	addi	sp,sp,8
 801a1c8:	f800283a 	ret

0801a1cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801a1cc:	defffa04 	addi	sp,sp,-24
 801a1d0:	dfc00515 	stw	ra,20(sp)
 801a1d4:	df000415 	stw	fp,16(sp)
 801a1d8:	dc000315 	stw	r16,12(sp)
 801a1dc:	df000404 	addi	fp,sp,16
 801a1e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 801a1e4:	00bffa04 	movi	r2,-24
 801a1e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801a1ec:	e03ffc15 	stw	zero,-16(fp)
 801a1f0:	00001d06 	br	801a268 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 801a1f4:	040200b4 	movhi	r16,2050
 801a1f8:	842e5004 	addi	r16,r16,-18112
 801a1fc:	e0bffc17 	ldw	r2,-16(fp)
 801a200:	01400304 	movi	r5,12
 801a204:	1009883a 	mov	r4,r2
 801a208:	800832c0 	call	800832c <__mulsi3>
 801a20c:	8085883a 	add	r2,r16,r2
 801a210:	10800017 	ldw	r2,0(r2)
 801a214:	1000111e 	bne	r2,zero,801a25c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 801a218:	040200b4 	movhi	r16,2050
 801a21c:	842e5004 	addi	r16,r16,-18112
 801a220:	e0bffc17 	ldw	r2,-16(fp)
 801a224:	01400304 	movi	r5,12
 801a228:	1009883a 	mov	r4,r2
 801a22c:	800832c0 	call	800832c <__mulsi3>
 801a230:	8085883a 	add	r2,r16,r2
 801a234:	e0fffe17 	ldw	r3,-8(fp)
 801a238:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801a23c:	d0e01017 	ldw	r3,-32704(gp)
 801a240:	e0bffc17 	ldw	r2,-16(fp)
 801a244:	1880020e 	bge	r3,r2,801a250 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 801a248:	e0bffc17 	ldw	r2,-16(fp)
 801a24c:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 801a250:	e0bffc17 	ldw	r2,-16(fp)
 801a254:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 801a258:	00000606 	br	801a274 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801a25c:	e0bffc17 	ldw	r2,-16(fp)
 801a260:	10800044 	addi	r2,r2,1
 801a264:	e0bffc15 	stw	r2,-16(fp)
 801a268:	e0bffc17 	ldw	r2,-16(fp)
 801a26c:	10800810 	cmplti	r2,r2,32
 801a270:	103fe01e 	bne	r2,zero,801a1f4 <__alt_data_end+0xfc01a1f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801a274:	e0bffd17 	ldw	r2,-12(fp)
}
 801a278:	e6ffff04 	addi	sp,fp,-4
 801a27c:	dfc00217 	ldw	ra,8(sp)
 801a280:	df000117 	ldw	fp,4(sp)
 801a284:	dc000017 	ldw	r16,0(sp)
 801a288:	dec00304 	addi	sp,sp,12
 801a28c:	f800283a 	ret

0801a290 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801a290:	defffe04 	addi	sp,sp,-8
 801a294:	df000115 	stw	fp,4(sp)
 801a298:	df000104 	addi	fp,sp,4
 801a29c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801a2a0:	e0bfff17 	ldw	r2,-4(fp)
 801a2a4:	10bffe84 	addi	r2,r2,-6
 801a2a8:	10c00428 	cmpgeui	r3,r2,16
 801a2ac:	18001a1e 	bne	r3,zero,801a318 <alt_exception_cause_generated_bad_addr+0x88>
 801a2b0:	100690ba 	slli	r3,r2,2
 801a2b4:	008200b4 	movhi	r2,2050
 801a2b8:	10a8b204 	addi	r2,r2,-23864
 801a2bc:	1885883a 	add	r2,r3,r2
 801a2c0:	10800017 	ldw	r2,0(r2)
 801a2c4:	1000683a 	jmp	r2
 801a2c8:	0801a308 	cmpgei	zero,at,1676
 801a2cc:	0801a308 	cmpgei	zero,at,1676
 801a2d0:	0801a318 	cmpnei	zero,at,1676
 801a2d4:	0801a318 	cmpnei	zero,at,1676
 801a2d8:	0801a318 	cmpnei	zero,at,1676
 801a2dc:	0801a308 	cmpgei	zero,at,1676
 801a2e0:	0801a310 	cmplti	zero,at,1676
 801a2e4:	0801a318 	cmpnei	zero,at,1676
 801a2e8:	0801a308 	cmpgei	zero,at,1676
 801a2ec:	0801a308 	cmpgei	zero,at,1676
 801a2f0:	0801a318 	cmpnei	zero,at,1676
 801a2f4:	0801a308 	cmpgei	zero,at,1676
 801a2f8:	0801a310 	cmplti	zero,at,1676
 801a2fc:	0801a318 	cmpnei	zero,at,1676
 801a300:	0801a318 	cmpnei	zero,at,1676
 801a304:	0801a308 	cmpgei	zero,at,1676
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801a308:	00800044 	movi	r2,1
 801a30c:	00000306 	br	801a31c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801a310:	0005883a 	mov	r2,zero
 801a314:	00000106 	br	801a31c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801a318:	0005883a 	mov	r2,zero
  }
}
 801a31c:	e037883a 	mov	sp,fp
 801a320:	df000017 	ldw	fp,0(sp)
 801a324:	dec00104 	addi	sp,sp,4
 801a328:	f800283a 	ret

0801a32c <atexit>:
 801a32c:	200b883a 	mov	r5,r4
 801a330:	000f883a 	mov	r7,zero
 801a334:	000d883a 	mov	r6,zero
 801a338:	0009883a 	mov	r4,zero
 801a33c:	801a55c1 	jmpi	801a55c <__register_exitproc>

0801a340 <exit>:
 801a340:	defffe04 	addi	sp,sp,-8
 801a344:	000b883a 	mov	r5,zero
 801a348:	dc000015 	stw	r16,0(sp)
 801a34c:	dfc00115 	stw	ra,4(sp)
 801a350:	2021883a 	mov	r16,r4
 801a354:	801a6740 	call	801a674 <__call_exitprocs>
 801a358:	008200b4 	movhi	r2,2050
 801a35c:	10b2dc04 	addi	r2,r2,-13456
 801a360:	11000017 	ldw	r4,0(r2)
 801a364:	20800f17 	ldw	r2,60(r4)
 801a368:	10000126 	beq	r2,zero,801a370 <exit+0x30>
 801a36c:	103ee83a 	callr	r2
 801a370:	8009883a 	mov	r4,r16
 801a374:	801a7f40 	call	801a7f4 <_exit>

0801a378 <memcmp>:
 801a378:	01c000c4 	movi	r7,3
 801a37c:	3980192e 	bgeu	r7,r6,801a3e4 <memcmp+0x6c>
 801a380:	2144b03a 	or	r2,r4,r5
 801a384:	11c4703a 	and	r2,r2,r7
 801a388:	10000f26 	beq	r2,zero,801a3c8 <memcmp+0x50>
 801a38c:	20800003 	ldbu	r2,0(r4)
 801a390:	28c00003 	ldbu	r3,0(r5)
 801a394:	10c0151e 	bne	r2,r3,801a3ec <memcmp+0x74>
 801a398:	31bfff84 	addi	r6,r6,-2
 801a39c:	01ffffc4 	movi	r7,-1
 801a3a0:	00000406 	br	801a3b4 <memcmp+0x3c>
 801a3a4:	20800003 	ldbu	r2,0(r4)
 801a3a8:	28c00003 	ldbu	r3,0(r5)
 801a3ac:	31bfffc4 	addi	r6,r6,-1
 801a3b0:	10c00e1e 	bne	r2,r3,801a3ec <memcmp+0x74>
 801a3b4:	21000044 	addi	r4,r4,1
 801a3b8:	29400044 	addi	r5,r5,1
 801a3bc:	31fff91e 	bne	r6,r7,801a3a4 <__alt_data_end+0xfc01a3a4>
 801a3c0:	0005883a 	mov	r2,zero
 801a3c4:	f800283a 	ret
 801a3c8:	20c00017 	ldw	r3,0(r4)
 801a3cc:	28800017 	ldw	r2,0(r5)
 801a3d0:	18bfee1e 	bne	r3,r2,801a38c <__alt_data_end+0xfc01a38c>
 801a3d4:	31bfff04 	addi	r6,r6,-4
 801a3d8:	21000104 	addi	r4,r4,4
 801a3dc:	29400104 	addi	r5,r5,4
 801a3e0:	39bff936 	bltu	r7,r6,801a3c8 <__alt_data_end+0xfc01a3c8>
 801a3e4:	303fe91e 	bne	r6,zero,801a38c <__alt_data_end+0xfc01a38c>
 801a3e8:	003ff506 	br	801a3c0 <__alt_data_end+0xfc01a3c0>
 801a3ec:	10c5c83a 	sub	r2,r2,r3
 801a3f0:	f800283a 	ret

0801a3f4 <_putc_r>:
 801a3f4:	defffc04 	addi	sp,sp,-16
 801a3f8:	dc000215 	stw	r16,8(sp)
 801a3fc:	dfc00315 	stw	ra,12(sp)
 801a400:	2021883a 	mov	r16,r4
 801a404:	20000226 	beq	r4,zero,801a410 <_putc_r+0x1c>
 801a408:	20800e17 	ldw	r2,56(r4)
 801a40c:	10001b26 	beq	r2,zero,801a47c <_putc_r+0x88>
 801a410:	30800217 	ldw	r2,8(r6)
 801a414:	10bfffc4 	addi	r2,r2,-1
 801a418:	30800215 	stw	r2,8(r6)
 801a41c:	10000a16 	blt	r2,zero,801a448 <_putc_r+0x54>
 801a420:	30800017 	ldw	r2,0(r6)
 801a424:	11400005 	stb	r5,0(r2)
 801a428:	30800017 	ldw	r2,0(r6)
 801a42c:	10c00044 	addi	r3,r2,1
 801a430:	30c00015 	stw	r3,0(r6)
 801a434:	10800003 	ldbu	r2,0(r2)
 801a438:	dfc00317 	ldw	ra,12(sp)
 801a43c:	dc000217 	ldw	r16,8(sp)
 801a440:	dec00404 	addi	sp,sp,16
 801a444:	f800283a 	ret
 801a448:	30c00617 	ldw	r3,24(r6)
 801a44c:	10c00616 	blt	r2,r3,801a468 <_putc_r+0x74>
 801a450:	30800017 	ldw	r2,0(r6)
 801a454:	00c00284 	movi	r3,10
 801a458:	11400005 	stb	r5,0(r2)
 801a45c:	30800017 	ldw	r2,0(r6)
 801a460:	11400003 	ldbu	r5,0(r2)
 801a464:	28fff11e 	bne	r5,r3,801a42c <__alt_data_end+0xfc01a42c>
 801a468:	8009883a 	mov	r4,r16
 801a46c:	dfc00317 	ldw	ra,12(sp)
 801a470:	dc000217 	ldw	r16,8(sp)
 801a474:	dec00404 	addi	sp,sp,16
 801a478:	8014d001 	jmpi	8014d00 <__swbuf_r>
 801a47c:	d9400015 	stw	r5,0(sp)
 801a480:	d9800115 	stw	r6,4(sp)
 801a484:	800fd4c0 	call	800fd4c <__sinit>
 801a488:	d9800117 	ldw	r6,4(sp)
 801a48c:	d9400017 	ldw	r5,0(sp)
 801a490:	003fdf06 	br	801a410 <__alt_data_end+0xfc01a410>

0801a494 <putc>:
 801a494:	008200b4 	movhi	r2,2050
 801a498:	defffc04 	addi	sp,sp,-16
 801a49c:	10b2dd04 	addi	r2,r2,-13452
 801a4a0:	dc000115 	stw	r16,4(sp)
 801a4a4:	14000017 	ldw	r16,0(r2)
 801a4a8:	dc400215 	stw	r17,8(sp)
 801a4ac:	dfc00315 	stw	ra,12(sp)
 801a4b0:	2023883a 	mov	r17,r4
 801a4b4:	80000226 	beq	r16,zero,801a4c0 <putc+0x2c>
 801a4b8:	80800e17 	ldw	r2,56(r16)
 801a4bc:	10001a26 	beq	r2,zero,801a528 <putc+0x94>
 801a4c0:	28800217 	ldw	r2,8(r5)
 801a4c4:	10bfffc4 	addi	r2,r2,-1
 801a4c8:	28800215 	stw	r2,8(r5)
 801a4cc:	10000b16 	blt	r2,zero,801a4fc <putc+0x68>
 801a4d0:	28800017 	ldw	r2,0(r5)
 801a4d4:	14400005 	stb	r17,0(r2)
 801a4d8:	28800017 	ldw	r2,0(r5)
 801a4dc:	10c00044 	addi	r3,r2,1
 801a4e0:	28c00015 	stw	r3,0(r5)
 801a4e4:	10800003 	ldbu	r2,0(r2)
 801a4e8:	dfc00317 	ldw	ra,12(sp)
 801a4ec:	dc400217 	ldw	r17,8(sp)
 801a4f0:	dc000117 	ldw	r16,4(sp)
 801a4f4:	dec00404 	addi	sp,sp,16
 801a4f8:	f800283a 	ret
 801a4fc:	28c00617 	ldw	r3,24(r5)
 801a500:	10c00e16 	blt	r2,r3,801a53c <putc+0xa8>
 801a504:	28800017 	ldw	r2,0(r5)
 801a508:	01000284 	movi	r4,10
 801a50c:	14400005 	stb	r17,0(r2)
 801a510:	28800017 	ldw	r2,0(r5)
 801a514:	10c00003 	ldbu	r3,0(r2)
 801a518:	193ff01e 	bne	r3,r4,801a4dc <__alt_data_end+0xfc01a4dc>
 801a51c:	280d883a 	mov	r6,r5
 801a520:	180b883a 	mov	r5,r3
 801a524:	00000706 	br	801a544 <putc+0xb0>
 801a528:	8009883a 	mov	r4,r16
 801a52c:	d9400015 	stw	r5,0(sp)
 801a530:	800fd4c0 	call	800fd4c <__sinit>
 801a534:	d9400017 	ldw	r5,0(sp)
 801a538:	003fe106 	br	801a4c0 <__alt_data_end+0xfc01a4c0>
 801a53c:	280d883a 	mov	r6,r5
 801a540:	880b883a 	mov	r5,r17
 801a544:	8009883a 	mov	r4,r16
 801a548:	dfc00317 	ldw	ra,12(sp)
 801a54c:	dc400217 	ldw	r17,8(sp)
 801a550:	dc000117 	ldw	r16,4(sp)
 801a554:	dec00404 	addi	sp,sp,16
 801a558:	8014d001 	jmpi	8014d00 <__swbuf_r>

0801a55c <__register_exitproc>:
 801a55c:	defffa04 	addi	sp,sp,-24
 801a560:	dc000315 	stw	r16,12(sp)
 801a564:	040200b4 	movhi	r16,2050
 801a568:	8432dc04 	addi	r16,r16,-13456
 801a56c:	80c00017 	ldw	r3,0(r16)
 801a570:	dc400415 	stw	r17,16(sp)
 801a574:	dfc00515 	stw	ra,20(sp)
 801a578:	18805217 	ldw	r2,328(r3)
 801a57c:	2023883a 	mov	r17,r4
 801a580:	10003726 	beq	r2,zero,801a660 <__register_exitproc+0x104>
 801a584:	10c00117 	ldw	r3,4(r2)
 801a588:	010007c4 	movi	r4,31
 801a58c:	20c00e16 	blt	r4,r3,801a5c8 <__register_exitproc+0x6c>
 801a590:	1a000044 	addi	r8,r3,1
 801a594:	8800221e 	bne	r17,zero,801a620 <__register_exitproc+0xc4>
 801a598:	18c00084 	addi	r3,r3,2
 801a59c:	18c7883a 	add	r3,r3,r3
 801a5a0:	18c7883a 	add	r3,r3,r3
 801a5a4:	12000115 	stw	r8,4(r2)
 801a5a8:	10c7883a 	add	r3,r2,r3
 801a5ac:	19400015 	stw	r5,0(r3)
 801a5b0:	0005883a 	mov	r2,zero
 801a5b4:	dfc00517 	ldw	ra,20(sp)
 801a5b8:	dc400417 	ldw	r17,16(sp)
 801a5bc:	dc000317 	ldw	r16,12(sp)
 801a5c0:	dec00604 	addi	sp,sp,24
 801a5c4:	f800283a 	ret
 801a5c8:	00800034 	movhi	r2,0
 801a5cc:	10800004 	addi	r2,r2,0
 801a5d0:	10002626 	beq	r2,zero,801a66c <__register_exitproc+0x110>
 801a5d4:	01006404 	movi	r4,400
 801a5d8:	d9400015 	stw	r5,0(sp)
 801a5dc:	d9800115 	stw	r6,4(sp)
 801a5e0:	d9c00215 	stw	r7,8(sp)
 801a5e4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 801a5e8:	d9400017 	ldw	r5,0(sp)
 801a5ec:	d9800117 	ldw	r6,4(sp)
 801a5f0:	d9c00217 	ldw	r7,8(sp)
 801a5f4:	10001d26 	beq	r2,zero,801a66c <__register_exitproc+0x110>
 801a5f8:	81000017 	ldw	r4,0(r16)
 801a5fc:	10000115 	stw	zero,4(r2)
 801a600:	02000044 	movi	r8,1
 801a604:	22405217 	ldw	r9,328(r4)
 801a608:	0007883a 	mov	r3,zero
 801a60c:	12400015 	stw	r9,0(r2)
 801a610:	20805215 	stw	r2,328(r4)
 801a614:	10006215 	stw	zero,392(r2)
 801a618:	10006315 	stw	zero,396(r2)
 801a61c:	883fde26 	beq	r17,zero,801a598 <__alt_data_end+0xfc01a598>
 801a620:	18c9883a 	add	r4,r3,r3
 801a624:	2109883a 	add	r4,r4,r4
 801a628:	1109883a 	add	r4,r2,r4
 801a62c:	21802215 	stw	r6,136(r4)
 801a630:	01800044 	movi	r6,1
 801a634:	12406217 	ldw	r9,392(r2)
 801a638:	30cc983a 	sll	r6,r6,r3
 801a63c:	4992b03a 	or	r9,r9,r6
 801a640:	12406215 	stw	r9,392(r2)
 801a644:	21c04215 	stw	r7,264(r4)
 801a648:	01000084 	movi	r4,2
 801a64c:	893fd21e 	bne	r17,r4,801a598 <__alt_data_end+0xfc01a598>
 801a650:	11006317 	ldw	r4,396(r2)
 801a654:	218cb03a 	or	r6,r4,r6
 801a658:	11806315 	stw	r6,396(r2)
 801a65c:	003fce06 	br	801a598 <__alt_data_end+0xfc01a598>
 801a660:	18805304 	addi	r2,r3,332
 801a664:	18805215 	stw	r2,328(r3)
 801a668:	003fc606 	br	801a584 <__alt_data_end+0xfc01a584>
 801a66c:	00bfffc4 	movi	r2,-1
 801a670:	003fd006 	br	801a5b4 <__alt_data_end+0xfc01a5b4>

0801a674 <__call_exitprocs>:
 801a674:	defff504 	addi	sp,sp,-44
 801a678:	df000915 	stw	fp,36(sp)
 801a67c:	dd400615 	stw	r21,24(sp)
 801a680:	dc800315 	stw	r18,12(sp)
 801a684:	dfc00a15 	stw	ra,40(sp)
 801a688:	ddc00815 	stw	r23,32(sp)
 801a68c:	dd800715 	stw	r22,28(sp)
 801a690:	dd000515 	stw	r20,20(sp)
 801a694:	dcc00415 	stw	r19,16(sp)
 801a698:	dc400215 	stw	r17,8(sp)
 801a69c:	dc000115 	stw	r16,4(sp)
 801a6a0:	d9000015 	stw	r4,0(sp)
 801a6a4:	2839883a 	mov	fp,r5
 801a6a8:	04800044 	movi	r18,1
 801a6ac:	057fffc4 	movi	r21,-1
 801a6b0:	008200b4 	movhi	r2,2050
 801a6b4:	10b2dc04 	addi	r2,r2,-13456
 801a6b8:	12000017 	ldw	r8,0(r2)
 801a6bc:	45005217 	ldw	r20,328(r8)
 801a6c0:	44c05204 	addi	r19,r8,328
 801a6c4:	a0001c26 	beq	r20,zero,801a738 <__call_exitprocs+0xc4>
 801a6c8:	a0800117 	ldw	r2,4(r20)
 801a6cc:	15ffffc4 	addi	r23,r2,-1
 801a6d0:	b8000d16 	blt	r23,zero,801a708 <__call_exitprocs+0x94>
 801a6d4:	14000044 	addi	r16,r2,1
 801a6d8:	8421883a 	add	r16,r16,r16
 801a6dc:	8421883a 	add	r16,r16,r16
 801a6e0:	84402004 	addi	r17,r16,128
 801a6e4:	a463883a 	add	r17,r20,r17
 801a6e8:	a421883a 	add	r16,r20,r16
 801a6ec:	e0001e26 	beq	fp,zero,801a768 <__call_exitprocs+0xf4>
 801a6f0:	80804017 	ldw	r2,256(r16)
 801a6f4:	e0801c26 	beq	fp,r2,801a768 <__call_exitprocs+0xf4>
 801a6f8:	bdffffc4 	addi	r23,r23,-1
 801a6fc:	843fff04 	addi	r16,r16,-4
 801a700:	8c7fff04 	addi	r17,r17,-4
 801a704:	bd7ff91e 	bne	r23,r21,801a6ec <__alt_data_end+0xfc01a6ec>
 801a708:	00800034 	movhi	r2,0
 801a70c:	10800004 	addi	r2,r2,0
 801a710:	10000926 	beq	r2,zero,801a738 <__call_exitprocs+0xc4>
 801a714:	a0800117 	ldw	r2,4(r20)
 801a718:	1000301e 	bne	r2,zero,801a7dc <__call_exitprocs+0x168>
 801a71c:	a0800017 	ldw	r2,0(r20)
 801a720:	10003226 	beq	r2,zero,801a7ec <__call_exitprocs+0x178>
 801a724:	a009883a 	mov	r4,r20
 801a728:	98800015 	stw	r2,0(r19)
 801a72c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 801a730:	9d000017 	ldw	r20,0(r19)
 801a734:	a03fe41e 	bne	r20,zero,801a6c8 <__alt_data_end+0xfc01a6c8>
 801a738:	dfc00a17 	ldw	ra,40(sp)
 801a73c:	df000917 	ldw	fp,36(sp)
 801a740:	ddc00817 	ldw	r23,32(sp)
 801a744:	dd800717 	ldw	r22,28(sp)
 801a748:	dd400617 	ldw	r21,24(sp)
 801a74c:	dd000517 	ldw	r20,20(sp)
 801a750:	dcc00417 	ldw	r19,16(sp)
 801a754:	dc800317 	ldw	r18,12(sp)
 801a758:	dc400217 	ldw	r17,8(sp)
 801a75c:	dc000117 	ldw	r16,4(sp)
 801a760:	dec00b04 	addi	sp,sp,44
 801a764:	f800283a 	ret
 801a768:	a0800117 	ldw	r2,4(r20)
 801a76c:	80c00017 	ldw	r3,0(r16)
 801a770:	10bfffc4 	addi	r2,r2,-1
 801a774:	15c01426 	beq	r2,r23,801a7c8 <__call_exitprocs+0x154>
 801a778:	80000015 	stw	zero,0(r16)
 801a77c:	183fde26 	beq	r3,zero,801a6f8 <__alt_data_end+0xfc01a6f8>
 801a780:	95c8983a 	sll	r4,r18,r23
 801a784:	a0806217 	ldw	r2,392(r20)
 801a788:	a5800117 	ldw	r22,4(r20)
 801a78c:	2084703a 	and	r2,r4,r2
 801a790:	10000b26 	beq	r2,zero,801a7c0 <__call_exitprocs+0x14c>
 801a794:	a0806317 	ldw	r2,396(r20)
 801a798:	2088703a 	and	r4,r4,r2
 801a79c:	20000c1e 	bne	r4,zero,801a7d0 <__call_exitprocs+0x15c>
 801a7a0:	89400017 	ldw	r5,0(r17)
 801a7a4:	d9000017 	ldw	r4,0(sp)
 801a7a8:	183ee83a 	callr	r3
 801a7ac:	a0800117 	ldw	r2,4(r20)
 801a7b0:	15bfbf1e 	bne	r2,r22,801a6b0 <__alt_data_end+0xfc01a6b0>
 801a7b4:	98800017 	ldw	r2,0(r19)
 801a7b8:	153fcf26 	beq	r2,r20,801a6f8 <__alt_data_end+0xfc01a6f8>
 801a7bc:	003fbc06 	br	801a6b0 <__alt_data_end+0xfc01a6b0>
 801a7c0:	183ee83a 	callr	r3
 801a7c4:	003ff906 	br	801a7ac <__alt_data_end+0xfc01a7ac>
 801a7c8:	a5c00115 	stw	r23,4(r20)
 801a7cc:	003feb06 	br	801a77c <__alt_data_end+0xfc01a77c>
 801a7d0:	89000017 	ldw	r4,0(r17)
 801a7d4:	183ee83a 	callr	r3
 801a7d8:	003ff406 	br	801a7ac <__alt_data_end+0xfc01a7ac>
 801a7dc:	a0800017 	ldw	r2,0(r20)
 801a7e0:	a027883a 	mov	r19,r20
 801a7e4:	1029883a 	mov	r20,r2
 801a7e8:	003fb606 	br	801a6c4 <__alt_data_end+0xfc01a6c4>
 801a7ec:	0005883a 	mov	r2,zero
 801a7f0:	003ffb06 	br	801a7e0 <__alt_data_end+0xfc01a7e0>

0801a7f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801a7f4:	defffd04 	addi	sp,sp,-12
 801a7f8:	df000215 	stw	fp,8(sp)
 801a7fc:	df000204 	addi	fp,sp,8
 801a800:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801a804:	0001883a 	nop
 801a808:	e0bfff17 	ldw	r2,-4(fp)
 801a80c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801a810:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801a814:	10000226 	beq	r2,zero,801a820 <_exit+0x2c>
    ALT_SIM_FAIL();
 801a818:	002af070 	cmpltui	zero,zero,43969
 801a81c:	00000106 	br	801a824 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801a820:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801a824:	003fff06 	br	801a824 <__alt_data_end+0xfc01a824>
